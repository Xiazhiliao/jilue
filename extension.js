// game.import(name: "极略"
import { Player } from '../../noname/library/element/index.js';
import { game } from '../../noname.js';
game.import("extension", function (lib, game, ui, get, ai, _status) {
  /** @type {Player} */
  let player;
  return {
    name: "极略",
    connect: true,
    editable: false,
    content: function (config, pack) {
      console.time(_status.extension);
      if (pack.changelog) {
        var testCode = `\
let a = 1;
const b = 1;
(() => a + b)();`;
        try {
          eval(testCode);
        } catch (error) {
          if (!lib.config["extension_极略_compatibilityAlert"]) {
            game.saveConfig("extension_极略_compatibilityAlert", true);
            alert("极略与你的设备或是无名杀版本不兼容", "极略");
          }
          pack.changelog = `<span style="font-weight:bold;">极略与你的设备不兼容，因此导入被终止了。</span><br>` + pack.changelog;
          return;
        }
        game.showExtensionChangeLog(pack.changelog);
      }
      if (config.debug) {
        lib.arenaReady.push(() => {
          lib.config.characters = window.__configCharactersBackup.slice();
        });
      }
      if (!_status.evaluatingExtension) {
        var callback = () => {
          if (!lib.config["extension_极略_wrongExtensionNameAlert"]) {
            game.saveConfig("extension_极略_wrongExtensionNameAlert", true);
            alert('万能导入/玄武版导入时需将拓展名设置为极略！你是不是设置错了？');
          }
        };
        if (lib.device) {
          window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {
            entry.getDirectory('extension/极略/', {}, function (dirEntry) { }, callback);
          });
        } else {
          fetch(lib.assetURL + "extension/极略/extension.js").catch(e => {
            setTimeout(callback, 500);
          });
        }
      } else {
        game.saveConfig("extension_极略_wrongExtensionNameAlert", false);
      }
      lib.config.all.cards.push('jlsg_qs');
      lib.config.all.characters.push('jlsg_sk', 'jlsg_skpf', 'jlsg_sr', 'jlsg_soul', 'jlsg_sy');
      // lib.skill._jlsg_die_audio = { // 死亡语音
      //   trigger: { player: 'dieBegin' },
      //   //direct:true,
      //   priority: 2,
      //   forced: true,
      //   unique: true,
      //   popup: false,
      //   filter: function (event, player) {
      //     return player.name.includes('jlsg');
      //   },
      //   content: function () {
      //     game.playAudio('..', 'extension', '极略', 'die', trigger.player.name);
      //     // trigger.audioed = true;
      //   },
      // };
      var characterReplaceExclude = {
        jlsgsk_luzhi: 'yl_luzhi',
        jlsgsk_huangyueying: 'jsp_huangyueying',
        jlsgsk_simashi: 'jin_simashi',
        jlsgsk_simazhao: 'jin_simazhao',
        jlsgsk_jiangqin: 'jiangqing',
        jlsgsk_guanyu: 'jsp_guanyu',
        jlsgsk_jiping: 'sp_jiben',
        jlsgsk_mifuren: 'sp_mifuren',
        jlsgsk_hejin: 're_hejin',
        jlsgsk_zoushi: 're_zoushi',
        jlsgsk_kongrong: 'sp_kongrong',
        jlsgsk_machao: 'sp_machao',
        jlsgsk_caiwenji: 'sp_caiwenji',
        jlsgsk_jdjg_sunshangxiang: 'sunshangxiang',
        jlsgsk_syqj_guanyu: 'guanyu',
        jlsgsk_sslh_zhenji: 'zhenji',
        jlsgsk_pangtong: 'sp_pangtong',
        jlsgsk_spwq_lvbu: 'lvbu',
      };
      var trivialSolveCharacterReplace = function (name, prefix = '') {
        var originalName = prefix + name.substring(name.lastIndexOf('_') + 1);
        if (name in characterReplaceExclude) {
          if (characterReplaceExclude[name]) {
            originalName = characterReplaceExclude[name];
          } else {
            return;
          }
        }
        if (originalName && lib.character[originalName]) {
          if (!lib.characterReplace[originalName]) {
            // console.log(originalName);
            lib.characterReplace[originalName] = [originalName, name];
          } else {
            lib.characterReplace[originalName].push(name);
          }
        }
      };
      var suppressDieAudio = function (name) {
        var cfile = lib.character[name];
        if (cfile) {
          if (cfile[4] === undefined) {
            cfile[4] = ['die_audio'];
          } else {
            cfile[4].add('die_audio');
          }
        }
      };
      for (var i of Object.keys(lib.characterPack['jlsg_sr'])) {
        trivialSolveCharacterReplace(i);
        suppressDieAudio(i);
      }
      for (var i of Object.keys(lib.characterPack['jlsg_sk'])) {
        trivialSolveCharacterReplace(i);
        suppressDieAudio(i);
      }
      for (var i of Object.keys(lib.characterPack['jlsg_soul'])) {
        trivialSolveCharacterReplace(i, 'shen_');
        suppressDieAudio(i);
      }
      for (var i of Object.keys(lib.characterPack['jlsg_sy'])) {
        suppressDieAudio(i);
        if (!lib.config.forbidai_user.includes(i))
          lib.config.forbidai.remove(i);
      }
      if (config.jlsg_identity_music_image && get.mode() != 'boss') {
        lib.arenaReady.push(function () {
          ui.backgroundMusic.volume = lib.config.volumn_background / 8;
          setTimeout(function () {
            ui.backgroundMusic.src = lib.assetURL + "extension/极略/jlsg_identity_music_image.mp3";
          }, 100);
          setInterval(function () {
            ui.backgroundMusic.src = lib.assetURL + "extension/极略/jlsg_identity_music_image.mp3";
          }, 137000);
        });
        lib.arenaReady.push(function () {
          ui.background.setBackgroundImage("extension/极略/jlsg_identity_music_image.jpg");
        });
      }
      if (config.jlsg_boss_music_image && get.mode() == 'boss') {
        lib.arenaReady.push(function () {
          ui.backgroundMusic.volume = lib.config.volumn_background / 8;
          setTimeout(function () {
            ui.backgroundMusic.src = lib.assetURL + "extension/极略/jlsg_boss_music_image.mp3";
          }, 100);
          setInterval(function () {
            ui.backgroundMusic.src = lib.assetURL + "extension/极略/jlsg_boss_music_image.mp3";
          }, 168000);
        });
        lib.arenaReady.push(function () {
          ui.background.setBackgroundImage("extension/极略/jlsg_boss_music_image.jpg");
        });
      }
      // prepare rank & rarity data
      // if (false) {
      if (lib.rank) { // 评级
        var retrieveFromTierMaker = function () {
          var result = $(".tier.sort").map(function () {
            var res = $(this).children().map(function () { return $(this).css("background-image").match(/jlsg\w+(?=jpg)/); });
            return res;
          });
          result = result.toArray().map(ss => ss.toArray());
          var ranks = ['s', 'ap', 'a', 'am', 'bp', 'b', 'bm', 'c', 'd'];
          var A = {};
          for (var i = 0; i != result.length; ++i) {
            A[ranks[i]] = result[i];
          }
          return JSON.stringify(A);
        };
        var rank = {
          s: [
            'jlsgsoul_diaochan',
            'jlsgsoul_guojia',
            'jlsgsoul_simahui',
            'jlsgsoul_simayi',
            'jlsgsoul_zhaoyun',
            'jlsgsoul_sunquan',
            'jlsgsr_huangyueying',
            'jlsgsoul_huangyueying',
            'jlsgsoul_sp_zhugeliang',
            'jlsgsk_caiwenji',
            'jlsgsoul_ganning',
            'jlsgsoul_sp_lvbu',
            'jlsgsoul_xiahoudun',
            'jlsgsk_xiahoushi',
            'jlsgsk_sundeng',
            'jlsgsk_wuxian',
            'jlsgsoul_xuzhu',
            'jlsgsoul_sp_ganning',
            'jlsgsk_hetaihou',
            'jlsgsoul_sp_diaochan',
            'jlsgsk_shamoke',
            'jlsgsk_zhaoyan',
            'jlsgsoul_sp_huangyueying',
            'jlsgsk_caoying',
            'jlsgsoul_caoren',
            'jlsgsoul_sp_simayi',
            'jlsgsk_nanhualaoxian',
            'jlsgsoul_caopi',
            'jlsgsk_wanniangongzhu',
          ],
          ap: [
            'jlsgsr_lvbu',
            'jlsgsoul_caocao',
            'jlsgsoul_dianwei',
            'jlsgsoul_jiaxu',
            'jlsgsoul_guanyu',
            'jlsgsoul_liubei',
            'jlsgsoul_zhugeliang',
            'jlsgsoul_lvmeng',
            'jlsgsoul_luxun',
            'jlsgsoul_sunshangxiang',
            'jlsgsoul_zhenji',
            'jlsgsoul_huanggai',
            'jlsgsr_zhenji',
            'jlsgsr_sunshangxiang',
            'jlsgsr_lvmeng',
            'jlsgsr_luxun',
            'jlsgsr_daqiao',
            'jlsgsk_dongzhuo',
            'jlsgsk_guonvwang',
            'jlsgsoul_zhangliao',
            'jlsgsk_xizhicai',
            'jlsgsk_xushi',
            'jlsgsk_caorui',
            'jlsgsk_sunxiu',
            'jlsgsk_zhangrang',
            'jlsgsk_xinxianying',
            'jlsgsoul_sp_zhangliao',
            'jlsgsk_liuyan',
            'jlsgsk_lvfan',
            'jlsgsoul_xiaoqiao',
            'jlsgsk_sslh_zhenji',
            'jlsgsk_zhongyao',
            'jlsgsk_huanghao',
            'jlsgsk_huaman',
            'jlsgsk_wangyuanji',
            'jlsgsk_zhangchangpu',
          ],
          a: [
            'jlsgsoul_zhouyu',
            'jlsgsoul_zuoci',
            'jlsgsr_simayi',
            'jlsgsr_guojia',
            'jlsgsr_diaochan',
            'jlsgsk_chengyu',
            'jlsgsk_yujin',
            'jlsgsk_simazhao',
            'jlsgsk_kuaiyue',
            'jlsgsk_zhangning',
            'jlsgsk_zhoutai',
            'jlsgsk_dongbai',
            'jlsgsk_liuchen',
            'jlsgsk_caoxiu',
            'jlsgsk_caojie',
            'jlsgsk_sunliang',
            'jlsgsk_yuji',
            'jlsgsk_sunru',
            'jlsgsoul_huangzhong',
            'jlsgsk_guohuanghou',
            'jlsgsk_chenqun',
            'jlsgsk_jiangwei',
            'jlsgsk_spwq_lvbu',
          ],
          am: [
            'jlsgsoul_zhangjiao',
            'jlsgsk_zuoci',
            'jlsgsoul_lvbu',
            'jlsgsr_zhugeliang',
            'jlsgsr_zhangliao',
            'jlsgsr_liubei',
            'jlsgsk_dongyun',
            'jlsgsk_sunqian',
            'jlsgsoul_huatuo',
            'jlsgsr_huatuo',
            'jlsgsk_kongrong',
            'jlsgsk_lukang',
            'jlsgsk_xianglang',
            'jlsgsk_guanlu',
            'jlsgsk_zhanglu',
            'jlsgsk_yangxiu',
            'jlsgsk_zoushi',
            'jlsgsk_guansuo',
            'jlsgsk_baosanniang',
            'jlsgsk_zhoufei',
            'jlsgsk_zhangliang',
            'jlsgsk_panshu',
            'jlsgsoul_sp_zhangjiao',
            'jlsgsk_jushou',
            'jlsgsk_yanyan',
            'jlsgsoul_daqiao',
            'jlsgsk_zhugezhan',
            'jlsgsk_gongsunyuan',
            'jlsgsk_jdjg_sunshangxiang',
            'jlsgsk_zhangyi',
            'jlsgsk_caochun',
            'jlsgsk_syqj_guanyu',
            'jlsgsk_beimihu',
            'jlsgsk_pangtong',
          ],
          bp: [
            'jlsgsr_zhouyu',
            'jlsgsr_sunquan',
            'jlsgsr_machao',
            'jlsgsr_ganning',
            'jlsgsr_caocao',
            'jlsgsr_zhaoyun',
            'jlsgsk_chendao',
            'jlsgsk_guanxing',
            'jlsgsk_huangyueying',
            'jlsgsk_zumao',
            'jlsgsk_zhugejin',
            'jlsgsk_maliang',
            'jlsgsk_sunluyu',
            'jlsgsk_mizhu',
            'jlsgsr_xiahoudun',
            'jlsgsk_zhangren',
            'jlsgsk_zhangbu',
            'jlsgsk_heqi',
            'jlsgsk_zhuzhi',
            'jlsgsk_wanglang',
            'jlsgsk_zhaoxiang',
            'jlsgsk_lingcao',
          ],
          b: [
            'jlsgsoul_zhangfei',
            'jlsgsr_zhangfei',
            'jlsgsr_guanyu',
            'jlsgsk_buzhi',
            'jlsgsk_caochong',
            'jlsgsk_dengzhi',
            'jlsgsk_dongxi',
            'jlsgsk_guanyu',
            'jlsgsk_feiyi',
            'jlsgsk_hejin',
            'jlsgsk_jiping',
            'jlsgsk_jiangqin',
            'jlsgsk_luji',
            'jlsgsk_miheng',
            'jlsgsk_zhuran',
            'jlsgsk_wangyi',
            'jlsgsk_luzhi',
            'jlsgsk_sunhao',
            'jlsgsk_zhoucang',
            'jlsgsk_zhangxiu',
            'jlsgsk_quancong',
            'jlsgsk_simashi',
            'jlsgsk_tianfeng',
            'jlsgsk_wenchou',
            'jlsgsk_xuyou',
            'jlsgsk_yanliang',
            'jlsgsk_wangping',
            'jlsgsk_zhangbao',
            'jlsgsr_xuzhu',
            'jlsgsk_zhugeguo',
            'jlsgsoul_machao',
            'jlsgsk_wuyi',
            'jlsgsk_wenyang',
            'jlsgsk_wutugu',
            'jlsgsk_mayunlu',
          ],
          bm: [
            'jlsgsr_huanggai',
            'jlsgsk_caoren',
            'jlsgsk_bianfuren',
            'jlsgsk_huaxiong',
            'jlsgsk_liyan',
            'jlsgsk_lvlingqi',
            'jlsgsk_sunce',
            'jlsgsk_yuji',
            'jlsgsk_dingfeng',
            'jlsgsk_zangba',
            'jlsgsk_mifuren',
            'jlsgsk_machao',
            'jlsgsk_panzhang',
            'jlsgsk_lvdai',
          ],
          c: [
            'jlsgsk_gongsunzan',
            'jlsgsk_panfeng',
            'jlsgsk_mateng',
          ],
          d: [],
          rarity: {
            legend: [ // 传说
              'jlsgsk_yuji',
              'jlsgsk_jdjg_sunshangxiang',
              'jlsgsk_syqj_guanyu',
              'jlsgsk_sslh_zhenji',
              'jlsgsk_spwq_lvbu',
              'jlsgsk_wanniangongzhu',
            ],
            epic: [ // 史诗
              "jlsgsk_zhangning",
              "jlsgsk_dongyun",
              "jlsgsk_tianfeng",
              "jlsgsk_jiangqin",
              "jlsgsk_zuoci",
              "jlsgsk_heqi",
              "jlsgsk_guanxing",
              "jlsgsk_sunqian",
              "jlsgsk_zhangbao",
              "jlsgsk_dongzhuo",
              "jlsgsk_zhanglu",
              "jlsgsk_quancong",
              "jlsgsk_chengyu",
              "jlsgsk_kuaiyue",
              "jlsgsk_luzhi",
              "jlsgsk_zoushi",
              "jlsgsk_wuyi",
              "jlsgsk_zhangliang",
              "jlsgsk_panshu",
              "jlsgsk_caorui",
              "jlsgsk_mifuren",
              "jlsgsk_caiwenji",
              'jlsgsk_guansuo',
              'jlsgsk_baosanniang',
              'jlsgsk_dongbai',
              'jlsgsk_sunxiu',
              'jlsgsk_zhangrang',
              'jlsgsk_xiahoushi',
              'jlsgsk_sundeng',
              'jlsgsk_xinxianying',
              'jlsgsk_wuxian',
              'jlsgsk_wanglang',
              'jlsgsk_zhugezhan',
              'jlsgsk_guohuanghou',
              'jlsgsk_zhaoxiang',
              'jlsgsk_lvfan',
              'jlsgsk_hetaihou',
              'jlsgsk_zhaoyan',
              'jlsgsk_beimihu',
              'jlsgsk_caoying',
              'jlsgsk_mayunlu',
              'jlsgsk_nanhualaoxian',
              'jlsgsk_jiangwei',
              'jlsgsk_huaman',
              'jlsgsk_pangtong',
              'jlsgsk_wangyuanji',
              'jlsgsk_zhangchangpu',
            ],
            rare: [ // 稀有
              "jlsgsk_simashi",
              "jlsgsk_xianglang",
              "jlsgsk_luji",
              "jlsgsk_bianfuren",
              "jlsgsk_mateng",
              "jlsgsk_feiyi",
              "jlsgsk_dongxi",
              "jlsgsk_yujin",
              "jlsgsk_panfeng",
              "jlsgsk_zhangbu",
              "jlsgsk_maliang",
              "jlsgsk_chendao",
              "jlsgsk_zhuran",
              "jlsgsk_lukang",
              "jlsgsk_zhoutai",
              "jlsgsk_kongrong",
              "jlsgsk_caochong",
              "jlsgsk_simazhao",
              "jlsgsk_yangxiu",
              "jlsgsk_sunhao",
              "jlsgsk_zhugejin",
              "jlsgsk_zhangxiu",
              "jlsgsk_sunluyu",
              "jlsgsk_yuji",
              "jlsgsk_guonvwang",
              "jlsgsk_zhangren",
              "jlsgsk_mizhu",
              "jlsgsk_zangba",
              "jlsgsk_hejin",
              "jlsgsk_wangyi",
              "jlsgsk_guanyu",
              "jlsgsk_yanliang",
              "jlsgsk_machao",
              "jlsgsk_xushi",
              "jlsgsk_zhoufei",
              "jlsgsk_liuchen",
              "jlsgsk_caoxiu",
              "jlsgsk_caojie",
              "jlsgsk_zhuzhi",
              "jlsgsk_jushou",
              "jlsgsk_sunliang",
              "jlsgsk_wenyang",
              "jlsgsk_yanyan",
              "jlsgsk_sunru",
              "jlsgsk_liuyan",
              "jlsgsk_gongsunyuan",
              "jlsgsk_chenqun",
              "jlsgsk_zhangyi",
              "jlsgsk_caochun",
              "jlsgsk_shamoke",
              "jlsgsk_lingcao",
              "jlsgsk_wutugu",
              "jlsgsk_zhongyao",
              "jlsgsk_huanghao",
              "jlsgsk_lvdai",
            ],
            junk: [ // 平凡
              'jlsgsk_xuyou',
              'jlsgsk_wangping',
              "jlsgsk_caoren",
              "jlsgsk_huaxiong",
              "jlsgsk_sunce",
              "jlsgsk_dengzhi",
              "jlsgsk_zumao",
              "jlsgsk_gongsunzan",
              "jlsgsk_buzhi",
              "jlsgsk_jiping",
              "jlsgsk_miheng",
              "jlsgsk_liyan",
              "jlsgsk_huangyueying",
              "jlsgsk_zhoucang",
              "jlsgsk_dingfeng",
              "jlsgsk_lvlingqi",
              "jlsgsk_guanlu",
              'jlsgsr_machao',
              'jlsgsk_panzhang',
            ],
          },
        };
        // soul characters reside in the highest rarity rank
        for (var name of Object.keys(lib.characterPack['jlsg_soul'])) {
          if (!Object.keys(rank.rarity).some(rarity => rank.rarity[rarity].includes(name))) {
            rank.rarity.legend.push(name);
          }
        }
        // sr characters drop a rank if srlose is enabled
        for (var name of Object.keys(lib.characterPack['jlsg_sr'])) {
          if (!Object.keys(rank.rarity).some(rarity => rank.rarity[rarity].includes(name))) {
            rank.rarity.rare.push(name);
          }
          if (config.srlose) {
            var ranks = Object.keys(rank);
            ranks.pop();
            for (var i = 0; i != ranks.length; ++i) {
              var theRank = ranks[i];
              var nameIdx = rank[theRank].indexOf(name);
              if (nameIdx != -1 && theRank != 'd') {
                rank[theRank].splice(nameIdx, 1);
                if (name == 'jlsgsr_lvbu') {
                  rank.b.push(name);
                } else {
                  rank[ranks[i + 1]].push(name);
                }
                break;
              }
            }
          } // config.srlose
        } // jlsg_sr
        var addRank = function (rank) {
          if (!lib.rank) return;
          for (var i in rank) {
            if (i == 'rarity') continue;
            lib.rank[i].addArray(rank[i]);
          }
          if (rank.rarity && lib.rank.rarity) {
            for (var i in rank.rarity) {
              if (lib.rank.rarity[i] === undefined) {
                lib.rank.rarity[i] = [];
              }
              lib.rank.rarity[i].addArray(rank.rarity[i]);
            }
          }
        };
        addRank(rank);
      } // lib.rank
      // 千幻聆音 (换肤)
      // temporarily disabled
      if (false && lib.qhlypkg) {
        lib.qhlypkg.push({
          isExt: true,//是否是扩展，一般填true
          filterCharacter: function (name) {
            return name.startsWith('jlsg');//判断此ID的武将是否属于此皮肤包
          },
          // isLutou: lib.config.xwLutou,//判断是否当前启用露头，没有露头皮肤可不需要此项。
          // lutouPrefix:'extension/极略/lutou/',//露头原皮皮肤前缀，标识露头原皮皮肤的位置。
          prefix: 'extension/极略/', //原皮前缀，标识原皮肤的位置。
          skin: {
            standard: 'extension/极略/skin/standard/',//可切换普通皮肤的前缀
            // lutou:'extension/极略/skin/lutou/',//可切换露头皮肤的前缀
          },
          audioOrigin: 'extension/极略/',//原技能配音位置
          // audio:'extension/极略/skin/audio/',//切换皮肤后的技能配音位置
          skininfo: {
            wushaungluanji: {
              title: '稀有',
              translation: '无双乱戟',
              info: '',
            },
            juemingyoulan: {
              title: '限定',
              translation: '绝命幽兰',
              info: '据说在某个神秘游戏里可以提升一点武将的体力上限。',
            },
            nagenanren: {
              title: '传说',
              translation: '那个男人',
              info: '',
            },
            huoshaowuchao: {
              title: '稀有',
              translation: '火烧乌巢',
              info: '',
            },
            zhengtaifenbu: {
              title: '史诗',
              translation: '正态分布',
              info: '据说在某个神秘游戏里可以使开局手牌数+2。',
            },
          }
        });
      }
      if (config.oldCharacterReplace) {
        lib.jlsgsoul_zhangliao[3] = ['jlsg_old_nizhan', 'jlsg_old_cuifeng', 'jlsg_old_weizhen'];
        lib.jlsgsoul_ganning[3] = ['jlsg_old_lvezhen', 'jlsg_old_youlong'];
        lib.jlsgsoul_xiahoudun[3] = ['jlsg_old_danjing', 'jlsg_old_zhonghun'];
        lib.jlsgsoul_huangyueying[3] = ['jlsg_old_zhiming', 'jlsg_old_suyin'];
        lib.jlsgsoul_lvmeng[3] = ['jlsg_old_shelie', 'jlsg_old_gongxin'];
      }
      console.timeEnd(_status.extension);
    },
    precontent: function (config) {
      if (!config.enable) { return; }
      console.time(_status.extension + 'pre');
      if (config.debug) {
        window.__configCharactersBackup = lib.config.characters;
        lib.config.characters = ["jlsg_sk", "jlsg_sr", "jlsg_soul", "jlsg_sy"];
      }
      let trigger;
      lib.namePrefix.set('极略SK神', {
        getSpan(prefix, name) {
          return `${get.prefixSpan('极略SK', name)}${get.prefixSpan('神', name)}`;
        }
      });
      lib.namePrefix.set('极略SP神', {
        getSpan(prefix, name) {
          return `${get.prefixSpan('极略SP', name)}${get.prefixSpan('神', name)}`;
        }
      });
      lib.namePrefix.set('极略SR', {
        getSpan: () => {
          return `<span style="writing-mode:horizontal-tb;-webkit-writing-mode:horizontal-tb;font-family:MotoyaLMaru;transform:scaleY(0.85)" data-nature="keymm">SR</span>`;
        }
      });
      lib.namePrefix.set('极略SK', {
        getSpan: () => {
          return `<span style="color:#fbefef;writing-mode:horizontal-tb;-webkit-writing-mode:horizontal-tb;font-family:MotoyaLMaru;transform:scaleY(0.85)" data-nature="firemm">SK</span>`;
        }
      });
      lib.namePrefix.set('极略SP', {
        getSpan: () => {
          return `<span style="writing-mode:horizontal-tb;-webkit-writing-mode:horizontal-tb;font-family:MotoyaLMaru;transform:scaleY(0.85)">SP</span>`;
        }
      });
      let postProcessPack = (pack) => {
        for (var i in pack.character) {
          pack.character[i][4].push(`die:ext:极略/die/${i}.mp3`);
          if (i in pack.translate && !i.startsWith('jlsgsy')) {
            let name = pack.translate[i];
            if (!((i + '_ab') in pack.translate)) {
              pack.translate[i + '_ab'] = '极略' + name;
            }
            if (name.startsWith('SK神')) {
              pack.translate[i + '_prefix'] = '极略SK神';
            }
            else if (name.startsWith('SP神')) {
              pack.translate[i + '_prefix'] = '极略SP神';
            }
            else if (name.startsWith('SK')) {
              pack.translate[i + '_prefix'] = '极略SK';
            }
            else if (name.startsWith('SR')) {
              pack.translate[i + '_prefix'] = '极略SR';
            }
            else if (name.startsWith('SP')) {
              // reuse the internal SP prefix
              pack.translate[i + '_prefix'] = '极略SP';
            }
            // else {
            //   console.warn(i, name, "not prefixed!");
            // }
          }
        }
        if (lib.device || lib.node) {
          for (var i in pack.character) {
            pack.character[i][4].push('ext:极略/' + i + '.jpg');
          }
        } else {
          for (var i in pack.character) {
            pack.character[i][4].push('db:extension-极略:' + i + '.jpg');
          }
        }
      };
      game.import('character', function () { // SK
        var jlsg_sk = {
          name: 'jlsg_sk',
          connect: true,
          characterSort: {
            jlsg_sk: {
              jlsg_tiangang: ['jlsgsk_xuyou', 'jlsgsk_dengzhi', 'jlsgsk_dongyun', 'jlsgsk_kuaiyue', 'jlsgsk_yuji',
                'jlsgsk_panshu', 'jlsgsk_zhangrang', 'jlsgsk_xinxianying', 'jlsgsk_wuxian', 'jlsgsk_jushou',
                'jlsgsk_wenyang', 'jlsgsk_zhugezhan', 'jlsgsk_sunru', 'jlsgsk_liuyan', 'jlsgsk_guohuanghou',
                'jlsgsk_zhaoxiang', 'jlsgsk_lvfan', 'jlsgsk_hetaihou', 'jlsgsk_zhangyi', 'jlsgsk_caochun',
                'jlsgsk_shamoke', 'jlsgsk_lingcao', 'jlsgsk_zhaoyan', 'jlsgsk_beimihu', 'jlsgsk_wutugu',
                'jlsgsk_caoying'],
              jlsg_disha: ['jlsgsk_sunce', 'jlsgsk_caoren', 'jlsgsk_gongsunzan', 'jlsgsk_huaxiong', 'jlsgsk_zumao',
                'jlsgsk_miheng', 'jlsgsk_zhangbu', 'jlsgsk_guonvwang', 'jlsgsk_quancong', 'jlsgsk_mateng',
                'jlsgsk_zhoufei', 'jlsgsk_liuchen', 'jlsgsk_xiahoushi', 'jlsgsk_yanyan', 'jlsgsk_panzhang',
                'jlsgsk_gongsunyuan', 'jlsgsk_chenqun'],
              jlsg_renjie: ['jlsgsk_wangping', 'jlsgsk_buzhi', 'jlsgsk_maliang', 'jlsgsk_sunqian', 'jlsgsk_dongxi',
                'jlsgsk_luzhi', 'jlsgsk_mifuren', 'jlsgsk_xizhicai', 'jlsgsk_zhangliang', 'jlsgsk_caorui',
                'jlsgsk_sunxiu', 'jlsgsk_sundeng', 'jlsgsk_zhuzhi', 'jlsgsk_wanglang', 'jlsgsk_sunliang',
                'jlsgsk_mayunlu', 'jlsgsk_zhongyao', 'jlsgsk_nanhualaoxian', 'jlsgsk_jiangwei', 'jlsgsk_huanghao',
                'jlsgsk_huaman', 'jlsgsk_pangtong', 'jlsgsk_lvdai', 'jlsgsk_wangyuanji', 'jlsgsk_zhangchangpu',
                "jlsgsk_guohuai", "jlsgsk_qinmi", "jlsgsk_zhouyi", "jlsgsk_xingdaorong", "jlsgsk_huangchengyan",
                "jlsgsk_lvkai", "jlsgsk_zhugedan"],
              jlsg_pojun: ['jlsgsk_zhuran', 'jlsgsk_yanliang', 'jlsgsk_chendao', 'jlsgsk_dingfeng', 'jlsgsk_dongzhuo',
                'jlsgsk_yujin', 'jlsgsk_panfeng', 'jlsgsk_jiangqin', 'jlsgsk_guanxing', 'jlsgsk_guansuo',
                'jlsgsk_baosanniang', 'jlsgsk_dongbai', 'jlsgsk_xushi', 'jlsgsk_caoxiu', 'jlsgsk_caojie'],
              jlsg_yinyang: ['jlsgsk_zuoci', 'jlsgsk_guanlu', 'jlsgsk_wangyi', 'jlsgsk_zhanglu', 'jlsgsk_kongrong',
                'jlsgsk_zhoucang', 'jlsgsk_zhoutai', 'jlsgsk_lvlingqi', 'jlsgsk_lukang', 'jlsgsk_luji',
                'jlsgsk_xianglang', 'jlsgsk_zoushi', 'jlsgsk_zhugeguo'],
              jlsg_tanlang: ['jlsgsk_zhangxiu', 'jlsgsk_zhugejin', 'jlsgsk_liyan', 'jlsgsk_jiping', 'jlsgsk_sunhao',
                'jlsgsk_yangxiu', 'jlsgsk_simazhao', 'jlsgsk_simashi', 'jlsgsk_zhangning', 'jlsgsk_feiyi',
                'jlsgsk_wuyi',],
              jlsg_jiangxing: ['jlsgsk_sunluyu', 'jlsgsk_chengyu', 'jlsgsk_mizhu', 'jlsgsk_zhangren', 'jlsgsk_zangba',
                'jlsgsk_hejin', 'jlsgsk_zhangbao', 'jlsgsk_bianfuren', 'jlsgsk_heqi', 'jlsgsk_tianfeng'],
              jlsg_sp: ['jlsgsk_guanyu', 'jlsgsk_huangyueying', 'jlsgsk_machao', 'jlsgsk_caiwenji', 'jlsgsk_wanniangongzhu'],
            },
          },
          character: {
            jlsgsk_simashi: ["male", 'wei', 4, ["jlsg_quanlue"], ["name:司马|师"]],
            jlsgsk_xianglang: ["male", 'shu', 3, ["jlsg_cangshu", "jlsg_kanwu"], []],
            jlsgsk_luji: ["male", 'wu', 3, ["jlsg_huaiju", "jlsg_huntian"], []],
            jlsgsk_bianfuren: ["female", 'wei', 3, ["jlsg_huage", "jlsg_muyi"], ['name:卞|null']],
            jlsgsk_heqi: ["male", 'wu', 4, ["jlsg_diezhang"], []],
            jlsgsk_mateng: ["male", 'qun', 4, ["mashu", "jlsg_xiongyi"], []],
            jlsgsk_tianfeng: ["male", 'qun', 3, ["jlsg_sijian", "jlsg_gangzhi"], []],
            jlsgsk_feiyi: ["male", 'shu', 3, ["jlsg_yanxi", "jlsg_zhige"], []],
            jlsgsk_jiangqin: ["male", 'wu', 4, ["jlsg_shangyi", "jlsg_wangsi"], []],
            jlsgsk_dongyun: ["male", 'shu', 3, ["jlsg_bibu", "jlsg_kuangzheng"], []],
            jlsgsk_dongxi: ["male", 'wu', 4, ["jlsg_duanlan"], []],
            jlsgsk_quancong: ["male", 'wu', 4, ["jlsg_yaoming"], []],
            jlsgsk_yujin: ["male", 'wei', 4, ["jlsg_zhengyi"], []],
            jlsgsk_panfeng: ["male", 'qun', 4, ["jlsg_kuangfu"], []],
            jlsgsk_dengzhi: ['male', 'shu', 3, ['jlsg_hemeng', 'jlsg_sujian'], []],
            jlsgsk_xuyou: ['male', 'wei', 3, ['jlsg_yexi', 'jlsg_kuangyan'], []],
            jlsgsk_zhangbu: ['male', 'wu', 3, ['jlsg_chaochen', 'jlsg_quanzheng'], []],
            jlsgsk_miheng: ['male', 'qun', 3, ['jlsg_shejian', 'jlsg_kuangao'], []],
            jlsgsk_zumao: ['male', 'wu', 4, ['jlsg_yinbing'], []],
            jlsgsk_huaxiong: ['male', 'qun', 5, ['jlsg_fenwei', 'jlsg_shiyong'], []],
            jlsgsk_sunce: ['male', 'wu', 4, ['jlsg_angyang', 'jlsg_weifeng', 'jlsg_xieli'], []],
            jlsgsk_caoren: ['male', 'wei', 4, ['jlsg_jushou'], []],
            jlsgsk_gongsunzan: ['male', 'qun', 4, ['jlsg_yicong', 'jlsg_muma'], ['name:公孙|瓒']],
            jlsgsk_sunqian: ['male', 'shu', 3, ['jlsg_suiji', 'jlsg_fengyi'], []],
            jlsgsk_maliang: ['male', 'shu', 3, ['jlsg_yalv', 'jlsg_xiemu'], []],
            jlsgsk_buzhi: ['male', 'wu', 3, ['jlsg_zhejie', 'jlsg_fengya'], []],
            jlsgsk_wangping: ['male', 'shu', 4, ['jlsg_yijian', 'jlsg_feijun'], []],
            jlsgsk_huangyueying: ['female', 'shu', 3, ['jlsg_muniu', 'jlsg_liuma'], []],
            jlsgsk_dongzhuo: ['male', 'qun', 6, ['jlsg_baozheng', 'jlsg_lingnu'], []],
            jlsgsk_chendao: ['male', 'shu', 4, ['jlsg_zhongyong'], []],
            jlsgsk_dingfeng: ['male', 'wu', 4, ['jlsg_bozhan', 'jlsg_qingxi'], []],

            jlsgsk_zhuran: ['male', 'wu', 4, ['jlsg_danshou', 'jlsg_yonglie'], []],
            jlsgsk_lukang: ['male', 'wu', 4, ['jlsg_hengshi', 'jlsg_zhijiao'], []],
            jlsgsk_lvlingqi: ['female', 'qun', 5, ['jlsg_jiwux', 'zhuangrong'], []],
            jlsgsk_zhoucang: ['male', 'shu', 4, ['jlsg_daoshi'], []],
            jlsgsk_kongrong: ['male', 'qun', 3, ['jlsg_lirang', 'jlsg_xianshi'], []],
            jlsgsk_caochong: ['male', 'wei', 3, ['jlsg_chengxiang', 'jlsg_renxin'], ['unseen']],
            jlsgsk_zhanglu: ['male', 'qun', 3, ['jlsg_midao', 'jlsg_yishe', 'jlsg_pudu'], []],
            jlsgsk_guanlu: ['male', 'wei', 3, ['jlsg_zongqing', 'jlsg_bugua'], []],
            jlsgsk_simazhao: ['male', 'wei', 3, ['jlsg_zhaoxin', 'jlsg_zhihe'], ['name:司马|昭']],
            jlsgsk_yangxiu: ['male', 'wei', 3, ['jlsg_caijie', 'jlsg_jilei'], []],
            jlsgsk_liyan: ['male', 'shu', 4, ['jlsg_yanliang'], []],
            jlsgsk_jiping: ['male', 'qun', 3, ['jlsg_duzhi', 'jlsg_lieyi'], []],
            jlsgsk_sunhao: ['male', 'wu', 4, ['jlsg_baoli'], []],
            jlsgsk_zhugejin: ['male', 'wu', 3, ['jlsg_huanbing', 'jlsg_hongyuan'], ['name:诸葛|瑾']],
            jlsgsk_zhangxiu: ['male', 'qun', 4, ['jlsg_huaqiang', 'jlsg_chaohuang'], []],
            jlsgsk_sunluyu: ['female', 'wu', 3, ['jlsg_huilian', 'jlsg_wenliang'], []],
            jlsgsk_luzhi: ['male', 'qun', 3, ['jlsg_jinglun', 'jlsg_ruzong'], []],
            jlsgsk_yuji: ['male', 'qun', 3, ['jlsg_guhuo', 'jlsg_fulu'], []],
            jlsgsk_mifuren: ['female', 'shu', 3, ['jlsg_guixiu', 'jlsg_cunsi'], ['name:糜|null']],
            jlsgsk_zhangning: ['female', 'qun', 3, ['jlsg_leiji', 'jlsg_shanxi'], []],
            jlsgsk_guonvwang: ['female', 'wei', 3, ['jlsg_gongshen', 'jlsg_jianyue'], []],
            jlsgsk_chengyu: ['male', 'wei', 3, ['jlsg_pengri', 'jlsg_danmou'], []],
            jlsgsk_zhangren: ['male', 'qun', 4, ['jlsg_fushe'], []],
            jlsgsk_mizhu: ['male', 'shu', 3, ['jlsg_ziguo', 'jlsg_shangdao'], []],
            jlsgsk_zangba: ['male', 'wei', 4, ['jlsg_hengjiang'], []],
            jlsgsk_hejin: ['male', 'qun', 4, ['jlsg_zhuanshan'], []],
            jlsgsk_wangyi: ['female', 'wei', 3, ['jlsg_zhenlie', 'jlsg_miji'], []],
            jlsgsk_zuoci: ['male', 'qun', 3, ['jlsg_qianhuan'], []],

            jlsgsk_guanyu: ['male', 'wei', 4, ['jlsg_wusheng', 'jlsg_danqi'], []],
            jlsgsk_machao: ['male', 'qun', 4, ['jlsg_zhuiji', 'jlsg_xionglie'], []],
            jlsgsk_caiwenji: ['female', 'wei', 3, ['jlsg_chenqing', 'jlsg_mozhi'], ['name:蔡|琰']],
            jlsgsk_zhangbao: ['male', 'qun', 3, ['jlsg_zhoufu', 'jlsg_yingbing'], []],
            jlsgsk_guanxing: ['male', 'shu', 4, ['jlsg_yongji', 'jlsg_wuzhi'], []],
            jlsgsk_kuaiyue: ['male', 'qun', 3, ['jlsg_yidu', 'jlsg_zhubao'], []],
            jlsgsk_zhoutai: ['male', 'wu', 4, ['jlsg_buqu', 'jlsg_fenji'], []],
            jlsgsk_zoushi: ['female', 'qun', 3, ['jlsg_jiaomei', 'jlsg_huoshui'], ['name:邹|null']],
            jlsgsk_yanliang: ['male', 'qun', 4, ['jlsg_hubu'], []],
            jlsgsk_zhugeguo: ['female', 'shu', 3, ['jlsg_yuhua', 'jlsg_dengxian'], ['name:诸葛|果']],
            jlsgsk_xizhicai: ['male', 'wei', 3, ['jlsg_tiance', 'jlsg_jiexin'], []],
            jlsgsk_guansuo: ['male', 'shu', 4, ['jlsg_zhengnan', 'jlsg_tongxin'], []],
            jlsgsk_baosanniang: ['female', 'shu', 3, ['jlsg_jianwu', 'jlsg_zhennan', 'jlsg_tongxin'], []],
            jlsgsk_dongbai: ['female', 'qun', 3, ['jlsg_shemi', 'jlsg_jiaohui'], []],
            jlsgsk_xushi: ['female', 'wu', 3, ['jlsg_wengua', 'jlsg_fuzhu'], ['name:徐|null']],
            jlsgsk_zhoufei: ['female', 'wu', 3, ['jlsg_yinyuan', 'jlsg_konghou'], ['name:周|null']],
            jlsgsk_wuyi: ['male', 'shu', 4, ['jlsg_zhidi'], []],
            jlsgsk_zhangliang: ['male', 'qun', 4, ['jlsg_jijun', 'jlsg_fangtong'], []],
            jlsgsk_panshu: ['female', 'wu', 3, ['jlsg_jinzhi', 'jlsg_yuyou'], []],
            jlsgsk_caorui: ['male', 'wei', 3, ['jlsg_huituo', 'jlsg_xingshuai'], []],
            jlsgsk_liuchen: ['male', 'shu', 4, ['jlsg_zhanjue'], []],
            jlsgsk_sunxiu: ['male', 'wu', 3, ['jlsg_yanzhu', 'jlsg_xingxue'], []],
            jlsgsk_zhangrang: ['male', 'qun', 3, ['jlsg_taoluan'], []],
            jlsgsk_xiahoushi: ['female', 'shu', 3, ['jlsg_shiqiao', 'jlsg_yingge'], ['name:夏侯|null']],
            jlsgsk_sundeng: ['male', 'wu', 3, ['jlsg_kuangbi'], []],
            jlsgsk_caoxiu: ['male', 'wei', 4, ['jlsg_taoxi'], []],
            jlsgsk_caojie: ['female', 'qun', 3, ['jlsg_huaibi', 'jlsg_zhixi'], []],
            jlsgsk_xinxianying: ['female', 'wei', 3, ['jlsg_caijian', 'jlsg_zhishix'], []],
            jlsgsk_zhuzhi: ['male', 'wu', 4, ['jlsg_anguo'], []],
            jlsgsk_wanglang: ['male', 'wei', 3, ['jlsg_quanxiang', 'jlsg_gushe', 'jlsg_jici'], []],
            jlsgsk_wuxian: ['female', 'shu', 3, ['jlsg_hechun', 'jlsg_daiyan'], []],
            jlsgsk_jushou: ['male', 'qun', 3, ['jlsg_jianying', 'jlsg_shibei'], []],
            jlsgsk_sunliang: ['male', 'wu', 3, ['jlsg_kuizhu', 'jlsg_chezheng'], []],
            jlsgsk_wenyang: ['male', 'wei', 7, ['jlsg_jueyong', 'jlsg_choujue'], []],
            jlsgsk_yanyan: ['male', 'shu', 4, ['jlsg_juzhan'], []],
            jlsgsk_zhugezhan: ['male', 'shu', 4, ['jlsg_zuilun', 'jlsg_fuzhi'], ['name:诸葛|瞻']],
            jlsgsk_panzhang: ['male', 'wu', 4, ['jlsg_jiejun'], []],
            jlsgsk_sunru: ['female', 'wu', 3, ['jlsg_xiecui', 'jlsg_youxu'], []],
            jlsgsk_liuyan: ['male', 'qun', 3, ['jlsg_zhulu', 'jlsg_limu'], []],
            jlsgsk_gongsunyuan: ['male', 'qun', 4, ['jlsg_huaiyi'], ['name:公孙|渊']],
            jlsgsk_guohuanghou: ['female', 'wei', 3, ['jlsg_jiaozhao', 'jlsg_danxin'], ['name:郭|null']],
            jlsgsk_zhaoxiang: ['female', 'shu', 4, ['jlsg_fanghun', 'jlsg_fuhan'], []],
            jlsgsk_chenqun: ['male', 'wei', 3, ['jlsg_pindi', 'jlsg_faen'], []],
            jlsgsk_lvfan: ['male', 'wu', 3, ['jlsg_diaodu', 'jlsg_diancai'], []],
            jlsgsk_hetaihou: ['female', 'qun', 3, ['jlsg_zhendu', 'jlsg_qiluan'], ['name:何|null']],
            jlsgsk_zhangyi: ['male', 'shu', 4, ['jlsg_wurong'], []],
            jlsgsk_caochun: ['male', 'wei', 4, ['jlsg_shanjia'], []],
            jlsgsk_shamoke: ['male', 'shu', 4, ['jlsg_jili'], []],
            jlsgsk_lingcao: ['male', 'wu', 4, ['jlsg_dujin'], []],
            jlsgsk_zhaoyan: ['female', 'wu', 3, ['jlsg_sanjue'], []],
            jlsgsk_beimihu: ['female', 'qun', 3, ['jlsg_canshi', 'jlsg_xianji'], ['name:卑弥|呼']],
            jlsgsk_wutugu: ['male', 'qun', 6, ['jlsg_hanyong'], []],
            jlsgsk_caoying: ['female', 'wei', 4, ['jlsg_lingruo', 'jlsg_fujian'], []],
            jlsgsk_mayunlu: ['female', 'shu', 4, ['mashu', 'jlsg_fengyin', 'jlsg_rongzhuang'], []],
            jlsgsk_zhongyao: ['male', 'wei', 3, ['jlsg_huomo', 'jlsg_dingguan'], []],
            jlsgsk_nanhualaoxian: ['male', 'qun', 3, ['jlsg_xianshou', 'jlsg_chengfeng'], ['name:庄|周']],
            jlsgsk_jiangwei: ['male', 'wei', 5, ['jlsg_kunfen', 'jlsg_caiyu'], []],
            jlsgsk_huanghao: ['male', 'shu', 3, ['jlsg_qinqing', 'jlsg_huisheng'], []],
            jlsgsk_huaman: ['female', 'shu', 3, ['jlsg_manyi', 'jlsg_souying'], []],
            jlsgsk_pangtong: ['male', 'wu', 3, ['jlsg_guolun', 'jlsg_songsang'], []],
            jlsgsk_lvdai: ['male', 'wu', 4, ['jlsg_qinguo'], []],
            jlsgsk_wanniangongzhu: ['female', 'qun', 3, ['jlsg_zhenge', 'jlsg_xinghan'], ['name:刘|null']],
            jlsgsk_wangyuanji: ['female', 'qun', 3, ['jlsg_qianchong', 'jlsg_shangjian'], []],
            jlsgsk_zhangchangpu: ['female', 'wei', 3, ['jlsg_yanjiao', 'jlsg_xingshen'], []],
            jlsgsk_qinmi: ["male", "shu", 3, ["jlsg_jianzheng", "jlsg_tianbian"], ["name:秦|宓"]],
            jlsgsk_xingdaorong: ["male", "qun", 5, ["jlsg_xuhe"], ["name:邢|道荣"]],
            jlsgsk_zhouyi: ["female", "wu", 4, ["jlsg_zhukou", "jlsg_duannian"], ["name:周|夷"]],
            jlsgsk_guohuai: ["male", "wei", 4, ["jlsg_jingce"], ["name:郭|淮"]],
            jlsgsk_huangchengyan: ["male", "qun", 3, ["jlsg_guanxu", "jlsg_yashi"], ["name:黄|承彦"]],
            jlsgsk_lvkai: ["male", "shu", 3, ["jlsg_tunan", "jlsg_bijing"], ["name:吕|凯"]],
            jlsgsk_zhugedan: ["male", "wei", 5, ["jlsg_gongao", "jlsg_juyi", "jlsg_weizhong"], ["name:诸葛|诞"]],
          },
          characterIntro: {
            jlsgsk_kuaiyue: "蒯越（？－214年），字异度，襄阳中庐（今湖北襄阳西南）人。东汉末期人物，演义中为蒯良之弟。原本是荆州牧刘表的部下，曾经在刘表初上任时帮助刘表铲除荆州一带的宗贼（以宗族、乡里关系组成的武装集团）。刘表病逝后与刘琮一同投降曹操，后来官至光禄勋。",
            jlsgsk_dongxi: "董袭（195年前－213或217年），字元世或玄岱，扬州会稽余姚（今浙江余姚）人，东汉末年群雄孙策麾下将领；是江东十二虎臣之一。历任别部司马、扬武都尉、威越校尉，最后官至偏将军。",
          },
          skill: {
            jlsg_zhengyi: {
              audio: "ext:极略:2",
              enable: ['chooseToUse', 'chooseToRespond'],
              hiddenCard: function (player, name) {
                if (get.type(name) != 'basic' || name == 'shan') return false;
                return _status.currentPhase == player ? player.countCards('h') - player.hp == 1 : player.hp - player.countCards('h') == 1;
              },
              filter: function (event, player) {
                if (_status.currentPhase == player && player.countCards('h') - player.hp != 1) return false;
                if (_status.currentPhase != player && player.hp - player.countCards('h') != 1) return false;
                for (var i of lib.inpile) {
                  if (get.type(i) != 'basic' || i == 'shan') continue;
                  if (event.filterCard({ name: i }, player, event)) return true;
                  if (i == 'sha' && lib.inpile_nature.some(nat => event.filterCard({ name: i, nature: nat }, player, event))) {
                    return true;
                  }
                }
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  var list = [];
                  for (var i of lib.inpile) {
                    if (get.type(i) != 'basic' || i == 'shan') continue;
                    list.push(['basic', '', i]);
                    if (i == 'sha') {
                      for (var j of lib.inpile_nature) list.push(['basic', '', i, j]);
                    }
                  }
                  return ui.create.dialog('整毅', [list, 'vcard']);
                },
                filter: function (button, player) {
                  var evt = _status.event.getParent();
                  return evt.filterCard({ name: button.link[2], nature: button.link[3] }, player, evt);
                },
                check: function (button) {
                  var player = _status.event.player;
                  var shaTarget = false;
                  for (var i = 0; i < game.players.length; i++) {
                    if (player.canUse('sha', game.players[i]) && ai.get.effect(game.players[i], { name: 'sha' }, player) > 0) {
                      shaTarget = true;
                    }
                  }
                  if (player.isDamaged()) return (button.link[2] == 'tao') ? 1 : -1;
                  if (shaTarget && player.num('h', 'sha') && !player.num('h', 'jiu')) return (button.link[2] == 'jiu') ? 1 : -1;
                  if (shaTarget && !player.num('h', 'sha')) return (button.link[2] == 'sha') ? 1 : -1;
                  return (button.link[2] == 'sha') ? 1 : -1;
                },
                backup: function (links, player) {
                  var A = {
                    audio: false,
                    popname: true,
                    // ignoreMod:true,
                    filterCard: function (card, player) {
                      return _status.currentPhase == player
                        ? true : false;
                    },
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                      suit: 'none',
                      number: null,
                      isCard: true,
                    },
                  };
                  if (player.countCards('h') > player.hp) {
                    A.precontent = function () {
                      player.logSkill('jlsg_zhengyi');
                      var card = event.result.cards[0];
                      event.card = card;
                      player.discard(card);
                      // player.$throw(card,1000);
                      event.result.card = {
                        name: event.result.card.name,
                        nature: event.result.card.nature,
                        // cards: [],
                      };
                      event.result.cards = [];
                    };
                  } else {
                    A.precontent = function () {
                      player.logSkill('jlsg_zhengyi');
                      player.draw('nodelay');
                    };
                    A.selectCard = -1;
                    A.filterCard = () => false;
                    // A.onuse = A.onrespond = function (result, player) { player.draw('nodelay');};
                  }
                  return A;
                },
                prompt: function (links, player) {
                  var str = '视为使用或打出' + get.translation({ name: links[0][2], nature: links[0][3] });
                  if (player.hp <= player.countCards('h')) str = '弃置一张手牌，' + str;
                  return str;
                }
              },
              ai: {
                order: 6,
                result: {
                  player: 1,
                },
                threaten: 1.3,
                respondSha: true,
                // respondShan: true,
                fireattack: true,
                skillTagFilter: function (player) {
                  return _status.currentPhase == player ? player.countCards('h') - player.hp == 1 : player.hp - player.countCards('h') == 1;
                },
              },
              group: ['jlsg_zhengyi_shan'],
              subSkill: {
                shan: {
                  audio: "jlsg_zhengyi", // audio: ["jieyue1", 2],
                  enable: ['chooseToUse', 'chooseToRespond'],
                  filter: function (event, player) {
                    return _status.currentPhase == player
                      ? player.countCards('h') - player.hp == 1
                      : player.hp - player.countCards('h') == 1;
                  },
                  filterCard: function (card, player) {
                    return _status.currentPhase == player
                      ? true : false;
                  },
                  selectCard: function () {
                    return _status.currentPhase == _status.event.player
                      ? 1 : -1;
                  },
                  // check: () => true,
                  // ignoreMod:true,
                  viewAs: {
                    name: 'shan',
                    suit: 'none',
                    number: null,
                  },
                  onrespond: function (result, player) {
                    if (_status.currentPhase == player) {
                      player.discard(result.cards);
                      result.card = {
                        name: result.card.name,
                      };
                      result.cards = [];
                    } else {
                      player.draw("nodelay");
                    }
                  },
                  onuse: function (result, player) {
                    if (_status.currentPhase == player) {
                      player.discard(result.cards);
                      result.card = {
                        name: result.card.name,
                      };
                      result.cards = [];
                    } else {
                      player.draw("nodelay");
                    }
                  },
                  ai: {
                    skillTagFilter: function (player) {
                      return _status.currentPhase == player
                        ? player.countCards('h') - player.hp == 1
                        : player.hp - player.countCards('h') == 1;
                    },
                    respondShan: true
                  }
                },
              }
            },
            jlsg_wusheng: {
              audio: 'ext:极略:true',
              inherit: 'wusheng',
            },
            jlsg_quanlue: {
              audio: "ext:极略:2",
              trigger: {
                player: "phaseUseBegin",
              },
              filter: function (event, player) {
                return player.countCards("h");
              },
              check: function (event, player) {
                return game.hasPlayer(function (cur) {
                  return get.attitude(player, cur) != 0;
                });

              },
              content: function () {
                "step 0"
                event.list = [];
                for (var i = 0; i < player.getCards('h').length; i++) {
                  var suit = get.suit(player.getCards('h')[i]);
                  if (event.list.includes(suit)) continue;
                  event.list.push(suit);
                }
                player.showHandcards();
                "step 1"
                player.chooseControl(event.list, function (event, player) {
                  var max = event.list.randomGet();
                  var max2 = player.countCards('h', { suit: max });
                  for (var i = 0; i < event.list.length; i++) {
                    var len = event.list[i];
                    var len2 = player.countCards('h', { suit: len });
                    if (len2 == max2) {
                      if (['spade', 'club'].includes(len)) max = len;
                    }
                    if (len2 > max2) max = len;
                    max2 = player.countCards('h', { suit: max });
                  }
                  return max;
                }).prompt = "权略：请选择1种花色";
                "step 2"
                player.popup('权略' + get.translation(result.control + '2') + get.translation(result.control));
                player.draw(player.countCards("h", { suit: result.control }));
                player.storage.jlsg_quanlue = result.control;
                player.addSkill("jlsg_quanlue_effect");
              },
              ai: {
                effect: {
                  player: function (card, player) {
                    if (!player.storage.jlsg_quanlue) return;
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    if (get.suit(card) == player.storage.jlsg_quanlue && get.type(card) != 'equip') {
                      if (get.type(card) == 'basic') return [0, 1];
                      if (card.name == 'wugu') return;
                      return [1, 0.5];
                    }
                  }
                }
              },
              subSkill: {
                effect: {
                  trigger: {
                    player: "phaseUseAfter",
                  },
                  forced: true,
                  content: function () {
                    "step 0"
                    player.showHandcards();
                    "step 1"
                    player.discard(player.getCards("h", function (card) {
                      return get.suit(card) == player.storage.jlsg_quanlue;
                    }));
                    "step 2"
                    player.removeSkill("jlsg_quanlue_effect");
                  },
                },
              },
            },
            jlsg_huaiju: {
              audio: "ext:极略:2",
              trigger: {
                player: [
                  "phaseJudgeEnd",
                  "phaseDrawEnd",
                  "phaseUseEnd",
                  "phaseDiscardEnd",
                  "phaseJieshuEnd",
                ],
              },
              filter: function (event, player) {
                return player.countCards('h') == 3;
              },
              content: function () {
                "step 0"
                player.chooseControl("摸牌", "弃牌", function (event, player) {
                  return "摸牌";
                }).prompt = "怀橘：你可以摸一张牌或弃置两张牌";
                "step 1"
                if (result.control == "摸牌") {
                  player.draw();
                } else {
                  player.chooseToDiscard('he', 2, true);
                }
              },
            },
            jlsg_huntian: {
              audio: "ext:极略:2",
              trigger: { player: "discardEnd" },
              filter: function (event, player) {
                for (var i = 0; i < event.cards.length; i++) {
                  if (get.position(event.cards[i]) == "d") return true;
                }
                return false;
              },
              content: function () {
                "step 0"
                event.list = [];
                for (var i = 0; i < trigger.cards.length; i++) {
                  if (get.position(trigger.cards[i]) == "d") {
                    event.list.push(trigger.cards[i]);
                  }
                }
                "step 1"
                player.chooseCardButton("将任意张牌置于牌堆顶(后选在上)", event.list, [1, Infinity], true).ai = function (button) {
                  if (ui.selected.buttons.length) {
                    return 0;
                  }
                  return 2 + Math.random();
                };
                "step 2"
                event.cards = result.links;
                player.lose(event.cards, ui.cardPile, 'insert');
                player.$throw(event.cards.length, 1000);
                game.log(player, "将", event.cards, "置于牌堆顶");
                "step 3"
                for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
                  var card = ui.cardPile.childNodes[i];
                  if (event.cards.every(c => get.type(card) != get.type(c))) {
                    player.gain(card, 'gain2');
                    break;
                  }
                }
              }
            },
            jlsg_cangshu: {
              audio: "ext:极略:2",
              trigger: { global: "useCard" },
              // usable: 1,
              direct: true,
              filter: function (event, player) {
                if (event.player == player || get.type(event.card) != "trick" || player.hasSkill('jlsg_cangshu2')) return false;
                return game.online ? player.countCards("h") : player.countCards("h", { type: "basic" });
              },
              content: function () {
                "step 0"
                player.chooseCard("是否对" + get.translation(trigger.player) + "发动藏书？<p>交给" + get.translation(trigger.player) + "一张基本牌，令" + get.translation(trigger.card) + "无效并获得之</p>", { type: "basic" }).ai = function (card) {
                  if (get.attitude(player, trigger.player) < 0)
                    return 10 - get.value(card);
                  return 0;
                }
                "step 1"
                if (result.bool) {
                  player.logSkill("jlsg_cangshu", trigger.player);
                  player.addTempSkill('jlsg_cangshu2');
                  trigger.player.gain(result.cards, player, 'giveAuto');
                } else {
                  event.finish();
                }
                "step 2"
                if (trigger.cards) {
                  player.gain(trigger.cards, 'gain2');
                }
                trigger.cancel();
              },
            },
            jlsg_cangshu2: {

            },
            jlsg_kanwu: {
              audio: "ext:极略:1",
              enable: ['chooseToUse', 'chooseToRespond'],
              hiddenCard: function (player, name) {
                if (get.type(name) != 'basic' || name == 'shan') return false;
                return _status.currentPhase != player && player.countCards('h') &&
                  (game.online ? player.countCards("h") : player.countCards("h", { type: ['delay', 'trick'] }));
              },
              filter: function (event, player) {
                if (_status.currentPhase == player || !player.countCards('h', { type: ['delay', 'trick'] })) return false;
                for (var i of lib.inpile) {
                  if (get.type(i) != 'basic' || i == 'shan') continue;
                  if (event.filterCard({ name: i }, player, event)) return true;
                  if (i == 'sha' && lib.inpile_nature.some(nat => event.filterCard({ name: i, nature: nat }, player, event))) {
                    return true;
                  }
                }
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  var list = [];
                  for (var i of lib.inpile) {
                    if (get.type(i) != 'basic' || i == 'shan') continue;
                    list.push(['basic', '', i]);
                    if (i == 'sha') {
                      for (var j of lib.inpile_nature) list.push(['basic', '', i, j]);
                    }
                  }
                  return ui.create.dialog('勘误', [list, 'vcard']);
                },
                filter: function (button, player) {
                  var evt = _status.event.getParent();
                  return evt.filterCard({ name: button.link[2], nature: button.link[3] }, player, evt);
                },
                check: function (button) {
                  var player = _status.event.player;
                  var shaTarget = false;
                  for (var i = 0; i < game.players.length; i++) {
                    if (player.canUse('sha', game.players[i]) && ai.get.effect(game.players[i], { name: 'sha' }, player) > 0) {
                      shaTarget = true;
                    }
                  }
                  if (player.isDamaged()) return (button.link[2] == 'tao') ? 1 : -1;
                  if (shaTarget && player.num('h', 'sha') && !player.num('h', 'jiu')) return (button.link[2] == 'jiu') ? 1 : -1;
                  if (shaTarget && !player.num('h', 'sha')) return (button.link[2] == 'sha') ? 1 : -1;
                  return (button.link[2] == 'sha') ? 1 : -1;
                },
                backup: function (links, player) {
                  return {
                    filterCard: function (card) {
                      return get.type(card, 'trick') == 'trick';
                    },
                    audio: false,
                    popname: true,
                    // ignoreMod:true,
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                      suit: 'none',
                      number: null,
                      isCard: true,
                    },
                    ai1: function (card) {
                      return 6 - get.value(card);
                    },
                    precontent: function () {
                      'step 0'
                      player.logSkill('jlsg_kanwu');
                      var card = event.result.cards[0];
                      event.card = card;
                      player.discard(card);
                      event.result.card = {
                        name: event.result.card.name,
                        nature: event.result.card.nature,
                        // cards: [],
                      };
                      event.result.cards = [];
                    },
                  };
                },
                // prompt: function (links, player) {
                //   return '弃置一张锦囊牌，视为使用或打出' + get.translation({ name: links[0][2], nature: links[0][3] });
                // }
              },
              ai: {
                order: 6,
                result: {
                  player: 1,
                },
                // threaten: 1.3,
                respondSha: true,
                fireattack: true,
                skillTagFilter: function (player) {
                  return _status.currentPhase != player && (game.online ?
                    player.countCards('h')
                    : player.countCards('h', c => get.type2(c) == 'trick'));
                },
              },
              group: ['jlsg_kanwu_shan'],
              subSkill: {
                shan: {
                  audio: "jlsg_kanwu", // audio: ["jieyue1", 2],
                  enable: ['chooseToUse', 'chooseToRespond'],
                  filter: function (event, player) {
                    return _status.currentPhase != player &&
                      (game.online ? player.countCards("h") : player.countCards("h", { type: ['delay', 'trick'] }));
                  },
                  filterCard: function (card, player) {
                    return get.type(card, 'trick') == 'trick';
                  },
                  // check: () => true,
                  viewAs: {
                    name: 'shan',
                    suit: 'none',
                    number: null,
                  },
                  onrespond: function (result, player) {
                    player.discard(result.cards);
                    result.card = {
                      name: result.card.name,
                    };
                    result.cards = [];
                  },
                  onuse: function (result, player) {
                    player.discard(result.cards);
                    result.card = {
                      name: result.card.name,
                    };
                    result.cards = [];
                  },
                  ai: {
                    skillTagFilter: function (player) {
                      return _status.currentPhase != player && (game.online ?
                        player.countCards('h')
                        : player.countCards('h', c => get.type2(c) == 'trick'));
                    },
                    respondShan: true
                  }
                },
              }
            },
            jlsg_huage: {
              audio: "ext:极略:2",
              enable: "phaseUse",
              usable: 1,
              selectTarget: -1,
              filterTarget: function (card, player, target) {
                return target.countCards('he') > 0;
              },
              ignoreTarget: function (card, player, target) {
                return !target.countCards('he');
              },
              content: function () {
                "step 0"
                if (target.countCards('he')) {
                  target.chooseToDiscard("化戈：请弃置至少一张牌，弃置的牌中每有【杀】，你便摸一张牌", 'he', [1, Infinity], true)
                    .set('ai', function (card) {
                      if (card.name == 'sha') return 6 - get.value(card);
                      return -get.useful(card);
                    })
                    .set("delay", false);

                } else {
                  event.finish();
                }
                "step 1"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let num = 0;
                for (var i = 0; i < result.cards.length; i++) {
                  if (result.cards[i].name == "sha") {
                    num++;
                  }
                }
                if (num) {
                  target.draw(num);
                } else {
                  game.delayx(0.5);
                }
              },
              ai: {
                order: 8,
                result: {
                  player: 1,
                },
              },
            },
            jlsg_muyi: {
              audio: "ext:极略:2",
              trigger: { global: "phaseBegin" },
              filter: function (event, player) {
                return event.player != player && event.player.countCards('he') && player.hasSkill('jlsg_muyi');
              },
              direct: true,
              content: function () {
                "step 0"
                trigger.player.chooseCard("是否发动【" + get.translation(player) + "】的技能【母仪】？<p>你可以交给【" + get.translation(player) + "】1至两张牌，回合结束时，其交还你等量的牌。</p>", 'he', [1, 2]).ai = function (card) {
                  if (get.position(card) == 'e' && get.attitude(player, target) > 0) return 7 - get.value(card);
                  if (get.attitude(_status.event.player, player) > 2) return 2 - get.useful(card);
                  return -1;
                };
                "step 1"
                if (result.bool) {
                  player.logSkill("jlsg_muyi");
                  player.gain(result.cards, trigger.player, 'giveAuto');
                  player.storage.jlsg_muyi = trigger.player;
                  player.storage.jlsg_muyi_effect = result.cards.length;
                  player.addSkill("jlsg_muyi_effect");
                }
              },
              subSkill: {
                effect: {
                  mark: true,
                  marktext: "仪",
                  intro: {
                    name: "母仪",
                    content: function (storage, player) {
                      return "当前回合结束时，你需交给" + get.translation(player.storage.jlsg_muyi) + get.cnNumber(storage) + "张牌";
                    },
                  },
                  trigger: { global: "phaseEnd" },
                  forced: true,
                  filter: function (event, player) {
                    return event.player == player.storage.jlsg_muyi;
                  },
                  logTarget: "player",
                  content: function () {
                    "step 0"
                    player.chooseCard("母仪：交给" + get.translation(player.storage.jlsg_muyi) + get.cnNumber(player.storage.jlsg_muyi_effect) + "张牌", 'he', player.storage.jlsg_muyi_effect, true).ai = function (card) {
                      return 10 - get.value(card);
                    };
                    "step 1"
                    if (result.bool) {
                      trigger.player.gain(result.cards, player, 'giveAuto');
                    } else {
                      event.finish();
                    }
                    delete player.storage.jlsg_muyi;
                    delete player.storage.jlsg_muyi_effect;
                    player.removeSkill("jlsg_muyi_effect");
                  },
                },
              },
            },
            jlsg_diezhang: {
              audio: "ext:极略:2",
              trigger: { player: 'useCard' },
              frequent: true,
              filter: function (event, player) {
                if (!player.isPhaseUsing()) {
                  return false;
                }
                var evt = player.getHistory('useCard', (evt) => evt != event);
                if (!evt.length) return false;
                evt = evt[evt.length - 1];
                return get.number(evt.card) < get.number(event.card);
              },
              content: function () {
                player.draw();
              },
              ai: {
                aiOrder: function (player, card, num) {
                  if (typeof card == 'object' && player.isPhaseUsing()) {
                    var evt = player.getLastUsed();
                    if (evt && evt.card && evt.card.number && evt.card.number === card.number) {
                      return num + 10;
                    }
                  }
                },
                // effect: {
                //   player: function (card, player, target) {
                //     if (!player.storage.jlsg_diezhang) return;
                //     var number = get.number(player.storage.jlsg_diezhang);
                //     if (number < get.number(card)) {
                //       return [1, 0.6];
                //     }
                //   },
                // }
              },
            },
            jlsg_xiongyi: {
              audio: "ext:极略:2",
              forced: true,
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.hp == 1 || player.countCards('h') == 0;
              },
              content: function () {
                if (player.hp == 1) {
                  player.recover();
                }
                if (player.countCards('h') == 0) {
                  player.draw(2);
                }
              }
            },
            jlsg_sijian: {
              audio: "ext:极略:1",
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              direct: true,
              filter: function (event, player) {
                if (player.countCards('h')) return false;
                var evt = event.getl(player);
                return evt && evt.hs && evt.hs.length;
              },
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt2(event.name), function (card, player, target) {
                  return player != target && target.countDiscardableCards(player, 'he') > 0;
                }).set('ai', function (target) {
                  return -get.attitude(_status.event.player, target);
                });
                "step 1"
                if (result.bool) {
                  player.logSkill(event.name, result.targets);
                  event.target = result.targets[0];
                  player.discardPlayerCard(player.hp, event.target, true);
                }
                else {
                  event.finish();
                }
              },
              ai: {
                expose: 0.2,
              }
            },
            jlsg_gangzhi: {
              audio: "ext:极略:2",
              logAudio(event, player) {
                if (player.countDiscardableCards(player, "h")) return ["ext:极略/jlsg_gangzhi1.mp3"];
                return ["ext:极略/jlsg_gangzhi2.mp3"];
              },
              trigger: { player: 'damageBegin4' },
              filter(event, player) {
                if (event.num < 1) return false;
                if (!player.countCards("h")) return true;
                if (player.countDiscardableCards(player, "h")) return true;
                return false;
              },
              check(event, player) {
                if (player.hp <= 1) return true;
                let eff = lib.skill.jlsg_gangzhi.ai.effect.target(event.card, event.source, player);
                if (!eff) {
                  if (!player.countCards("h")) {
                    if (!player.hasFriend() && (!player.isTurnedOver() || player.hp == 1)) eff = 1;
                    eff = player.isTurnedOver() ? [0, 4] : 0.5;
                  }
                  else {
                    if (!player.hasFriend()) eff = [1, 0];
                    else eff = [0.6, -0.4 * (player.countCards('h') - (player.hasSkill('jlsg_sijian') ? player.hp : 0))];
                  }
                }
                let num = player.getCards("h").reduce((n, c) => n + player.getUseValue(c), 0) / player.countCards("h");
                if (Array.isArray(eff)) return event.num + Math.abs(eff[1]) > num;
                return event.num > num;
              },
              prompt(event, player) {
                let str = "刚直：是否"
                if (!player.countCards("h")) str += '将武将牌翻面，然后将手牌数补至体力上限';
                else str += '弃置所有手牌，然后防止此伤害';
                return str;
              },
              async content(event, trigger, player) {
                if (!player.countCards("h")) {
                  await player.turnOver();
                  await player.drawTo(player.maxHp);
                }
                else {
                  await player.discard(player.getDiscardableCards(player, "h"));
                  await trigger.cancel();
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                maixie_defend: true,
                effect: {
                  target: function (card, player, target) {
                    if (player && player.hasSkillTag('jueqing', false, target)) return;
                    if (!get.tag(card, 'damage')) return;
                    if (target.countCards('h') != 0) {
                      if (!target.hasFriend()) return;
                      return [0.6, -0.4 * (target.countCards('h') - (target.hasSkill('jlsg_sijian') ? target.hp : 0))];
                    }
                    else {
                      if (!target.hasFriend() && (!target.isTurnedOver() || target.hp == 1)) return;
                      return target.isTurnedOver() ? [0, 4] : 0.5;
                    }
                  }
                },
              },
            },
            jlsg_yanxi: {
              audio: "ext:极略:2",
              trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
              frequent: true,
              filter: function (event, player) {
                return player.countCards('e') <= 0;
              },
              content: function () {
                player.draw();
              },
            },
            jlsg_zhige: {
              audio: "ext:极略:1",
              group: ["jlsg_zhige_3", "jlsg_zhige_4"],
            },
            jlsg_zhige_3: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return player.getCards("e").length > 0;
              },
              prompt: '弃置装备区的牌，视为打出一张【闪】',
              check: function (event, player) {
                if (player.hp == 1 && player.countCards('h', 'shan') == 0) {
                  return 1;
                }
                var num = 1;
                if (player.hasSkill('jlsg_yanxi')) num++;
                if (player.countCards('e', 'bagua')) num--;
                return player.countCards('e', function (cardx) {
                  return get.value(cardx) > 5;
                }) <= num;
              },
              onuse: function (result, player) {
                game.broadcastAll(function (player) {
                  var sex = player.sex;
                  if (lib.config.background_audio) {
                    game.playAudio('card', sex, 'shan');
                  }
                }, player);
                player.discard(player.getCards("e"));
              },
              onrespond: function (result, player) {
                game.broadcastAll(function (player) {
                  var sex = player.sex;
                  if (lib.config.background_audio) {
                    game.playAudio('card', sex, 'shan');
                  }
                }, player);
                player.discard(player.getCards("e"));
              },
              ai: {
                respondShan: true,
                skillTagFilter: function (player) {
                  if (player.countCards('e') <= 0) return false;
                },
              },
            },
            jlsg_zhige_4: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              viewAs: { name: 'sha' },
              viewAsFilter: function (player) {
                return player.getCards("e").length > 0;
              },
              prompt: '弃置装备区的牌，视为打出一张【杀】',
              check: function (event, player) {
                if (player.hp == 1 && player.countCards('h', 'sha') == 0) {
                  return 1;
                }
                var num = 0;
                if (player.hasSkill('jlsg_yanxi')) num++;
                if (player.countCards('e') >= 2) return -1;
                return player.countCards('e', function (cardx) {
                  return get.value(cardx) > 5;
                }) <= num;
              },
              onuse: function (result, player) {
                game.broadcastAll(function (player) {
                  var sex = player.sex;
                  if (lib.config.background_audio) {
                    game.playAudio('card', sex, 'sha');
                  }
                }, player);
                player.discard(player.getCards("e"));
              },
              onrespond: function (result, player) {
                game.broadcastAll(function (player) {
                  var sex = player.sex;
                  if (lib.config.background_audio) {
                    game.playAudio('card', sex, 'sha');
                  }
                }, player);
                player.discard(player.getCards("e"));
              },
              ai: {
                respondSha: true,
                skillTagFilter: function (player) {
                  if (player.countCards('e') <= 0) return false;
                },
              },
            },
            jlsg_wangsi: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              filter: function (event, player) {
                return event.source && event.source != player && event.source.countCards('h') != 0;
              },
              check: function (event, player) {
                return 1;
              },
              frequent: true,
              content: function () {
                player.discardPlayerCard(trigger.source, 'h', 'visible').set('filterButton', function (button, player) {
                  return get.color(button.link) == 'red';
                }) // .set('logSkill', [event.name, trigger.source]);
              },
              ai: {
                maixie_defend: true,
              }
            },
            jlsg_shangyi: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return player != target && target.countCards('h');
              },
              content: function () {
                'step 0'
                game.log(target, '观看了', player, '的手牌');
                target.viewHandcards(player);
                'step 1'
                if (get.mode() == 'identity') {
                  player.chooseControl(['观看其身份牌', '观看其手牌', 'cancel2'], 1).set('prompt', '选择一项');
                }
                'step 2'
                if (!result || !result.control || result.control === '观看其手牌') {
                  player.discardPlayerCard(target, 'h', 'visible').set('filterButton', function (button, player) {
                    return get.color(button.link) == 'black';
                  });
                }
                else if (result && result.control === '观看其身份牌' && target.identity) {
                  game.log(player, '观看了', target, '的身份');
                  var idt = target.identity;
                  var styleStr = {
                    zhu: `data-nature="fire"`,
                    zhong: `data-nature="metal"`,
                    fan: `data-nature="wood"`,
                    nei: 'data-nature="thunder"',
                  }[idt];
                  var tr = {
                    zhu: '主公',
                    zhong: '忠臣',
                    fan: '反贼',
                    nei: '内奸',
                  }[idt] || get.translation(idt);
                  player.chooseControl('ok').set('dialog', [get.translation(target) + '的身份', `<span ${styleStr} style="font-family: huangcao, xinwei;font-size:larger;color: white;">${tr}</span>`]);
                }
              },
              ai: {
                order: 4,
                result: {
                  target: -1,
                },
                // result: {
                //   target: function (player, target) {
                //     var result = 0;
                //     if (target.hasSkillTag('noe')) result += 4 + target.countCards('e');
                //     if (target.hasSkillTag('nolose') || target.hasSkillTag('nodiscard')) result += 5 + target.countCards('he') / 2;
                //     if (target.hasCard(function (card) {
                //       return ['baiyin', 'rewrite_baiyin'].includes(card.name);
                //     }, 'e') && target.isDamaged()) return 10 + result;
                //     if (target.hasCard(function (card) {
                //       var baiyin = ['baiyin', 'rewrite_baiyin'].includes(card.name);
                //       var bol = true;
                //       return get.color(card) == 'black' && (baiyin && (target.isDamaged() ? !bol : bol));
                //     }, 'e')) return -6 + result;
                //     return -5 + result;
                //   },
                // }
              }
            },
            jlsg_kuangzheng: {
              audio: "ext:极略:2",
              direct: true,
              trigger: { player: 'phaseEnd' },
              filter: function (event, player) {
                return game.hasPlayer(function (current) {
                  return current.isLinked() || current.isTurnedOver();
                });
              },
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt(event.name)).set('ai', function (target) {
                  return get.attitude(_status.event.player, target);
                });
                "step 1"
                if (result.bool) {
                  event.target = result.targets[0];
                  player.logSkill(event.name, result.targets);
                } else {
                  event.finish();
                }
                "step 2"
                if (event.target.isLinked()) {
                  event.target.link();
                }
                "step 3"
                if (event.target.isTurnedOver()) {
                  event.target.turnOver();
                }
              },
              ai: {
                expose: 0.2,
              }
            },
            jlsg_bibu: {
              audio: "ext:极略:2",
              group: ['jlsg_bibu1'],
              trigger: { global: 'phaseJieshuBegin' },
              frequent: true,
              filter: function (event, player) {
                if (player.hasSkill('jlsg_bibu2')) return false;
                return event.player != player && player.countCards('h') <= player.hp;
              },
              content: function () {
                player.draw();
                player.addTempSkill('jlsg_bibu2');
              }
            },
            jlsg_bibu1: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseJieshuBegin' },
              direct: true,
              filter: function (event, player) {
                if (player.hasSkill('jlsg_bibu2')) return false;
                return event.player != player && player.countCards('h') > player.hp;
              },
              content: function () {
                "step 0"
                player.chooseCardTarget({
                  filterCard: true,
                  selectCard: 1,
                  filterTarget: function (card, player, target) {
                    return player != target;
                  },
                  ai1: function (card) {
                    if (ui.selected.cards.length > 0) return -1;
                    if (card.name == 'du') return 20;
                    return (_status.event.player.countCards('h') - _status.event.player.hp);
                  },
                  ai2: function (target) {
                    var att = get.attitude(_status.event.player, target);
                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                      if (target.hasSkillTag('nodu')) return 0;
                      return 1 - att;
                    }
                    if (target.countCards('h') > _status.event.player.countCards('h')) return 0;
                    return att - 4;
                  },
                  prompt: "###是否发动【裨补】？###你可以将一张手牌交给其他角色"
                });
                "step 1"
                if (result.bool) {
                  player.addTempSkill('jlsg_bibu2');
                  player.logSkill('jlsg_bibu', result.targets);
                  if (result.targets[0].ai.shown > player.ai.shown) {
                    player.addExpose(0.1);
                  }
                  result.targets[0].gain(result.cards, player, 'give');
                }
              },
              ai: {
                threaten: 1.2,
                order: 2,
                result: {
                  target: 1,
                },
              },
            },
            jlsg_bibu2: {},
            jlsg_duanlan: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return game.hasPlayer(function (current) {
                  return current != player && current.countCards('hej');
                });
              },
              content: function () {
                'step 0'
                var friends = game.filterPlayer(function (current) {
                  return get.attitude(player, current) >= 4;
                });
                var targets = game.filterPlayer(function (current) {
                  return current != player
                }).sort(lib.sort.seat);
                var info = ['断缆</br></br><div class="center text">选择并弃置1至3张牌</div>'];
                for (var i = 0; i < targets.length; i++) {
                  if (targets[i].countCards('hej')) info.push('<div class="center text">' + get.translation(targets[i]) + '</div>');
                  var hs = targets[i].getCards('h');
                  if (hs.length) {
                    info.push('<div class="center text">手牌区</div>');
                    if (targets[i].isUnderControl()) info.push(hs);
                    else info.push([hs, 'blank']);
                  }
                  var es = targets[i].getCards('e');
                  if (es.length) {
                    info.push('<div class="center text">装备区</div>');
                    info.push(es);
                  }
                  var js = targets[i].getCards('j');
                  if (js.length) {
                    info.push('<div class="center text">判定区</div>');
                    info.push(js);
                  }
                }
                player.chooseButton(true, [1, 3]).set('createDialog', info).set('filterButton', function (button) {
                  return lib.filter.canBeDiscarded(button.link, _status.event.player, get.owner(button.link));
                }).set('ai', function (button) {
                  var player = _status.event.player;
                  var maxNumCards = player.getCards('he', function (card) {
                    return get.value(card) < 9 && !player.hasCard(function (card2) {
                      return card2.number > card.number
                    })
                  });
                  var maxNum = maxNumCards.length ? maxNumCards[0].number : 0;
                  var dngr = player.hp == 1 && !player.hasCard(function (card) {
                    return card.name == 'tao' || card.name == 'jiu'
                  });
                  var owner = get.owner(button.link);
                  var position = get.position(button.link);
                  var num = 0;
                  for (var i = 0; i < ui.selected.buttons.length; i++) {
                    if (['e', 'j'].includes(get.position(ui.selected.buttons[i].link))) {
                      num += ui.selected.buttons[i].link.number;
                    } else num += 7;
                  }
                  var att = get.attitude(player, owner);
                  if (att > 0) {
                    if (position == 'j') {
                      if (button.link.number < maxNum - num) return 100 - button.link.number;
                      if (!dngr) return 80 - button.link.number;
                    }
                    return 0;
                  }
                  if (att < 0) {
                    if (position == 'j') return 0;
                    if (position == 'e') {
                      if (button.link.number < maxNum - num) return 60 - button.link.number;
                      if (!dngr) return 40 - button.link.number;
                    }
                    if (7 < maxNum - num) {
                      if (!dngr) return 1;
                    }
                  }
                  return 0;

                });
                'step 1'
                event.num = 0;
                var owners = [];
                var cards = result.links.slice(0);
                for (var i = 0; i < cards.length; i++) {
                  event.num += cards[i].number;
                  var owner = get.owner(cards[i]);
                  if (!owners.includes(owner)) owners.push(owner);
                }
                owners.sort(lib.sort.seat);
                var todo = [];
                for (var i = 0; i < owners.length; i++) {
                  player.line(owners[i], 'green');
                  owners[i].discard(owners[i].getCards('hej', function (card) {
                    return cards.includes(card);
                  }));
                }
                'step 2'
                player.chooseToDiscard('断缆</br></br><div class="center text">弃置一张点数大于' + num + '的牌，或失去1点体力</div>', function (card) {
                  return card.number > num;
                }, 'he').set('ai', function (card) {
                  if (card.name == 'tao') return 0;
                  return 9 - get.value(card);
                });
                'step 3'
                if (!result.bool) player.loseHp();
              },
              ai: {
                order: 7,
                result: {
                  player: function (player) {
                    //if(player.hasSkillTag('maiHp')&&player.hp>1) return 1;
                    if (player.hp > 2 || player.hasCard(function (card) {
                      return card.number > 10
                    }, 'h')) return game.hasPlayer(function (current) {
                      if (get.attitude(player, current) > 0) return current.countCards('j');
                      else if (get.attitude(player, current) < 0) return current.countCards('he');
                    }) ? 1 : 0;
                    var dngr = player.hp == 1 && !player.hasCard(function (card) {
                      return card.name == 'tao' || card.name == 'jiu'
                    });
                    var js = [], es = [];
                    var minNum1 = 0, minNum2 = 0;
                    game.countPlayer(function (current) {
                      if (get.attitude(player, current) > 0) js = js.concat(current.getCards('j'));
                      else if (get.attitude(player, current) < 0) es = es.concat(current.getCards('e'));
                    });
                    for (var i = 0; i < js.length; i++) minNum1 = Math.min(minNum1, js[i].number);
                    if (js.length) {
                      if (player.hasCard(function (card) {
                        return card.number > minNum1 && get.value(card) < 9
                      }, 'he')) return 1;
                      if (!dngr) {
                        if (js.length > 1) return 1;
                        return game.hasPlayer(function (current) {
                          return current.countCards('he')
                        }) ? 1 : 0;
                      }
                      return 0;
                    }
                    for (var i = 0; i < es.length; i++) minNum2 = Math.min(minNum2, es[i].number);
                    if (es.length) {
                      if (player.hasCard(function (card) {
                        return card.number > minNum2 && get.value(card) < 9
                      }, 'he')) return 1;
                      if (!dngr) {
                        if (es.length > 1) return 1;
                      }
                      return 0;
                    }
                    return 0;
                  }
                }
              }
            },
            jlsg_yaoming: {
              audio: "jlsg_yaoming_",
              locked: false,
              init: function (player) {
                player.storage.jlsg_yaoming = {
                  suits: [],
                  types: [],
                };
              },
              group: ['jlsg_yaoming_strg', 'jlsg_yaoming_1', 'jlsg_yaoming_2', 'jlsg_yaoming_3', 'jlsg_yaoming_4'],
              subfrequent: ['1'],
              subSkill: {
                strg: {
                  trigger: { player: ["useCard", "respond"] },
                  filter: function (event, player) {
                    if (!player.isPhaseUsing()) return false;
                    var phaseUse = _status.event.getParent('phaseUse');
                    var hists = player.getHistory('useCard', function (evt) {
                      return evt.getParent('phaseUse') == phaseUse && evt.card && get.suit(evt.card)
                    })
                    var curSuit = get.suit(event.card);
                    return hists.includes(event) && hists.every(e => e === event || get.suit(e.card) != curSuit);
                  },
                  silent: true,
                  content: function () {
                    var phaseUse = _status.event.getParent('phaseUse');
                    var hists = player.getHistory('useCard', function (evt) {
                      return evt.getParent('phaseUse') == phaseUse && evt.card && get.suit(evt.card)
                    })
                    var suits = new Set(hists.map(e => get.suit(e.card)))
                    player.storage.jlsg_yaoming = [trigger, suits]
                    player.addTempSkill('jlsg_yaoming_mark', 'phaseUseAfter');
                    if (player.hasSkill(event.name)) {
                      player.markSkill('jlsg_yaoming_mark');
                    }

                    // var suit = get.suit(trigger.card), type = get.type(trigger.card, 'trick');
                    // if (['heart', 'diamond', 'spade', 'club'].includes(suit) &&
                    //   !player.storage.jlsg_yaoming.suits.includes(suit)) {
                    //   player.storage.jlsg_yaoming.suits.push(suit);
                    //   player.addTempSkill('jlsg_yaoming_mark', 'phaseUseAfter');
                    //   player.markSkill('jlsg_yaoming_mark');
                    // }
                    // if (!player.storage.jlsg_yaoming.types.includes(type)) {
                    //   player.storage.jlsg_yaoming.types.push(type);
                    // }
                  }
                },
                mark: {
                  onremove: function (player) {
                    delete player.storage.jlsg_yaoming;
                  },
                  intro: {
                    content: function (storage, player) {
                      var str = '使用过的花色：';
                      var suits = [...player.storage.jlsg_yaoming[1]].sort()
                      str += suits.reduce((a, b) => a + get.translation(b), '');
                      return str;
                    },
                    markcount: function (storage, player) {
                      return player.storage.jlsg_yaoming[1].size;
                    },
                  },
                },
                // clear: {
                //   trigger: { player: 'phaseAfter' },
                //   silent: true,
                //   content: function () {
                //     player.storage.jlsg_yaoming = { suits: [], types: [] }
                //   }
                // }
              },
            },
            jlsg_yaoming_: {
              audio: "ext:极略:4",
            },
            jlsg_yaoming_1: {
              audio: "ext:极略:true",
              trigger: { player: ["useCard", "respond"] },
              filter: function (event, player) {
                return player.storage.jlsg_yaoming &&
                  player.storage.jlsg_yaoming[0] == event &&
                  player.storage.jlsg_yaoming[1].size == 1;
              },
              // usable: 1,
              frequent: true,
              content: function () {
                player.draw();
              },
            },
            jlsg_yaoming_2: {
              audio: "ext:极略:true",
              trigger: { player: ["useCard", "respond"] },
              filter: function (event, player) {
                return player.storage.jlsg_yaoming &&
                  player.storage.jlsg_yaoming[0] == event &&
                  player.storage.jlsg_yaoming[1].size == 2;
              },
              // usable: 1,
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt('jlsg_yaoming'), function (card, player, target) {
                  return player != target && target.countCards('he') > 0;
                }).set('ai', function (target) {
                  return -get.attitude(_status.event.player, target);
                }).set('prompt2', "你可以弃置一名其他角色的一张牌");
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_yaoming_2', result.targets);
                  event.target = result.targets[0];
                  player.discardPlayerCard(event.target, true);
                } else {
                  event.finish();
                }
              }
            },
            jlsg_yaoming_3: {
              sub: true,
              audio: "ext:极略:true",
              trigger: { player: ["useCard", "respond"] },
              filter: function (event, player) {
                return player.storage.jlsg_yaoming &&
                  player.storage.jlsg_yaoming[0] == event &&
                  player.storage.jlsg_yaoming[1].size == 3 &&
                  player.canMoveCard();
              },
              // usable: 1,
              prompt2: '你可以移动场上的一张牌',
              // frequent: true,
              check: function (event, player) {
                return player.canMoveCard(true);
              },
              content: function () {
                "step 0"
                // player.logSkill('jlsg_yaoming_3');
                player.moveCard();
                // player.moveCard(get.prompt2('jlsg_yaoming_3'));
              }
            },
            jlsg_yaoming_4: {
              audio: "ext:极略:true",
              trigger: { player: ["useCard", "respond"] },
              filter: function (event, player) {
                return player.storage.jlsg_yaoming &&
                  player.storage.jlsg_yaoming[0] == event &&
                  player.storage.jlsg_yaoming[1].size == 4;
              },
              // usable: 1,
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt('jlsg_yaoming'), function (card, player, target) {
                  return player != target;
                }).set('ai', function (target) {
                  return -get.attitude(_status.event.player, target);
                }).set('prompt2', "你可以对一名其他角色造成一点伤害");
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_yaoming_4', result.targets);
                  event.target = result.targets[0];
                  event.target.damage();
                } else {
                  event.finish();
                }
              }
            },
            jlsg_kuangfu: {
              trigger: { source: 'damageEnd' },
              direct: true,
              audio: "ext:极略:2",
              filter: function (event) {
                if (event._notrigger.includes(event.player)) return false;
                return event.card && event.card.name == 'sha' && event.player.countCards('e');
              },
              content: function () {
                player.gainPlayerCard('e', trigger.player, get.prompt(event.name, trigger.player)).logSkill = [event.name, trigger.player];
              }
            },
            jlsg_zhoufu: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseBegin' },
              filter: function (event, player) {
                return player.countCards('h') != 0 && event.player != player;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseToDiscard('h', get.prompt2(event.name, trigger.player)).set("ai", function (card) {
                  return get.attitude(player, trigger.player) > -1 ? 0 : 6 - get.useful(card);
                }).set('logSkill', event.name);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                trigger.player.judge(function (card) {
                  if (get.color(card) == 'black') return -1;
                  return 1;
                }).set('judge2', result => !result.bool)
                  .set("callback", function () {
                    if (event.judgeResult.suit === "spade") player.addTempSkill('baiban');
                    else if (event.judgeResult.suit === 'club') player.chooseToDiscard(2, true);
                  });
              },
              ai: {
                threaten: function (player, target) {
                  if (player.getStat().skill.jlsg_zhoufu > 0 && target == _status.currentPhase) {
                    return 2;
                  }
                  return 1.2;
                },
                expose: 0.2,
              }
            },
            // jlsg_zhoufu2: {
            //   init: function (player, skill) {
            //     var skills = player.getSkills(true, false);
            //     for (var i = 0; i < skills.length; i++) {
            //       if (get.skills[i]) {
            //         skills.splice(i--, 1);
            //       }
            //     }
            //     player.disableSkill(skill, skills);
            //   },
            //   onremove: function (player, skill) {
            //     player.enableSkill(skill);
            //   },
            //   mark: true,
            //   locked: true,
            //   intro: {
            //     content: function (storage, player, skill) {
            //       var list = [];
            //       for (var i in player.disabledSkills) {
            //         if (player.disabledSkills[i].includes(skill)) {
            //           list.push(i)
            //         }
            //       }
            //       if (list.length) {
            //         var str = '失效技能：';
            //         for (var i = 0; i < list.length; i++) {
            //           if (lib.translate[list[i] + '_info']) {
            //             str += get.translation(list[i]) + '、';
            //           }
            //         }
            //         return str.slice(0, str.length - 1);
            //       }
            //     },
            //   },
            // },
            jlsg_yingbing: {
              audio: "ext:极略:2",
              usable: 1,
              trigger: { global: 'judgeEnd' },
              filter: function (event, player) {
                if (!event.result) return false;
                if (!event.result.card) return false;
                if (event.nogain && event.nogain(event.result.card)) {
                  return false;
                }
                return get.color(event.result.card) == 'black' && event.player != player;
              },
              check: function (event, player) {
                return get.attitude(player, event.player) < 0;
              },
              content: function () {
                player.useCard({ name: 'sha' }, trigger.player, false);
              },
            },
            jlsg_danqi: {
              audio: 'danji',
              skillAnimation: true,
              unique: true,
              juexingji: true,
              derivation: ['jlsg_tuodao'],
              trigger: { player: 'phaseZhunbeiBegin' },
              forced: true,
              filter: function (event, player) {
                return !player.storage.jlsg_danqi && player.countCards('h') > player.hp;
              },
              init: function (player) {
                player.storage.jlsg_danqi = false;
              },
              content: function () {
                player.awakenSkill('jlsg_danqi');
                player.storage.jlsg_danqi = true;
                player.loseMaxHp();
                player.recover(2);
                player.addSkills('jlsg_tuodao');
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage') && target.countCards('h') >= target.hp && target.hp > 1 && target.getDamagedHp() < 3) {
                      return [1, 1];
                    }
                  },
                }
              }
            },
            jlsg_tuodao: {
              audio: "ext:极略:1",
              trigger: { target: 'shaMiss' },
              filter: function (event, player) {
                return event.player.inRangeOf(player);
              },
              direct: true,
              content: function () {
                'step 0'
                player.addSkill('jlsg_tuodao_buff');
                'step 1'
                player.chooseToUse({ name: 'sha' }, '拖刀：是否对' + get.translation(trigger.player) + '使用一张【杀】？', trigger.player, -1)
                  .set('logSkill', 'jlsg_tuodao')
                // .set('oncard', function(card, player) {
                //   _status.event.directHit.addArray(game.players);
                // });
                'step 2'
                player.removeSkill('jlsg_tuodao_buff');

              },
              subSkill: {
                buff: {
                  audio: false,
                  trigger: { player: 'shaBegin' },
                  forced: true,
                  popup: false,
                  content: function () {
                    trigger.directHit = true;
                  },
                  ai: {
                    unequip: true,
                  }
                }
              }
            },
            jlsg_zhuiji: {
              audio: "ext:极略:2",
              forced: true,
              trigger: {
                source: 'damageEnd',
              },
              filter: function (event, player) {
                return event.player != player;
              },
              content: function () {
                var target = trigger.player;
                if (!target.storage.jlsg_zhuiji_effect) {
                  target.storage.jlsg_zhuiji_effect = [];
                }
                for (let info of target.storage.jlsg_zhuiji_effect) {
                  if (info.player == player) {
                    ++info.count;
                    target.markSkill('jlsg_zhuiji_effect');
                    return;
                  }
                }
                target.storage.jlsg_zhuiji_effect.push({
                  player: player,
                  count: 1,
                });
                target.addSkill('jlsg_zhuiji_effect');
                target.markSkill('jlsg_zhuiji_effect');
              },
              subSkill: {
                effect: {
                  charlotte: true,
                  onremove: true,
                  mod: {
                    globalTo: function (from, to, distance) {
                      for (let info of to.storage.jlsg_zhuiji_effect) {
                        if (info.player == from) {
                          return distance - info.count;
                        }
                      }
                    },
                  },
                  intro: {
                    markcount(content, player) {
                      return content.reduce((a, b) => a + b.count, 0);
                    },
                    content(content, player, skill) {
                      return content.map(info => `${get.translation(info.player)}计算与你的距离-${info.count}`)
                        .join('<br>');
                    },
                  },
                },
              },
            },
            jlsg_xionglie: {
              audio: "ext:极略:2",
              direct: true,
              shaRelated: true,
              trigger: { player: 'useCardToPlayered' },
              filter: function (event, target) {
                return event.isFirstTarget && event.card.name == 'sha';
              },
              content: function () {
                'step 0'
                var special = !game.hasPlayer(p => p != player && get.distance(player, p) > 1);
                event.special = special;
                var effect = 0;
                for (var p of trigger.targets) {
                  if (trigger.excluded.includes(p)) continue;
                  effect += get.effect(p, trigger.card, player, player)
                }
                var choice = effect >= 1;
                if (special) {
                  var prompt = `###${get.prompt(event.name)}###此【杀】不可被【闪】响应且伤害+1`;
                  player.chooseBool(prompt, choice);
                } else {
                  player.chooseControlList([
                    '此【杀】不可被【闪】响应',
                    '此【杀】伤害+1',
                  ],
                    get.prompt(event.name),
                    function (event, player) {
                      if (_status.event.choice) {
                        return [0, 1].randomGet();
                      }
                      return 2;
                    }
                  ).set('choice', choice);
                }
                'step 1'
                var crit = [false, false];
                if (event.special) {
                  if (result.bool) {
                    crit = [true, true];
                  }
                } else {
                  if (result.index < 2) {
                    crit[result.index] = true;
                  }
                }
                if (crit[0] || crit[1]) {
                  player.logSkill(event.name);
                }
                if (crit[0]) {
                  game.log(trigger.card, '不可被【闪】响应');
                  trigger.directHit.length = 0;
                  trigger.directHit.push(...game.players);
                }
                if (crit[1]) {
                  game.log(trigger.card, '伤害+1');
                  ++trigger.getParent().baseDamage;
                }
              },
              ai: {
                directHit_ai: true,
              },
            },
            jlsg_chenqing: {
              audio: "ext:极略:2",
              trigger: { global: 'dying' },
              usable: 1,
              filter: function (event, player) {
                return event.player.hp <= 0;
              },
              direct: true,
              init: function (player) {
                player.storage.jlsg_chenqing = 0;
              },
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2('jlsg_chenqing'), function (card, player, target) {
                  return target != player && target != _status.event.getTrigger().player;
                }).set('ai', function (target) {
                  var player = _status.event.player;
                  var trigger = _status.event.getTrigger();
                  var att1 = get.attitude(player, trigger.player); // 菜 -> 濒死角色
                  var att2 = get.attitude(target, trigger.player); // 目标 -> 濒死角色
                  var att3 = get.attitude(player, target); // 菜 -> 目标
                  switch (_status.event.discardNum) {
                    case 0:
                    case 1:
                      att1 *= 2.5;
                      att2 = 0;
                      break;
                    case 2:
                    case 3:
                      att2 *= (get.sgn(att2) == get.sgn(att1) ? 0.5 : -0.5);
                      att3 *= 1.2;
                      break;
                    case 4:
                      att2 *= (get.sgn(att2) == get.sgn(att1) ? 0.5 : -0.5);
                      att3 *= 1.5;
                      buff = Math.min(0.5, target.countCards('he') * 0.1);
                      if (att2 > 0) buff *= 1.2;
                      att3 *= 1 + buff;
                      break;
                    case 5:
                      att1 = att2 = 0;
                      if (target.countCards('he') == 0) att3 = 0;
                      if (target.countCards('he') <= 1) {
                        att3 = -att3;
                        break;
                      }
                      att3 += 0.5 * Math.random();
                      if (target.countCards('he') == 2) att3 = -0.4 * att3;
                      att3 *= Math.min(1, 0.1 * target.countCards('he'))
                      break;
                    default:
                      att1 = att2 = 0;
                      att3 = -att3;
                      if (target.countCards('he') + 4 < _status.event.discardNum) {
                        att3 *= target.countCards('he') / (_status.event.discardNum - 4);
                      }
                      break;
                  }
                  // if (att3 < 0) return 0;
                  return att1 + att2 + att3;
                }).set('discardNum', player.storage.jlsg_chenqing);
                'step 1'
                if (result.bool) {
                  // player.addTempSkill('chenqing2', 'roundStart');
                  event.target = result.targets[0];
                  event.target.draw(4);
                  player.logSkill('chenqing', event.target);
                }
                else {
                  event.finish();
                }
                'step 2'
                var num = player.storage.jlsg_chenqing;
                var target = event.target;
                var tosave = trigger.player;
                var att = get.attitude(target, tosave);
                var hastao = target.countCards('h', 'tao');
                if (num == 0) {
                  return;
                }
                target.chooseToDiscard(num, true, 'he').set('ai', function (card) {
                  var num = _status.event.selectCard[0];
                  var hastao = _status.event.hastao;
                  var att = _status.event.att;
                  if (!hastao && att > 0) {
                    var suit = get.suit(card);
                    for (var i = 0; i < ui.selected.cards.length; i++) {
                      if (get.suit(ui.selected.cards[i]) == suit) {
                        return -4 - get.value(card);
                      }
                    }
                  }
                  if (att < 0 && ui.selected.cards.length + 1 == num) {
                    var suit = get.suit(card);
                    for (var i = 0; i < ui.selected.cards.length; i++) {
                      if (get.suit(ui.selected.cards[i]) == suit) {
                        return -get.value(card);
                      }
                    }
                    return -10 - get.value(card);
                  }
                  return -get.value(card);
                }).set('hastao', hastao).set('att', att);
                'step 3'
                ++player.storage.jlsg_chenqing;
                player.markSkill('jlsg_chenqing');
                if (result.cards) {
                  var suits = [];
                  for (var i = 0; i < result.cards.length; i++) {
                    suits.add(get.suit(result.cards[i]));
                  }
                  if (suits.length != result.cards.length) {
                    return;
                  }
                }
                if (game.checkMod({ name: 'tao', isCard: true }, player, trigger.player, 'unchanged', 'cardSavable', player)) {
                  event.target.useCard({ name: 'tao', isCard: true }, trigger.player);
                }
              },
              intro: {
                content: '已经发动了&次技能',
              },
              ai: {
                expose: 0.2,
                threaten: 1,
              }
            },
            jlsg_mozhi: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseJieshuBegin' },
              direct: true,
              filter: function (event, player) {
                return event.player.getHistory('useCard', function (evt) {
                  return ['basic', 'trick'].includes(get.type(evt.card));
                }).length > 0 && player.countCards('hs') > 0;
              },
              content: function () {
                var card = trigger.player.getHistory('useCard', function (evt) {
                  return ['basic', 'trick'].includes(get.type(evt.card));
                }).pop().card
                event._result = {};
                card = { name: card.name, nature: card.nature };
                if (card.name != 'jiu' && lib.filter.cardEnabled(card)) {
                  if (game.hasPlayer(function (current) {
                    return player.canUse(card, current);
                  })) {
                    lib.skill.jlsg_mozhix.viewAs = card;
                    var next = player.chooseToUse();
                    if (next.isOnline()) {
                      player.send(function (card) {
                        lib.skill.jlsg_mozhix.viewAs = card;
                      }, card)
                    }
                    next.logSkill = 'jlsg_mozhi';
                    next.set('openskilldialog', `###${get.prompt(event.name)}###将一张手牌当${get.translation(card)}使用`);
                    next.set('norestore', true);
                    next.set('_backupevent', 'jlsg_mozhix');
                    next.set('custom', {
                      add: {},
                      replace: { window: function () { } }
                    });
                    next.backup('jlsg_mozhix');
                  }
                }
              },
            },
            jlsg_mozhix: {
              filterCard: function (card) {
                return get.itemtype(card) == 'card';
              },
              selectCard: 1,
              position: 'hs',
              popname: true,
            },
            jlsg_hemeng: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('h') && player.storage.jlsg_hemeng_usable;
              },
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                'step 0'
                player.storage.jlsg_hemeng_usable--;
                // target.viewCards('和盟', player.getCards('h'));
                target.gainPlayerCard(player, 'h', 'visible', true);
                'step 1'
                // player.viewCards('和盟', target.get('he'));
                // target.isUnderControl();
                player.gainPlayerCard(target, 'visible', true, 'he').set('ai', function (button) {
                  var card = button.link;
                  return get.value(card);
                });
              },
              init: function (player) {
                player.storage.jlsg_hemeng_usable = 0;
              },
              group: ['jlsg_hemeng_usable'],
              subSkill: {
                usable: {
                  trigger: { player: 'phaseUseBegin' },
                  popup: false,
                  forced: true,
                  content: function () {
                    player.storage.jlsg_hemeng_usable = player.getDamagedHp() + 1;
                  }
                }
              },
              ai: {
                order: 6,
                result: {
                  player: 1,
                  target: -0.5,
                }
              }
            },
            jlsg_sujian: {
              audio: "ext:极略:1",
              trigger: { player: 'gainEnd' },
              filter: function (event, player) {
                // return (event.cards[0].original == 'h' || event.cards[0].original == 'e' || event.cards[0].original == 'j');
                if (!event.source || event.source == player || !event.source.isIn()) return false;
                var evt = event.getl(event.source);
                return evt && evt.cards2 && evt.cards2.length != 0;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2('jlsg_sujian'), function (card, player, target) {
                  return player != target && target.countDiscardableCards(player, 'he') > 0;
                }).ai = function (target) {
                  // if (!player.countCards('he')) return -get.attitude(player, target) && target.countCards('he');
                  // if (player.countCards('he') > 4) return get.attitude(player, target) && target.countCards('he');
                  // return 0;
                  return get.effect(target, { name: 'guohe' }, player, player) + get.effect(player, { name: 'guohe' }, target, player) - 1;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_sujian', result.targets);
                  result.targets[0].discardPlayerCard(player, 'he', true);
                  player.discardPlayerCard(result.targets[0], 'he', true);
                }
              }
            },
            jlsg_yexi: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseJieshuBegin' },
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                var check, i, num = 0;
                for (i = 0; i < game.players.length; i++) {
                  if (player != game.players[i] && game.players[i].num('h') > 1) {
                    var att = get.attitude(player, game.players[i]);
                    if (att > 3) {
                      num++;
                    }
                  }
                }
                check = (num > 0 && (player.countCards('h') > 1 || player.hp > 2));
                player.chooseCardTarget({
                  ai1: function (card) {
                    var evt = _status.event;
                    if (!evt.check) return 0;
                    return 6 - get.useful(card);
                  },
                  ai2: function (target) {
                    var evt = _status.event;
                    if (!evt.check) return 0;
                    return get.attitude(evt.player, target);
                  },
                  filterTarget: function (card, player, target) {
                    return target != player;
                  },
                  filterCard: true,
                  prompt: '是否发动【夜袭】？',
                  check: check,
                  target: target
                });
                'step 1'
                if (result.bool) {
                  event.target = result.targets[0];
                  player.logSkill('jlsg_yexi', event.target);
                  player.discard(result.cards);
                  event.target.chooseControl('选项一', '选项二', function () {
                    return Math.random() < 0.5 ? '选项一' : '选项二';
                  }).set('prompt', '夜袭<br><br><div class="text">1:使用黑色【杀】时无视防具.</div><br><div class="text">2:使用红色【杀】时无视距离.</div></br>');
                } else {
                  event.finish();
                }
                'step 2'
                if (result.control == '选项一') {
                  event.target.addSkill('jlsg_yexi_getBlack');
                } else {
                  event.target.addSkill('jlsg_yexi_getRed');
                }
              },
              subSkill: {
                getBlack: {
                  unique: true,
                  trigger: { player: 'phaseUseBegin' },
                  forced: true,
                  popup: false,
                  mark: true,
                  marktext: '夜',
                  intro: {
                    name: '夜袭',
                    content: '使用黑色【杀】时无视防具'
                  },
                  content: function () {
                    player.addTempSkill('jlsg_yexi_black', 'phaseAfter');
                    player.removeSkill('jlsg_yexi_getBlack');
                  }
                },
                getRed: {
                  trigger: { player: 'phaseUseBegin' },
                  forced: true,
                  unique: true,
                  popup: false,
                  mark: true,
                  marktext: '夜',
                  intro: {
                    name: '夜袭',
                    content: '使用红色【杀】时无视距离'
                  },
                  content: function () {
                    player.addTempSkill('jlsg_yexi_red', 'phaseAfter');
                    player.removeSkill('jlsg_yexi_getRed');
                  }
                },
                black: {
                  mark: true,
                  unique: true,
                  marktext: '夜',
                  intro: {
                    name: '夜袭',
                    content: '使用黑色【杀】时无视防具'
                  },
                  trigger: { player: 'shaBefore' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return event.card && get.color(event.card) == 'black';
                  },
                  content: function () {
                    player.addTempSkill('unequip', 'shaAfter');
                  }
                },
                red: {
                  mark: true,
                  unique: true,
                  marktext: '夜',
                  intro: {
                    name: '夜袭',
                    content: '使用红色【杀】时无视距离'
                  },
                  mod: {
                    targetInRange: function (card, player) {
                      if (card.name == 'sha' && get.color(card) == 'red') return true;
                    }
                  }
                }
              }
            },
            jlsg_kuangyan: {
              audio: "ext:极略:2",
              group: ['jlsg_kuangyan1', 'jlsg_kuangyan2']
            },
            jlsg_kuangyan1: {
              audio: "ext:极略:true",
              priority: -1,
              trigger: { player: 'damageBegin3' },
              filter: function (event, player) {
                return !event.nature && event.num == 1;
              },
              forced: true,
              content: function () {
                trigger.cancel();
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (!get.nature(card)) {
                        if (card.name == 'sha' && (!player.hasSkill('jiu') || !player.hasSkill('reluoyi') || !player.hasSkill('luoyi'))) return 0.1;
                        return 0.2;
                      }
                    }
                  },
                }
              },
              group: null,
            },
            jlsg_kuangyan2: {
              audio: "ext:极略:true",
              trigger: { player: 'damageBegin3' },
              filter: function (event, player) {
                return event.num >= 2;
              },
              priority: -1,
              forced: true,
              content: function () {
                trigger.num++;
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (card.name == 'sha' && (player.hasSkill('jiu') || player.hasSkill('reluoyi') || player.hasSkill('luoyi'))) return [1, -2];
                    }
                  },
                }
              },
              group: null,
            },
            jlsg_chaochen: {
              audio: "ext:极略:1",
              usable: 1,
              enable: 'phaseUse',
              filterCard: true,
              selectCard: [1, Infinity],
              discard: false,
              lose: false,
              // prepare: function (cards, player, targets) {
              //   player.$give(cards.length, targets[0]);
              // },
              filterTarget: function (card, player, target) {
                return player != target;
              },
              check: function (card) {
                if (ui.selected.cards.length == 0) return 4 - get.value(card);
                return 0;
              },
              content: function () {
                player.give(cards, target);
                target.addTempSkill('jlsg_chaochen2', { player: 'phaseAfter' });
                target.markAuto('jlsg_chaochen2', [player]);
              },
              ai: {
                order: 0.5,
                result: {
                  player: -1,
                  target: function (player, target) {
                    var th = target.countCards('h');
                    if (th + 1 > target.hp) return -1;
                    return 0;
                  }
                }
              }
            },
            jlsg_chaochen2: {
              audio: "jlsg_chaochen",
              mark: true,
              marktext: '朝',
              intro: {
                content: "回合开始时，若手牌数大于体力值，受到$造成的1点伤害",
              },
              trigger: { player: 'phaseBegin' },
              filter: function (event, player) {
                return player.storage.jlsg_chaochen2 && player.countCards('h') > player.hp;
              },
              direct: true,
              onremove: function (player) {
                delete player.storage.jlsg_chaochen2;
              },
              content: function () {
                'step 0'
                var target = player.storage.jlsg_chaochen2.shift();
                target.logSkill('jlsg_chaochen2', player);
                player.damage(target);
                if (player.storage.jlsg_chaochen2.length) {
                  event.redo();
                }
                // player.storage.jlsg_chaochen2.logSkill('jlsg_chaochen2', player);
                // player.damage(player.storage.jlsg_chaochen2);
                // delete player.storage.jlsg_chaochen2;
              }
            },
            jlsg_quanzheng: {
              audio: "ext:极略:1",
              trigger: { target: 'useCardToBefore' },
              filter: function (event, player) {
                if (event.player == player) return false;
                if (event.player.countCards('h') > player.countCards('h') || event.player.countCards('e') > player.countCards('e'))
                  return get.type(event.card) == 'trick' || event.card.name == 'sha';
                return false;
              },
              frequent: true,
              content: function () {
                player.draw();
              }
            },
            jlsg_shejian: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              filter: function (event, player) {
                return !player.get('e', '2') &&
                  game.countPlayer(p => p.countCards('he') && player != p && !p.hasSkill('jlsg_shejian2'));
              },
              filterTarget: function (card, player, target) {
                return target.countCards('he') && player != target && !target.hasSkill('jlsg_shejian2');
              },
              content: function () {
                'step 0'
                target.addTempSkill('jlsg_shejian2');
                player.discardPlayerCard('he', target, true);
                'step 1'
                target.chooseBool('是否对' + get.translation(player) + '使用一张【杀】？').ai = function (event, player) {
                  return get.effect(player, { name: 'sha' }, target, target) + 3;
                }
                'step 2'
                if (result.bool) {
                  target.useCard({ name: 'sha' }, player, false);
                }
              },
              ai: {
                order: 9,
                result: {
                  player: function (player, target) {
                    if (player.hp <= 2) return -2;
                    if (!player.countCards('h', 'shan')) return -1;
                    return -0.5;
                  },
                  target: -1,
                }
              }
            },
            jlsg_shejian2: {},
            jlsg_kuangao: {
              audio: "ext:极略:2",
              trigger: { target: 'shaAfter' },
              filter: function (event, player) {
                if (!event.player) return false;
                return player.countCards('he') // && event.player.countCards('he')
                  || event.player.countCards('h') < Math.min(5, event.player.maxHp);
              },
              check: function (event, player) {
                var phe = player.countCards('he');
                var the = event.player.countCards('he');
                if (the > phe && get.attitude(player, event.player) < 0) return 1;
                if (event.player.countCards('h') < event.player.maxHp && get.attitude(player, event.player) > 0) return 1;
                return 0;
              },
              direct: true,
              content: function () {
                'step 0'
                event.target = trigger.player;
                var prompts = [
                  `弃置所有牌，然后${get.translation(event.target)}弃置所有牌`,
                  `令${get.translation(event.target)}摸牌至体力上限（至多摸至五张）`
                ];
                event.prompts = [];
                if (player.countCards('he')) {
                  event.prompts.push(0);
                }
                if (event.target.countCards('h') < Math.min(5, event.target.maxHp)) {
                  event.prompts.push(1);
                }
                var coeff = 0.5 * Math.random() + 0.75; // target card guess coeff
                var ai = function (event, player) {
                  if (get.attitude(player, event.target) > 0) {
                    if (!event.prompts.includes(1)) return 'cancel2';
                    return prompts[1];
                  } else {
                    if (!event.prompts.includes(0)) return 'cancel2';
                    var targetHEValue = coeff * event.target.getCards('h').reduce((a, b) => a + get.value(b, event.target), 0)
                      + event.target.getCards('e').reduce((a, b) => a + get.value(b, event.target), 0);
                    var playerHEValue = player.getCards('he').reduce((a, b) => a + get.value(b, player), 0);
                    return (- coeff * targetHEValue * get.attitude(player, event.target)
                      - playerHEValue * get.attitude(player, player) > 0)
                      ? event.prompts.indexOf(0) : 'cancel2';
                  }
                };
                player.chooseControlList(event.prompts.map(n => prompts[n]), ai, get.prompt(event.name, event.target));
                'step 1'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, event.target);
                if (event.prompts[result.index] == 0) {
                  player.discard(player.getCards('he'));
                  event.target.discard(event.target.getCards('he'));
                } else {
                  event.target.drawTo(event.target.maxHp);
                }
              },
              // contentx: function () {
              //   'step 0'
              //   player.chooseControl('选项一', '选项二', function () {
              //     var phe = player.countCards('he');
              //     var the = trigger.player.countCards('he');
              //     if (the > phe && get.attitude(player, trigger.player) < 0) return '选项一';
              //     if (get.attitude(player, trigger.player) > 0) return '选项二';
              //     return '选项二';
              //   }).set('prompt', '狂傲<br><br><div class="text">1:弃置所有牌(至少一张),然后' + get.translation(trigger.player) + '弃置所有牌.</div><br><div class="text">2:令' + get.translation(trigger.player) + '将手牌补至其体力上限的张数(至多5张).</div></br>');
              //   'step 1'
              //   if (result.control == '选项一') {
              //     player.discard(player.get('he'));
              //     trigger.player.discard(trigger.player.get('he'));
              //   } else {
              //     if (Math.min(5, trigger.player.maxHp) - trigger.player.countCards('h')) {
              //       trigger.player.drawTo(trigger.player.maxHp);
              //     }
              //   }
              // },
              // ai: {
              //   effect: {
              //     target: function (card, player, target, current) {
              //       if (card.name != 'sha') return;
              //       if (get.attitude(player, target) < 0) return [1, -target.countCards('he'), 1, -player.countCards('he')];
              //       if (get.attitude(player, target) > 3 && player.countCards('h') < player.maxHp - 2 && target.hp > 2) return [1, 0.5, 1, Math.min(5, player.maxHp) - player.countCards('h')];
              //       return [1, -target.countCards('he'), 1, -player.countCards('he')];
              //     }
              //   }
              // }
            },
            jlsg_yinbing: {
              audio: "ext:极略:1",
              trigger: { global: 'shaBegin' },
              filter: function (event, player) {
                if (event.player == player || event.target == player) return false;
                return event.target.inRangeOf(player) && event.target.countCards('e');
              },
              logTarget: 'target',
              check: function (event, player) {
                if (player.countCards('h', 'shan') && get.effect(event.target, { name: 'sha' }, event.player, player) < 0) {
                  return 1;
                }
                if (player.hp == 1 && event.player.countCards('e', 'guanshi')) return 0;
                if (get.attitude(player, event.target) > 0 && player.hp >= 2 && get.effect(event.target, { name: 'sha' }, event.player, player) < 0) return 1;
                return 0;
              },
              content: function () {
                player.gainPlayerCard(trigger.target, 'e', true);
                trigger.target = player;
                trigger.untrigger();
                trigger.trigger('useCardToBefore');
                trigger.trigger('shaBefore');
              },
              group: ['jlsg_yinbing2'],
            },
            jlsg_yinbing2: {
              audio: "ext:极略:true",
              trigger: { target: 'shaBefore' },
              filter: function (event, player) {
                return player.countCards('he') > 0 && player.isDamaged();
              },
              direct: true,
              content: function () {
                'step 0'
                var next = player.chooseToDiscard(get.prompt('jlsg_yinbing2'), 'he')
                next.ai = function (card) {
                  if (player.getDamagedHp() > 1) return 6 - get.value(card);
                  if (player.getDamagedHp() > 2) return 10 - get.value(card);
                  return 4 - get.value(card);
                };
                next.logSkill = 'jlsg_yinbing2';
                'step 1'
                if (result.bool) {
                  player.draw(player.getDamagedHp());
                }
              },
            },
            jlsg_fenwei: {
              audio: "ext:极略:1",
              trigger: { source: 'damageBegin1' },
              filter: function (event, player) {
                return event.card && event.card.name == 'sha' && event.notLink() && event.player.countCards('h');
              },
              direct: true,
              content: function () {
                'step 0'
                player.choosePlayerCard('h', trigger.player);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.showCards(result.cards);
                player.logSkill(event.name, trigger.player)
                var card = result.cards[0];
                if (card.name == 'tao' || card.name == 'jiu') {
                  player.gain(card, trigger.player, 'give', 'bySelf');
                }
                if (get.type(card) != 'basic') {
                  trigger.player.discard(card, 'notBySelf');
                  trigger.num++;
                }
              },
            },
            jlsg_shiyong: {
              trigger: { player: 'damageEnd' },
              audio: "ext:极略:1",
              filter: function (event) {
                if (event.card && (event.card.name == 'sha')) {
                  if (get.color(event.card) == 'red') return true;
                  if (event.source && event.source.hasSkill('jiu')) return true;
                }
                return false;
              },
              forced: true,
              content: function () {
                'step 0'
                player.loseMaxHp();
                'step 1'
                if (player.maxHp <= 1) {
                  player.storage.shiyongEndLife = trigger.source;
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target, current) {
                    if (card.name == 'sha') {
                      if (get.color(card) == 'red') return [1, -2];
                      if (player.hasSkill('jiu')) return [1, -1.5];
                    }
                    if (get.tag(card, 'save') && target.isDying() && target.storage.shiyongEndLife) {
                      var source = target.storage.shiyongEndLife;
                      if (get.attitude(source, target) < 0 && target.identity == 'fan') return;
                      return 'zeroplayertarget';
                    }
                  }
                },
                neg: true,
              }
            },
            jlsg_angyang: {
              shaRelated: true,
              audio: "ext:极略:1",
              trigger: { player: ['shaBefore', 'juedouBefore'] },
              filter: function (event, player) {
                if (event.card.name == 'juedou') return true;
                return get.color(event.card) == 'red';
              },
              frequent: true,
              content: function () {
                if (trigger.target.countCards('j')) {
                  player.draw(2);
                } else {
                  player.draw();
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (card.name == 'sha' && get.color(card) == 'red') return [1, 0.6];
                  },
                  player: function (card, player, target) {
                    if (card.name == 'sha' && get.color(card) == 'red') return [1, 1];
                  }
                }
              },
              group: 'jlsg_angyang2'
            },
            jlsg_angyang2: {
              audio: "jlsg_angyang",
              trigger: { target: ['shaBefore', 'juedouBefore'] },
              filter: function (event, player) {
                if (event.card.name == 'juedou') return true;
                return get.color(event.card) == 'red';
              },
              frequent: true,
              content: function () {
                if (trigger.player.countCards('j')) {
                  player.draw(2);
                } else {
                  player.draw();
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (card.name == 'juedou') return [1, 0.6];
                  },
                  player: function (card, player, target) {
                    if (card.name == 'juedou') return [1, 1];
                  }
                }
              },
            },
            jlsg_weifeng: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.countCards('h') < player.hp && game.countPlayer(p => player.canCompare(p));
              },
              direct: true,
              content: function () {
                'step 0'
                var num = game.me.getCards('h').reduce((a, b) => a < get.number(b) ? get.number(b) : a, 0);
                player.chooseTarget('是否发动【威风】？', function (card, player, target) {
                  return player.canCompare(target);
                }).set("ai", function (target) {
                  var player = _status.event.player;
                  var eff = -get.attitude(player, target) - get.attitude(player, player);
                  var playerExpect = ((_status.event.num - 1) / 13) ** target.countCards('h');
                  eff += 2 * playerExpect * (get.attitude(player, player)) + 2 * (1 - playerExpect) * (get.attitude(player, target)) + 1;
                  return eff;

                }).set("num", num);
                'step 1'
                if (result.bool) {
                  event.target = result.targets[0];
                  player.logSkill('jlsg_weifeng', event.target);
                  player.chooseToCompare(event.target);
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  player.draw(2);
                } else {
                  event.target.draw(2);
                }
              }
            },
            jlsg_xieli: {
              audio: "ext:极略:1",
              zhuSkill: true,
              trigger: { player: 'chooseToCompareBegin' },
              filter: function (event, player) {
                return player.hasZhuSkill('jlsg_xieli') && game.hasPlayer(p => p != player && p.group == 'wu');
              },
              check: function (event, player) {
                return game.hasPlayer(p => p != player && p.group == 'wu' && get.attitude(player, p) > 1);
              },
              content: function () {
                'step 0'
                event.targets = game.filterPlayer(p => p != player && p.group == 'wu');
                event.cards = [];
                'step 1'
                var current = event.targets.shift();
                event.current = current;
                if (!current) {
                  event.goto(3);
                } else if (!current.countCards('h')) {
                  event.redo();
                } else {
                  current.chooseCard('是否帮' + get.translation(player) + '打出一张拼点牌？').ai = function (card) {
                    if (get.attitude(current, player) > 2) {
                      return get.number(card, player) > 8 && 7 - get.value(card);
                    } else if (get.attitude(current, player) < -2 && event.cards.length == 0 &&
                      !event.targets.some(p => p.countCards('h') && get.attitude(p, player) > 2)) {
                      // 使坏
                      return get.number(card, player) < 5 && 7 - get.value(card);
                    }
                    return 0;
                  }
                }
                'step 2'
                if (result.bool) {
                  event.cards = event.cards.concat(result.cards[0]);
                  event.current.lose(result.cards[0], ui.ordering).set('getlx', false);
                  // event.current.$give(1, player);
                  event.current.$throw(1, 1000);
                }
                event.goto(1);
                'step 3'
                if (event.cards.length) {
                  player.chooseButton(['协力', event.cards], true).set('ai', function (button) {
                    return get.number(button.link, player);
                  });
                } else {
                  event.finish();
                }
                'step 4'
                if (!trigger.fixedResult) trigger.fixedResult = {};
                trigger.fixedResult[player.playerid] = result.buttons[0].link;
                // player.gain(result.buttons[0].link);
                // player.discard(event.cards);
              },
            },
            jlsg_jushou: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseJieshuBegin' },
              check: function (event, player) {
                var num = game.filterPlayer(p => p != player && player.inRangeOf(p)).length;
                if (player.isTurnedOver()) return true;
                if (num > 2) return 1;
                return 0;
              },
              content: function () {
                'step 0'
                var num = game.filterPlayer(p => p != player && player.inRangeOf(p)).length;
                player.draw(Math.min(5, num + 1));
                player.turnOver();
              }
            },
            jlsg_yicong: {
              audio: 'yicong',
              inherit: 'yicong'
            },
            jlsg_muma: {
              audio: "ext:极略:1",
              trigger: { global: 'loseAfter' },
              forced: true,
              filter: function (event, player) {
                if (event.player == player) return false;
                if (_status.currentPhase == player) return false;
                for (var i = 0; i < event.cards.length; i++) {
                  if (event.cards[i].original == 'e' && get.position(event.cards[i]) == 'd')
                    return !player.get('e', get.subtype(event.cards[i])[5]) && (get.subtype(event.cards[i]) == 'equip3' || get.subtype(event.cards[i]) == 'equip4');
                }
                return false;
              },
              content: function () {
                for (var i = 0; i < trigger.cards.length; i++) {
                  if (trigger.cards[i].original == 'e' && !player.get('e', get.subtype(trigger.cards[i])[5]) && (get.subtype(trigger.cards[i]) == 'equip3' || get.subtype(trigger.cards[i]) == 'equip4'))
                    player.gain(trigger.cards[i], 'gain');
                }

              },
            },
            jlsg_suiji: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseDiscardBegin' },
              filter: function (event, player) {
                return event.player != player && player.countCards('h');
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseCard('是否对' + get.translation(trigger.player) + '发动【随骥】？', [1, Infinity])
                  .set('ai', function (card) {
                    var cha = trigger.player.countCards('h') - trigger.player.hp;
                    var att = get.attitude(player, trigger.player);
                    if (cha == 0 && ui.selected.cards.length == 0) return att > 3 ? 2 : -1;
                    if (cha >= 1) {
                      if (ui.selected.cards.length == 0) {
                        if (att > 0) return get.value(card);
                        return 7.5 - get.value(card);
                      }
                      if (ui.selected.cards.length >= 1) return -1;
                    }
                    if (trigger.player.countCards('h') <= 2 && get.attitude(player, trigger.player) > 3 && player.countCards('h') > 3) return 6 - get.value(card);
                    return 0;
                  });
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_suiji', trigger.player);
                  trigger.player.gain(result.cards, player, 'giveAuto');
                } else {
                  event.finish();
                }
                'step 2'
                var num = trigger.player.countCards('h') - trigger.player.hp;
                if (num > 0) {
                  var next = trigger.player.chooseCard('交给' + get.translation(player) + get.translation(num) + '张手牌', num, true)
                  next.ai = function (card) {
                    var att = get.attitude(trigger.player, player);
                    if (att > 3) {
                      if (ui.selected.cards.length == 0 && trigger.hp > player.hp) {
                        return get.value(card);
                      }
                    }
                    return 20 - get.value(card);
                  };
                } else {
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  player.gain(result.cards, trigger.player, 'giveAuto');
                }
              }
            },
            jlsg_fengyi: {
              audio: "ext:极略:2",
              trigger: { target: 'useCardToBefore' },
              filter: function (event, player) {
                return get.type(event.card) == 'trick' && event.targets.length == 1;
              },
              frequent: true,
              content: function () {
                player.draw();
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (get.type(card) == 'trick') {
                      if (card.name == 'jiedao') return;
                      if (get.tag(card, 'multitarget')) return;
                      return [0.5, 0.6];
                    }
                  },
                }
              }
            },
            jlsg_yalv: {
              audio: "ext:极略:2",
              trigger: { player: ['damageEnd', 'phaseUseBegin'] },
              frequent: true,
              content: function () {
                'step 0'
                event.cards = get.cards(2);
                game.cardsGotoOrdering(event.cards);
                player.chooseBool(get.value(event.cards[0]) < get.value(event.cards[1]))
                  .set("createDialog", ["雅虑：是否调换牌堆顶两张牌的顺序？", event.cards, 'hidden']);
                // player.chooseCardButton('雅虑:请选择牌堆顶的牌,先选择的在上', 2, event.cards, true);
                'step 1'
                if (!result.bool) {
                  event.cards.reverse();
                }
                for (var card of event.cards) {
                  ui.cardPile.insertBefore(card, ui.cardPile.firstChild);
                }
                player.chooseBool('是否摸一张牌？', () => true).set('frequentSkill', event.name);
                'step 2'
                if (result.bool) {
                  player.draw();
                }
              }
            },
            jlsg_xiemu: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseZhunbeiBegin' },
              direct: true,
              filter: function (event, player) {
                return player.countCards('he');
              },
              content: function () {
                'step 0'
                player.chooseCard(get.prompt(event.name, trigger.player), 'he').ai = function (card) {
                  if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('lebu')) return get.suit(card) == 'heart';
                  if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('bingliang')) return get.suit(card) == 'club';
                  if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('shandian')) return (get.suit(card) != 'spade' || (card.number < 2 || card.number > 9));
                  if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('lebu')) return get.suit(card) != 'heart';
                  if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('bingliang')) return get.suit(card) != 'club';
                  if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('shandian')) return (get.suit(card) == 'spade' && card.number >= 2 && card.number <= 9);
                  if (trigger.player == player) return 10;
                  return 0;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_xiemu', trigger.player);
                  trigger.player.addTempSkill('jlsg_xiemu3');
                  player.lose(result.cards, ui.cardPile, 'insert');
                  game.log(player, '将一张牌置于牌堆顶');
                  player.$throw(1, 1000);
                }
              },
              group: 'jlsg_xiemu2',
            },
            jlsg_xiemu2: {
              trigger: { global: 'phaseJieshuBegin' },
              audio: "ext:极略:1",
              logTarget: 'player',
              prompt2: function (event, player) {
                if (player == event.player) {
                  return "摸一张牌";
                } else {
                  return `令${get.translation(event.player)}摸一张牌`;
                }
              },
              frequent: function (event, player) {
                return event.player == player;
              },
              filter: function (event, player) {
                return event.player.hasSkill('jlsg_xiemu3');
              },
              check: function (event, player) {
                if (get.attitude(player, event.player) > 0) return 1;
                return 0;
              },
              content: function () {
                // player.logSkill('jlsg_xiemu', trigger.player);
                trigger.player.draw();
              },
            },
            jlsg_xiemu3: {},
            jlsg_zhejie: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseDiscardEnd' },
              filter: function (event, player) {
                return event.player != player && player.countCards('h') > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                var next = player.chooseToDiscard('是否发动对' + get.translation(trigger.player) + '【折节】？');
                next.ai = function (card) {
                  if (get.attitude(player, trigger.player) < 0 && trigger.player.countCards('he')) return 5.5 - get.value(card);
                  return 0;
                };
                next.logSkill = ['jlsg_zhejie', trigger.player];
                'step 1'
                if (result.bool && trigger.player.countCards('he') > 0) {
                  trigger.player.chooseToDiscard('he', true).set('ai', function (card) {
                    var att = get.attitude(_status.event.player, _status.event.target)
                      / get.attitude(_status.event.player, _status.event.player);
                    var eff = -get.value(card);
                    if (get.type(card) == 'equip') {
                      eff *= (1 - att);
                    }
                    return eff;
                  }).set('target', player);
                } else {
                  event.finish();
                }
                'step 2'
                if (get.type(result.cards[0]) == 'equip') {
                  if (trigger.player.countDiscardableCards(trigger.player, 'he', c => get.type(c) != 'equip') &&
                    trigger.player.ai.shown < player.ai.shown) {
                    var attSum = Math.sign(get.attitude(trigger.player, player)) + Math.sign(get.attitude(player, trigger.player));
                    if (attSum > 0) {
                      trigger.player.addExpose(0.1);
                    }
                    if (attSum < 0) {
                      trigger.player.addExpose(-0.1);
                    }
                  }
                  event.card = result.cards[0];
                  player.chooseTarget('选择一名目标获得' + get.translation(event.card), function (card, player, target) {
                    return trigger.player != target;
                  }).ai = function (target) {
                    if (get.attitude(player, target) <= 0) return -5;
                    return 6 - target.countCards('e');
                  }
                } else {
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  result.targets[0].gain(event.card, 'gain2');
                }
              },
              ai: {
                expose: 0.3,
              }
            },
            jlsg_fengya: {
              audio: "ext:极略:1",
              trigger: { player: 'damageBegin3' },
              frequent: true,
              filter: function (event) {
                return event.source != undefined;
              },
              check: function () {
                return 1;
              },
              content: function () {
                "step 0"
                player.draw();
                trigger.source.chooseBool('是否摸一张牌并令此伤害-1?').ai = function () {
                  if (get.attitude(trigger.source, player) == 0 && trigger.num <= 1) return 2;
                  return get.attitude(trigger.source, player) > 0;
                }
                "step 1"
                if (result.bool) {
                  trigger.source.draw();
                  trigger.num--;
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                effect: {
                  target: function (card, player, target) {
                    if (get.attitude(target, player) < 0) return;
                    if (get.tag(card, 'damage')) {
                      return [1, 0.3, 1, 0.9];
                    }
                  },
                }
              }
            },
            jlsg_yijian: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseUseBefore' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget('是否发动【义谏】？', function (card, player, target) {
                  return player != target;
                }).ai = function (target) {
                  var hasTrick = player.hasCard(function (card) {
                    return ['trick'].includes(get.type(card));
                  }, 'h');
                  if (get.attitude(player, target) <= 0) return 0;
                  var result = Math.max(1, 5 - target.countCards('h'));
                  if (player.isHealthy()) {
                    if (!hasTrick) {
                      if (player.hp >= player.countCards('h')) {
                        return player.hasCard(function (card) {
                          return get.tag(card, 'damage')
                        }) ? 0 : result;
                      } else {
                        return player.hasCard(function (card) {
                          return get.tag(card, 'damage') && card.name != 'sha';
                        }) ? 0 : result;
                      }
                    }
                  } else {
                    var compare = target.countCards('h') + 1 >= player.countCards('h');
                    if (!hasTrick && player.countCards('h') < player.hp) return compare ? 10 : result;
                    if (player.hp <= 2 && compare && ((player.countCards('h') >= 2 && player.countCards('h', 'sha') <= 1) || player.countCards('h') < 2)) return 10;
                    return 0;
                  }
                }
                'step 1'
                if (result.bool) {
                  event.target = result.targets[0];
                  trigger.cancel();
                  player.logSkill('jlsg_yijian', result.targets[0]);
                  result.targets[0].draw();
                } else {
                  event.finish();
                }
                'step 2'
                if (event.target && event.target.num('h') >= player.countCards('h')) {
                  player.recover();
                }
              }
            },
            jlsg_feijun: {
              audio: "ext:极略:2",
              popup: false,
              trigger: { player: 'phaseUseBegin' },
              forced: true,
              content: function () {
                if (player.countCards('h') >= player.hp) {
                  player.logSkill('jlsg_feijun1');
                  player.storage.jlsg_feijun = player.hp;
                  player.addTempSkill('jlsg_feijun_more');
                } else {
                  player.logSkill('jlsg_feijun2');
                  player.addTempSkill('jlsg_feijun_less');
                }
              },
              subSkill: {
                more: {
                  mod: {
                    attackRange: function (player, num) {
                      return num + player.storage.jlsg_feijun;
                    },
                    cardUsable: function (card, player, num) {
                      if (card.name == 'sha') return num + 1;
                    }
                  }
                },
                less: {
                  mod: {
                    cardEnabled: function (card) {
                      if (card.name == 'sha') return false
                    }
                  }
                }
              }
            },
            jlsg_feijun1: {
              inherit: 'jlsg_feijun',
              sub: true,
              audio: 'ext:极略:true',
            },
            jlsg_feijun2: {
              inherit: 'jlsg_feijun',
              sub: true,
              audio: 'ext:极略:true',
            },
            jlsg_muniu: {
              audio: "ext:极略:2",
              trigger: {
                global: ['equipAfter', 'addJudgeAfter', 'loseAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (_status.currentPhase != player) return false;
                return game.hasPlayer(p => {
                  var evt = event.getl(p);
                  return evt && evt.es && evt.es.length;
                });
              },
              direct: true,
              content: function () {
                'step 0'
                event.num = game.filterPlayer(p => {
                  var evt = trigger.getl(p);
                  return evt && evt.es && evt.es.length;
                }).length;
                'step 1'
                if (!event.num) {
                  event.finish();
                  return;
                }
                --event.num;
                player.chooseTarget(get.prompt2('jlsg_muniu')).ai = function (target) {
                  var att = get.attitude(player, target);
                  if (target.countCards('h')) {
                    att = Math.max(att, -0.8 * get.attitude(player, target));
                  }
                  return att;
                }
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0];
                player.logSkill('jlsg_muniu', event.target);
                if (!event.target.countDiscardableCards(player, 'h')) {
                  event.target.draw();
                  event.finish();
                } else {
                  player.discardPlayerCard(event.target, 'h').ai = function (button) {
                    if (get.attitude(player, event.target) > 0) return false;
                    return get.value(button.link);
                  }
                }
                'step 3'
                if (!result.bool) {
                  event.target.draw();
                }
                event.goto(1);
              },
              group: ['jlsg_muniu2']
            },
            jlsg_muniu2: {
              trigger: { global: 'equipEnd' },
              filter: function (event, player) {
                if (_status.currentPhase != player) return false;
                return true;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2('jlsg_muniu')).ai = function (target) {
                  var att = get.attitude(player, target);
                  if (target.countCards('h')) {
                    att = Math.max(att, -0.8 * get.attitude(player, target));
                  }
                  return att;
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0];
                player.logSkill('jlsg_muniu', event.target);
                if (!event.target.countDiscardableCards(player, 'h')) {
                  event.target.draw();
                  event.finish();
                } else {
                  player.discardPlayerCard(event.target, 'h').ai = function (button) {
                    if (get.attitude(player, event.target) > 0) return false;
                    return get.value(button.link);
                  }
                }
                'step 2'
                if (!result.bool) {
                  event.target.draw();
                }
              },
            },
            jlsg_liuma: {
              audio: "ext:极略:1",
              usable: 1,
              enable: 'phaseUse',
              filterCard: function (card) {
                return get.type(card) == 'basic';
              },
              filterTarget: function (card, player, target) {
                return target != player && target.countCards('e');
              },
              selectTarget: [1, 2],
              content: function () {
                'step 0'
                if (targets.length) {
                  event.target = targets.shift();
                } else {
                  event.finish();
                }
                'step 1'
                event.target.chooseCardTarget({
                  prompt: '选择一名角色将你的一张装备牌交给该角色,或令' + get.translation(player) + '获得你一张手牌',
                  filterCard: true,
                  position: 'e',
                  filterTarget: function (card, player, target) {
                    return player != target;
                  },
                  ai1: function (card) {
                    return 1;
                  },
                  ai2: function (target) {
                    return get.attitude(event.target, target) > 0;
                  },
                });
                'step 2'
                if (result.bool) {
                  event.target.line(result.targets, 'green');
                  result.targets[0].gain(result.cards, event.target, 'giveAuto');
                  event.goto(0);
                } else {
                  player.gainPlayerCard('h', event.target);
                }
              },
              ai: {
                order: 6,
                result: {
                  player: 1,
                  target: -1,
                }
              }
            },
            jlsg_baozheng: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              priority: 10,
              filterTarget: function (card, player, target) {
                return target.countCards('he') > 0;
              },
              content: function () {
                'step 0'
                event.targets = game.filterPlayer(p => p != player && p.countCards('he'));
                event.targets.sortBySeat();
                'step 1'
                if (!event.targets.length) {
                  event.finish();
                  return;
                }
                event.target = event.targets.shift();
                if (event.target.countCards('he') == 1) {
                  event.target.give(event.target.getCards('he'), player);
                  event.redo();
                  return;
                }
                var canDiscard = event.target.countDiscardableCards(event.target, 'he') >= 2;
                if (!canDiscard) {
                  event.target.chooseCard('he', true, '暴征：将一张牌交给' + get.translation(player));
                } else {
                  event.target.chooseCard('he', [1, 2], true, `暴征：将一张牌交给${get.translation(player)}<br>或者选择两张弃置，然后对其造成一点伤害`,
                    function (card, player) {
                      return ui.selected.cards.length
                        ? [card, ...ui.selected.cards].every(c => lib.filter.cardDiscardable(c, player))
                        : true
                    },
                    function (card, cards) {
                      var evt = _status.event.getParent();
                      if (!ui.selected.cards.length) return -get.value(card);
                      if (get.attitude(evt.target, evt.player) < 0) return 7 - get.value(card) + get.value(ui.selected.cards[0]);
                      else return -1;
                    })
                    .set('complexCard', true);
                }
                'step 2'
                if (result.bool) {
                  if (result.cards.length == 1) {
                    event.target.give(result.cards, player);
                  } else {
                    event.target.discard(result.cards);
                    if (target.ai.shown < player.ai.shown) {
                      target.addExpose(0.1);
                    }
                    player.damage(event.target);
                  }
                }
                event.goto(1);
              },
              contentBackup: function () {
                "step 0"
                var targets = game.players.slice(0);
                targets.remove(player);
                targets.sort(lib.sort.seat);
                event.targets = targets;
                event.num = 0;
                "step 1"
                if (event.num < event.targets.length) {
                  event.target = event.targets[event.num];
                  if (event.target.countDiscardableCards(event.target, 'he') >= 2) {
                    event.target.chooseCard('交给' + get.translation(player) + '一张牌，或弃置两张牌对其造成1点伤害', 'he').ai = function (card) {
                      if (get.attitude(event.target, player) > 0) return 10 - get.value(card);
                      return 0;
                    }
                  } else if (event.target.countCards('h') == 1) {
                    event.target.chooseCard('交给' + get.translation(player) + '一张牌', 'he', true);
                  } else {
                    event.num++;
                    event.redo();
                  }

                } else {
                  event.finish();
                }
                "step 2"
                if (result.bool) {
                  player.gain(result.cards[0]);
                  event.target.$give(1, player);
                  event.num++;
                  event.goto(1);
                } else if (event.target.countDiscardableCards(event.target, 'he') >= 2) {
                  event.target.chooseToDiscard('弃置两张牌对' + get.translation(player) + '造成1点伤害', 2, 'he', true);
                  event.target.line(player, 'fire');
                  player.damage(event.target);
                  event.num++;
                  event.goto(1);
                }
              }
            },
            jlsg_lingnu: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseEnd' },
              forced: true,
              priority: 9,
              filter: function (event, player) {
                return player.storage.jlsg_lingnu >= 2;
              },
              content: function () {
                "step 0"
                player.loseMaxHp();
                var targets = game.players.slice(0);
                targets.remove(player);
                targets.sort(lib.sort.seat);
                event.targets = targets;
                event.num = 0;
                "step 1"
                if (num < event.targets.length) {
                  if (event.targets[num].num('hej')) {
                    player.gainPlayerCard(event.targets[num], 'hej', true);
                  }
                  event.num++;
                  event.redo();
                }
              },
              group: ['jlsg_lingnu_getStat', 'jlsg_lingnu_init'],
              subSkill: {
                getStat: {
                  trigger: { player: 'damageEnd' },
                  forced: true,
                  popup: false,
                  silent: true,
                  content: function () {
                    player.storage.jlsg_lingnu += trigger.num;
                  }
                },
                init: {
                  trigger: { player: 'phaseBegin' },
                  forced: true,
                  popup: false,
                  silent: true,
                  content: function () {
                    player.storage.jlsg_lingnu = 0;
                  }
                }
              }
            },
            jlsg_zhongyong: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              check: function (event, player) {
                return (!player.hasJudge('lebu') || !player.hasJudge('bingliang')) && (player.hp >= 2 || player.hasCard('tao', 'h')) &&
                  game.hasPlayer(function (cur) {
                    return get.attitude(player, cur) != 0;
                  });
              },
              content: function () {
                player.loseHp();
                player.addTempSkill('jlsg_zhongyong_phaseDrawBegin', 'phaseAfter');
                player.addTempSkill('jlsg_zhongyong_distance', 'phaseAfter');
                player.addTempSkill('jlsg_zhongyong_giveCard', 'phaseAfter');
              },
              init: function (player) {
                player.storage.jlsg_zhongyong_discard = [];
              },
              subSkill: {
                phaseDrawBegin: {
                  trigger: { player: 'phaseDrawBegin2' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return !event.numFixed;
                  },
                  content: function () {
                    trigger.num += player.getDamagedHp();
                  }
                },
                distance: {
                  mod: {
                    globalFrom: function (from, to, distance) {
                      return -Infinity;
                    }
                  }
                },
                giveCard: {
                  trigger: { player: 'phaseDiscardAfter' },
                  filter: function (event, player) {
                    return player.getHistory('lose', function (evt) {
                      return evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.cards.filterInD('d').length > 0;
                    }).length != 0;
                  },
                  direct: true,
                  content: function () {
                    'step 0'
                    event.cards = [];
                    event.events = player.getHistory('lose', function (evt) {
                      return evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger && evt.cards.filterInD('d').length > 0;
                    });
                    event.events.forEach(evt => event.cards.addArray(evt.cards.filterInD('d')));
                    player.chooseTarget('是否发动【忠勇】让一名角色获得你本阶段内的弃牌？', function (card, player, target) {
                      return player != target;
                    }).ai = function (target) {
                      return get.attitude(player, target) > 0;
                    }
                    'step 1'
                    if (result.bool) {
                      player.logSkill('jlsg_zhongyong', result.targets[0]);
                      result.targets[0].gain(event.cards, 'gain2');
                    }
                  }
                }
              }
            },
            jlsg_bozhan: {
              audio: "ext:极略:true",
              trigger: { player: 'shaMiss', target: 'shaMiss' },
              forced: true,
              content: function () {
                trigger.target.chooseToUse('是否对' + get.translation(trigger.player) + '使用一张【杀】？', { name: 'sha' }, -1, trigger.player);
              }
            },
            jlsg_qingxi: {
              shaRelated: true,
              audio: "ext:极略:true",
              trigger: { player: 'shaBegin' },
              forced: true,
              filter: function (event, player) {
                return player.countCards('e') < event.target.countCards('e');
              },
              content: function () {
                trigger.directHit = true;
              }
            },
            jlsg_danshou: {
              audio: "ext:极略:1",
              trigger: {
                target: "useCardToTargeted",
              },
              filter: function (event, player) {
                return event.card.name == 'sha' && player.canCompare(event.player);
              },
              forced: true,
              content: function () {
                'step 0'
                player.chooseToCompare(trigger.player);
                'step 1'
                if (result.bool) {
                  player.draw(2);
                  player.discardPlayerCard(trigger.player, true);
                } else {
                  // trigger.directHit = true;
                  trigger.getParent().directHit.add(player);
                  // player.draw();
                }
              },
            },
            jlsg_yonglie: {
              audio: "ext:极略:1",
              trigger: { global: 'damageEnd' },
              filter: function (event, player) {
                return event.card && event.card.name == 'sha' && event.notLink() && event.player.inRangeOf(player) && event.source && event.source.isAlive();
              },
              check: function (event, player) {
                if (player.hp > 2) return get.attitude(player, event.source) < 0;
                return 0;
              },
              prompt: function (event, player) {
                var str = '';
                str += '是否对' + get.translation(event.source) + '发动【勇烈】'
                return str;
              },
              content: function () {
                player.loseHp();
                player.line(trigger.source);
                trigger.source.damage();
              },
            },
            jlsg_hengshi: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDiscardBegin' },
              frequent: true,
              filter: function (event, player) {
                return player.countCards('h');
              },
              check: () => true,
              content: function () {
                player.draw(player.countCards('h'));
              },
              ai: {
                effect: {
                  player: function (card, player, target) {
                    var hs = player.countCards('h');
                    if (player.hasSkill('jlsg_zhijiao')) {
                      if (game.hasPlayer(function (cur) {
                        return get.attitude(player, cur) > 3 && !cur.hasJudge('lebu') && cur != player;
                      })) {
                        if (hs >= 5 && !['wuzhong', 'shunshou', 'wugu'].includes(card.name)) return 'zeroplayertarget';
                      }
                    }
                  },
                }
              }
            },
            jlsg_zhijiao: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseJieshuBegin' },
              unique: true,
              limited: true,
              direct: true,
              init: function (player) {
                player.storage.jlsg_zhijiao = false;
                player.storage.jlsg_zhijiao2 = [];
              },
              filter: function (event, player) {
                return !player.storage.jlsg_zhijiao && player.storage.jlsg_zhijiao2.length;
              },
              mark: true,
              intro: {
                content: 'limited'
              },
              content: function () {
                'step 0'
                player.chooseTarget('是否发动【至交】？', function (card, player, target) {
                  return player != target;
                }).ai = function (target) {
                  var cardnum = player.storage.jlsg_zhijiao2.length;
                  var att = get.attitude(player, target);
                  if (att <= 0) return 0;
                  var result = Math.max(9 - target.countCards('he'), 1);
                  if (target.hasJudge('lebu')) result -= 2;
                  result = Math.max(1, result);
                  result += att;
                  if (cardnum >= 5) return result;
                  if (player.hp == 2 && cardnum >= 4) return result;
                  if (player.hp == 1) return result;
                  return 0;
                }
                'step 1'
                if (result.bool) {
                  player.storage.jlsg_zhijiao = true;
                  player.logSkill('jlsg_zhijiao', result.targets[0]);
                  result.targets[0].gain(player.storage.jlsg_zhijiao2, 'gain2');
                  player.awakenSkill('jlsg_zhijiao');
                }
                player.storage.jlsg_zhijiao2 = [];
              },
              group: ['jlsg_zhijiao2'],
              ai: {
                order: function (skill, player) {
                  if (!player.hasSkill('jlsg_zhijiao')) {
                    return;
                  }
                  if (player.hp < player.maxHp && player.countCards('h') > 1) {
                    return 10;
                  }
                  return 4;
                },
                result: {
                  target: function (player, target) {
                    if (!player.hasSkill('jlsg_zhijiao')) {
                      return;
                    }
                    if (target.hasSkillTag('nogain')) return 0;
                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                      if (target.hasSkillTag('nodu')) return 0;
                      return -10;
                    }
                    if (target.hasJudge('lebu')) return 0;
                    var nh = target.countCards('h');
                    var np = player.countCards('h');
                    if (player.hp == player.maxHp || player.storage.rerende < 0 || player.countCards('h') <= 1) {
                      if (nh >= np - 1 && np <= player.hp && !target.hasSkill('haoshi')) return 0;
                    }
                    return Math.max(1, 5 - nh);
                  },
                },
                effect: {
                  target: function (card, player, target) {
                    if (!player.hasSkill('jlsg_zhijiao')) {
                      return;
                    }
                    if (player == target && get.type(card) == 'equip') {
                      if (target.countCards('e', { subtype: get.subtype(card) }) > 0) {
                        if (game.hasPlayer(function (current) {
                          return current != target && get.attitude(target, current) > 3;
                        })) {
                          return 0;
                        }
                      }
                    }
                  },
                },
                threaten: 0.8,
              },
            },
            jlsg_zhijiao2: {
              trigger: { player: 'discardAfter' },
              forced: true,
              popup: false,
              priority: -1,
              filter: function (event, player) {
                if (player.storage.jlsg_zhijiao) return false;
                if (_status.currentPhase != player) return false;
                for (var i = 0; i < event.cards.length; i++) {
                  if (get.position(event.cards[i]) == 'd') {
                    return true;
                  }
                }
                return false;
              },
              content: function () {
                for (var i = 0; i < trigger.cards.length; i++) {
                  if (get.position(trigger.cards[i]) == 'd') {
                    player.storage.jlsg_zhijiao2 = player.storage.jlsg_zhijiao2.concat(trigger.cards[i]);
                  }
                }
                player.syncStorage('jlsg_zhijiao2');
                player.markSkill('jlsg_zhijiao2');
              },
              intro: {
                content: 'cards'
              }
            },
            jlsg_jiwux: {
              audio: "ext:极略:3",
              trigger: { player: 'phaseUseBegin' },
              shaRelated: true,
              filter: function (event, player) {
                return player.countCards('h', 'sha') > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseCard(get.prompt('jlsg_jiwux'), function (card, player, target) {
                  return card.name == 'sha' && !(card.isJiwu && card.isJiwu[1] && card.isJiwu[2] && card.isJiwu[3]);
                }).ai = function (card) {
                  var value = 0;
                  if (card.nature) {
                    if (card.nature == 'fire') value += 0.004;
                    if (card.nature == 'thunder') value += 0.003;
                  }
                  switch (get.suit(card)) {
                    case 'heart':
                      value += 0.004;
                      break;
                    case 'diamond':
                      value += 0.003;
                      break;
                    case 'spade':
                      value += 0.002;
                      break;
                    case 'club':
                      value += 0.001;
                      break;
                    default:
                      break;
                  }
                  value = value + card.number / 1000;
                  return value;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_jiwux');
                  event.card = result.cards[0];
                  player.showCards(event.card);
                  let paint = function (card, paintType, toggle = true) {
                    if (!document.body.contains(card.parentElement)) {
                      return;
                    }
                    var target = card.querySelector(`#Jiwu${paintType}`);
                    if (target) {
                      if (!toggle) {
                        card.removeChild(target);
                      }
                      return;
                    }
                    let div = document.createElement("div");
                    card.appendChild(div);
                    div.style.minWidth = "33%";
                    div.style.top = "4px";
                    div.style.height = "4px";
                    // div.style.opacity = "0.5";
                    switch (paintType) {
                      case 1:
                        div.setAttribute("id", "Jiwu1");
                        div.style.left = "0%";
                        div.style.backgroundColor = "rgba(255,0,0,0.6)";
                        break;
                      case 2:
                        div.setAttribute("id", "Jiwu2");
                        div.style.left = "33%";
                        div.style.backgroundColor = "rgba(0,255,0,0.6)";
                        break;
                      case 3:
                        div.setAttribute("id", "Jiwu3");
                        div.style.left = "67%";
                        div.style.backgroundColor = "rgba(0,0,255,0.6)";
                        break;
                      default:
                        break;
                    }
                  };
                  if (!event.card.isJiwu) event.card.isJiwu = {
                    // _paint(paintType, toggle) {
                    //   paint(event.card, paintType, toggle);
                    // },
                    _card: event.card,
                    get 1() { return this._1; },
                    get 2() { return this._2; },
                    get 3() { return this._3; },
                    set 1(value) {
                      if (value == this._1) return;
                      this._1 = !!value;
                      game.broadcastAll(paint, this._card, 1, !!value);
                    },
                    set 2(value) {
                      if (value == this._2) return;
                      this._2 = !!value;
                      game.broadcastAll(paint, this._card, 2, !!value);
                    },
                    set 3(value) {
                      if (value == this._3) return;
                      this._3 = !!value;
                      game.broadcastAll(paint, this._card, 3, !!value);
                    },
                    _1: false,
                    _2: false,
                    _3: false,
                  };
                  event._options = ['此【杀】不计入次数限制',
                    '此【杀】无距离限制,且可以额外指定1个目标',
                    '此【杀】的伤害值+1'
                  ];
                  const options = [1, 2, 3].filter(key => !event.card.isJiwu[key])
                    .map(key => event._options[key - 1]);
                  player.chooseControl(options, 'dialogcontrol', function () {
                    return Math.floor(Math.random() * options.length);
                  })//.set('prompt', prompt);
                } else {
                  event.finish();
                }
                'step 2'

                if (result.control == event._options[0]) {
                  event.card.isJiwu[1] = true;
                  game.log(player, '所展示的', event.card, '不计入次数限制');
                  // game.broadcastAll(paint, event.card, 0, true);
                } else if (result.control == event._options[1]) {
                  event.card.isJiwu[2] = true;
                  game.log(player, '所展示的', event.card, '无距离限制，且可以额外指定1个目标');
                  // game.broadcastAll(paint, event.card, 1, true);
                } else if (result.control == event._options[2]) {
                  event.card.isJiwu[3] = true;
                  game.log(player, '所展示的', event.card, '伤害值+1');
                  // game.broadcastAll(paint, event.card, 2, true);
                }
              },
              group: ['jlsg_jiwux_one', 'jlsg_jiwux_two', 'jlsg_jiwux_three', 'jlsg_jiwux_clear'],
              subSkill: {
                one: {
                  mod: {
                    cardUsable: function (card, player) {
                      var criterion = card.name == "sha" && (card.isJiwu && card.isJiwu[1] ||
                        card.cards && card.cards.length == 2 && card.cards[0].isJiwu && card.cards[0].isJiwu[1]);
                      if (criterion) {
                        return Infinity;
                      }
                    }
                  },
                  trigger: { player: 'useCard' },
                  filter: function (event, player) {
                    // return event.card && event.card.isJiwu && event.card.isJiwu[1];
                    if (!event.card) return false;
                    return event.card.name == "sha" && (event.card.isJiwu && event.card.isJiwu[1] ||
                      event.card.cards && event.card.cards.length == 1 && event.card.cards[0].isJiwu && event.card.cards[0].isJiwu[1]);
                  },
                  forced: true,
                  content: function () {
                    if (player.stat[player.stat.length - 1].card.sha > 0) {
                      player.stat[player.stat.length - 1].card.sha--;
                    }
                  }
                },
                two: {
                  mod: {
                    targetInRange: function (card, player) {
                      var criterion = card.name == "sha" && (card.isJiwu && card.isJiwu[2] ||
                        card.cards && card.cards.length == 1 && card.cards[0].isJiwu && card.cards[0].isJiwu[2]);
                      if (criterion) return true;
                    },
                    selectTarget: function (card, player, range) {
                      var criterion = card.name == "sha" && (card.isJiwu && card.isJiwu[2] ||
                        card.cards && card.cards.length == 1 && card.cards[0].isJiwu && card.cards[0].isJiwu[2]);
                      if (criterion && range[1] != -1) range[1]++;
                    }
                  }
                },
                three: {
                  trigger: { source: 'damageBegin' },
                  forced: true,
                  filter: function (event, player) {
                    if (!event.card) return false;
                    var criterion = event.card.name == "sha" && (event.card.isJiwu && event.card.isJiwu[3] ||
                      event.card.cards && event.card.cards.length == 1 && event.card.cards[0].isJiwu && event.card.cards[0].isJiwu[3]);
                    return criterion && event.notLink();
                  },
                  content: function () {
                    trigger.num++;
                  }
                },
                clear: {
                  // FIXME: missing clear logic
                  trigger: { player: ['useCardAfter', 'discardAfter'] },
                  silent: true,
                  filter: function (event, player) {
                    var cards = event.cards;
                    if (!cards) cards = event.card && event.card.cards;
                    return cards;// && cards.length == 1 && cards[0].isJiwu;
                  },
                  forced: true,
                  popup: false,
                  content: function () {
                    if (trigger.card) {
                      if (trigger.card.isJiwu) {
                        trigger.card.isJiwu._card = trigger.card;
                        trigger.card.isJiwu[1] = false;
                        trigger.card.isJiwu[2] = false;
                        trigger.card.isJiwu[3] = false;
                        delete trigger.card.isJiwu;
                      }
                      if (trigger.card.cards) {
                        for (var card of trigger.card.cards) {
                          if (card.isJiwu) {
                            card.isJiwu._card = card;
                            card.isJiwu[1] = false;
                            card.isJiwu[2] = false;
                            card.isJiwu[3] = false;
                            delete card.isJiwu;
                          }
                        }
                      }
                    } else if (trigger.cards) {
                      for (var card of trigger.cards) {
                        if (card.isJiwu) {
                          card.isJiwu._card = card;
                          card.isJiwu[1] = false;
                          card.isJiwu[2] = false;
                          card.isJiwu[3] = false;
                          delete card.isJiwu;
                        }
                      }
                    }
                  }
                }
              },
              // ai:{
              // effect:{
              // player:function(card,player,target){

              // }
              // }
              // }
            },
            jlsg_daoshi: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseJieshuBegin' },
              filter: function (event, player) {
                return event.player.countCards('e') > 0 && (player == event.player || player.hasSkill("jlsg_daoshi"));
              },
              direct: true,
              content: function () {
                'step 0'
                var prompt = (trigger.player == player) ? "是否发动【刀侍】摸一张牌?" :
                  `###是否对${get.translation(event.target)}发动【刀侍】？###摸一张牌并将装备区的一张牌交给${get.translation(player)}`;
                trigger.player.chooseBool(prompt).ai = function () {
                  if (trigger.player == player) return true;
                  if (get.attitude(trigger.player, player) > 0 && player.countCards('e') < 2)
                    return 1;
                  return 0;
                }
                'step 1'
                if (result.bool) {
                  trigger.player.logSkill('jlsg_daoshi', player);
                  trigger.player.draw();
                  if (trigger.player != player) {
                    trigger.player.chooseCardButton('选择一张牌交给' + get.translation(player), trigger.player.get('e'), true);
                  } else {
                    event.finish();
                  }
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  player.gain(result.links[0], trigger.player, 'giveAuto');
                }
              }
            },
            jlsg_lirang: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseZhunbeiEnd' },
              filter: function (event, player) {
                if (event.player != player && !player.hasSkill('jlsg_lirang')) return false;
                if (game.online) {
                  return player.getExpansions('jlsg_lirang').length < 4 && event.player.countCards('h');
                }
                var liSuits = player.getExpansions('jlsg_lirang').map(c => get.suit(c));
                return event.player.countCards('h', c => !liSuits.includes(get.suit(c)));
              },
              direct: true,
              content: function () {
                'step 0'
                var liSuits = player.getExpansions('jlsg_lirang').map(c => get.suit(c));
                var next = trigger.player.chooseCard(get.prompt('jlsg_lirang', player, trigger.player));
                next.filterCard = function (card) {
                  return !liSuits.includes(get.suit(card));
                }
                next.ai = function (card) {
                  if (get.attitude(trigger.player, player) > 0) {
                    if (jlsg.needKongcheng(trigger.player)) return 20 - get.value(card);
                    return 7 - get.value(card);
                  }
                  if (get.attitude(trigger.player, player) <= 0) {
                    return card.name == 'du';
                  }
                  return false;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_lirang', trigger.player);
                  player.addToExpansion(result.cards, trigger.player, 'give').gaintag.add(event.name);
                  trigger.player.draw();
                }
              },
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              group: ['jlsg_lirang2'],
              ai: {
                threaten: 3,
              }
            },
            jlsg_lirang2: {
              enable: 'chooseToUse',
              filter: function (event, player) {
                return player.getExpansions('jlsg_lirang').length >= 2 && event.filterCard({ name: 'tao' }, player, event);
              },
              chooseButton: {
                dialog: function (event, player) {
                  return ui.create.dialog('礼让', player.getExpansions('jlsg_lirang'), 'hidden');
                },
                select: 2,
                backup: function (links, player) {
                  return {
                    audio: "jlsg_lirang",
                    filterCard: function () { return false },
                    selectCard: -1,
                    viewAs: { name: 'tao', cards: links },
                    cards: links,
                    onuse: function (result, player) {
                      result.cards = lib.skill[result.skill].cards;
                      // player.getExpansions('jlsg_lirang').remove(result.cards);
                      // player.syncStorage('jlsg_lirang');
                      // player.markAuto('jlsg_lirang2')
                      // player.logSkill('jlsg_lirang2',result.targets);
                    }
                  }
                },
              },
              ai: {
                // order:10,
                order: function () {
                  var od = get.order({ name: 'tao' }) + 0.2;
                  // if (event.filterCard({name:'jiu'},_status.event.player,_status.event)) {
                  //   od =Math.max(od, get.order({name:'jiu'})+0.2);
                  // }
                  return od;
                },
                save: true,
                result: {
                  player: function (player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    return 0;
                  },
                }
              }
            },
            jlsg_xianshi: {
              audio: "ext:极略:2",
              trigger: { player: 'damageBegin3' },
              filter: function (event, player) {
                return (event.source != undefined);
              },
              frequent: true,
              content: function () {
                'step 0'
                trigger.source.chooseToDiscard('弃置一张牌并展示所有手牌，或令此伤害-1').ai = function (card) {
                  if (get.attitude(trigger.source, player) < 0) {
                    if (trigger.source.needsToDiscard()) return 7 - get.value(card);
                    return 6 - get.value(card);
                  }
                  return false;
                }
                'step 1'
                if (result.bool) {
                  trigger.source.showHandcards();
                } else {
                  trigger.num--;
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'damage')) {
                      var bs = player.get('h');
                      if (bs.length == 0) return 0;
                      if ((player.hasSkill('jiu') || player.hasSkill('tianxianjiu')) && card.name == 'sha') return;
                      if (player.countCards('h') <= 1) return 0;
                      var n = 0.5;
                      if (player.getCards('h', function (cardx) {
                        var value = 0;
                        var aii = get.info(cardx).ai;
                        if (aii && aii.value) value = aii.value;
                        else if (aii && aii.basic) value = aii.basic.value;
                        return value < 6;
                      }) || player.needsToDiscard()) n = 0;
                      return [1, n];
                    }
                  }
                }
              }
            },
            jlsg_chengxiang: {
              audio: "ext:极略:2",
              inherit: 'chengxiang',
              content: function () {
                "step 0"
                event.cards = get.cards(4);
                game.cardsGotoOrdering(event.cards);
                event.videoId = lib.status.videoId++;
                game.broadcastAll(function (player, id, cards, num) {
                  var str;
                  if (player == game.me && !_status.auto) {
                    str = '称象：选择任意张点数不大于13的牌';
                  }
                  else {
                    str = '称象';
                  }
                  var dialog = ui.create.dialog(str, cards);
                  dialog.videoId = id;
                }, player, event.videoId, event.cards, 13);
                event.time = get.utc();
                game.addVideo('showCards', player, ['称象', get.cardsInfo(event.cards)]);
                game.addVideo('delay', null, 2);
                "step 1"
                var next = player.chooseButton([0, 4]);
                next.set('dialog', event.videoId);
                next.set('filterButton', function (button) {
                  var num = 0
                  for (var i = 0; i < ui.selected.buttons.length; i++) {
                    num += get.number(ui.selected.buttons[i].link);
                  }
                  return (num + get.number(button.link) <= _status.event.maxNum);
                });
                next.set('maxNum', 13);
                next.set('ai', function (button) {
                  return get.value(button.link, _status.event.player);
                });
                "step 2"
                if (result.bool && result.links) {
                  //player.logSkill('chengxiang');
                  var cards2 = [];
                  for (var i = 0; i < result.links.length; i++) {
                    cards2.push(result.links[i]);
                    cards.remove(result.links[i]);
                  }
                  event.cards2 = cards2;
                }
                else {
                  event.finish();
                }
                var time = 1000 - (get.utc() - event.time);
                if (time > 0) {
                  game.delay(0, time);
                }
                "step 3"
                game.broadcastAll('closeDialog', event.videoId);
                var cards2 = event.cards2;
                player.gain(cards2, 'log', 'gain2');
              },
            },
            jlsg_renxin: {
              audio: "ext:极略:2",
              inherit: 'oldrenxin',
              // ai: {
              //   expose: 0.5
              // }
            },
            jlsg_midao: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return target.countCards('h') > player.countCards('h') && player != target;
              },
              filter: function (event, player) {
                for (var i = 0; i < game.players.length; i++)
                  if (game.players[i].num('h') > player.countCards('h')) return true;
                return false;
              },
              selectTarget: -1,
              multitarget: true,
              multiline: true,
              content: function () {
                'step 0'
                if (targets.length) {
                  event.target = targets.shift();
                } else {
                  var maxh = true;
                  for (var i = 0; i < game.players.length; i++) {
                    if (game.players[i].num('h') > player.countCards('h')) {
                      maxh = false;
                    }
                  }
                  if (maxh) {
                    player.loseHp();
                  }
                  event.finish();
                }
                'step 1'
                if (event.target.countCards('h')) {
                  event.target.chooseCard('选择一张手牌交给' + get.translation(player), true).ai = function (card) {
                    return -get.value(card);
                  }
                } else {
                  event.goto(0);
                }
                'step 2'
                if (result.bool) {
                  player.gain(result.cards[0]);
                  target.$give(1, player);
                }
                event.goto(0);
              },
              ai: {
                order: 2,
                result: {
                  player: function (player) {
                    var cangain = 0;
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i].num('h') > player.countCards('h')) cangain++;
                    }
                    var maxh = true;
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i].num('h') - 1 > player.countCards('h') + cangain) {
                        maxh = false;
                      }
                    }
                    if (maxh && cangain > 1 && player.hp > 2) return 1;
                    if (maxh && player.hp == 2) return -2;
                    if (maxh && player.hp == 1 && !player.countCards('h', 'tao')) return -10;
                    if (maxh && cangain <= 1) return -1;
                    if (!maxh) return cangain;
                    return 0;
                  },
                  target: -1,
                }
              }
            },
            jlsg_yishe: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return target.countCards('h') <= player.countCards('h') && player != target;
              },
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              content: function () {
                player.swapHandcards(target);
              },
              ai: {
                order: 1,
                result: {
                  player: function (player, target) {
                    return target.countCards('h') - player.countCards('h');
                  },
                  target: function (player, target) {
                    return player.countCards('h') - target.countCards('h');
                  },
                }
              }
            },
            jlsg_pudu: {
              audio: "ext:极略:1",
              unique: true,
              limited: true,
              enable: 'phaseUse',
              skillAnimation: true,
              animationStr: '普渡',
              animationColor: 'water',
              filterTarget: function (card, player, target) {
                return player != target;
              },
              multitarget: true,
              multiline: true,
              selectTarget: -1,
              content: function () {
                'step 0'
                player.awakenSkill(event.name);
                event.current = player.next;
                event.targets = targets.slice();
                'step 1'
                var target = event.targets.shift();
                if (!target.countCards('h')) {
                  event.redo();
                  return;
                }
                player.gain(target, target.getCards('h'), 'bySelf');
                target.$give(target.num('h'), player);
                game.delayx(0.3);
                if (event.targets.length) {
                  event.redo();
                }
                'step 2'
                var maxh = true;
                if (!player.countCards('h') || !player.isMaxHandcard()) {
                  event.finish();
                  return;
                }
                player.chooseCard('选择一张手牌交给' + get.translation(event.current), true).ai = function (card) {
                  if (get.attitude(player, event.current) > 0)
                    return get.value(card);
                  return -get.value(card);
                }
                'step 3'
                if (result.bool) {
                  // event.current.gain(result.cards[0]);
                  player.$give(1, event.current);
                  event.current.gain(player, result.cards[0], 'bySelf', false);
                  game.delayx(0.3);
                  for (var next = event.current.next; next != event.current; next = next.next) {
                    if (next == player || next.isOut()) {
                      continue;
                    }
                    event.current = next;
                    break;
                  }
                  event.goto(2);
                }

              },
              ai: {
                order: 4.5,
                result: {
                  player: function (player, target) {
                    var num = 0;
                    var list = [];
                    var listnum = 0;
                    for (var i = 0; i < game.players.length - 1; i++) {
                      list.push('0');
                    }
                    for (var i = 0; i < game.players.length; i++) {
                      num += game.players[i].num('h');
                    }
                    var max = function () {
                      for (var i = 0; i < list.length; i++) {
                        if (list[i] > num) return true;
                      }
                      return false;
                    }
                    while (!max()) {
                      num--;
                      list[listnum % (game.players.length - 1)]++;
                      listnum++;
                    }
                    return num - player.countCards('h');
                  },
                  target: function (player, target) {
                    var num = 0;
                    var list = [];
                    var listnum = 0;
                    for (var i = 0; i < game.players.length - 1; i++) {
                      list.push('0');
                    }
                    for (var i = 0; i < game.players.length; i++) {
                      num += game.players[i].num('h');
                    }
                    var max = function () {
                      for (var i = 0; i < list.length; i++) {
                        if (list[i] > num) return true;
                      }
                      return false;
                    }
                    while (!max()) {
                      num--;
                      list[listnum % (game.players.length - 1)]++;
                      listnum++;
                    }
                    for (var i = 0; i < game.players.length; i++) {
                      if (target == game.players[i]) var nu = i;
                    }
                    return list[nu - 1] - target.countCards('h');
                  }
                }
              }
            },
            jlsg_zongqing: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDrawBegin' },
              check: function (event, player) {
                if (player.isDamaged() && player.countCards('h', { color: 'red' })) return 2;
                if (player.countCards('h', 'sha') && !player.countCards('h', 'jiu')) return 1;
                return 0;
              },
              content: function () {
                'step 0'
                player.judge(function (card) {
                  if (get.color(card) == 'red' && player.isDamaged()) return 2;
                  if (get.color(card) == 'red') return 1;
                  if (get.color(card) == 'black' && player.countCards('h', 'sha')) return 1;
                  return 0;
                });
                'step 1'
                player.storage.jlsg_zongqing = result.card;
                player.addSkill('jlsg_zongqing_show');
              },
              subSkill: {
                show: {
                  audio: false,
                  trigger: { player: 'phaseDrawEnd' },
                  forced: true,
                  popup: false,
                  filter: function (event) {
                    // return event.parent.parent.name == 'phaseDraw';
                    return event.cards && event.cards.length;
                  },
                  content: function () {
                    'step 0'
                    event.card = player.storage.jlsg_zongqing;
                    // player.showCards(event.card);
                    player.showCards(trigger.cards);
                    'step 1'
                    var cards = [];
                    if (get.color(event.card) == 'red') {
                      for (var i = 0; i < trigger.cards.length; i++) {
                        if (get.color(trigger.cards[i]) == 'black') {
                          cards.push(trigger.cards[i]);
                        }
                      }
                      if (cards.length) {
                        if (cards.length == 2) {
                          event.cards = cards;
                          player.chooseToDiscard('纵情:选择一张牌弃置', function (card) {
                            return _status.event.getParent().cards.includes(card);
                          }, true).ai = get.disvalue;
                        } else {
                          player.discard(cards);
                        }
                        player.useCard({ name: 'jiu' }, player);
                      }
                    } else { // card color == black
                      for (var i = 0; i < trigger.cards.length; i++) {
                        if (get.color(trigger.cards[i]) == 'red') {
                          cards.push(trigger.cards[i]);
                        }
                      }
                      if (cards.length) {
                        if (cards.length == 2) {
                          event.cards = cards;
                          player.chooseToDiscard('纵情:选择一张牌弃置', function (card) {
                            return _status.event.getParent().cards.includes(card);
                          }, true).ai = get.disvalue;
                        } else {
                          player.discard(cards);
                        }
                        if (player.isDamaged()) {
                          player.useCard({ name: 'tao' }, player);
                        }
                      }
                    }
                    'step 2'
                    player.removeSkill('jlsg_zongqing_show');
                  }
                }
              }
            },
            jlsg_bugua: {
              audio: "ext:极略:1",
              trigger: { global: 'judgeBefore' },
              content: function () {
                'step 0'
                player.showCards(ui.cardPile.firstChild, '牌堆顶的牌');
                event.chosed = false;
                'step 1'
                player.chooseCard('是否将一张手牌置于牌堆顶？').set('ai', function (card) {
                  var trigger = _status.event.getTrigger();
                  var player = _status.event.player;
                  var judging = ui.cardPile.firstChild;
                  var result = trigger.judge(card) - trigger.judge(judging);
                  var attitude = get.attitude(player, trigger.player);
                  if (attitude == 0 || result == 0) return 0;
                  if (attitude > 0) {
                    return result - get.value(card) / 2;
                  } else {
                    return -result - get.value(card) / 2;
                  }
                });
                event.current = player;
                'step 2'
                if (result && result.cards) {
                  event.card = result.cards[0];
                  event.card = result.cards[0];
                  event.current.showCards(event.card, '置于牌堆顶');
                  event.current.lose(event.card, ui.cardPile, 'insert', 'visible');
                  event.current.$throw(1, 1000);
                  game.log(event.current, '将', event.card, '置于牌堆顶');
                } else {
                  if (trigger.player == player) {
                    event.finish();
                  } else if (event.chosed) {
                    event.finish();
                  } else {
                    trigger.player.chooseCard('将一张手牌置于牌堆顶？').set('ai', function (card) {
                      var trigger = _status.event.getTrigger();
                      var player = trigger.player;
                      var judging = ui.cardPile.firstChild;
                      var result = trigger.judge(card) - trigger.judge(judging);
                      var attitude = get.attitude(player, trigger.player);
                      if (attitude == 0 || result == 0) return 0;
                      if (attitude > 0) {
                        return result - get.value(card) / 2;
                      } else {
                        return -result - get.value(card) / 2;
                      }
                      return -get.value(card);
                    });
                    event.chosed = true;
                    event.current = trigger.player;
                    event.goto(2);
                  }
                }
              },
              ai: {
                tag: {
                  rejudge: 1,
                },
              },
              group: ['jlsg_bugua2', 'jlsg_bugua3'],
            },
            jlsg_bugua2: {
              audio: "ext:极略:true",
              trigger: { global: 'judgeAfter' },
              filter: function (event, player) {
                return (get.color(event.result.card) == 'red');
              },
              check: function (event, player) {
                return get.attitude(player, event.player) > 0;
              },
              prompt: function (event, player) {
                var str = '';
                str += '是否对' + get.translation(event.player) + '发动【卜卦】令其摸一张牌';
                return str;
              },
              content: function () {
                trigger.player.draw(true);
              }
            },
            jlsg_bugua3: {
              audio: "ext:极略:true",
              trigger: { global: 'judgeAfter' },
              filter: function (event, player) {
                return (get.color(event.result.card) == 'black') && event.player.countCards('he');
              },
              check: function (event, player) {
                return get.attitude(player, event.player) < 0;
              },
              prompt: function (event, player) {
                var str = '';
                str += '是否对' + get.translation(event.player) + '发动【卜卦】令其弃一张牌';
                return str;
              },
              content: function () {
                trigger.player.chooseToDiscard('he', 1, true);
              }
            },
            jlsg_zhaoxin: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              filter: function (event, player) {
                if (game.online) {
                  return true;
                }
                var suits = ['heart', 'club', 'spade', 'diamond'];
                var cards = player.get('h');
                for (var i = 0; i < cards.length; i++) {
                  if (suits.includes(get.suit(cards[i])))
                    suits.remove(get.suit(cards[i]));
                }
                return suits.length > 0;
              },
              check: function (event, player) {
                return true;
              },
              // frequent: true,
              content: function () {
                player.showHandcards();
                var suits = ['heart', 'club', 'spade', 'diamond'];
                event.cards = player.get('h');
                for (var i = 0; i < event.cards.length; i++) {
                  if (suits.includes(get.suit(event.cards[i])))
                    suits.remove(get.suit(event.cards[i]));
                }
                if (suits.length)
                  player.draw(suits.length);
              }
            },
            jlsg_zhihe: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              filterCard: function (card, target, player) {
                for (var i = 0; i < ui.selected.cards.length; i++) {
                  if (get.suit(card) == get.suit(ui.selected.cards[i])) return false;
                }
                return true;
              },
              check: function (card) {
                return 10 - get.value(card);
              },
              discard: false,
              lose: false,
              prompt: '请选择你想要保留的卡牌',
              selectCard: function () {
                var cards = _status.event.player.get('h');
                var suits = [];
                for (var i = 0; i < cards.length; i++) {
                  if (!suits.includes(get.suit(cards[i])))
                    suits.push(get.suit(cards[i]));
                }
                return suits.length;
              },
              content: function () {
                'step 0'
                player.showHandcards();
                var he = [];
                var hs = player.get('h');
                he = he.concat(hs);
                for (var i = 0; i < cards.length; i++) {
                  he.remove(cards[i]);
                }
                player.discard(he);
                'step 1'
                player.draw(player.countCards('h'));

              },
              ai: {
                order: 2,
                result: {
                  player: function (player) {
                    var cards = player.get('h');
                    var suits = [];
                    for (var i = 0; i < cards.length; i++) {
                      if (!suits.includes(get.suit(cards[i])))
                        suits.push(get.suit(cards[i]));
                    }
                    var canget = (suits.length * 2 - player.countCards('h'));
                    return canget + 0.1;
                  }
                }
              }
            },
            jlsg_caijie: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseZhunbeiBegin' },
              check: function (event, player) {
                var cards = player.get('h');
                for (var i = 0; i < cards.length; i++) {
                  if (cards[i].number > 11 && get.value(cards[i]) < 7) {
                    return get.attitude(player, event.player) < 0;
                  }
                }
                if (player.countCards('h', 'shan') && get.attitude(player, event.player) < 0 && player.countCards('h') > 2) return 1;
                return 0;
              },
              filter: function (event, player) {
                return event.player != player && event.player.countCards('h') >= player.countCards('h') && player.countCards('h') > 0;
              },
              prompt: function (event, player) {
                var str = '';
                str += '是否对' + get.translation(event.player) + '发动【才捷】？';
                return str;
              },
              content: function () {
                'step 0'
                player.chooseToCompare(trigger.player);
                'step 1'
                if (result.bool) {
                  player.draw(2);
                } else {
                  trigger.player.useCard({ name: 'sha' }, player, false);
                }
              },
              ai: {
                expose: 0.2
              }
            },
            jlsg_jilei: {
              audio: "ext:极略:1",
              trigger: { player: 'damageEnd' },
              check: function (event, player) {
                return get.attitude(player, event.source) < 0;
              },
              filter: function (event, player) {
                return event.source && event.source.countCards('h') > 0;
              },
              content: function () {
                'step 0'
                trigger.source.showHandcards();
                var cards = [
                  trigger.source.getCards('h', { type: 'basic' }),
                  trigger.source.getCards('h', { type: ['trick', 'delay'] }),
                  trigger.source.getCards('h', { type: 'equip' }),
                ];
                var maxNum = cards.reduce((a, b) => a.length > b.length ? a : b).length;
                if (cards.filter(cs => cs.length == maxNum).length == 1) {
                  trigger.source.discard(cards.filter(cs => cs.length == maxNum)[0]);
                  event.finish();
                  return;
                }
                var choices = [], choice, v = Infinity, tempv;
                if (cards[0].length == maxNum) {
                  choices.push('基本牌');
                  choice = '基本牌';
                  v = cards[0].reduce((a, b) => a + get.value(b, trigger.source), 0);
                }
                if (cards[1].length == maxNum) {
                  choices.push('锦囊牌');
                  tempv = cards[1].reduce((a, b) => a + get.value(b, trigger.source), 0);
                  if (tempv < v) {
                    choice = '锦囊牌';
                    v = tempv;
                  }
                }
                if (cards[2].length == maxNum) {
                  choices.push('装备牌');
                  tempv = cards[2].reduce((a, b) => a + get.value(b, trigger.source), 0);
                  if (tempv < v) {
                    choice = '装备牌';
                    v = tempv;
                  }
                }
                player.chooseControl(choices).set('prompt', '弃置一种类型的手牌').set('choice', choice).set('ai', function () {
                  return _status.event.choice;
                });
                'step 1'
                switch (result.control) {
                  case '基本牌':
                    trigger.source.discard(trigger.source.getCards('h', { type: 'basic' }));
                    break;
                  case '锦囊牌':
                    trigger.source.discard(trigger.source.getCards('h', { type: ['trick', 'delay'] }));

                    break;
                  case '装备牌':
                    trigger.source.discard(trigger.source.getCards('h', { type: 'equip' }));
                    break;
                }
              },
            },
            jlsg_yanliang: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.countDiscardableCards(player, 'he');
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseToDiscard('是否对' + get.translation(trigger.player) + '发动【延粮】?', 'he').ai = function (card) {
                  if (get.attitude(player, trigger.player) > 0 && trigger.player.countCards('j', 'lebu')) return 8 - get.value(card) && get.color(card) == 'black';
                  if (get.attitude(player, trigger.player) < 0) return 4 - get.value(card);
                  return 0;
                };
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_yanliang', trigger.player);
                  if (get.color(result.cards[0]) == 'red') {
                    trigger.player.addTempSkill('jlsg_yanliang_adjust');
                    trigger.player.addTempSkill('jlsg_yanliang_red');
                  } else {
                    trigger.player.addTempSkill('jlsg_yanliang_adjust');
                    trigger.player.addTempSkill('jlsg_yanliang_black');
                  }
                }
              },
              subSkill: {
                adjust: {
                  trigger: { player: 'phaseDrawBefore' },
                  priority: 100,
                  forced: true,
                  popup: false,
                  content: function () {
                    trigger.cancel();
                    player.removeSkill('jlsg_yanliang_adjust');
                  }
                },
                red: {
                  trigger: { player: 'phaseUseAfter' },
                  forced: true,
                  popup: false,
                  mark: true,
                  intro: {
                    marktext: '延',
                    content: '摸牌阶段在出牌阶段后进行'
                  },
                  content: function () {
                    player.phaseDraw();
                    player.removeSkill('jlsg_yanliang_red');
                  }
                },
                black: {
                  trigger: { player: 'phaseDiscardAfter' },
                  forced: true,
                  popup: false,
                  mark: true,
                  intro: {
                    marktext: '延',
                    content: '摸牌阶段在弃牌阶段后进行'
                  },
                  content: function () {
                    player.phaseDraw();
                    player.removeSkill('jlsg_yanliang_black');
                  }
                }
              }
            },
            jlsg_duzhi: {
              audio: "ext:极略:1",
              trigger: { player: 'recoverEnd' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget('是否发动【毒治】？', function (card, target, player) {
                  return player != target;
                }).ai = function (target) {
                  return -get.attitude(player, target);
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_duzhi', result.targets);
                  for (var i = 0; i < result.targets.length; i++) {
                    result.targets[i].loseHp(trigger.num);
                    result.targets[i].chooseToUse({ name: 'sha' }, player);
                  }
                }
              },
              ai: {
                expose: 0.2
              },
              group: 'jlsg_duzhi2'
            },
            jlsg_duzhi2: {
              direct: true,
              trigger: { source: 'damageEnd' },
              filter: function (event, player) {
                return event.card && event.card.name == 'sha' && get.color(event.card) == 'red' && event.num > 0 && event.notLink();
              },
              content: function () {
                'step 0'
                player.chooseTarget('是否发动【毒治】？', [1, trigger.num], function (card, target, player) {
                  return player != target;
                }).ai = function (target) {
                  return -get.attitude(player, target);
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_duzhi', result.targets);
                  for (var i = 0; i < result.targets.length; i++) {
                    result.targets[i].loseHp();
                    result.targets[i].chooseToUse({ name: 'sha' }, player);
                  }
                }
              },
              ai: {
                expose: 0.2
              },
            },
            jlsg_lieyi: {
              mod: {
                cardname: function (card, player, name) {
                  if (card.name == 'tao') return 'sha';
                  if (card.name == 'shan') return 'jiu';
                },
              },
              audio: "ext:极略:1",
              trigger: {
                player: "useCard",
              },
              forced: true,
              filter: function (event, player) {
                return event.card.name == 'sha' && event.cards && event.cards.length == 1 && event.cards[0].name == 'tao'
                  || event.card.name == 'jiu' && event.cards && event.cards.length == 1 && event.cards[0].name == 'shan';
              },
              content: function () {
              },
            },
            jlsg_baoli: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, player, target) {
                if (player == target) return false;
                return !target.countCards('e') || target.countCards('j');
              },
              content: function () {
                target.damage(player);
              },
              ai: {
                order: 4,
                result: {
                  target: -1,
                }
              }
            },
            jlsg_huanbing: {
              audio: "ext:极略:2",
              trigger: { target: 'shaBefore' },
              // filter: function (event, player) {
              //   if (get.itemtype(event.card) != 'card') return false;
              //   return event.card && event.card.name == 'sha';
              // },
              forced: true,
              content: function () {
                'step 0'
                trigger.cancel();
                player.addToExpansion(trigger.cards, 'gain2').gaintag.add(event.name);
              },
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (card.name == 'sha') return 0.6;
                  }
                }
              },
              group: 'jlsg_huanbing2'
            },
            jlsg_huanbing2: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.getExpansions('jlsg_huanbing').length;
              },
              forced: true,
              content: function () {
                'step 0'
                if (player.getExpansions('jlsg_huanbing').length) {
                  event.card = player.getExpansions('jlsg_huanbing')[0];
                  player.$phaseJudge(event.card);
                  player.lose(event.card, ui.ordering).relatedEvent = event;
                  player.judge(function (card) {
                    if (get.color(card) == 'red') return 1;
                    return -0.5;
                  });
                }
                else {
                  event.finish();
                }
                'step 1'
                if (result.bool) {
                  player.draw();
                }
                else {
                  player.loseHp();
                  player.gain(event.card, 'gain2');
                }
                event.goto(0);
              }
            },
            jlsg_hongyuan: {
              audio: "ext:极略:1",
              usable: 1,
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countDiscardableCards(player, 'h') && player.isDamaged() && player.canMoveCard();
              },
              filterCard: true,
              selectCard: function () {
                return [1, _status.event.player.getDamagedHp()];
              },
              check: function (card) {
                return 6 - ai.get.value(card);
              },
              filterTarget: function (card, player, target) {
                return target.canMoveCard();
              },
              content: function () {
                'step 0'
                event.count = cards.length;
                'step 1'
                target.chooseTarget('请选择目标', function (card, player, target2) {
                  return target2.countCards('ej');
                }).set('ai', function (target2) {
                  var target = _status.event.player;
                  if (ai.get.attitude(target, target2) > 0 && target2.num('j')) return 1;
                  return -ai.get.attitude(target, target2);
                });
                'step 2'
                if (result.bool) {
                  target.gainPlayerCard('请选择想要获得的牌', [1, event.count], 'ej', result.targets[0], true);
                }
                else {
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  event.count -= result.links.length;
                  if (event.count) event.goto(1);
                }
              },
            },
            jlsg_huaqiang: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('h') >= player.hp;
              },
              filterCard: function (card) {
                for (var i = 0; i < ui.selected.cards.length; i++) {
                  if (get.suit(card) == get.suit(ui.selected.cards[i])) return false;
                }
                return true;
              },
              selectCard: function () {
                return Math.min(4, _status.event.player.hp);
              },
              filterTarget: function (card, player, target) {
                return player != target;
              },
              check: function (card) {
                return 6 - get.value(card);
              },
              content: function () {
                target.damage();
              },
              ai: {
                order: 8,
                expose: 0.2,
                result: {
                  player: function (player) {
                    var eff = player.hp / 2;
                    return -eff;
                  },
                  target: function (player, target) {
                    return get.damageEffect(target, player);
                  }
                }
              }
            },
            jlsg_chaohuang: {
              audio: "ext:极略:1",
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, player, target) {
                return target.inRangeOf(player) && player.canUse({ name: 'sha' }, target, false);
              },
              delay: false,
              line: false,
              selectTarget: [1, Infinity],
              multitarget: true,
              content: function () {
                player.loseHp();
                player.useCard({ name: 'sha' }, targets, false);
              },
              ai: {
                order: 5,
                result: {
                  target: function (player, target) {
                    var ts = game.filterPlayer(function (cur) {
                      return cur.inRangeOf(player) && player.canUse({ name: 'sha' }, cur, false) && get.effect(cur, { name: 'sha' }, player, player) > 0;
                    });
                    if (ts.length <= 1 || player.hp <= 1) return 0;
                    return get.effect(target, { name: 'sha' }, player, target);
                  }
                }
              }
            },
            jlsg_old_zhishi: {
              audio: "ext:极略:2",
              srlose: true,
              enable: "phaseUse",
              usable: 1,
              filter: function (event, player) {
                return player.countCards("h", "sha") || player.countCards("h", "shan");
              },
              filterCard: function (card) {
                return card.name == 'sha' || card.name == 'shan';
              },
              prompt: "选择一张【杀】或【闪】，并且选择一名有手牌的其他角色，发动【治世】。",
              filterTarget: function (card, player, target) {
                return target != player && target.countCards('h');
              },
              discard: false,
              lose: false,
              content: function () {
                "step 0"
                player.showCards(cards[0]);
                var nono = false;
                if (ai.get.damageEffect(target, player, player)) nono = true;
                if (cards[0].name == 'sha') {
                  target.chooseToDiscard("请弃置一张【杀】，令" + get.translation(target) + "恢复1点体力，否则你受到1点伤害", { name: "sha" }).set("ai", function () {
                    if (_status.nono == true) return false;
                    return true;
                  }).set('nono', nono);
                }
                if (cards[0].name == 'shan') {
                  target.chooseCard("请展示一张【闪】，令" + get.translation(target) + "恢复1点体力，否则你受到1点伤害", 'h', function (card, player, target) {
                    return get.name(card) == "shan";
                  }).set("ai", function () {
                    if (_status.nono == true) return false;
                    return true;
                  }).set('nono', nono);
                }
                "step 1"
                if (cards[0].name == 'shan' && result.cards) {
                  target.showCards(result.cards[0]);
                }
                "step 2"
                if (result.bool) {
                  player.recover();
                  target.recover();
                } else {
                  target.damage(player);
                }
              },
              ai: {
                basic: {
                  order: 7,
                },
                result: {
                  player: function (player) {
                    return 1;
                  },
                  target: function (player, target) {
                    return get.damageEffect(target, player, player);
                  },
                },
              },
            },
            jlsg_huilian: {
              audio: "ext:极略:1",
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                'step 0'
                target.judge(function (card) {
                  if (target.hp == target.maxHp) {
                    if (get.suit(card) == 'heart') return 1;
                  }
                  if (get.suit(card) == 'heart') return 2;
                  return 1;
                });
                'step 1'
                target.gain(result.card, 'gain2');
                if (result.suit == 'heart') {
                  target.recover();
                }
              },
              ai: {
                order: 9,
                expose: 0.2,
                result: {
                  target: function (target) {
                    if (target.isDamaged()) return 2;
                    return 1;
                  }
                }
              }
            },
            jlsg_wenliang: {
              audio: "ext:极略:2",
              trigger: { global: 'judgeAfter' },
              frequent: true,
              filter: function (event, player) {
                return (get.color(event.result.card) == 'red');
              },
              content: function () {
                player.draw();
              }
            },
            jlsg_qianhuan: {
              audio: "ext:极略:2",
              // forbid:['guozhan'],
              trigger: {
                player: 'enterGame',
                global: 'phaseBefore',
              },
              forced: true,
              unique: true,
              priority: -555,
              init: function (player) {
                player.storage.jlsg_qianhuan_fenpei = [];
              },
              filter: function (event, player) {
                if (event.name == 'phase') {
                  return event.player == player || game.phaseNumber == 0;
                } else {
                  return true;
                }
              },
              content: function () {
                "step 0"
                if (get.config('double_character') === true) {
                  event.set('num', 4);
                } else {
                  event.set('num', 2);
                }
                var list = lib.jlsg.characterList;
                var stagePlayers = game.players.concat(game.dead);
                for (const player of stagePlayers) {
                  list.remove(player.name);
                  list.remove(player.name1);
                  list.remove(player.name2);
                }
                list = list.randomGets(3);
                event.list = list;
                var skills = [];
                for (var i of list) {
                  skills.addArray((get.character(i)[3] || []).filter(function (skill) {
                    var info = get.info(skill);
                    return info && !info.zhuSkill && !info.hiddenSkill && !info.charlotte && !info.hiddenSkill && !info.dutySkill;
                  }));
                }
                skills.addArray(player.storage.jlsg_qianhuan_fenpei);
                if (!list.length || !skills.length) { event.finish(); return; }
                if (player.isUnderControl()) {
                  game.swapPlayerAuto(player);
                }
                var switchToAuto = function () {
                  _status.imchoosing = false;
                  event._result = {
                    bool: true,
                    skills: skills.randomGets(event.num),
                  };
                  if (event.dialog) event.dialog.close();
                  if (event.control) event.control.close();
                };
                var chooseButton = function (list, skills) {
                  var event = _status.event;
                  if (!event._result) event._result = {};
                  event._result.skills = [];
                  var rSkill = event._result.skills;
                  var dialog = null;
                  if (player.storage.jlsg_qianhuan_fenpei.length) {
                    get.character(player.name)[3] = player.storage.jlsg_qianhuan_fenpei;
                    dialog = ui.create.dialog(`请选择获得至多${event.num == 2 ? '两' : '四'}个技能`, [list.concat(player.name), 'character'], 'hidden');
                  } else {
                    dialog = ui.create.dialog(`请选择获得至多${event.num == 2 ? '两' : '四'}个技能`, [list, 'character'], 'hidden');
                  }
                  event.dialog = dialog;
                  var table = document.createElement('div');
                  table.classList.add('add-setting');
                  table.style.margin = '0';
                  table.style.width = '100%';
                  table.style.position = 'relative';
                  for (var i = 0; i < skills.length; i++) {
                    var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                    td.link = skills[i];
                    table.appendChild(td);
                    td.innerHTML = '<span>' + get.translation(skills[i]) + '</span>';
                    td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                      if (_status.dragged) return;
                      if (_status.justdragged) return;
                      _status.tempNoButton = true;
                      setTimeout(function () {
                        _status.tempNoButton = false;
                      }, 500);
                      var link = this.link;
                      if (!this.classList.contains('bluebg')) {
                        if (rSkill.length >= event.num) return;
                        rSkill.add(link);
                        this.classList.add('bluebg');
                      }
                      else {
                        this.classList.remove('bluebg');
                        rSkill.remove(link);
                      }
                    });
                  }
                  dialog.content.appendChild(table);
                  dialog.add('　　');
                  dialog.open();

                  event.switchToAuto = function () {
                    event.dialog.close();
                    event.control.close();
                    game.resume();
                    _status.imchoosing = false;
                  };
                  event.control = ui.create.control('ok', function (link) {
                    event.dialog.close();
                    event.control.close();
                    game.resume();
                    _status.imchoosing = false;
                  });
                  for (var i = 0; i < event.dialog.buttons.length; i++) {
                    event.dialog.buttons[i].classList.add('selectable');
                  }
                  game.pause();
                  game.countChoose();
                };
                if (event.isMine()) {
                  chooseButton(list, skills);
                }
                else if (event.isOnline()) {
                  event.player.send(chooseButton, list, skills);
                  event.player.wait();
                  game.pause();
                }
                else {
                  switchToAuto();
                }
                'step 1'
                var map = event.result || result;
                if (map && map.skills && map.skills.length) {
                  let remove = player.storage.jlsg_qianhuan_fenpei
                    .filter(s => player.hasSkill(s) && !map.skills.includes(s));
                  let add = map.skills.filter(s => !player.hasSkill(s));
                  player.changeSkills(add, remove);
                  //if(add.length){
                  //  for(let skill of add){
                  //    if(player.awakenedSkills.includes(skill)) player.restoreSkill(skill)
                  //  }
                  //}
                  player.storage.jlsg_qianhuan_fenpei = map.skills;
                }
              },
              ai: {
                threaten: 2.5,
              },
              group: ['jlsg_qianhuan_2'],
              subSkill: {
                "2": {
                  sourceSkill: "jlsg_yingge",
                  trigger: { global: 'phaseBefore' },
                  forced: true,
                  priority: 100,
                  unique: true,
                  popup: false,
                  silent: true,
                  filter: function (event, player) {
                    return game.phaseNumber == 0 && get.config('double_character') === true;
                  },
                  content: function () {
                    "step 0"
                    if (lib.config.mode == 'guozhan' && get.config('guozhan_mode') != 'mingjiang') player.showCharacter(2);
                    player.uninit();
                    player.style.transform = '';
                    player.node.avatar.style.transform = '';
                    player.node.avatar2.style.transform = '';
                    player.classList.remove('fullskin2');
                    player.node.avatar2.setBackground = '';
                    player.node.avatar2.hide();
                    player.node.name2.style.display = 'none';
                    "step 1"
                    player.init('jlsgsk_zuoci');
                    if (!player.ai.shown) {
                      player.ai.shown = 0;
                    }
                  },
                },
              },
            },
            jlsg_jinglun: {
              audio: "ext:极略:2",
              usable: 1,
              trigger: { global: ['respond', 'useCard'] },
              filter: function (event, player) {
                if (!event.respondTo) return false;
                if (event.player == player && player != event.respondTo[0]) {
                  var cards = [];
                  if (get.itemtype(event.respondTo[1]) == 'card') cards.push(event.respondTo[1]);
                  else if (event.respondTo[1].cards) cards.addArray(event.respondTo[1].cards);
                  return cards.filterInD('od').length != 0;
                }
                if (event.player != player && player == event.respondTo[0]) {
                  return event.cards.filterInD('od').length > 0;
                }
                return false;
              },
              check: function (event, player) {
                return true;
                // return get.value(event.cards.filterInD('od'), player) > 0;
              },
              logTarget: 'player',
              content: function () {
                var cards = [];
                if (trigger.player == player && player != trigger.respondTo[0]) {
                  if (get.itemtype(trigger.respondTo[1]) == 'card') cards.push(trigger.respondTo[1]);
                  else if (trigger.respondTo[1].cards) cards.addArray(trigger.respondTo[1].cards);
                } else {
                  cards = trigger.cards;
                }
                cards = cards.filterInD('od');
                player.gain(cards, 'log', 'gain2');
              },
            },
            jlsg_ruzong: {
              audio: "ext:极略:1",
              group: ['jlsg_ruzong_wuxie', 'jlsg_ruzong_shan'],
              subSkill: {
                wuxie: { // 闪当无懈
                  audio: 'jlsg_ruzong',
                  position: "hs",
                  enable: ['chooseToUse', 'chooseToRespond'],
                  filterCard: { name: 'shan' },
                  viewAsFilter: function (player) {
                    return player.countCards('hs', 'shan') != 0;
                  },
                  viewAs: {
                    name: "wuxie",
                  },
                  prompt: "将一张闪当无懈可击使用",
                  check: function (card) { return 8 - get.value(card); },
                },
                shan: {
                  audio: 'jlsg_ruzong',
                  position: "hs",
                  enable: ['chooseToUse', 'chooseToRespond'],
                  filterCard: { name: 'wuxie' },
                  viewAsFilter: function (player) {
                    return player.countCards('hs', 'wuxie') != 0;
                  },
                  viewAs: {
                    name: "shan",
                  },
                  prompt: "将一张无懈可击当闪使用或打出",
                  check: function (card) { return 1; },
                  ai: {
                    respondShan: true,
                    skillTagFilter: function (player) {
                      if (!player.countCards('hs', 'wuxie')) return false;
                    },
                  },
                },
              },
            },
            jlsg_leiji: {
              audio: "ext:极略:1",
              trigger: { global: "useCard", },
              mark: true,
              marktext: "祭",
              // intro: {
              //   mark: function (dialog, content, player) {
              //     var num = Array.from(ui.cardPile.childNodes).filter(card => get.name(card) == 'shandian').length;
              //     num += Array.from(ui.discardPile.childNodes).filter(card => get.name(card) == 'shandian').length;
              //     return `剩余${get.cnNumber(num)}张闪电`;
              //   },
              //   markcount: function (storage, player) {
              //     var num = Array.from(ui.cardPile.childNodes).filter(card => get.name(card) == 'shandian').length;
              //     return num + Array.from(ui.discardPile.childNodes).filter(card => get.name(card) == 'shandian').length;
              //   },
              // },
              filter: function (event, player) {
                return event.card.name == 'shan' && event.player != player;
              },
              direct: true,
              content: function () {
                'step 0'
                var card = get.cardPile(function (card) {
                  return card.name == 'shandian';
                });
                if (card) {
                  // game.cardsGotoOrdering(card);
                  event.card = card;
                  player.chooseTarget(get.prompt('jlsg_leiji'), function (card, player, target) {
                    return target.canAddJudge(_status.event.card);
                  })
                    .set('card', card)
                    .set('ai', function (target) {
                      var now = _status.currentPhase.next;
                      for (var i = 0; i < 10; i++) {
                        if (get.attitude(player, now) < 0) return target == now;
                        else {
                          now = now.next;
                        }
                      }
                      return false;
                    });
                } else {
                  event.finish();
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_leiji', result.targets[0]);
                  result.targets[0].$gain(event.card);
                  player.line(result.targets[0], 'thunder');
                  result.targets[0].addJudge(event.card);
                }
              }
            },
            jlsg_shanxi: {
              audio: "ext:极略:1",
              trigger: { global: 'judgeEnd' },
              forced: true,
              filter: function (event, player) {
                return get.position(event.result.card, true) == 'o' &&
                  event.card && event.card.name == 'shandian' && event.player != player;
              },
              content: function () {
                player.gain(trigger.result.card, 'gain2');
              },
              mod: {
                targetEnabled: function (card) {
                  if (card.name == 'shandian') return false;
                }
              }
            },
            jlsg_guhuo: {
              audio: "ext:极略:3",
              trigger: { global: 'phaseBegin' },
              filter: function (event, player) {
                return player.canCompare(event.player); // && !event.player.hasSkill("jlsg_chanyuan");
              },
              check: function (event, player) {
                var cards = player.get('h');
                for (var i = 0; i < cards.length; i++) {
                  if (cards[i].number > 11 && get.value(cards[i]) < 7) {
                    return get.attitude(player, event.player) < 0;
                  }
                }
                if (get.attitude(player, event.player) < 0 && player.countCards('h') > 2) return 1;
                return 0;
              },
              logTarget: 'player',
              content: function () {
                'step 0'
                player.chooseToCompare(trigger.player);
                'step 1'
                var target = trigger.player;
                if (result.bool) {
                  var list = [];
                  for (var name of lib.inpile) {
                    var type = get.type(name);
                    if (!['basic', 'trick'].includes(type)) {
                      continue;
                    }
                    if (lib.filter.cardEnabled({ name: name }, player)) {
                      list.push([type, '', name]);
                    }
                    if (name == 'sha') {
                      for (var j of lib.inpile_nature) {
                        if (lib.filter.cardEnabled({ name: name, nature: j }, player))
                          list.push([type, '', name, j]);
                      }
                    }
                  }
                  var next = player.chooseButton(['蛊惑', [list, 'vcard']]);
                  var choice, value = 0;
                  for (let [_, __, cardName, nature] of list) { // choose button ai
                    let card = { name: cardName, nature: nature }
                    let newV = player.getUseValue(card);
                    if (newV > value) {
                      choice = [cardName, nature];
                      value = newV;
                    }
                  }
                  next.filterButton = function (button, player) {
                    return true;
                  }
                  next.ai = function (button) {
                    return button.link[2] === _status.event.choice[0] &&
                      (button.link[3] || true) === (_status.event.choice[1] || true);
                  }
                  next.choice = choice;
                } else {
                  player.damage(target);
                  event.finish();
                }
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = trigger.player;
                event.card = { name: result.links[0][2], nature: result.links[0][3] };
                player.chooseUseTarget(event.card, true);
              },
              ai: {
                expose: 0.1,
                order: 8,
                result: {
                  player: function (player) {
                    if (player.storage.jlsg_tianqi != undefined) return 1;
                    if (player.hp > 2 && player.storage.jlsg_tianqi == undefined) return -10;
                    if (Math.random() < 0.67) return 0.5;
                    return -1;
                  },
                },
                threaten: 4,
              }
            },
            jlsg_fulu: {
              audio: "ext:极略:3",
              trigger: { player: "damageEnd" },
              getIndex(event) {
                return event.num;
              },
              getTargets(player) {
                let damage = player.getAllHistory("damage", evt => {
                  return evt.source && evt.source.isIn();
                }).map(evt => evt.source).reverse().slice(0, 3),
                  recover = game.getAllGlobalHistory("changeHp", evt => {
                    if (evt.player != player || !evt.parent) return false;
                    if (evt.parent.name != "recover") return false;
                    if (evt.parent.source && evt.parent.source.isIn()) return true;
                    return evt.getParent(2)?.player?.isIn();
                  }).map(evt => evt.parent.source || evt.getParent(2).player).reverse().slice(0, 3);
                return [damage, recover];
              },
              filter(event, player) {
                const [damage, recover] = lib.skill.jlsg_fulu.getTargets(player);
                return event.num > 0 && (damage.length || recover.length);
              },
              async cost(event, trigger, player) {
                const [damage, recover] = lib.skill.jlsg_fulu.getTargets(player);
                let str = "###符箓：是否令最近三名对你造成伤害的角色依次随机弃置一张牌，最近三次令你回复体力的角色各摸一张牌？###";
                str += `<div class='center text'>打你的人：${damage.length ? get.translation(damage) : "无"}</div><br>`;
                str += `<div class='center text'>帮你的人：${recover.length ? get.translation(recover) : "无"}</div>`;
                const { result } = await player.chooseBool(str)
                  .set("info", [damage, recover])
                  .set("ai", (event, player) => {
                    let v = 0,
                      [damage, recover] = get.event("info");
                    for (let p of damage) v += get.attitude(player, p) > 0 ? -1 : 1;
                    for (let p of recover) v += get.attitude(player, p) > 0 ? 1 : -1;
                    return v >= 0;
                  })
                let targets = [...damage, ...recover].unique().sortBySeat();
                event.result = {
                  bool: result.bool,
                  targets: targets,
                  cost_data: {
                    damage: damage.sortBySeat(),
                    recover: recover,
                  },
                };
              },
              async content(event, trigger, player) {
                const { damage, recover } = event.cost_data;
                for (let target of damage) {
                  if (target.isIn()) {
                    let hs = target.getDiscardableCards(player, "he");
                    if (hs.length > 0) await target.discard(hs.randomGet());
                  }
                };
                if (recover.length) await game.asyncDraw(recover);
              },
            },
            jlsg_guixiu: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseDiscardBefore' },
              frequent: true,
              filter: function (event, player) {
                return !player.getStat('damage');
              },
              content: function () {
                trigger.cancel();
                player.draw();
              },
            },
            jlsg_cunsi: {
              audio: "ext:极略:1",
              trigger: { player: 'die' },
              skillAnimation: true,
              animationColor: 'orange',
              direct: true,
              forceDie: true,
              content: function () {
                'step 0'
                let prompt = `###${get.prompt(event.name)}###将区域中所有牌移出游戏，然后令一名角色获得〖勇决〗`;
                player.chooseTarget(prompt, lib.filter.notMe).set('ai', function (target) {
                  return get.attitude(_status.event.player, target);
                });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0];
                var target = result.targets[0];
                player.logSkill(event.name, target);
                target.addSkills('jlsg_yongjue');
                'step 2'
                var target = result.targets[0];
                if (player.countCards('hej')) {
                  let cards = player.getCards('hej');
                  target.addToExpansion(cards, player, 'give').gaintag.add('jlsg_yongjue2');
                }
              },
              derivation: 'jlsg_yongjue',
            },
            jlsg_yongjue: {
              trigger: { source: 'damageBegin1' },
              filter: function (event) {
                return event.card && event.card.name == 'sha' && event.notLink();
              },
              forced: true,
              direct: true,
              content: function () {
                {
                  let gender = player.sex;
                  if (!['male', 'female'].includes(gender)) {
                    let gender = ['male', 'female'].randomGet();
                  }
                  if (gender === 'male') player.logSkill('jlsg_yongjue11');
                  else player.logSkill('jlsg_yongjue12');
                }
                trigger.num++;
              },
              ai: {
                damageBonus: true,
              },
              group: 'jlsg_yongjue2',
            },
            jlsg_yongjue2: {
              audio: "ext:极略:2",
              marktext: "嗣",
              intro: {
                name: "存嗣",
                content: 'expansion',
                markcount: 'expansion'
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              trigger: {
                source: 'dieAfter',
              },
              filter: function (event, player, name) {
                return player.getExpansions('jlsg_yongjue2').length;
              },
              skillAnimation: true,
              animationColor: 'orange',
              locked: true,
              direct: true,
              content: function () {
                'step 0'
                {
                  let gender = player.sex;
                  if (!['male', 'female'].includes(gender)) {
                    let gender = ['male', 'female'].randomGet();
                  }
                  if (gender === 'male') player.logSkill('jlsg_yongjue21');
                  else player.logSkill('jlsg_yongjue22');
                }
                'step 1'
                player.$draw(player.storage.jlsg_yongjue2);
                player.gain(player.getExpansions('jlsg_yongjue2'), 'draw', 'log');
                player.unmarkSkill('jlsg_yongjue2');
                delete player.storage.jlsg_yongjue2;
              },
            },
            jlsg_yongjue11: {
              inherit: 'jlsg_yongjue',
              audio: "ext:极略:true",
            },
            jlsg_yongjue12: {
              inherit: 'jlsg_yongjue',
              audio: "ext:极略:true",
            },
            jlsg_yongjue21: {
              inherit: 'jlsg_yongjue2',
              audio: "ext:极略:true",
            },
            jlsg_yongjue22: {
              inherit: 'jlsg_yongjue2',
              audio: "ext:极略:true",
            },
            jlsg_gongshen: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filterCard: true,
              selectCard: 3,
              position: 'he',
              filter: function (event, player) {
                return player.countCards('he') > 2;
              },
              check: function (card, event) {
                if (jlsg.needKongcheng(_status.event.player)) return 10 - get.value(card)
                return 6 - get.value(card);
              },
              content: function () {
                'step 0'
                player.draw();
                'step 1'
                if (player.isDamaged()) {
                  if (!game.hasPlayer(function (target) {
                    return player.countCards('h') > target.countCards('h');
                  })) {
                    player.recover();
                  }
                }

              },
              ai: {
                order: 1,
                result: {
                  player: function (player) {
                    if (!player.isDamaged()) return -2;
                    var less = !game.hasPlayer(function (target) {
                      return player.countCards('h') - 2 > target.countCards('h');
                    });
                    if (less) return 1;
                    return 0;
                  }
                }
              }
            },
            jlsg_jianyue: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseJieshuBegin' },
              filter: function (event, player) {
                if (ui.discardPile.hasChildNodes() == false) return false;
                return !game.hasPlayer(function (target) {
                  return event.player.countCards('h') > target.countCards('h');
                });
              },
              logTarget: 'player',
              frequent: function (event, player) {
                return event.player == player;
              },
              check: function (event, player) {
                if (jlsg.isFriend(player, event.player)) return !jlsg.needKongcheng(event.player, true);
                return get.attitude(player, event.player) > 0;
              },
              content: function () {
                'step 0'
                if (trigger.player.ai.shown > player.ai.shown) {
                  player.addExpose(0.3);
                }
                'step 1'
                var isLess = !(ui.discardPile.hasChildNodes() == false) && !game.hasPlayer(function (target) {
                  return trigger.player.countCards('h') > target.countCards('h');
                });
                if (isLess) {
                  var card = jlsg.findCardInDiscardPile();
                  if (card) {
                    trigger.player.gain(card, 'gain2');
                    event.redo();
                  }
                }
              },
              ai: {
                threaten: 1.1
              }
            },
            jlsg_pengri: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              selectTarget: -1,
              usable: 1,
              line: 'fire',
              // filter: function (event, player) {
              //   return game.hasPlayer(function (target) {
              //     return player.inRangeOf(target) && player != target;
              //   });
              // },
              filterTarget: function (card, player, target) {
                return target && player != target && player.inRangeOf(target);
              },
              multitarget: true,
              multiline: true,
              precontent: function () {
                player.draw(2, 'nodelay');
              },
              content: function () {
                'step 0'
                event.target = event.targets.shift();
                if (!event.target) {
                  event.finish();
                  return;
                }
                event.target.chooseToUse('是否对' + get.translation(player) + '使用一张【杀】？', { name: 'sha' }, player, -1);
                'step 1'
                event.goto(0);
              },
              ai: {
                order: 9,
                result: {
                  player: function (player) {
                    var shotter = game.filterPlayer(p => p != player);
                    var sha = 0;
                    for (var shot of shotter) {
                      if (player.inRangeOf(shot) && !jlsg.isKongcheng(shot) && !jlsg.isFriend(shot, player)) {
                        sha++;
                      }
                    }
                    var shan = jlsg.getCardsNum('shan', player, player);
                    if (sha > 3 && player.hp <= 2) return -1;
                    if (shan >= sha) return 1;
                    if (sha == 0) return 2;
                    return 0;
                  }
                }
              }
            },
            jlsg_danmou: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              filter: function (event, player) {
                return event.source && event.source.isAlive() && event.source != player
                  && (event.source.countCards('h') || player.countCards('h'));
              },
              check: function (event, player) {
                if (get.attitude(player, event.source) <= 0) {
                  var cardlength = player.countCards('h');
                  for (var i = 0; i < player.getCards('h').length; i++) {
                    if (get.value(player.getCards('h')[i]) > 7) {
                      cardlength--;
                    }
                  }
                  if (Math.random < 0.5 && cardlength == event.source.countCards('h')) cardlength--;
                  return cardlength < event.source.countCards('h');
                } else {
                  if (_status.currentPhase == event.source) {
                    if (event.source.countUsed('sha') <= 0) return false;
                    return event.source.needsToDiscard();
                  } else {
                    if (event.source.hp < player.hp) {
                      return player.countCards('h') - event.source.countCards('h');
                    }
                  }
                }
              },
              content: function () {
                player.swapHandcards(trigger.source);
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (player.countCards('h') <= target.countCards('h')) return;
                    if (get.tag(card, 'damage') && get.attitude(player, target) < 0) return [1, player.countCards('h') - target.countCards('h') - 1];
                  },
                }
              }
            },
            jlsg_fushe: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseUseBegin' },
              filter: function (event, player) {
                return event.player.inRangeOf(player) && event.player != player;
              },
              logTarget: 'player',
              check: function (event, player) {
                return get.attitude(event.player, player) < 0;
              },
              content: function () {
                'step 0'
                player.chooseControl('heart2', 'diamond2', 'club2', 'spade2').set('ai', function (event) {
                  var rand = Math.ceil(Math.random() * 6);
                  var suit = 'heart2';
                  if ([1, 4].includes(rand)) {
                    suit = 'diamond2';
                  } else if ([2, 5].includes(rand)) {
                    suit = 'club2';
                  } else if (rand == 3) {
                    suit = 'spade2';
                  } else {
                    suit = 'heart2';
                  }
                  return suit;
                });
                'step 1'
                var message = `<span style="color: ${['heart2', 'diamond2'].includes(result.control) ? "#631515" : "rgba(0,0,0,0.8)"}; font-size: 200%;">${get.translation(result.control.slice(0, -1))}</span>`;
                // can't really chat this due to ban words restrictions
                player.say(message);
                game.log(player, "选择了", result.control);
                trigger.player.storage.jlsg_fushe = result.control;
                trigger.player.storage.jlsg_fushe_source = player;
                trigger.player.addTempSkill('jlsg_fushe_scanning', 'phaseUseAfter');
              },
              subSkill: {
                scanning: {
                  mark: true,
                  intro: {
                    content: function (storage, player) {
                      if (!player.storage.jlsg_fushe) return null;
                      if (player.hasSkill("jlsg_fushe_debuff")) {
                        return `阶段结束时受到来自${get.translation(player.storage.jlsg_fushe_source)}的一点伤害`;
                      }
                      return `出牌阶段${get.translation(player.storage.jlsg_fushe)}牌进入弃牌堆时，\
此阶段结束时受到来自${get.translation(player.storage.jlsg_fushe_source)}的1点伤害'`;
                    }
                  },
                  audio: false,
                  popup: false,
                  forced: true,
                  silent: true,
                  trigger: { global: ["loseAfter", "loseAsyncAfter", "cardsDiscardAfter", "equipAfter"] },
                  filter: function (event, player) {
                    /* actually, all cards that entered discard counts */
                    // var p;
                    // if (event.player) {
                    //   if (event.player != player) return false;
                    // } else {
                    //   var evt =event.getParent();
                    //   if(!(evt.name == 'orderingDiscard' && evt.relatedEvent && evt.relatedEvent.player === player)) { // && ['useCard','respond'].includes(evt.relatedEvent.name)
                    //     return false;
                    //   }
                    // }
                    return !player.hasSkill('jlsg_fushe_debuff') && event.getd().some(c => get.suit(c) + '2' === player.storage.jlsg_fushe);
                  },
                  content: function () {
                    'step 0'
                    player.unmarkSkill("jlsg_fushe_scanning");
                    player.addTempSkill('jlsg_fushe_debuff', 'phaseUseAfter');
                    'step 1'
                    // animate appear again
                    player.markSkill("jlsg_fushe_scanning");
                  },
                  ai: {
                    effect: {
                      player: function (card, player, target) {
                        var zhangren = player.storage.jlsg_fushe_source;
                        if (get.damageEffect(player, zhangren, player) > 0) return;
                        if (!player.storage.jlsg_fushe) return;
                        if ((get.suit(card) + '2') != player.storage.jlsg_fushe) return;
                        if (!player.needsToDiscard() && !player.hasSkill('jlsg_fushe_debuff')) {
                          var type = get.type(card);
                          if (type == 'basic') {
                            return [1, -1.5];
                          } else if (type == 'trick' && !get.tag(card, 'damage')) {
                            return [1, -1.5];
                          }
                        }
                      },
                    }
                  },
                },
                debuff: {
                  trigger: { player: 'phaseUseEnd' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return player.storage.jlsg_fushe_source && player.storage.jlsg_fushe_source.isAlive();
                  },
                  content: function () {
                    "step 0"
                    var zhangren = lib.jlsg.findPlayerBySkillName('jlsg_fushe');
                    if (zhangren) {
                      zhangren.logSkill('jlsg_fushe', player);
                      player.damage(zhangren);
                      zhangren.draw();
                    }
                    "step 1"
                    player.removeSkill("jlsg_fushe_buff");
                  }
                }
              },
              ai: {
                threaten: function (player, target) {
                  if (target.inRangeOf(player)) {
                    return 2.5;
                  }
                  return 1.3;
                },
              }
            },
            jlsg_ziguo: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return game.hasPlayer(function (cur) {
                  return cur.isDamaged() && cur != player;
                });
              },
              filterTarget: function (card, player, target) {
                return target.isDamaged();
              },
              content: function () {
                target.draw(2);
                player.addTempSkill('jlsg_ziguo_debuff');
              },
              subSkill: {
                debuff: {
                  mod: {
                    maxHandcard: function (player, num) {
                      return num - 2;
                    }
                  }
                }
              },
              ai: {
                order: 4,
                result: {
                  target: function (player, target) {
                    if (player.getHandcardLimit() <= 2) {
                      if (!player.hasSkill('jlsg_shangdao')) return 0;
                    }
                    var lastedCard = Math.min(player.getHandcardLimit() - 2, 0);
                    var currentLastCard = lastedCard;
                    if (lastedCard + game.countPlayer(function (cur) {
                      if (cur != player && cur.countCards('h') > currentLastCard && !cur.isTurnedOver()) {
                        currentLastCard++;
                        return true;
                      }
                      return false;
                    }) <= (player.maxHp - 2)) return 0;
                    if (get.attitude(player, target) <= 0) return 0;
                    var result = Math.max(5 - target.countCards('h'), 1.1)
                    if (player == target) return Math.max(result - 1, 1);
                    return result;
                  },
                }
              }
            },
            jlsg_shangdao: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return event.player.countCards('h') > player.countCards('h');
              },
              forced: true,
              content: function () {
                var card = get.cards();
                player.showCards('商道', card);
                player.gain(card, 'gain2');
              }
            },
            jlsg_hengjiang: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDiscardBegin' },
              filter: function (event, player) {
                return [-1, 0, 1].includes(player.countCards('h') - player.getHandcardLimit());
              },
              check: function (event, player) {
                if (player.getHandcardLimit() - 1 >= player.countCards('h')) return false;
                return true;
              },
              content: function () {
                'step 0'
                player.chooseControl('手牌上限+1', '手牌上限-1').set('ai', function (event, player) {
                  if (jlsg.isWeak(player) && player.getHandcardLimit() < player.countCards('h')) return '手牌上限+1';
                  var friends = jlsg.getFriends(player);
                  var needToThrowJudge = false;
                  for (var i = 0; i < friends.length; i++) {
                    if (friends[i].num('j') && !friends[i].num('j', 'shandian')) {
                      needToThrowJudge = true;
                      break;
                    } else if (friends[i].num('j', 'shandian')) {
                      var rejudge = game.hasPlayer(function (target) {
                        return target.hasSkills(jlsg.ai.skill.rejudge) && jlsg.isEnemy(player, target);
                      });
                      if (rejudge) {
                        needToThrowJudge = true;
                        break;
                      }
                    }
                  }
                  if (needToThrowJudge && !jlsg.isWeak(player)) return '手牌上限-1';
                  var diren = jlsg.getEnemies(player);
                  var needToThrowEquip = false;
                  for (var i = 0; i < diren.length; i++) {
                    if (diren[i].num('e')) {
                      needToThrowEquip = true;
                      break;
                    } else if (diren[i].num('j', 'shandian')) {
                      var rejudge = game.hasPlayer(function (target) {
                        return target.hasSkills(jlsg.ai.skill.rejudge) && jlsg.isEnemy(player, target);
                      });
                      if (rejudge) {
                        needToThrowEquip = true;
                        break;
                      }
                    }
                  }
                  if (needToThrowEquip && !jlsg.isWeak(player)) return '手牌上限-1';
                  return '手牌上限+1';
                });
                'step 1'
                if (result.control == '手牌上限+1') {
                  player.addTempSkill('jlsg_hengjiang_buff', 'phaseAfter');
                } else {
                  player.addTempSkill('jlsg_hengjiang_debuff', 'phaseAfter');
                }
                player.addTempSkill('jlsg_hengjiang_effect', 'phaseAfter');
              },
              subSkill: {
                effect: {
                  audio: false,
                  trigger: { player: 'phaseDiscardEnd' },
                  forced: true,
                  popup: false,
                  filter: function (event) {
                    return event.cards && event.cards.length > 0;
                  },
                  content: function () {
                    'step 0'
                    event.count = trigger.cards.length;
                    'step 1'
                    if (event.count > 0) {
                      player.chooseTarget(get.prompt('jlsg_hengjiang'), function (card, player, target) {
                        return target.countCards('ej');
                      }).set('ai', function (target) {
                        if (jlsg.isFriend(player, target)) {
                          if (target.countCards('j') && !target.countCards('j', 'shandian')) return 8;
                          var rejudge = game.hasPlayer(function (target1) {
                            return target1.hasSkills(jlsg.ai.skill.rejudge) && jlsg.isEnemy(player, target1);
                          });
                          if (target.countCards('j', 'shandian') && rejudge) return 10;
                          return 0;
                        }
                        if (jlsg.isEnemy(player, target)) {
                          var rejudge = game.hasPlayer(function (target1) {
                            return target1.hasSkills(jlsg.ai.skill.rejudge) && jlsg.isEnemy(player, target1);
                          });
                          if (rejudge && target.countCards('j', 'shandian')) return 7;
                          if (target.countCards('e') && !target.hasSkills(jlsg.ai.skill.lose_equip)) return 6;
                          return 0;
                        }
                        return 0;
                      });
                    } else {
                      event.finish();
                    }
                    'step 2'
                    if (result.targets) {
                      var att = get.attitude(player, result.targets[0]);
                      player.line(result.targets[0], 'water');
                      player.discardPlayerCard(result.targets[0], 'ej', [1, event.count], function (button) {
                        if (att > 0) return get.type(button.link) == 'delay';
                        return get.buttonValue(button);
                      });
                    } else {
                      event.finish();
                    }
                    'step 3'
                    if (result.bool) {
                      event.count -= result.links.length;
                    }
                    if (event.count > 0) event.goto(1);

                  }
                },
                buff: {
                  mod: {
                    maxHandcard: function (player, num) {
                      return num + 1;
                    }
                  }
                },
                debuff: {
                  mod: {
                    maxHandcard: function (player, num) {
                      return num - 1;
                    }
                  }
                },
              },
            },
            jlsg_zhuanshan: {
              audio: "ext:极略:2",
              trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuEnd'] },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt('jlsg_zhuanshan')).ai = function (target) {
                  if (target == player) {
                    if (target.countCards('j')) {
                      if (target.countCards('j', 'shandian') == 0) {
                        if (event.triggername == 'phaseZhunbeiBegin') {
                          return 5;
                        } else {
                          if (jlsg.isFriend(target, target.next)) {
                            return 5;
                          }
                          return -5;
                        }
                      } else {
                        var bool = game.hasPlayer(function (target) {
                          return target.hasSkills(jlsg.ai.skill.rejudge);
                        });
                        if (bool) {
                          return 5;
                        }
                        return 0;
                      }
                    } else if (target.hasSkills(jlsg.ai.skill.lose_equip) && target.countCards('e')) {
                      return 5;
                    } else {
                      return -1;
                    }
                  } else {
                    var att = get.attitude(player, target);
                    if (att > 0 && target.countCards('j')) {
                      if (event.triggername == 'phaseZhunbeiBegin') {
                        return 6;
                      } else {
                        if (jlsg.isFriend(player, player.next)) {
                          return 6;
                        }
                        return -1;
                      }
                    } else {
                      if (target.countCards('e')) {
                        return 4;
                      }
                      return -1;
                    }
                    return -1;
                  }
                };
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_zhuanshan', event.target);
                  event.target = result.targets[0];
                  event.target.draw();
                  player.choosePlayerCard(event.target, 'hej', true);
                } else {
                  event.finish();
                }
                'step 2'
                event.card = result.links[0];

                event.target.lose(result.cards, ui.cardPile, 'insert');
                game.log(player, '将', (get.position(event.card) == 'h' ? '一张牌' : event.card), '置于牌堆顶');
                event.target.$throw(1, 1000);
              }
            },
            jlsg_zhenlie: {
              audio: "ext:极略:1",
              trigger: { target: 'useCardToTargeted' },
              filter: function (event, player) {
                return event.player != player && event.card && (event.card.name == 'sha' || get.type(event.card) == 'trick');
              },
              check: function (event, player) {
                if (event.getParent().excluded.includes(player)) return false;
                if (get.attitude(player, event.player) > 0) {
                  return false;
                }
                if (get.tag(event.card, 'respondSha')) {
                  if (player.countCards('h', { name: 'sha' }) == 0) {
                    return true;
                  }
                } else if (get.tag(event.card, 'respondShan')) {
                  if (player.countCards('h', { name: 'shan' }) == 0) {
                    return true;
                  }
                } else if (get.tag(event.card, 'damage')) {
                  if (player.countCards('h') < 2) return true;
                } else if (event.card.name == 'shunshou' && player.hp > 2) {
                  return true;
                }
                return false;
              },
              priority: 10,
              content: function () {
                "step 0"
                player.loseHp();
                "step 1"
                trigger.getParent().excluded.add(player);
                "step 2"
                if (player.countCards('he')) {
                  player.chooseToDiscard('你可以弃置一张牌，令' + get.translation(trigger.player) + '展示所有手牌并弃置与之花色相同的牌', 'he').set('ai', function (card) {
                    if (jlsg.isFriend(player, trigger.player)) return false;
                    if (jlsg.isWeak(player)) return false;
                    if (jlsg.isWeak(trigger.player)) return 10 - get.value(card);
                    return 6 - get.value(card);
                  });
                } else {
                  trigger.player.loseHp();
                  event.finish();
                }
                "step 3"
                if (!result.bool) {
                  trigger.player.loseHp();
                  event.finish();
                  return;
                }
                var cards = trigger.player.getCards('h', { suit: get.suit(result.cards[0]) })
                trigger.player.showHandcards();
                if (!cards.length) {
                  trigger.player.loseHp();
                } else {
                  trigger.player.discard(cards);
                }
              },
              ai: {
                expose: 0.3,
              }
            },
            jlsg_miji: {
              audio: "ext:极略:1",
              trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
              filter: function (event, player, name) {
                if (name == 'phaseZhunbeiBegin') {
                  return player.isDamaged();
                }
                if (name == 'phaseJieshuBegin') {
                  return !game.hasPlayer(function (target) {
                    return target.hp < player.hp;
                  });
                }
              },
              frequent: true,
              content: function () {
                'step 0'
                player.chooseControl('basic', 'equip', 'trick').set('ai', function () {
                  var basic = player.countCards('he', 'basic');
                  var equip = player.countCards('he', 'equip');
                  var trick = player.countCards('he', 'trick');
                  var theLess = Math.min(basic, equip, trick);
                  switch (theLess) {
                    case basic:
                      return 'basic';
                    case equip:
                      return 'equip';
                    case trick:
                      return 'trick';
                    default: {
                      if (Math.random() < 0.5) return 'basic';
                      if (Math.random() < 0.5) return 'equip';
                      if (Math.random() < 2 / 3) return 'trick';
                      return 'basic';
                    }
                      ;
                  }
                });
                'step 1'
                var card = jlsg.findCardInCardPile(function (card) {
                  return get.type(card) == result.control;
                });
                if (card) {
                  event.card1 = card;
                  player.showCards('秘计', event.card1);
                  player.chooseTarget('将' + get.translation(card) + '交给一名角色').set('ai', function (target) {
                    var att = get.attitude(_status.event.player, target);
                    if (_status.event.du) return -att;
                    return att;
                  }, true).set('du', card.name == 'du');
                } else {
                  game.log('没有找到该类型卡牌，请重新选择');
                  event.cantSelect = result.control;
                  event.goto(0);
                }
                'step 2'
                if (result.bool) {
                  if (result.targets[0].ai.shown > player.ai.shown) {
                    player.addExpose(0.2);
                  }
                  result.targets[0].gain(event.card1, 'gain');
                }
              }
            },
            jlsg_yongji: {
              audio: "ext:极略:2",
              trigger: { source: 'damageSource' },
              forced: true,
              filter: function (event, player) {
                var phase = event.getParent('phaseUse');
                return event.card && event.card.name == 'sha' && phase && phase.player == player;
              },
              content: function () {
                var num = Math.min(3, player.getDamagedHp());
                if (num > 0) player.draw(num);
                // player.getStat().card.sha--;
                if (!player.hasSkill('jlsg_yongjiBuff')) {
                  player.storage.jlsg_yongjiBuff = 1;
                  player.addTempSkill('jlsg_yongjiBuff'); // 'phaseUseAfter'
                } else {
                  ++player.storage.jlsg_yongjiBuff;
                }
              }
            },
            jlsg_yongjiBuff: {
              // audio: "ext:极略:1",
              // trigger:{player:'useCard1'},
              // forced:true,
              // filter:function(event,player){
              //   return !event.audioed&&event.card.name=='sha'&&player.countUsed('sha',true)>1&&player.storage.jlsg_yongjiBuff;
              // },
              // content:function(){
              //   trigger.audioed=true;
              // },
              mod: {
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha' && player.storage.jlsg_yongjiBuff) {
                    return num + player.storage.jlsg_yongjiBuff;
                  }
                }
              },
              charlotte: true,
              sourceSkill: "jlsg_yongji",
              onremove: true,
            },
            jlsg_wuzhi: {
              audio: "ext:极略:1",
              forced: true,
              trigger: { player: 'phaseDiscardEnd' },
              filter: function (event, player) {
                let shaFulfilled = () => {
                  var shaTemplate = { name: 'sha', isCard: true };
                  var num = lib.card['sha'].usable;
                  if (!num) return true;
                  num = game.checkMod(shaTemplate, player, num, 'cardUsable', player);
                  var numUsed = player.getHistory('useCard', event => get.name(event.card) == 'sha'
                  ).length;
                  return !num || num <= numUsed;
                };
                return !shaFulfilled();
              },
              content: function () {
                'step 0'
                player.damage("nosource");
                'step 1'
                var card = get.cardPile2('sha');
                if (card) player.gain(card, 'gain2', 'log');
              }
            },
            // 真有你的啊 用别人的字做技能名
            jlsg_yidu: {
              audio: "ext:极略:2",
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              usable: 1,
              // frequent: true,
              filter: function (event, player) {
                var currPlayer = _status.currentPhase;
                if (!currPlayer || currPlayer == player || !currPlayer.countCards('h')) return false;
                var evt = event.getl(player);
                return evt && evt.hs && evt.hs.length > 0;
              },
              check(event, player) {
                return true;
              },
              content: function () {
                var suits = trigger.getl(player).hs.map(card => get.suit(card));
                var num = _status.currentPhase.countCards('h',
                  (card) => suits.includes(get.suit(card))
                );
                player.draw(num);
              },
              ai: {
                threaten: 0.5,
                effect: {
                  target: function (card, player, target, result2, islink) {
                    if (_status.currentPhase == target) return;
                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 1 - 0.1 * _status.currentPhase.countCards('h');
                  }
                },
                noh: true,
                skillTagFilter: function (player, tag) {
                  if (tag == 'noh') {
                    if (_status.currentPhase == player) return false;
                    return _status.currentPhase.countCards('h') > 4;
                  }
                }
              }
            },
            jlsg_zhubao: {
              group: 'jlsg_zhubao_phase',
              audio: "ext:极略:1",
              direct: true,
              trigger: {
                global: ['loseAfter', 'equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (_status.currentPhase != player || !player.countCards('h')) return false;
                if (!player.storage.jlsg_zhubao) {
                  player.storage.jlsg_zhubao = [];
                }
                return game.hasPlayer(p => {
                  if (p == player) return false;
                  if (player.storage.jlsg_zhubao.includes(p)) return false;
                  var evt = event.getl(p);
                  return evt && evt.hs && evt.hs.length > 0;
                });
              },
              direct: true,
              content: function () {
                'step 0'
                if (!player.storage.jlsg_zhubao) {
                  player.storage.jlsg_zhubao = [];
                }
                event.suitMap = [];
                game.filterPlayer(p => p != player && !player.storage.jlsg_zhubao.includes(p)).forEach(p => {
                  var evt = trigger.getl(p);
                  if (evt && evt.hs) {
                    var suits = [...new Set(evt.hs.map(card => get.suit(card)))];
                    event.suitMap.push([p, suits]);
                  }
                });
                'step 1'
                if (!event.suitMap.length) {
                  event.finish();
                  return;
                }
                [event.target, event.suits] = event.suitMap.shift();
                event.num = player.countCards('h',
                  (card) => event.suits.includes(get.suit(card))
                );
                if (event.num == 0) {
                  event.redo();
                  return;
                }
                var prompt = `###${get.prompt(event.name, event.target)}###你可以摸${get.cnNumber(event.num)}张牌`;
                player.chooseBool(prompt);
                'step 2'
                if (result.bool) {
                  player.storage.jlsg_zhubao.push(event.target);
                  player.logSkill(event.name, event.target);
                  var num = player.countCards('h',
                    (card) => event.suits.includes(get.suit(card))
                  );
                  player.draw(event.num);
                }
                event.goto(1);
              },
              contentx: function () {
                if (!player.storage.jlsg_zhubao) {
                  player.storage.jlsg_zhubao = [];
                }
                var suits = [];
                game.filterPlayer(p => p != player).forEach(p => {
                  var evt = trigger.getl(p);
                  if (evt && evt.hs) {
                    suits.addArray(evt.hs.map(card => get.suit(card)));
                  }
                });
                var num = player.countCards('h',
                  (card) => suits.includes(get.suit(card))
                );
                if (num > 10) num = 10;
                player.draw(num);
              },
              subSkill: {
                phase: {
                  silent: true,
                  forced: true,
                  trigger: { player: 'phaseBegin' },
                  content: function () {
                    player.storage.jlsg_zhubao = [];
                  },
                },
              },
            },
            jlsg_buqu: {
              audio: "ext:极略:2",
              inherit: 'buqu',
            },
            jlsg_fenji: {
              audio: "ext:极略:1",
              trigger: {
                global: 'shaBegin',
              },
              filter: function (event, player) {
                return event.card.name == 'sha';
              },
              logTarget: 'target',
              check: function (event, player) {
                return get.attitude(player, event.target) > 2;
              },
              content: function () {
                'step 0'
                if (trigger.target.ai.shown > player.ai.shown) {
                  player.addExpose(0.3);
                }
                player.loseHp();
                'step 1'
                trigger.target.draw(2);
              }
            },
            jlsg_jiaomei: {
              audio: "ext:极略:1",
              usable: 1,
              trigger: {
                player: 'useCardToPlayered',
              },
              logTarget: 'target',
              filter: function (event, player) {
                // if (event.target == player) return false;
                if (!player.isPhaseUsing()) return false;
                return get.type(event.card) == 'trick' || event.card.name == 'sha';
              },
              check: function (event, player) {
                if (event.card.name == 'tiesuo') return false;
                var target = event.target;
                var effect = 0.5 * get.effect(target, { name: 'tiesuo' }, player, player);
                if (player.hasSkill('jlsg_huoshui')) {
                  effect += (target.isLinked() ? -0.8 : 0.8) *
                    get.effect(target, { name: 'shunshou' }, player, player);
                  effect += (target.isLinked() ? 1 : 0.2) *
                    get.damageEffect(target, player, player);
                }
                if (target.isLinked() && !target.hasSkillTag('noturn')) {
                  effect += get.attitude(player, target) * (
                    target.isTurnedOver() ? 8 : -8
                  );
                }
                return effect > 0;
              },
              prompt2: function (event, player) {
                return `令${get.translation(event.target)}${event.target.isLinked() ? '重置并翻面' : '横置'}`;
              },
              content: function () {
                if (trigger.target.isLinked()) {
                  trigger.target.link();
                  trigger.target.turnOver();
                } else {
                  trigger.target.link();
                }
              },
            },
            jlsg_huoshui: {
              audio: "ext:极略:1",
              trigger: {
                player: 'phaseJieshuBegin',
              },
              filter: function (event, player) {
                return game.hasPlayer(p => p != player && (p.isTurnedOver() || p.isLinked()));
              },
              check: function (event, player) {
                var effect = 0;
                for (var p of game.filterPlayer(p => p != player)) {
                  if (p.isLinked()) {
                    effect += get.effect(p, { name: 'shunshou' }, player, player);
                  }
                  if (p.isTurnedOver()) {
                    effect += get.damageEffect(p, player, player);
                  }
                }
                return effect > 0;
              },
              content: function () {
                'step 0'
                event.targets = game.filterPlayer(p => p.isLinked());
                player.line(event.targets, 'green');
                'step 1'
                if (event.targets.length == 0) {
                  event.goto(2);
                  return;
                }
                event.target = event.targets.shift();
                if (event.target.countGainableCards(player, 'he') != 0) {
                  player.gainPlayerCard(event.target, true);
                }
                event.redo();
                'step 2'
                event.targets = game.filterPlayer(p => p.isTurnedOver());
                player.line(event.targets, 'green');
                'step 3'
                if (event.targets.length == 0) {
                  event.finish();
                  return;
                }
                event.target = event.targets.shift();
                event.target.damage(player);
                event.redo();
              },
            },
            jlsg_hubu: {
              audio: "ext:极略:1",
              trigger: { player: 'damageEnd', source: 'damageEnd' },
              filter: function (event) {
                return event.card && event.card.name == 'sha'; // && event.notLink();
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt(event.name), function (card, player, target) {
                  return player != target && player.canUse('juedou', target);
                }).ai = function (target) {
                  return get.effect(target, { name: 'juedou' }, player, target);
                }
                'step 1'
                if (result.bool) {
                  event.target = result.targets[0];
                  player.logSkill(event.name, event.target);
                  event.target.judge(function (card) {
                    if (get.suit(card) == 'spade') return 1;
                    return -0.5;
                  }).judge2 = result => !result.bool;
                }
                else {
                  event.finish();
                }
                'step 2'
                if (!result.bool) {
                  player.useCard({ name: 'juedou' }, event.target, 'nowuxie');
                }
                else {
                  event.finish();
                }
              }
            },
            jlsg_yuhua: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin2', player: 'damageBegin4' },
              intro: {
                content: '已发动过#次',
              },
              filter: function (event, player) {
                return event.card && get.type(event.card, 'trick') == 'trick';
              },
              logTarget: function (event, player) {
                return player == event.player ? event.source : event.player;
              },
              check: function (event, player) {
                _status.jlsg_yuhua_judging = true;
                if (player == event.player) {
                  return true;
                }
                if (get.attitude(player, event.player) > 0) return true;
                if (get.damageEffect(event.player, player, player, event.nature) <= 0) return true;
                delete _status.jlsg_yuhua_judging;
                return false;
              },
              content: function () {
                'step 0'
                trigger.cancel();
                player.draw();
                'step 1'
                player.storage.jlsg_yuhua = player.storage.jlsg_yuhua || 0;
                ++player.storage.jlsg_yuhua;
                player.markSkill('jlsg_yuhua');
              },
              mod: {
                maxHandcard: function (player, num) {
                  if (player.storage.jlsg_yuhua) {
                    return num - player.storage.jlsg_yuhua;
                  }
                }
              },
              ai: {
                notrick: true,
                notricksource: true,
                skillTagFilter(player, tag, arg) {
                  if (tag == 'notrick') return true;
                  return !!((get.attitude(player, _status.event.player) >= 0) ^ (Math.random() > 0.8));
                },
              },
            },
            jlsg_dengxian: {
              audio: "ext:极略:2",
              skillAnimation: true,
              animationColor: 'orange',
              unique: true,
              juexingji: true,
              trigger: { player: 'phaseZhunbeiBegin' },
              forced: true,
              filter: function (event, player) {
                return player.getHandcardLimit() == 0;
              },
              content: function () {
                'step 0'
                player.awakenSkill('jlsg_dengxian');
                // player.storage.jlsg_dengxian = true;
                'step 1'
                player.addSkill('jlsg_dengxian2');
                player.markSkill('jlsg_dengxian');
                player.chooseControl('额外摸牌阶段', '额外出牌阶段', [0, 1].randomGet())
                  .set('prompt', `###请选择一项###${lib.translate.jlsg_dengxian_info}`)
                'step 2'
                if (result.index === 0) {
                  game.log(player, '选择替换为摸牌阶段');
                } else {
                  game.log(player, '选择替换为出牌阶段');
                }
                player.storage.jlsg_dengxian = result.index;
              },
              intro: {
                nocount: true,
                content(content, player, skill) {
                  var str = '跳过弃牌阶段';
                  if (content === 0) {
                    str += ',并替换为摸牌阶段';
                  }
                  else if (content === 1) {
                    str += ',并替换为出牌阶段';
                  }
                  return str;
                },
              },
            },
            jlsg_dengxian2: {
              audio: 'jlsg_dengxian',
              unique: true,
              forced: true,
              trigger: { player: 'phaseDiscardBefore' },
              content: function () {
                trigger.cancel();
                var phase = ['phaseDraw', 'phaseUse'][player.storage.jlsg_dengxian];
                if (!phase) return;
                var next = player[phase]();
                event.next.remove(next);
                trigger.getParent().next.push(next);
              },
            },
            jlsg_tiance: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              direct: true,
              content: function () {
                'step 0'
                if (event.target) return;
                player.chooseTarget(get.prompt2('jlsg_tiance'));
                'step 1'
                if (!event.target) {
                  if (!result.bool) {
                    event.finish();
                    return;
                  }
                  event.target = result.targets[0];
                  player.logSkill('jlsg_tiance', result.targets[0]);
                }
                event.target.judge();
                'step 2'
                event.result = result;
                if (!result.suit) return;
                player.chooseControl('牌堆', '弃牌堆', '角色').set('ai', function () {
                  return Math.floor(Math.random() * 3);
                }).set('prompt', `请选择${get.translation(event.target)}获得牌的区域`);
                'step 3'
                game.log(player, '选择了', result.control);
                if (result.control == '弃牌堆') {
                  var validCards = Array.from(ui.discardPile.childNodes).filter(c => c.suit === event.result.suit);
                  if (validCards.length) {
                    var cards = validCards.randomGets(2);
                    event.target.gain(cards, 'gain2');
                  }
                }
                else if (result.control == '角色') {
                  var target = game.filterPlayer(
                    p => p != event.target && p.countCards('he', c => get.suit(c) == event.result.suit)
                  ).randomGet();
                  if (target) {
                    var cards = target.getCards('he', c => get.suit(c) == event.result.suit).randomGets(2);
                    event.target.gain(target, cards, 'give');
                  }
                } else {
                  var validCards = Array.from(ui.cardPile.childNodes).filter(c => c.suit === event.result.suit);
                  if (validCards.length) {
                    var cards = validCards.randomGets(2);
                    event.target.gain(cards, 'gain2');
                  }
                }
              }
            },
            jlsg_jiexin: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2(event.name));
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                player.logSkill(event.name, target);
                var next = game.createEvent('jlsg_jiexin_tiance');
                next.player = player;
                next.target = target;
                next.setContent(lib.skill.jlsg_tiance.content);
                'step 2'
                if (result.color && trigger.card && result.color === get.color(trigger.card)) {
                  player.chooseTarget('是否再次发动【天策】？');
                } else {
                  event.finish();
                }
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                // player.logSkill(event.name, target);
                var next = game.createEvent('jlsg_jiexin_tiance');
                next.player = player;
                next.target = target;
                next.setContent(lib.skill.jlsg_tiance.content);
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                      if (!target.hasFriend()) return;
                      if (target.hp >= 4) return [1, get.tag(card, 'damage') * 1.5];
                      if (target.hp == 3) return [1, get.tag(card, 'damage') * 1];
                      if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                    }
                  }
                }
              }
            },
            jlsg_zhengnan: { // 征南
              audio: "ext:极略:2",
              enable: "phaseUse",
              usable: 1,
              filterTarget: function (card, player, target) {
                return target.countCards('hej');
              },
              content: function () {
                'step 0'
                player.discardPlayerCard(target, 'hej', forced).set('ai', (button, buttons) => {
                  var target = _status.event.getParent().target;
                  var val = get.buttonValue(button); // get.effect(target, {name: 'nanman'}, get.owner(buttons.randomGet().link), _status.event.player) 
                  if (get.attitude(_status.event.player, get.owner(button.link)) > 0) val = -val;
                  if (button.name && get.type(button.link) != 'basic') val += 6;
                  return val;
                })
                'step 1'
                if (!result.bool || get.type(result.links[0]) == 'basic') {
                  event.finish();
                  return;
                }
                target.chooseUseTarget({ name: 'nanman' }, true).set('oncard', (card, player) => {
                  _status.event.skill = 'jlsg_zhengnan';
                });
              },
              group: "jlsg_zhengnan2",
              ai: {
                result: {
                  target: function (player, target) {
                    var ratio = target.countCards('hej', c => get.type(c) != 'basic') / target.countCards('hej');
                    if (get.attitude(player, target) < 0) return 1 - ratio;
                    return ratio;
                  },
                  player: 1,
                },
                order: function (item, player) {
                  return get.order({ name: 'nanman' }, player) + 0.5;
                },
                threaten: 0.5,
              },
            },
            jlsg_zhengnan2: {
              audio: "jlsg_zhengnan",
              frequent: true,
              trigger: { global: 'damageEnd' },
              filter: function (event, player) {
                var evt = event.getParent('useCard');
                return event.card && event.card.name == 'nanman' && evt && evt.skill === 'jlsg_zhengnan';
              },
              content: function () {
                player.draw();
              },
            },
            jlsg_tongxin: {
              audio: false,
              unique: true,
              limited: true,
              enable: 'chooseToUse',
              filter: function (event, player) {
                return event.type == 'dying' && event.dying === player;
              },
              precontent: function () {
                var audioS = 'jlsg_tongxin_';
                if ([player.name, player.name1, player.name2].includes("jlsgsk_baosanniang")) {
                  audioS += 'f';
                }
                else if ([player.name, player.name1, player.name2].includes("jlsgsk_guansuo")) {
                  audioS += 'm';
                }
                else if ('mf'.includes(player.sex[0])) {
                  audioS += player.sex[0];
                } else {
                  audioS += ['m', 'f'].randomGet();
                }
                game.trySkillAudio(audioS, player);
              },
              content: function () {
                'step 0'
                player.awakenSkill(event.name);
                'step 1'
                var num = 2 - player.hp;
                if (num > 0) player.recover(num);
                'step 2'
                var list = [
                  'jlsgsk_guansuo',
                  'jlsgsk_baosanniang',
                ]
                var players = game.players.concat(game.dead);
                for (var i = 0; i < players.length; i++) {
                  [
                    players[i].name,
                    players[i].name1,
                    players[i].name2,
                  ].forEach(n => {
                    if (n && n.endsWith('guansuo')) list.remove('jlsgsk_guansuo');
                    if (n && n.endsWith('baosanniang')) list.remove('jlsgsk_baosanniang');
                  })
                }
                if (!list.length) {
                  event.finish();
                  return;
                }
                player.chooseButton().set('ai', function (button) {
                  return Math.random();
                }).set('createDialog', ['是否替换武将牌？', [list, 'character']]);
                'step 3'
                if (result.bool) {
                  var name = player.name;
                  if (player.name2) {
                    if (!get.character(player.name)[3].includes(event.name)) {
                      if (get.character(player.name2)[3].includes(event.name)) {
                        name = player.name2;
                      }
                    }
                  }
                  player.reinit(name, result.links[0]);
                }
              },
              ai: {
                skillTagFilter: function (player) {
                  if (!_status.event.dying || _status.event.dying != player || player.storage.jlsg_tongxin) return false;
                },
                save: true,
                order: 6,
                result: {
                  player: 1
                },
              },
            },
            jlsg_tongxin_f: {
              audio: "ext:极略:2",
            },
            jlsg_tongxin_m: {
              audio: "ext:极略:2",
            },
            jlsg_jianwu: {
              audio: "ext:极略:2",
              trigger: { player: 'useCard' },
              forced: true,
              silent: true,
              filter: function (event, player) {
                return get.type(event.card) == 'basic';
              },
              content: function () {
                player.addSkill('jlsg_jianwu2');
              },
            },
            jlsg_jianwu2: {
              trigger: { player: 'useCard1' },
              // audio: "jlsg_jianwu",
              direct: true,
              firstDo: true,
              charlotte: true,
              content: function () {
                player.removeSkill('jlsg_jianwu2');
                if (trigger.card.name == 'sha') {
                  player.logSkill('jlsg_jianwu');
                }
                if (get.type(trigger.card) != 'basic') {
                  player.removeSkill('jlsg_jianwu2');
                }
              },
              mod: {
                cardUsable: function (card) {
                  if (card.name == 'sha') return Infinity;
                },
                targetInRange: function (card) {
                  if (card.name == 'sha') return true;
                },
                selectTarget: function (card, player, range) {
                  if (card.name != 'sha') return;
                  if (range[1] == -1) return;
                  range[1] += 1;
                }
              },
              mark: true,
              intro: {
                content: '使用【杀】无距离和次数限制且目标上限+1',
              },
            },
            jlsg_zhennan: { // 镇南
              audio: "ext:极略:2",
              usable: 1,
              trigger: { global: 'useCardToTargeted' },
              filter: function (event, player) {
                return event.isFirstTarget && (event.card.name == 'sha' || get.type(event.card) == 'trick') &&
                  event.targets.length > 1;
              },
              direct: true,
              content: function () {
                'step 0'
                var targets = trigger.targets;
                var choice, effect = 0;
                for (target of targets) {
                  var thisEffect = get.damageEffect(target, player, player);
                  if (thisEffect > effect) {
                    choice = target;
                    effect = thisEffect;
                  }
                }
                player.chooseTarget(get.prompt2(event.name)).set('filterTarget', function (card, player, target) {
                  return _status.event.targets.includes(target);
                }).set('ai', function (target) {
                  return target == _status.event.choice ? 1 : -1;
                }).set('targets', targets).set('choice', choice);
                'step 1'
                if (result.bool) {
                  player.logSkill(event.name, result.targets[0]);
                  result.targets[0].damage();
                }
              }
            },
            jlsg_shemi: {
              audio: "ext:极略:2",
              trigger: { player: 'chooseToDiscardBegin' },
              direct: true,
              intro: {
                content: function (content, player, skill) {
                  var str = "弃牌阶段记录弃牌数：" + content;
                  if (player.storage.jlsg_shemi_draw) {
                    str = `摸牌阶段额外摸${get.cnNumber(player.storage.jlsg_shemi_draw)}张牌 <br>` + str;
                  }
                  return str;
                },
                markcount: function (storage, player) {
                  return player.storage.jlsg_shemi_draw || 0;
                }
              },
              filter: function (event, player) {
                return event.getParent().name == 'phaseDiscard' && event.selectCard;
              },
              content: function () {
                trigger.selectCard[1] = Infinity;
                if (player.countMark("jlsg_shemi") == trigger.selectCard[0]) { // buff ai
                  var cards = player.getDiscardableCards(player, 'h');
                  if (cards.length > trigger.selectCard[0]) {
                    var card = cards.map((c, i) => [trigger.ai(c), i])
                      .sort((pair1, pair2) => pair1[0] - pair2[0])[1];
                    trigger.set('card', cards[card])
                      .set('ai', function (card) {
                        return (card === _status.event.card ? 5 : 0) - get.useful(card);
                      });
                  }
                }
              },
              subSkill: {
                draw: {
                  audio: "jlsg_shemi",
                  trigger: { player: 'phaseDrawBegin2' },
                  forced: true,
                  charlotte: true,
                  filter: function (event, player) {
                    return !event.numFixed && player.countMark('jlsg_shemi_draw');
                  },
                  content: function () {
                    trigger.num += player.countMark('jlsg_shemi_draw');
                  },
                },
                record: { // to avoid disable
                  trigger: {
                    player: 'phaseDiscardAfter',
                  },
                  charlotte: true,
                  silent: true,
                  init: function (player) {
                    player.storage["jlsg_shemi"] = 0;
                  },
                  content: function () {
                    var cntC = 0;
                    player.getHistory('lose', function (evt) {
                      if (evt && evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger && evt.hs) {
                        cntC += evt.hs.length;
                      }
                    });
                    player.storage["jlsg_shemi"] = cntC;
                    player.markSkill("jlsg_shemi");
                  },
                },
                force: {
                  trigger: {
                    player: 'phaseDiscardEnd',
                  },
                  firstDo: true,
                  direct: true,
                  filter: function (event, player) {
                    return !event.cards;
                  },
                  content: function () {
                    'step 0'
                    var evt = player.chooseToDiscard([1, Infinity], `###${get.prompt(event.name)}###你可以多弃置任意张牌`);
                    if (player.countMark("jlsg_shemi") == 0) {
                      var cards = player.getDiscardableCards(player, 'h');
                      if (cards.length) {
                        var card = cards.map((c, i) => [get.useful(c), i])
                          .reduce((pair1, pair2) => pair1[0] < pair2[0] ? pair1 : pair2)[1];
                        evt.set('card', cards[card])
                          .set('ai', function (card) {
                            return (card === _status.event.card ? 5 : 0) - get.useful(card);
                          });
                      }
                    }
                    'step 1'
                    if (result.bool) {
                      trigger.cards = result.cards;
                    }
                  },
                }
              },
              group: ["jlsg_shemi2", "jlsg_shemi_draw", "jlsg_shemi_record", "jlsg_shemi_force"],
            },
            jlsg_shemi2: {
              audio: "jlsg_shemi",
              trigger: {
                player: 'phaseDiscardEnd',
              },
              forced: true,
              filter: function (event, player) {
                var cntC = 0;
                player.getHistory('lose', function (evt) {
                  if (evt && evt.type == 'discard' && evt.getParent('phaseDiscard') == event && evt.hs) {
                    cntC += evt.hs.length;
                  }
                });
                return cntC > player.countMark("jlsg_shemi");
              },
              content: function () {
                player.storage.jlsg_shemi_draw = player.storage.jlsg_shemi_draw || 0;
                player.storage.jlsg_shemi_draw += 1;
                if (player.isHealthy()) {
                  player.gainMaxHp();
                }
              },
              ai: {
                threaten: 1,
              },
            },
            jlsg_jiaohui: {
              audio: "ext:极略:2",
              trigger: { player: 'damageBegin2' },
              frequent: true,
              direct: true,
              content: function () {
                'step 0'
                if (player.countDiscardableCards(player, 'he')) {
                  var next = player.chooseToDiscard(`###${get.prompt(event.name)}###弃置一张牌`).set('logSkill', event.name);
                  if (player.countCards('h') - 1 === player.hp) {
                    next.set('ai', function (card) {
                      return _status.event.gain - get.value(card);
                    }).set('gain', -get.damageEffect(player, trigger.source, player, trigger.nature) / 1.5);
                  }
                }
                'step 1'
                if (result.bool) {
                  event.goto(3);
                } else {
                  player.chooseBool("###是否摸一张牌?###" + get.skillInfoTranslation(event.name)).set('frequentSkill', event.name);
                }
                'step 2'
                if (result.bool) {
                  player.logSkill(event.name);
                  player.draw();
                } else {
                  event.finish();
                }
                'step 3'
                if (player.countCards('h') === player.hp) {
                  --trigger.num;
                }
              },
              ai: {
                maixie: true,
                maixie_defend: true,
              },
            },
            jlsg_wengua: {
              global: 'jlsg_wengua2',
              audio: "ext:极略:2",
            },
            jlsg_wengua2: {
              sub: true,
              trigger: { player: "phaseZhunbeiBegin" },
              filter: function (event, player) {
                return game.hasPlayer(c => c.hasSkill('jlsg_wengua'));
              },
              unique: true,
              direct: true,
              content: function () {
                'step 0'
                var list = game.filterPlayer(function (current) {
                  return current.hasSkill('jlsg_wengua');
                });
                if (list.length == 1 && list[0] == player) {
                  event.target = player;
                  event.goto(2);
                  return;
                }
                player.chooseCardTarget({
                  prompt2: '交给' + get.translation(list) + '一张牌',
                  prompt: get.prompt(event.name),
                  filterCard: true,
                  position: 'he',
                  filterTarget: function (card, player, target) {
                    return _status.event.list.includes(target);
                  },
                  list: list,
                  selectTarget: list.length > 1 ? 1 : -1,
                  goon: function () {
                    for (var i of list) {
                      if (get.attitude(player, i) > 0) return 1;
                      return -1;
                    }
                  }(),
                  ai1: function (card) {
                    if (_status.event.goon > 0) return 7 - get.value(card);
                    return 0.01 - get.value(card);
                  },
                  ai2: function (target) {
                    var card = ui.selected.cards[0];
                    var black = get.color(card) == 'black' ? 3 : 0;
                    if (!target.hasSkill('jlsg_fuzhu')) black = 0;
                    return (black + get.value(card, target)) * get.attitude(_status.event.player, target);
                  },
                });
                'step 1'
                if (result.bool && result.cards.length && result.targets.length) {
                  var target = result.targets[0];
                  event.target = target;
                  player.logSkill('jlsg_wengua', target);
                  player.line(target, 'green');
                  target.gain(result.cards, player, 'giveAuto');
                } else {
                  event.finish();
                }
                'step 2'
                var prompt2 = `将一张牌置于牌堆底，然后${event.target == player ? '' : `和${get.translation(player)}`}摸一张牌`;
                event.target.chooseCard(`###${get.prompt('jlsg_wengua')}###${prompt2}`, 'he').set('ai', function (card) {
                  var value = -get.value(card);
                  if (get.attitude(_status.event.player, _status.event.target) > 0) {
                    value += 8;
                  }
                  if (_status.event.player.hasSkill('jlsg_fuzhu')) {
                    value += get.color(card) == 'black' ? 3 : -1;
                  }
                }).set('target', player);
                'step 3'
                if (result.bool) {
                  if (player == event.target) {
                    player.logSkill('jlsg_wengua');
                  }
                  var next = event.target.lose(result.cards, ui.cardPile);
                  game.log(event.target, '将一张牌置于牌堆底');
                  game.broadcastAll(function (player) {
                    var cardx = ui.create.card();
                    cardx.classList.add('infohidden');
                    cardx.classList.add('infoflip');
                    player.$throw(cardx, 1000, 'nobroadcast');
                  }, event.target);
                } else {
                  event.finish();
                }
                'step 4'
                game.delayx();
                'step 5'
                if (player == event.target) {
                  player.draw();
                }
                else {
                  game.asyncDraw([player, target], null, null);
                }
              },
            },
            jlsg_fuzhu: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              limited: true,
              skillAnimation: true,
              animationColor: 'wood',
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                'step 0'
                player.awakenSkill(event.name);
                'step 1'
                if (!ui.cardPile.lastChild || !target.isIn()) {
                  event.finish();
                  return;
                }
                player.showCards(ui.cardPile.lastChild);
                'step 2'
                var card = ui.cardPile.lastChild;
                if (get.color(card) == 'black') {
                  card.remove();
                  game.updateRoundNumber();
                  player.useCard({
                    name: 'sha',
                    cards: [card],
                  }, target, false);
                  event.goto(1);
                }
              },
              result: {
                target: function (player, target) {
                  return -game.roundNumber;
                }
              },
            },
            jlsg_yinyuan: {
              audio: "ext:极略:2",
              init: function (player) {
                player.storage.jlsg_yinyuan = [];
              },
              trigger: { player: "phaseJieshuBegin" },
              direct: true,
              intro: {
                content: '已对$发动过【姻缘】'
              },
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt2(event.name))
                  .set("ai", function (player) {
                    var eff = get.attitude(_status.event.player, player);
                    if (_status.event.player.storage.jlsg_yinyuan && _status.event.player.storage.jlsg_yinyuan.includes(player)) {
                      return eff;
                    }
                    return eff + get.attitude(_status.event.player, _status.event.player);
                  });
                "step 1"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                event.target = result.targets[0];
                var card = get.cardPile2(c => c.suit == 'heart');
                if (card) {
                  event.target.gain(card, 'gain2');
                }
                if (player.storage[event.name].includes(event.target)) {
                  event.finish();
                } else {
                  player.markAuto(event.name, [event.target]);
                }
                "step 2"
                var card = get.cardPile2(c => c.suit == 'heart');
                if (card) {
                  player.gain(card, 'gain2');
                }
              }
            },
            jlsg_konghou: {
              audio: "ext:极略:2",
              trigger: { global: 'useCard' },
              direct: true,
              preHidden: true,
              filter: function (event, player) {
                if (event.all_excluded || event.player == player || !event.player.isPhaseUsing() || !player.countCards('he')) return false;
                var evt = event.getParent('phaseUse');
                if (evt.name != 'phaseUse') {
                  return false;
                }
                var uses = event.player.getHistory('useCard', e => e.getParent('phaseUse') == evt);
                return uses[0] == event && get.type(event.card) == 'trick'
                  || uses[1] == event && get.type(event.card) == 'basic';
              },
              content: function () {
                "step 0"
                var prompt = `###${get.prompt(event.name, trigger.player)}###弃置一张牌，令${get.translation(trigger.card)}无效`;
                player.chooseToDiscard(prompt, "he")
                  .set('ai', function (card) {
                    return (_status.event.goon / 1.4) - get.value(card);
                  })
                  .set('goon', function () {
                    if (!trigger.targets.length) return -get.attitude(player, trigger.player);
                    var num = 0;
                    for (var i of trigger.targets) {
                      num -= get.effect(i, trigger.card, trigger.player, player)
                    }
                    return num;
                  }())
                  .setHiddenSkill(event.name)
                  .logSkill = [event.name, trigger.player];
                "step 1"
                if (result.bool) {
                  trigger.cancel();
                }
              },
            },
            jlsg_zhidi: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              shaRelated: true,
              init: function (player) {
                player.storage.jlsg_zhidi = [false, false, false, false];
              },
              forced: true,
              filter: function (event, player) {
                return player.storage.jlsg_zhidi.reduce((a, b) => a + b) < 4;
              },
              content: function () {
                var candidates = Array.from(Array(4).keys());
                candidates = candidates.filter(c => !player.storage.jlsg_zhidi[c]);
                var candidate = candidates.randomGet();
                player.storage[event.name][candidate] = true;
                game.log(player, `获得了〖制敌〗效果${get.cnNumber(candidate + 1)}`);
                player.addSkill(event.name + (candidate + 1));
                player.markSkill(event.name);
              },
              intro: {
                content: function (storage, player, skill) {
                  return '已经获得效果: ' + storage.map((f, i) => f ? i + 1 : null).filter(i => i).reduce((a, b) => a + ' ' + b, '');
                },
                markcount: function (storage, player, skill) {
                  return storage.reduce((a, b) => a + b);
                },
              },
            },
            jlsg_zhidi1: {
              sub: true,
              forced: true,
              trigger: {
                source: "damageSource",
              },
              filter: function (event, player) {
                return event.card && event.card.name == 'sha';
              },
              content: function () {
                player.draw();
              }
            },
            jlsg_zhidi2: {
              sub: true,
              trigger: { player: 'useCard' },
              forced: true,
              filter: function (event, player) {
                return event.card.name == 'sha';
              },
              content: function () {
                trigger.directHit.addArray(game.players);
              },
              ai: {
                unequip: true,
                unequip_ai: true,
                directHit_ai: true,
                skillTagFilter: function (player, tag, arg) {
                  if (tag === 'directHit_ai') {
                    return arg.card.name == 'sha';
                  }
                  // console.log(tag, arg);
                  return arg && arg.card.name == 'sha';
                }
              }
            },
            jlsg_zhidi3: {
              mod: {
                targetInRange: function (card, player) {
                  if (card.name == 'sha') return true;
                },
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha') return num + player.storage.jlsg_zhidi.reduce((a, b) => a + b);
                },
              }
            },
            jlsg_zhidi4: {
              mod: {
                selectTarget: function (card, player, range) {
                  if (card.name != 'sha') return;
                  if (range[1] == -1) return;
                  range[1] += player.storage.jlsg_zhidi.reduce((a, b) => a + b);
                }
              }
            },
            jlsg_jijun: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              complexCard: true,
              selectCard: [1, 4],
              check: function (card) {
                var player = _status.event.player;
                var cards = _status.event.player.getExpansions('jlsg_jijun').filter(c => c.suit == get.suit(card, player));
                if (cards.length != 0 && cards[0].number > get.number(card, player)) return -1;
                return get.number(card, player) - get.value(card) + 1;
              },
              filterCard: function (card) {
                var suit = get.suit(card);
                for (var i = 0; i < ui.selected.cards.length; i++) {
                  if (get.suit(ui.selected.cards[i]) == suit) return false;
                }
                return true;
              },
              discard: false,
              lose: false,
              // delay: false,
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              marktext: "军",
              intro: {
                content: "expansion",
                markcount: 'expansion',
              },
              content: function () {
                'step 0'
                var suits = cards.map(c => get.suit(c, player));
                event.cards = player.getExpansions(event.name).filter(c => suits.includes(c.suit));
                player.addToExpansion(player, cards, 'give').gaintag.add(event.name);
                'step 1'
                player.gain(event.cards, 'gain2');
                'step 2'
                var list = [];
                for (var name of lib.inpile) {
                  var type = get.type(name);
                  if (type != 'basic') {
                    continue;
                  }
                  if (lib.filter.cardEnabled({ name: name }, player)) {
                    list.push([type, '', name]);
                  }
                  if (name == 'sha') {
                    for (var j of lib.inpile_nature) {
                      if (lib.filter.cardEnabled({ name: name, nature: j }, player))
                        list.push([type, '', name, j]);
                    }
                  }
                }
                var next = player.chooseButton(['集军', [list, 'vcard']]);
                var choice, value = 0;
                for (let [_, __, cardName, nature] of list) { // choose button ai
                  let card = { name: cardName, nature: nature }
                  let newV = player.getUseValue(card);
                  if (newV > value) {
                    choice = [cardName, nature];
                    value = newV;
                  }
                }
                next.filterButton = function (button, player) {
                  return true;
                }
                next.ai = function (button) {
                  if (!_status.event.choice) {
                    return -1;
                  }
                  return (button.link[2] === _status.event.choice[0] &&
                    (button.link[3] || true) === (_status.event.choice[1] || true)) ? 1 : 0;
                }
                next.choice = choice;
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.card = { name: result.links[0][2], nature: result.links[0][3] };
                player.chooseUseTarget(event.card, true, 'nodistance');
              },
              ai: {
                order: 8,
                result: {
                  player: 1,
                },
              }
            },
            jlsg_fangtong: {
              audio: "ext:极略:2",
              derivation: ['leiji', 'jlsg_zhoufu', 'jlsg_shendao', 'jlsgsy_biantian'],
              trigger: {
                player: ["addToExpansionAfter", "gainAfter"],
              },
              forced: true,
              filter: function (event, player) {
                if (event.name == 'addToExpansion') {
                  if (!event.gaintag.includes('jlsg_jijun')) {
                    return false;
                  }
                } else {
                  var evt = event.getl(player);
                  if (!(evt && evt.xs && evt.xs.length > 0)) {
                    return false;
                  }
                }
                var list = lib.skill.jlsg_fangtong.getValid(player);
                var current = player.additionalSkills.jlsg_fangtong || [];
                return current.length != list.length;
              },
              content: function () {
                var list = lib.skill.jlsg_fangtong.getValid(player);
                player.removeAdditionalSkill(event.name);
                if (list.length) {
                  player.addAdditionalSkill(event.name, list);
                }
              },
              getValid(player) {
                var cnt = player.getExpansions('jlsg_jijun').reduce((a, b) => a + b.number, 0);
                var list = [];
                if (cnt >= 9) {
                  list.push('leiji');
                }
                if (cnt >= 18) {
                  list.push('jlsg_zhoufu');
                }
                if (cnt >= 27) {
                  list.push('jlsg_shendao');
                }
                if (cnt >= 36) {
                  list.push('jlsgsy_biantian');
                }
                return list;
              },
              group: 'jlsg_fangtong2',
              ai: {
                result: {
                  player: 1,
                },
                combo: 'jlsg_jijun',
              }
            },
            jlsg_fangtong2: {
              audio: 'jlsg_fangtong',
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              filter: function (event, player) {
                return player.additionalSkills.jlsg_fangtong
                  && player.additionalSkills.jlsg_fangtong.length > player.countCards('h');
              },
              content: function () {
                player.drawTo(player.additionalSkills.jlsg_fangtong.length);
              },
            },
            jlsg_jinzhi: {
              audio: "ext:极略:2",
              enable: 'chooseToUse',
              hiddenCard: function (player, name) {
                if (['basic', 'trick'].includes(get.type(name)) && lib.inpile.includes(name)
                  && player.countCards('h') && !player.getStorage('jlsg_jinzhi2').includes(name) && player.getStorage('jlsg_jinzhi2').length < 4) return true;
              },
              filter: function (event, player) {
                let hs = player.getCards("h"),
                  storage = player.getStorage('jlsg_jinzhi2');
                if (!hs.length || storage.length >= 4) return false;
                for (let i of lib.inpile) {
                  if (storage.includes(i)) continue;
                  let type = get.type2(i);
                  if (type != 'basic' && type != 'trick') continue;
                  let cardx = get.autoViewAs({ name: i }, hs)
                  if (event.filterCard && typeof event.filterCard == "function") {
                    if (event.filterCard(cardx, player, event)) return true;
                  }
                };
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  let hs = player.getCards("h"),
                    list = [];
                  for (let i = 0; i < lib.inpile.length; i++) {
                    let name = lib.inpile[i];
                    if (player.getStorage('jlsg_jinzhi2').includes(name)) continue;
                    let cardx = get.autoViewAs({ name: name }, hs);
                    if (name == 'sha') {
                      if (event.filterCard(cardx, player, event)) list.push(['基本', '', 'sha']);
                      for (var j of lib.inpile_nature) {
                        cardx = get.autoViewAs({ name: "sha", nature: j }, hs);
                        if (event.filterCard(cardx, player, event)) list.push(['基本', '', 'sha', j]);
                      }
                    }
                    else if (get.type(name) == 'trick' && event.filterCard(cardx, player, event)) list.push(['锦囊', '', name]);
                    else if (get.type(name) == 'basic' && event.filterCard(cardx, player, event)) list.push(['基本', '', name]);
                  }
                  return ui.create.dialog('锦织', [list, 'vcard']);
                },
                filter: function (button, player) {
                  return _status.event.getParent().filterCard({ name: button.link[2] }, player, _status.event.getParent());
                },
                check: function (button) {
                  var player = _status.event.player;
                  var storage = player.getStorage('jlsg_jinzhi2');
                  if (player.countCards('h', button.link[2]) > 0 && storage.length < player.countCards('h')) return 0;
                  if (['wugu', 'zhulu_card'].includes(button.link[2])) return 0;
                  var effect = player.getUseValue({
                    name: button.link[2],
                    nature: button.link[3],
                  });
                  if (get.tag({ name: button.link[2] }, 'draw')) effect += 2;
                  return effect;
                },
                backup: function (links, player) {
                  return {
                    filterCard: true,
                    audio: 'jlsg_jinzhi',
                    popname: true,
                    check: () => 1,
                    selectCard: -1,
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                      cards: player.getCards("h"),
                    },
                    onuse: function (result, player) {
                      result.cards = player.getCards("h");
                      result.card.cards = player.getCards("h");
                      player.addTempSkill('jlsg_jinzhi2', 'roundStart');
                      player.markAuto('jlsg_jinzhi2', [result.card.name]);
                    },
                  }
                },
                prompt: function (links, player) {
                  var card = get.translation({ name: links[0][2], nature: links[0][3] });
                  var str = '将所有手牌当做' + card + '使用';
                  if (player.getStorage('jlsg_jinzhi2').length) {
                    str += `,然后摸${get.cnNumber(player.getStorage('jlsg_jinzhi2').length)}张牌`;
                  }
                }
              },
              ai: {
                order: 1,
                respondShan: true,
                respondSha: true,
                skillTagFilter: function (player, tag, arg) {
                  if (arg && arg.name && player.getStorage('jlsg_jinzhi2').includes(arg.name)) return false;
                  return player.countCards('h') && player.getStorage('jlsg_jinzhi2').length < 4;
                },
                result: {
                  player: function (player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    return 1;
                  }
                }
              }
            },
            jlsg_jinzhi2: {
              sourceSkill: "jlsg_jinzhi",
              onremove: true,
              intro: {
                content: function (storage, player, skill) {
                  return '本轮使用了' + storage.reduce((a, b) => a + ' ' + get.translation(b), '');
                },
              },
              init: function (player) {
                player.storage.jlsg_jinzhi2 = [];
              },
              trigger: { player: ['useCardAfter', 'respondAfter'] },
              forced: true,
              charlotte: true,
              popup: false,
              filter: function (event, player) {
                return event.skill == 'jlsg_jinzhi_backup';
              },
              content: function () {
                var index = player.storage.jlsg_jinzhi2.indexOf(trigger.card.name) + 1;
                if (index > 0) {
                  player.draw(index);
                }
              },
            },
            jlsg_yuyou: {
              audio: "ext:极略:2",
              trigger: { player: 'gainEnd' },
              forced: true,
              filter: function (event, player) {
                return event.cards.length > 1;
              },
              content: function () {
                'step 0'
                player.chooseCard('选择一张牌保留', true,
                  c => _status.event.cards.includes(c),
                  c => get.useful(c, _status.event.player),
                ).set('cards', trigger.cards);
                'step 1'
                event.cards = trigger.cards;
                if (result.bool) {
                  event.cards = event.cards.filter(c => !result.cards.includes(c));
                }
                player.discard(event.cards);
                'step 2'
                if (!event.cards.length || !game.hasPlayer(p => p.hasSex('male'))) {
                  event.finish();
                  return;
                }
                player.chooseTarget(`###${get.prompt(event.name)}###令一名男性角色弃置牌或失去体力`, (_, p, t) => t.hasSex('male'), t => -get.attitude(_status.event.player, t));
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0];
                player.line(event.target);
                if (!['nei', 'rYe', 'bYe'].includes(player.identity) && event.target.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                var eff = lib.jlsg.getLoseHpEffect(event.target) * 3;
                event.target.chooseToDiscard('he', `弃置${get.cnNumber(event.cards.length)}张牌，或者失去1点体力`, event.cards.length)
                  .set('eff', eff / event.cards.length)
                  .set('ai', c => get.unuseful(c) - _status.event.eff);
                'step 4'
                if (!result.bool) {
                  event.target.loseHp();
                }
              },
            },
            jlsg_huituo: {
              audio: "ext:极略:2",
              trigger: { player: ['phaseZhunbeiBegin'] },
              init: function (player) {
                player.storage.jlsg_huituo = 15;
              },
              filter: function (event, player) {
                return player.storage.jlsg_huituo;
              },
              direct: true,
              content: function () {
                'step 0'
                var eff = new Map();
                event.eff = eff;
                for (var p of game.filterPlayer()) {
                  eff.set(p, [0, -1]); // eff, choice
                }
                if (player.storage.jlsg_huituo & 1) { // recover
                  var top = game.filterPlayer().reduce((a, b) => Math.max(a, b.hp), 0);
                  var draw = game.countPlayer(p => p.hp == top) > 1;
                  for (var p of game.filterPlayer()) {
                    if (p.isHealthy()) {
                      continue;
                    }
                    var targetNum = top;
                    if (draw || p.hp != top) {
                      targetNum = top + 1;
                    }
                    var newEff = Math.min(p.maxHp, targetNum) - p.hp;
                    newEff *= get.recoverEffect(p, player, player);
                    var [preEff, _] = eff.get(p);
                    if (newEff > preEff) {
                      eff.set(p, [newEff, 0])
                    }
                  }
                }
                if (player.storage.jlsg_huituo & 2) { // draw
                  var top = game.filterPlayer().reduce((a, b) => Math.max(a, b.countCards('h')), 0);
                  var draw = game.countPlayer(p => p.countCards('h') == top) > 1;
                  for (var p of game.filterPlayer()) {
                    var targetNum = top;
                    if (draw || p.countCards('h') != top) {
                      targetNum = top + 1;
                    }
                    var newEff = targetNum - p.countCards('h');
                    newEff *= 2 * get.attitude(player, p);
                    var [preEff, _] = eff.get(p);
                    if (newEff > preEff) {
                      eff.set(p, [newEff, 1])
                    }
                  }
                }
                if (player.storage.jlsg_huituo & 4) { // equip
                  for (var p of game.filterPlayer()) {
                    var newEff = [1, 2, 3, 4, 5].filter(n => p.isEmpty(n)).length;
                    newEff *= 2.5 * get.attitude(player, p);
                    var [preEff, _] = eff.get(p);
                    if (newEff > preEff) {
                      eff.set(p, [newEff, 2])
                    }
                  }
                }
                if (player.storage.jlsg_huituo & 8) { // give skill
                  for (var p of game.filterPlayer()) {
                    if (p.hasSkill(event.name)) {
                      continue;
                    }
                    var newEff = 9 * (get.attitude(player, p) - 2);
                    var [preEff, _] = eff.get(p);
                    if (newEff > preEff) {
                      eff.set(p, [newEff, 3])
                    }
                  }
                }
                // console.log(eff);
                var target, maxEff = 24;
                for (var [p, [curEff, _]] of eff.entries()) {
                  if (curEff > maxEff) {
                    maxEff = curEff;
                    target = p;
                  }
                }
                player.chooseTarget(`###${get.prompt(event.name)}###选择一个目标`)
                  .set('ai', function (p) {
                    return p == _status.event.choice ? 1 : 0;
                  }).set('choice', target);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0]
                var target = event.target;
                event.translate = [
                  `令${get.translation(target)}回复体力至全场唯一最多`,
                  `令${get.translation(target)}摸牌至全场唯一最多`,
                  `令${get.translation(target)}从弃牌堆或牌堆随机选择装备并依次使用`,
                  `令${get.translation(target)}获得技能〖恢拓〗`,
                ];
                var indexes = [0, 1, 2, 3];
                if (target.hasSkill(event.name)) {
                  indexes.length = 3;
                }
                indexes = indexes.filter(n => player.storage.jlsg_huituo & (2 ** n));
                var [_, choice] = event.eff.get(target);
                player.chooseControlList(indexes.map(n => event.translate[n]), function () { return _status.event.choice; })
                  .set('choice', indexes.indexOf(choice));
                event.indexes = indexes;
                'step 2'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, target);
                var index = event.indexes[result.index];
                game.log(player, event.translate[index])
                player.storage.jlsg_huituo ^= 2 ** index;
                switch (index) {
                  case 0:
                    var top = game.filterPlayer(p => p != target).reduce((a, b) => Math.max(a, b.hp), 0);
                    if (top + 1 > target.hp) {
                      target.recover(top + 1 - target.hp)
                    }
                    break;
                  case 1:
                    var top = game.filterPlayer(p => p != target).reduce((a, b) => Math.max(a, b.countCards('h')), 0);
                    target.drawTo(top + 1);
                    break;
                  case 3:
                    target.addSkills(event.name);
                    break;
                  default:
                    break;
                }
                event.num = 0;
                if (index != 2) {
                  event.finish();
                }
                'step 3'
                event.num = 0;
                'step 4'
                while (!event.target.isEmpty(event.num)) {
                  event.num++;
                  if (event.num > 5) {
                    return;
                  }
                }
                var card = get.cardPile(function (card) {
                  return get.subtype(card) == 'equip' + event.num && event.target.canUse(card, event.target);
                });
                if (card) {
                  event.target.chooseUseTarget(card, true, 'nopopup');
                }
                event.num++;
                if (event.num <= 5) event.redo();
                'step 5'
                event.retry = event.retry || 0;
                ++event.retry;
                if (event.retry <= 2 && [1, 2, 3, 4, 5].filter(n => event.target.isEmpty(n)).length) {
                  event.goto(3);
                }
              },
            },
            jlsg_xingshuai: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2(event.name), lib.filter.notMe).set('ai', function (target) {
                  var player = _status.event.player;
                  if (get.attitude(player, target) > 0) {
                    return 5 + (target.isTurnedOver() ? 1 : 0);
                  } else {
                    return 3 + (target.isTurnedOver() ? -4 : 0);
                  }
                });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                var target = result.targets[0];
                event.target = target;
                var choice;
                if (get.attitude(target, player) >= 0) {
                  choice = target.isTurnedOver() && _status.currentPhase != target;
                } else {
                  choice = target.isTurnedOver() || _status.currentPhase == target || Math.random() < 0.3;
                }
                target.chooseBool(`###是否翻面？###否则${get.translation(player)}在此回合结束后进行一个额外的回合`, choice);
                'step 2'
                if (result.bool) {
                  if (!target.isTurnedOver() && target.ai.shown > player.ai.shown) {
                    target.addExpose(0.3);
                  }
                  target.turnOver();
                } else {
                  player.insertPhase();
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true
              }
            },
            jlsg_zhanjue: {
              audio: "ext:极略:2",
              group: ["zhanjue", "zhanjue4"],
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              direct: true,
              filter: function (event, player) {
                var evt = event.getl(player);
                if (!evt || evt.player != player) return false;
                if (evt.hs && evt.hs.length > 0 && !player.countCards('h')) return true;
                if (evt.es && evt.es.length > 0) {
                  return !player.countCards('e') || event.name == 'equip' && !player.countCards('e', c => c != event.card);
                }
                if (evt.js && evt.js.length > 0 && !player.countCards('j')) return true;
                return false;
              },
              content: function () {
                'step 0'
                player.chooseTarget(`###${get.prompt(event.name)}###对一名角色造成1点伤害`)
                  .set('ai', function (target) {
                    return get.damageEffect(target, _status.event.player, _status.event.player);
                  });
                'step 1'
                if (result.bool) {
                  player.logSkill(event.name, result.targets);
                  result.targets[0].damage();
                }
              },
            },
            jlsg_yanzhu: {
              audio: "ext:极略:2",
              usable: 3,
              enable: 'phaseUse',
              filterTarget: true,
              intro: {
                content: 'mark',
                name2: '宴诛',
              },
              content: function () {
                'step 0'
                target.addMark(event.name);
                var cnt1 = target.countMark(event.name);
                var cnt2 = game.countPlayer(p => p.countMark(event.name) == cnt1);
                switch (cnt1) {
                  case 1:
                    target.draw(player, cnt2);
                    break;
                  case 2:
                    target.chooseToDiscard(cnt2, 'he', true);
                    break;
                  case 3:
                    target.damage(cnt2);
                    break;
                }
              },
              ai: {
                order: 4,
                result: {
                  target: function (player, target) {
                    var cnt = target.countMark('jlsg_yanzhu');
                    switch (cnt) {
                      case 0:
                        return 0.8 + 0.4 * Math.random();
                        break;
                      case 1:
                        return -1.2 + 0.4 * Math.random();
                        break;
                      case 2:
                        return -2.2 + 0.4 * Math.random();
                        break;
                    }
                  },
                  player: function (player, target) {
                    return 2.5;
                  }
                },
              }
            },
            jlsg_xingxue: {
              audio: "ext:极略:2",
              trigger: {
                player: 'phaseJieshuBegin'
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2(event.name))
                  .set('ai', function (target) {
                    var player = _status.event.player;
                    return get.attitude(player, target) * (Math.min(target.maxHp, target.countCards('h') + target.countMark('jlsg_yanzhu')) - target.countCards('h'))
                      + get.attitude(player, player) * Math.max(0, target.countCards('h') + target.countMark('jlsg_yanzhu') - target.maxHp);
                  });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                var target = result.targets[0];
                event.target = target;
                if (target.ai.shown > player.ai.shown) {
                  player.addExpose(0.1);
                }
                target.draw(player, target.countMark('jlsg_yanzhu'));
                'step 2'
                if (target.countCards('h') > target.maxHp) {
                  if (target == player) {
                    event.goto(4);
                    return;
                  }
                  target.chooseCard(`请选择手牌交给${get.translation(player)}`, target.countCards('h') - target.maxHp, true)
                    .set('ai', function (card) {
                      var player = _status.event.player, target = _status.event.target;
                      return -get.value(card, player) * get.attitude(player, player)
                        + get.value(card, target) * get.attitude(player, target);
                    }).set('target', player)
                } else {
                  target.removeMark('jlsg_yanzhu', Infinity)
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  player.gain(target, result.cards, 'giveAuto');
                }
                'step 4'
                target.removeMark('jlsg_yanzhu', Infinity)

              },
            },
            jlsg_taoluan: {
              audio: "ext:极略:2",
              trigger: {
                global: 'useCardToPlayered',
              },
              init: function (player) {
                player.storage.jlsg_taoluan2 = [];
              },
              filter: function (event, player) {
                if (!event.isFirstTarget) {
                  return false;
                }
                if (game.countPlayer(p => p.isDying())) {
                  return false;
                }
                var type = get.type(event.card);
                if (!['basic', 'trick'].includes(type)) {
                  return false;
                }
                if (lib.card[event.card.name].notarget) {
                  return false;
                }
                if (!player.countDiscardableCards(player, 'he')) {
                  return false;
                }
                return lib.skill.jlsg_taoluan.getPile(player, type).filter(c => c != event.card.name).length != 0;
              },
              direct: true,
              content: function () {
                'step 0'
                var maxEffect = -Infinity, maxCardName = null;
                {
                  var type = get.type(trigger.card);
                  for (let cardName of lib.skill.jlsg_taoluan.getPile(player, type)) {
                    let card = { ...trigger.card, name: cardName };
                    let effect = 0;
                    for (let t of trigger.targets) {
                      // ai is so stupid
                      if (t == trigger.player && cardName == 'shunshou') {
                        continue;
                      }
                      if (t.isHealthy() && cardName == 'tao') {
                        continue;
                      }
                      effect += get.effect(t, card, trigger.player, player);
                    }
                    if (effect > maxEffect) {
                      maxEffect = effect;
                      maxCardName = cardName;
                    }
                  }
                  for (let t of trigger.targets) {
                    maxEffect -= get.effect(t, trigger.card, trigger.player, player);
                  }
                  if (maxCardName === trigger.card.name) {
                    maxCardName = null;
                    maxEffect = -Infinity
                  }
                }
                var prompt = `###${get.prompt(event.name, trigger.player)}###${get.translation(trigger.player)}对${trigger.targets.map(p => get.translation(p)).join('、')}使用了${lib.translate[trigger.card.name]}`;
                player.chooseToDiscard('he', get.prompt2(event.name, trigger.player))
                  .set("ai", function (card) {
                    return _status.event.effect - get.value(card) * 2 - 2;
                  })
                  .set('effect', maxEffect)
                  .set('logSkill', [event.name, trigger.player]);
                event.maxCardName = maxCardName;
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                for (let p of trigger.targets) {
                  if (p.ai.shown > player.ai.shown) {
                    player.addExpose(0.15);
                  }
                }
                var type = get.type2(trigger.card);
                var dialog = lib.skill.jlsg_taoluan.getPile(player, type).filter(c => c != trigger.card.name);
                dialog = dialog.map(i => [type, '', i]);
                player.chooseButton(['滔乱', [dialog, 'vcard']], true).set("ai", function (button) {
                  return button.link[2] == _status.event.choice;
                }).set('choice', event.maxCardName);
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var name = result.links[0][2];
                player.popup(name);
                game.log(player, "将", trigger.card, "改为", { ...trigger.card, name });
                trigger.card.name = name;
                trigger.effectCount = get.info(trigger.card, false).effectCount || 1;
                trigger.excluded = [];
                trigger.directHit = [];
                trigger.card.storage = {};
                trigger.baseDamage = 1;
                trigger.extraDamage = 0;
                player.addTempSkill('jlsg_taoluan2', 'roundStart');
                player.markAuto('jlsg_taoluan2', [name]);
              },
              getPile(player, type) {
                return lib.inpile
                  .filter(c => type == get.type(c) &&
                    !lib.card[c].complexSelect &&
                    !lib.card[c].notarget &&
                    lib.card[c].content &&
                    !player.getStorage('jlsg_taoluan2').includes(c)
                  );
              },
            },
            jlsg_taoluan2: {
              onremove: true,
              intro: {
                content: function (storage, player, skill) {
                  return '本轮声明了' + storage.reduce((a, b) => a + ' ' + get.translation(b), '');
                },
              },
            },
            jlsg_shiqiao: {
              audio: "ext:极略:2",
              trigger: {
                global: "phaseEnd",
              },
              filter: function (event, player) {
                if (!ui.cardPile.childNodes.length) {
                  return false;
                }
                return event.player.getHistory('useCard', e => e.card.name == 'sha').length != 0;
              },
              frequent: true,
              content: function () {
                var cnt = trigger.player.getHistory('useCard', e => e.card.name == 'sha').length;
                var cards = Array.from(ui.cardPile.childNodes).randomGets(cnt);
                player.gain(cards, 'gain2');
              },
              ai: {
                threaten: 0.2,
              }
            },
            jlsg_yingge: {
              audio: "ext:极略:2",
              trigger: {
                global: "phaseUseBegin",
              },
              filter: function (event, player) {
                return player.countCards('h');
              },
              direct: true,
              content: function () {
                "step 0"
                let target = trigger.player;
                let num1 = target.getCardUsable('sha');
                let validCardsNumber = new Set(player.getDiscardableCards(player, 'h').map(c => c.number));
                let hasEnemy = game.hasPlayer(p => get.attitude(target, p) < 0);
                let att = get.attitude(player, target) / get.attitude(player, player);
                let valueMap = {};
                for (let num of validCardsNumber) {
                  // console.log(`${get.translation(target.name)} @ ${num}`);
                  let shaCount = target.countCards('h') * (14 - num) / 13;
                  if (target == player || player.hasSkillTag('viewHandcard', null, target, true)) {
                    shaCount = target.countCards('h', c => get.number(c) >= num);
                  }
                  if (shaCount > num + num1) {
                    shaCount = num + num1;
                  }
                  let disCount = target.countCards('h') - shaCount;
                  let disValue = -disCount * att / 3 * 2;
                  if (disCount > target.getHandcardLimit()) {
                    disValue += -(disCount - target.getHandcardLimit()) * att / 3 * 2;
                  }
                  // console.log("disable value:", disValue);
                  let shaValue = (1 / 3 + att) * shaCount;
                  // console.log("sha value:", shaValue);
                  valueMap[num] = disValue + shaValue;
                }
                player.chooseToDiscard(get.prompt2(event.name, target))
                  .set("logSkill", [event.name, target])
                  .set("ai", function (card) { return -get.value(card) / 2 + _status.event.valueMap[card.number]; })
                  .set("valueMap", valueMap);
                "step 1"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                trigger.player.storage.jlsg_yingge2 = result.cards[0].number;
                trigger.player.addTempSkill("jlsg_yingge2", "phaseUseAfter");
              },
              ai: {
                expose: 0.1,
                threaten: 0.4,
              },
            },
            jlsg_yingge2: {
              sourceSkill: "jlsg_yingge",
              mark: true,
              intro: {
                name: "莺歌",
                content: function (event, player) {
                  return `圣数：<b>${Number(player.storage.jlsg_yingge2)}`;
                },
              },
              mod: {
                cardEnabled: function (card, player) {
                  let number = get.number(card, player);
                  if (!number || typeof number != "number") return;
                  if (get.is.virtualCard(card) || get.is.convertedCard(card)) return;
                  if (number < Number(player.storage.jlsg_yingge2)) return false;
                },
                cardSavable: function (card, player) {
                  let number = get.number(card, player);
                  if (!number || typeof number != "number") return;
                  if (get.is.virtualCard(card) || get.is.convertedCard(card)) return;
                  if (number < Number(player.storage.jlsg_yingge2)) return false;
                },
                cardname: function (card, player, name) {
                  let number = get.number(card, player);
                  if (!number || typeof number != "number") return;
                  if (number >= Number(player.storage.jlsg_yingge2)) return 'sha';
                },
                cardUsable: function (card, player, num) {
                  if (get.name(card, player) == 'sha') return num + Number(player.storage.jlsg_yingge2);
                },
                attackRange: function (player, num) {
                  return num + Number(player.storage.jlsg_yingge2);
                },
              },
            },
            jlsg_kuangbi: {
              audio: "ext:极略:2",
              trigger: { global: 'useCard2' },
              direct: true,
              filter: function (event, player) {
                var type = get.type(event.card);
                if (type != 'basic' && type != 'trick') {
                  return false;
                };
                if (player.hasSkill('jlsg_kuangbi2')) {
                  return false;
                }
                var targets = event.targets || [];
                if (targets.length > 0) return true;
                var info = get.info(event.card);
                if (info.allowMultiple == false) return false;
                return game.filterPlayer(
                  current => !targets.includes(current) &&
                    lib.filter.targetEnabled2(event.card, event.player, current) &&
                    lib.filter.targetInRange(event.card, event.player, current)
                ).length;
              },
              content: function () {
                'step 0'
                var prompt2 = '为' + get.translation(trigger.card) + '增加或减少一个目标'
                player.chooseTarget(get.prompt(event.name), function (card, player, target) {
                  var user = _status.event.user;
                  if (_status.event.targets.includes(target)) return true;
                  return lib.filter.targetEnabled2(_status.event.card, user, target) && lib.filter.targetInRange(_status.event.card, user, target);
                }).set('prompt2', prompt2).set('ai', function (target) {
                  var trigger = _status.event.getTrigger();
                  var user = _status.event.user;
                  var player = _status.event.player;
                  return get.effect(target, trigger.card, user, player) * (_status.event.targets.includes(target) ? -1 : 1) - 3;
                }).set('targets', trigger.targets).set('card', trigger.card).set('user', trigger.player);
                'step 1'
                if (result.bool) {
                  if (!event.isMine() && !event.isOnline()) game.delayx();
                  event.targets = result.targets;
                }
                else {
                  event.finish();
                }
                'step 2'
                player.logSkill(event.name, event.targets);
                for (let p of event.targets) {
                  if (player.ai.shown < p.ai.shown) {
                    player.addExpose(0.15);
                  }
                }
                player.addTempSkill('jlsg_kuangbi2');
                if (trigger.targets.includes(event.targets[0])) trigger.targets.removeArray(event.targets);
                else trigger.targets.addArray(event.targets);
              },
              ai: {
                threaten: 4,
              },
            },
            jlsg_kuangbi2: {},
            jlsg_taoxi: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              content: function () {
                'step 0'
                player.addTempSkill('jlsg_taoxi2', 'phaseUseAfter');
                event.targets = game.filterPlayer(p => p != event.player);
                event.targets.sortBySeat();
                'step 1'
                event.target = event.targets.shift();
                player.gainPlayerCard(event.target, 'h', true).set('delay', false);
                'step 2'
                if (result.bool) {
                  var arr = player.storage.jlsg_taoxi2.get(event.target) || [];
                  arr.addArray(result.cards);
                  if (!game.online) {
                    player.addGaintag(arr, 'jlsg_taoxi');
                  }
                  player.storage.jlsg_taoxi2.set(event.target, arr);
                  game.delayx(0.3);
                }
                if (event.targets.length) {
                  event.goto(1);
                }
                'step 3'
                var cards = Array.from(player.storage.jlsg_taoxi2.values()).flat();
                if (game.online) {
                  player.addGaintag(cards, 'jlsg_taoxi');
                }
              },
              ai: {
                order: 10,
                result: { player: 1 },
              }
            },
            jlsg_taoxi2: {
              init: function (player) {
                player.storage.jlsg_taoxi2 = new Map();
              },
              onremove: function (player) {
                player.storage.jlsg_taoxi2 = null;
              },
              forced: true,
              trigger: { player: 'phaseUseEnd' },
              filter: function (event, player) {
                return player.storage.jlsg_taoxi2.size;
              },
              content: function () {
                'step 0'
                let { value, done } = player.storage.jlsg_taoxi2.entries().next();
                if (done) {
                  return;
                }
                event.redo();
                let [p, cards] = value;
                player.storage.jlsg_taoxi2.delete(p);
                let hs = player.getCards('h');
                cards = cards.filter(c => hs.includes(c));
                if (!cards.length || !p.isIn()) {
                  return;
                }
                p.gain(cards, player, false);
                player.$giveAuto(cards, p);
                game.delayx(0.3);
                'step 1'
                player.removeGaintag(event.name);
                player.removeSkill(event.name);
              },
            },
            jlsg_huaibi: {
              audio: "ext:极略:2",
              marktext: '玺',
              intro: {
                content: 'expansion',
                markcount: function (storage, player) {
                  return;
                  let cards = player.getExpansions('jlsg_huaibi');
                  if (cards.length == 1) {
                    let suit = get.translation(cards[0].suit);
                    return `<span style="font-size: 1.4em;">${suit}</span>`;
                  }
                }
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              trigger: {
                player: ['enterGame', 'phaseJieshuBegin'],
                global: 'phaseBefore',
              },
              forced: true,
              filter: function (event, player) {
                if (event.name == false && game.phaseNumber != 0) {
                  return false;
                }
                return !player.getExpansions('jlsg_huaibi').length;
              },
              content: function () {
                'step 0'
                player.draw(2);
                'step 1'
                if (!player.countCards('h')) {
                  event.finish();
                  return;
                }
                player.chooseCard(true).set('prompt2', '置于武将牌上作为「玺」');
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.addToExpansion(result.cards, 'give').gaintag.add(event.name);
              },
              group: 'jlsg_huaibi2',
            },
            jlsg_huaibi2: {
              audio: 'jlsg_huaibi',
              trigger: { target: 'useCardToBefore' },
              forced: true,
              filter: function (event, player) {
                if (event.player == player) {
                  return false;
                }
                if (event.card.name != 'sha' && get.type(event.card) != 'trick') {
                  return false;
                }
                let expansion = player.getExpansions('jlsg_huaibi');
                let suit = get.suit(event.card);
                return suit && expansion.some(c => c.suit == suit);
              },
              content: function () {
                trigger.cancel();
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (!card) return;
                    if (player == target) {
                      return;
                    }
                    if (card.name != 'sha' && get.type(card) != 'trick') {
                      return;
                    }
                    let suit = get.suit(card);
                    let expansion = target.getExpansions('jlsg_huaibi');
                    if (suit && expansion.some(c => c.suit == suit)) {
                      return 'zerotarget';
                    }
                  },
                },
              },

            },
            jlsg_zhixi: {
              audio: "ext:极略:2",
              usable: 1,
              enable: 'phaseUse',
              init(player) {
                player.storage.jlsg_zhixi = [];
              },
              filter: function (event, player) {
                return player.getExpansions('jlsg_huaibi').length;
              },
              filterTarget: function (card, player, target) {
                return target != player;
              },
              content: function () {
                'step 0'
                target.gain('give', player, player.getExpansions('jlsg_huaibi'));
                'step 1'
                if (player.getStorage(event.name).includes(target)) {
                  target.loseHp();
                } else {
                  target.loseHp(3);
                  player.storage[event.name].push(target);
                }
              },
              ai: {
                order: 2,
                result: {
                  player: function (player, target) {
                    if (player.hasSkill('jlsg_huaibi')) {
                      return 1;
                    }
                  },
                  target: function (player, target) {
                    let result = get.effect(target, { name: 'losehp' }, player, target)
                      / get.attitude(target, target);
                    if (player.getStorage('jlsg_zhixi').includes(target)) {
                      return result * 2;
                    }
                    return result;
                  },
                }
              },
            },
            jlsg_caijian: {
              audio: "ext:极略:2",
              marktext: '鉴',
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, player, target) {
                return target.countCards('he');
              },
              delay: false,
              content: function () {
                'step 0'
                player.gainPlayerCard(target, 'visibleMove', true).set('chooseonly', true);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let card = result.cards[0];
                if (get.color(card, false) == 'black' && !player.getExpansions(event.name).map(c => c.suit).includes(card.suit)) {
                  target.turnOver();
                }
                player.addToExpansion(result.cards, target).gaintag.add(event.name);
              },
              ai: {
                order: 6,
                maixie: true,
                maixie_hp: true,
                result: {
                  player: function (player, target) {
                    if (player.hasSkill('jlsg_zhishix')) {
                      return 1;
                    }
                  },
                  target: -1,
                }
              },
              group: 'jlsg_caijian2',
            },
            jlsg_caijian2: {
              audio: 'jlsg_caijian',
              trigger: {
                player: 'damageEnd',
              },
              direct: true,
              content: function () {
                'step 0'
                event.num = trigger.num;
                'step 1'
                if (!event.num) {
                  event.finish();
                  return;
                }
                --event.num;
                player.chooseTarget(get.prompt2('jlsg_caijian'), (_, player, target) => target.countCards('he')).set("ai", function (target) {
                  return 1 - get.attitude(_status.event.player, target);
                });
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.useSkill('jlsg_caijian', false)
                  .set('target', result.targets[0])
                  .set('targets', result.targets);
                event.goto(1);
              },
            },
            jlsg_zhishix: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filter: function (event, player) {
                let suits = new Set(
                  player.getExpansions('jlsg_caijian')
                    .map(c => c.suit)
                    .filter(c => c)
                );
                return suits.size >= 3;
              },
              chooseButton: {
                dialog: function (event, player) {
                  return ui.create.dialog('智识', player.getExpansions('jlsg_caijian'), 'hidden');
                },
                select: 3,
                filter: function (button, player) {
                  return !ui.selected.buttons.map(c => c.suit).includes(button.suit);
                },
                backup: function (links, player) {
                  return {
                    audio: 'jlsg_zhishix',
                    filterCard: function () { return false },
                    selectCard: -1,
                    delay: false,
                    cards: links,
                    content: function () {
                      'step 0'
                      let cards = lib.skill['jlsg_zhishix_backup'].cards;
                      player.discard(cards);
                      'step 1'
                      player.draw(3);
                      var list;
                      if (_status.characterlist) {
                        list = [];
                        for (var i = 0; i < _status.characterlist.length; i++) {
                          var name = _status.characterlist[i];
                          if (get.character(name, 1) == 'wei') list.push(name);
                        }
                      }
                      else if (_status.connectMode) {
                        list = get.charactersOL(function (i) {
                          return get.character(i, 1) != 'wei';
                        });
                      }
                      else {
                        list = get.gainableCharacters(function (info) {
                          return info[1] == 'wei';
                        });
                      }
                      var players = game.players.concat(game.dead);
                      for (var i = 0; i < players.length; i++) {
                        list.remove(players[i].name);
                        list.remove(players[i].name1);
                        list.remove(players[i].name2);
                      }
                      let character = list.randomGet();
                      player.flashAvatar("jlsg_zhishix", character);
                      event.character = character;
                      'step 2'
                      player.addSkills(get.character(event.character)[3]);
                    },
                    ai: {
                      order: 10,
                    },
                  }
                },
              },
              ai: {
                order: 8,
                result: { player: 1 },
              },
            },
            jlsg_anguo: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDrawBegin2' },
              filter: function (event, player) {
                return !event.numFixed && event.num > 0;
              },
              async cost(event, trigger, player) {
                event.result = await player.chooseTarget(`###安国：是否少摸一张牌并选择一名角色吗，令其随机使用一张装备牌？###此牌为:武器牌,其摸X张牌（X为此武器牌的攻击范围）;防具或宝物牌,其回复1点体力;坐骑牌,重复此流程.`)
                  .set('ai', target => {
                    if (get.cardPile(card => get.type(card) == "equip")) return get.attitude(_status.event.player, target);
                    else return 0;
                  })
                  .forResult();
              },
              async content(event, trigger, player) {
                --trigger.num;
                let target = event.targets[0],
                  subtypes = {},
                  noStop = true,
                  cards = Array.from(ui.cardPile.childNodes)
                    .concat(Array.from(ui.discardPile.childNodes))
                    .filter(i => get.type(i, null, false) == "equip")
                    .filter(i => ["c", "d"].includes(get.position(i)));
                if (target.ai.shown > player.ai.shown) player.addExpose(0.2);
                for (const i of cards) {
                  let subtype = get.subtype(i);
                  subtypes[subtype] = subtypes[subtype] || [];
                  subtypes[subtype].add(i);
                };
                while (noStop) {
                  noStop = false;
                  if (!Object.keys(subtypes).length) {
                    await game.delayx();
                    break;
                  }
                  let subtype = Object.keys(subtypes).randomSort().find(i => target.isEmpty(i));
                  if (!subtype) subtype = Object.keys(subtypes).randomGet();
                  let card = subtypes[subtype].randomRemove();
                  if (!card) {
                    if (!subtypes[subtype].length) delete subtypes[subtype];
                    noStop = true;
                    continue;
                  }
                  await target.gain(card, "gain2");
                  if (!target.canUse(card, target)) break;
                  await target.chooseUseTarget(card, true).set("nopopup", true);
                  if (subtype == "equip1") {
                    if (lib.card[card.name].distance) {
                      let range = 1 - lib.card[card.name].distance.attackFrom;
                      if (range > 0) await target.draw(player, range);
                    }
                  }
                  else if (["equip2", "equip5"].includes(subtype)) await target.recover(player);
                  else noStop = true;
                };
              },
            },
            jlsg_quanxiang: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filter: function (event, player) {
                return !player.hasSkillTag('noCompareSource') && !player.hasSkill('jlsg_quanxiang3');
              },
              filterTarget: function (card, player, target) {
                return player.canCompare(target);
              },
              content: function () {
                'step 0'
                player.chooseToCompare(target);
                'step 1'
                if (result.bool) {
                  if (!target.storage.nohp && target.hp) {
                    player.addTempSkill('jlsg_quanxiang3', 'phaseUseEnd');
                    player.addSkill('jlsg_quanxiang2');
                    let evt = target.loseHp(target.hp);
                    player.storage.jlsg_quanxiang2 = [target, evt];
                  }
                } else {
                  player.addMark('jlsg_raoshe', 2);
                  if (player.countMark('jlsg_raoshe') >= 7) {
                    player.die();
                  }
                }
              },
              ai: {
                order: 8,
                result: {
                  target: -1,
                },
              },
            },
            jlsg_quanxiang2: {
              sourceSkill: "jlsg_quanxiang",
              trigger: { global: 'dyingAfter' },
              forced: true,
              charlotte: true,
              filter: function (event, player) {
                if (!player.storage.jlsg_quanxiang2) {
                  return false;
                }
                return event.player === player.storage.jlsg_quanxiang2[0];
              },
              direct: true,
              content: function () {
                'step 0'
                if (trigger.reason !== player.storage.jlsg_quanxiang2[1]) {
                  event.goto(2);
                  return;
                }
                trigger.player.recover(trigger.reason.num, player);
                'step 1'
                player.addMark('jlsg_raoshe', 1);
                if (player.countMark('jlsg_raoshe') >= 7) {
                  player.die();
                }
                'step 2'
                player.removeSkill(event.name);
              },
            },
            jlsg_quanxiang3: {},
            jlsg_raoshe: {
              intro: {
                name: "饶舌",
                content: "mark",
              },
            },
            jlsg_gushe: {
              audio: "ext:极略:2",
              trigger: { player: 'compare', target: 'compare' },
              filter: function (event, player) {
                return !event.iwhile && player.countMark('jlsg_raoshe');
              },
              forced: true,
              content: function () {
                let cnt = player.countMark('jlsg_raoshe');
                game.log(player, `的拼点牌点数+${cnt}`)
                if (player == trigger.player) {
                  trigger.num1 += cnt;
                  if (trigger.num1 > 13) trigger.num1 = 13;
                }
                else {
                  trigger.num2 += cnt;
                  if (trigger.num2 > 13) trigger.num2 = 13;
                }
              },
              group: 'jlsg_gushe2'
            },
            jlsg_gushe2: {
              audio: "jlsg_gushe",
              inherit: "jyzongshi",
              frequent: function (event, player) {
                return this.check(event, player);
              },
            },
            jlsg_jici: {
              audio: "ext:极略:2",
              trigger: { player: 'damageBegin2' },
              filter: function (event, player) {
                return event.source && event.source != player
                  && player.countCards('h') && !player.hasSkillTag('noCompareSource') && !event.source.hasSkillTag('noCompareTarget');
              },
              check: function (event, player) {
                return player.countMark('jlsg_raoshe') < 7 || event.num > 1 || Math.random() < 0.5;
              },
              content: function () {
                'step 0'
                trigger.source.draw(player);
                'step 1'
                if (player.canCompare(trigger.source)) {
                  player.chooseToCompare(trigger.source);
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  trigger.cancel();
                } else {
                  trigger.num = 1;
                  player.addMark('jlsg_raoshe');
                  if (player.countMark('jlsg_raoshe') >= 7) {
                    player.die();
                  }
                }
              },
            },
            jlsg_hechun: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              selectTarget: -1,
              filterTarget(card, player, target) {
                return target != player;
              },
              multitarget: true,
              multiline: true,
              async content(event, trigger, player) {
                event.targets.sortBySeat();
                const pairs = [];
                for (const target of event.targets) {
                  if (!target.countGainableCards(player, 'he')) continue;
                  const { result } = await target.chooseToGive(true, player, 'he', `交给${get.translation(player)}一张牌`)
                    .set("target", player)
                    .set("filterCard", (card, player) => lib.filter.canBeGained(card, get.event("target"), player))
                    .set('ai', function (card, cards) {
                      let player = get.player();
                      let target = get.event("target");
                      let num = -get.attitude(player, player) * get.value(card, player) + get.attitude(player, target) * get.value(card, target);
                      if (get.color(card, player) == 'black') num -= 15
                      if (get.color(card, player) == 'red' && player.isDamaged()) num += 15;
                      return num;
                    });
                  pairs.add([target, get.color(result.cards[0], target)]);
                };
                for (const pair of pairs) {
                  const [target, color] = pair;
                  if (!color) continue;
                  const bool = await player
                    .chooseBool(`是否令${get.translation(target)}${color == "red" ? "回复" : "失去"}1点体力？`)
                    .set("ai", (event, player) => {
                      if (get.event("color") == "red") return get.recoverEffect(target, player, player) > 0;
                      else return get.effect(target, { name: "losehp" }, player, player) > 0;
                    })
                    .set("color", color)
                    .forResultBool();
                  if (bool) {
                    player.line(target, "green");
                    await target[color == "red" ? "recover" : "loseHp"]();
                  }
                  if (!event.isMine() && !event.isOnline()) await game.delayx();
                }
              },
              ai: {
                order: 9,
                threaten: 2,
                result: {
                  player: 1,
                },
              },
            },
            jlsg_daiyan: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseAfter' },
              direct: true,
              init: function (player) {
                if (!player.storage.jlsg_daiyan) {
                  player.storage.jlsg_daiyan = new Map();
                }
              },
              content: function () {
                'step 0'
                let choice = game.filterPlayer().filter(p => get.attitude(player, p) > 0 && p.hp > (player.storage.jlsg_daiyan.get(p) || 0));
                choice = choice.randomGet();
                player.chooseTarget(get.prompt2(event.name))
                  .set('choice', choice)
                  .set('ai', p => p == _status.event.choice);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.target = result.targets[0];
                player.logSkill(event.name, event.target);
                if (event.target.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                let cnt = player.storage.jlsg_daiyan.get(event.target) || 0;
                if (cnt) {
                  event.target.loseHp(cnt);
                }
                player.storage.jlsg_daiyan.set(event.target, cnt + 1);
                'step 2'
                event.target.insertPhase();
              },
              ai: {
                threaten: 2,
              },
            },
            jlsg_jianying: {
              audio: "ext:极略:2",
              inherit: 'dcjianying',
            },
            jlsg_shibei: {
              audio: "ext:极略:2",
              trigger: {
                player: "damageEnd",
              },
              usable: 1,
              content: function () {
                'step 0'
                player.recover();
                player.addTempSkill('jlsg_shibei2');
                player.storage.jlsg_shibei2 = trigger;
                if (!trigger.card || !player.countCards('hs')) {
                  return;
                }
                let card = trigger.card;
                if (card.name != 'jiu' && lib.filter.cardEnabled(card)) {
                  if (game.hasPlayer(function (current) {
                    return player.canUse(card, current);
                  })) {
                    lib.skill.mozhix.viewAs = card;
                    var next = player.chooseToUse();
                    if (next.isOnline()) {
                      player.send(function (card) {
                        lib.skill.mozhix.viewAs = card;
                      }, card)
                    }
                    next.logSkill = 'jlsg_shibei';
                    next.set('openskilldialog', '矢北：将一张手牌当' + get.translation(card) + '使用');
                    next.set('norestore', true);
                    next.set('_backupevent', 'mozhix');
                    next.set('custom', {
                      add: {},
                      replace: { window: function () { } }
                    });
                    next.backup('mozhix');
                  }
                }
              },
            },
            jlsg_shibei2: {
              audio: 'jlsg_shibei',
              trigger: {
                player: "damageEnd",
              },
              filter(event, player) {
                return event != player.storage.jlsg_shibei2;
              },
              forced: true,
              // locked: false,
              content: function () {
                'step 0'
                player.loseHp();
              },
            },
            jlsg_kuizhu: {
              audio: "ext:极略:2",
              forced: true,
              trigger: { player: 'phaseJieshuBegin' },
              content: function () {
                'step 0'
                let cntAll = game.getGlobalHistory('cardMove', e => e.type === 'discard')
                  .reduce((a, b) => a + (b.hs ? b.hs.length : 0) + (b.es ? b.es.length : 0) + (b.js ? b.js.length : 0), 0);
                let cntSelf = player.getHistory('lose', e => e.type === 'discard')
                  .reduce((a, b) => a + (b.hs ? b.hs.length : 0) + (b.es ? b.es.length : 0) + (b.js ? b.js.length : 0), 0);
                if (cntAll - cntSelf <= cntSelf) {
                  player.loseHp();
                  player.draw(game.filterPlayer().length);
                  event.finish();
                }
                'step 1'
                player.chooseTarget(true)
                  .set('prompt2', '对其造成2点伤害')
                  .set('ai', function (target) {
                    let player = _status.event.player;
                    return get.damageEffect(target, player, player)
                  });
                'step 2'
                if (result.bool) {
                  let target = result.targets[0]
                  if (target.ai.shown > player.ai.shown) {
                    player.addExpose(0.2);
                  }
                  target.damage(2);
                }
              },
            },
            jlsg_chezheng: {
              audio: "ext:极略:2",
              trigger: { player: ['phaseUseAfter'] },
              filter: function (event, player) {
                if (event.skill) {
                  return false;
                }
                let evt = event.getParent();
                return evt.name == 'phase' && evt.player == player && evt.phaseList[evt.num] == 'phaseUse';
              },
              direct: true,
              content() {
                'step 0'
                event.choices = [
                  '令至多X名角色各弃置一张牌，并各进行一个额外出牌阶段',
                  '令至多X名角色各摸一张牌，并各进行一个额外弃牌阶段',
                ];
                player.chooseControlList(get.prompt(event.name), event.choices)
                  .set('ai', () => Math.random < 0.5 ? 0 : 1);
                'step 1'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                event.choice = result.index;
                let prompt = `###${get.prompt(event.name)}###${event.choices[result.index]}`;
                let next = player.chooseTarget(prompt, [1, player.hp]);
                if (event.choice == 0) {
                  next.filterTarget = function (card, player, target) {
                    return target.countCards('he') > 0;
                  }
                  next.ai = function (target, targets) {
                    return get.attitude(_status.event.player, target)
                      * (target.countCards('h') - 3);
                  }
                } else {
                  next.ai = function (target, targets) {
                    return get.attitude(_status.event.player, target)
                      * (target.getHandcardLimit() - target.countCards('h') + Math.random());
                  }
                }
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                event.targets = result.targets;
                event.targets.sortBySeat();
                if (event.choice == 0) {
                  event.targets.forEach(
                    p => p.chooseToDiscard('he', true).set('delay', false)
                  );
                } else {
                  game.asyncDraw(event.targets);
                }
                'step 3'
                if (event.choice == 0) {
                  event.targets.forEach(
                    p => p.phaseUse()
                  );
                } else {
                  event.targets.forEach(
                    p => p.phaseDiscard()
                  );
                }
              }
            },
            jlsg_jueyong: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin1' },
              direct: true,
              filter: function (event, player) {
                return !player.hasSkill('jlsg_jueyong2') && event.player.isIn() && event.notLink() && event.card && event.card.name == 'sha'
                  && (player.hp != player.maxHp || player.hp != event.player.countCards('h'));
              },
              content() {
                'step 0'
                var choices = [];
                let choice = -1, curEff = -Infinity;
                if (player.hp != trigger.player.countCards('h')) {
                  choices.push('体力');
                  {
                    let diff = Math.min(trigger.player.countCards('h') - player.hp, player.maxHp - player.hp);
                    let eff = diff * 2 + Math.abs(diff);
                    if (diff < 0) {
                      eff -= 2 * trigger.num * get.attitude(player, trigger.player) / get.attitude(player, player);
                    }
                    // console.log('体力', eff);
                    if (eff > 0) {
                      choice = 0;
                      curEff = eff;
                    }
                  }
                }
                if (player.maxHp != trigger.player.countCards('h')) {
                  choices.push('体力上限');
                  if (player.hp <= trigger.player.countCards('h')) {
                    let diff = trigger.player.countCards('h') - player.hp;
                    let eff = diff / 3 * 2 + Math.abs(diff);
                    if (diff < 0) {
                      eff -= 2 * trigger.num * get.attitude(player, trigger.player) / get.attitude(player, player);
                    }
                    // console.log('体力上限', eff);
                    if (eff > 0 && eff > curEff) {
                      choice = choices.length - 1;
                    }
                  }
                }
                choices.push('cancel2');

                if (choice == -1) {
                  choice = choices.length - 1;
                }
                player.chooseControl(choices)
                  .set('prompt', get.prompt2(event.name))
                  .set('choice', choice);
                'step 1'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, trigger.player);
                player.addTempSkill('jlsg_jueyong2');
                if (result.control == '体力') {
                  game.log(player, '将体力调整至', trigger.player.countCards('h'));
                  event.diff = trigger.player.countCards('h') - player.hp;
                  player.changeHp(event.diff);
                } else {
                  event.diff = trigger.player.countCards('h') - player.maxHp;
                  if (event.diff > 0) {
                    player.gainMaxHp(event.diff);
                  } else {
                    player.loseMaxHp(-event.diff);
                  }
                }
                'step 2'
                if (player.hp <= 0 && player.maxHp > 0) {
                  game.delayx();
                  event._dyinged = true;
                  player.dying(event);
                }
                'step 3'
                player.draw(Math.abs(event.diff));
                if (event.diff < 0) {
                  trigger.num *= 2;
                }
              },
            },
            jlsg_jueyong2: {},
            jlsg_choujue: {
              audio: "ext:极略:2",
              usable: 1,
              viewAs: {
                name: 'sha',
                isCard: true,
                storage: { jlsg_choujue: true }
              },
              enable: 'phaseUse',
              filterCard: function () { return false },
              selectCard: -1,
              precontent() {
                'step 0'
                let cnt = Math.max(1, Math.floor(player.maxHp / 2));
                player.loseMaxHp(cnt);
                event.getParent().addCount = false;
              },
              mod: {
                cardUsable: function (card) {
                  if (card.storage && card.storage.jlsg_choujue) return Infinity;
                },
              },
              group: 'jlsg_choujue2',
              ai: {
                order: 2.9,
                result: {
                  player: -1,
                },
              },
            },
            jlsg_choujue2: {
              silent: true,
              locked: false,
              forced: true,
              trigger: { source: 'damageBegin2' },
              filter(event, player) {
                return event.card && event.card.storage && event.card.storage.jlsg_choujue;
              },
              content() {
                for (let s of player.skills) {
                  let info = get.skillInfoTranslation(s, player);
                  if (!info || !info.includes('出牌阶段限一次')) {
                    continue;
                  }
                  let ss = game.expandSkills([s]);
                  for (let s of ss) {
                    let uses = player.getStat('skill');
                    if (uses[s]) {
                      uses[s] = 0;
                    }
                    if (player.storage.counttrigger && player.storage.counttrigger[s]) {
                      player.storage.counttrigger[s] = 0;
                    }
                  }
                }
              },
            },
            jlsg_juzhan: {
              audio: "ext:极略:2",
              trigger: { global: "phaseUseBegin" },
              filter(event, player) {
                return event.player != player;
              },
              check(event, player) {
                player.isDamaged() && get.attitude(player, event.player) < 0 && Math.random() < 0.6;
              },
              logTarget: "player",
              async content(event, trigger, player) {//🔥佬提供
                if (player.getDamagedHp() > 0) await player.draw(player.getDamagedHp());
                const card = get.autoViewAs({ name: "sha", isCard: true }, []);
                await trigger.player.useCard(card, player, "noai", false);
                if (player.hasHistory("damage", evt => evt.getParent(3) == event) && player.getDamagedHp()) {
                  const { result } = await trigger.player.chooseToDiscard(Math.min(5, player.getDamagedHp()), "he")
                    .set("prompt", `${get.translation(player)}对你发动了【拒战】，请弃置${player.getDamagedHp()}张牌`)
                    .set("prompt2", "否则跳过出牌阶段")
                    .set("ai", card => get.value(card) < 6);
                  if (!result.cards || !result.cards[0]) {
                    trigger.cancel();
                    game.log(trigger.player, "跳过了出牌阶段");
                  }
                }
              },
              ai: {
                "maixue_hp": true,
              }
            },
            jlsg_zuilun: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              content() {
                'step 0'
                var evts = player.getHistory('lose', e => e.type == 'discard');
                if (!evts.length) {
                  player.draw(4);
                  event.goto(2);
                } else {
                  player.chooseTarget(lib.filter.notMe, true)
                    .set('prompt2', '令其摸四张牌')
                    .set('ai', p => get.attitude(_status.event.player, p) + Math.random());
                }
                'step 1'
                if (result.bool) {
                  player.line(result.targets[0]);
                  result.targets[0].draw(4, player);
                }
                'step 2'
                var evts = game.getGlobalHistory('changeHp', e => e.player == player && e.getParent().name == 'recover');
                if (!evts.length) {
                  player.loseHp();
                  event.goto(4);
                } else {
                  player.chooseTarget(lib.filter.notMe, true)
                    .set('prompt2', '令其失去1点体力')
                    .set('ai', p => get.attitude(_status.event.player, p) * jlsg.getLoseHpEffect(p));
                }
                'step 3'
                if (result.bool) {
                  player.line(result.targets[0]);
                  result.targets[0].loseHp();
                }
                'step 4'
                if (!player.isIn()) {
                  event.finish();
                  return;
                }
                var evts = player.getHistory('sourceDamage');
                if (!evts.length) {
                  player.loseMaxHp();
                  event.finish();
                } else {
                  player.chooseTarget(lib.filter.notMe, true)
                    .set('prompt2', '令其减1点体力上限')
                    .set('ai', p => get.attitude(_status.event.player, p) * (p.isHealthy() ? -1 : -0.4) + Math.random() * 2);
                }
                'step 5'
                if (result.bool) {
                  player.line(result.targets[0]);
                  result.targets[0].loseMaxHp();
                }
              }
            },
            jlsg_fuzhi: {
              audio: "ext:极略:2",
              animationColor: 'thunder',
              skillAnimation: true,
              juexingji: true,
              trigger: { player: 'phaseZhunbeiBegin' },
              forced: true,
              filter(event, player) {
                return player.hp == 1;
              },
              derivation: ['jlsg_yaozhi', 'jlsg_xingyun'],
              content() {
                'step 0'
                player.awakenSkill('jlsg_fuzhi');
                player.gainMaxHp();
                player.recover();
                'step 1'
                player.changeSkills(['jlsg_yaozhi', 'jlsg_xingyun'], ['jlsg_zuilun']);
              }
            },
            jlsg_jiejun: {
              audio: "ext:极略:2",
              trigger: { global: "useCardAfter" },
              filter(event, player) {
                return event.player != player
                  && _status.currentPhase != player
                  && get.color(event.card, event.player) == 'red';
              },
              direct: true,
              content() {
                "step 0"
                player.chooseToUse({
                  logSkill: "jlsg_jiejun",
                  preTarget: trigger.player,
                  prompt: `截军：是否对${get.translation(trigger.player)}使用一张【杀】？`,
                  prompt2: `若此【杀】造成伤害，你获得其所有牌`,
                  filterCard: function (card, player) {
                    return get.name(card) == 'sha' && lib.filter.filterCard.apply(this, arguments);
                  },
                  filterTarget: function (card, player, target) {
                    return target == _status.event.preTarget && lib.filter.targetEnabled.apply(this, arguments);
                  },
                  addCount: false,
                });
                "step 1"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let evts = player.getHistory('sourceDamage', function (evt) {
                  return evt.getParent(4) == event;
                })

                if (evts.length) {
                  player.gain(trigger.player, trigger.player.getGainableCards(player, 'he'), 'giveAuto');
                }
              }
            },
            jlsg_xiecui: {
              audio: "ext:极略:2",
              trigger: { global: 'damageBegin2' },
              filter(event, player) {
                if (!event.source || event.source !== _status.currentPhase) {
                  return false;
                }
                return !event.source.getHistory('sourceDamage').length
                  && player.getDiscardableCards(player, 'he')
                    .map(c => get.suit(c))
                    .some((s, i, arr) => arr[i + 1] && arr[i + 1] != s);
              },
              direct: true,
              content() {
                'step 0'
                var cnt = 0;
                if (get.attitude(player, trigger.player) * get.attitude(player, trigger.source) < -4) {
                  cnt = trigger.source.getHistory('useCard').length;
                }
                let prompt = `###${get.prompt(event.name, trigger.source)}###${get.translation(trigger.source)}将对${get.translation(trigger.player)}造成伤害`;
                player.chooseToDiscard(prompt, 'he', 2,
                  c => ui.selected.cards.every(c0 => get.suit(c0) != get.suit(c))
                )
                  .set('logSkill', [event.name, trigger.source])
                  .set('complexCard', true)
                  .set('ai', c => (4 * _status.event.cnt - get.value(c) - 2 * Math.random()))
                  .set('cnt', cnt);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.chooseControl('伤害+1', '伤害-1')
                  .set('ai', () => _status.event.choice)
                  .set('choice', get.attitude(player, trigger.player) > get.attitude(player, trigger.source) ? 1 : 0)
                  .set('prompt', '撷翠')
                  .set('prompt2', '请选择一项');
                'step 2'
                var cnt = trigger.source.getHistory('useCard').length;
                if (trigger.source.ai.shown > player.ai.shown || trigger.player.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                if (result.control == '伤害+1') {
                  game.log(player, '令', trigger.source, '对', trigger.player, '造成的伤害+1');
                  trigger.num += 1;
                  if (cnt) {
                    trigger.source.draw(cnt, player);
                  }
                } else {
                  game.log(player, '令', trigger.source, '对', trigger.player, '造成的伤害-1');
                  trigger.num -= 1;
                  if (cnt) {
                    trigger.source.chooseToDiscard(cnt, 'he', true);
                  }
                }
              },

            },
            jlsg_youxu: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseUseBegin' },
              filter(event, player) {
                const num = event.player.getDamagedHp();
                const wugu = get.autoViewAs({ name: "wugu", isCard: num == 0 }, "unsure"),
                  tao = get.autoViewAs({ name: "tao", isCard: num == 0 }, "unsure");
                if (!event.player.hasUseTarget(tao) && !event.player.hasUseTarget(wugu)) return false;
                return event.player.countCards('he') >= num;
              },
              async cost(event, trigger, player) {
                const num = trigger.player.getDamagedHp();
                const wugu = get.autoViewAs({ name: "wugu", isCard: num == 0 }, "unsure"),
                  tao = get.autoViewAs({ name: "tao", isCard: num == 0 }, "unsure");
                const cards = [wugu, tao].filter(card => trigger.player.hasUseTarget(card));
                let str = `${num == 0 ? `令${get.translation(trigger.player)}视为使用` : `选择${get.translation(trigger.player)}的${get.cnNumber(num)}张牌当作`}一张`,
                  str2 = cards.map(card => card.name);
                if (str.length == 1) str += lib.translate[str2[0]] + "使用";
                else str += str2.map(card => lib.translate[card]).join("或") + "使用";
                let keys = ["effect", "canUse", "effect_use", "getUseValue"],
                  value = 0,
                  choice,
                  next;
                for (const card of cards) {
                  let newV = lib.skill.dcpandi.getUseValue(card, trigger.player, player);
                  if (newV > value) {
                    value = newV;
                    choice = card.name;
                  }
                  for (let key of keys) {
                    let info = _status.event._tempCache[key];
                    for (let i in info) {
                      if (i.indexOf(player.playerid) > -1 && i.endsWith("-") && i.indexOf("c:") == -1) delete _status.event._tempCache[key][i];
                    };
                  };
                };
                if (num == 0) {
                  next = player.chooseBool(str)
                    .set("ai", (event, player) => get.event("choice"))
                }
                else {
                  next = player.choosePlayerCard('he', trigger.player, get.prompt("jlsg_youxu", trigger.player))
                    .set("prompt2", str)
                    .set("selectButton", [num, num])
                    .set("target", trigger.player)
                    .set('ai', button => {
                      const player = get.player(),
                        target = get.event("target"),
                        val = get.buttonValue(button);
                      if (get.attitude(player, target) > 0) {
                        return 1.6 / _status.event.selectButton[0] - val - Math.random() / 2;
                      }
                      return val;
                    })
                    .set("filterOk", function () {
                      const player = get.player();
                      if (_status.connectMode && !player.isAuto) return true;
                      else if (!_status.auto) return true;
                      return get.event("choice");
                    })
                }
                const { result } = await next.set("choice", choice)
                event.result = {
                  bool: result.bool,
                  targets: [trigger.player],
                  cards: result.links ?? [],
                  cost_data: {
                    choice: choice,
                    choiceList: str2,
                  },
                };
              },
              async content(event, trigger, player) {
                const { cost_data: { choiceList } } = event;
                if (choiceList.length == 0) return;
                else if (choiceList.length == 1) event.cardName = choiceList[0];
                else {
                  event.cardName = await player.chooseControl(choiceList)
                    .set('prompt', `###请选择一项###${get.translation(trigger.player)}要使用的牌`)
                    .set('ai', (event, player) => event.cost_data?.choice ?? 0)
                    .forResultControl();
                }
                if (trigger.player.ai.shown > player.ai.shown) player.addExpose(0.2);
                const card = get.autoViewAs({ name: event.cardName, isCard: trigger.player.isHealthy() }, event.cards)
                const next = trigger.player.chooseUseTarget(card, true, 'noTargetDelay', 'nodelayx')
                  .set('oncard', function (c, p) { this.noai = true; });
                await next;
              },
            },
            jlsg_zhulu: {
              audio: "ext:极略:2",
              trigger: { source: 'damageSource' },
              filter(event, player) {
                return event.player.countCards('he');
              },
              check(event, player) {
                return get.attitude(player, event.player) <= 0;
              },
              logTarget: 'player',
              content() {
                'step 0'
                if (trigger.player.ai.shown > player.ai.shown) {
                  player.addExpose(0.3);
                }
                event.players = game.filterPlayer(p => p != trigger.player).sortBySeat();
                'step 1'
                var p = event.players.shift();
                if (!p || !trigger.player.countCards('he')) {
                  event.finish();
                  return;
                }
                p.gainPlayerCard(trigger.player, 'he', true)
                  .delay = false;
                game.delayex(0.5);
                event.redo();
              },

            },
            jlsg_limu: {
              audio: "ext:极略:2",
              mod: {
                cardUsableTarget: function (card, player, target) {
                  if (player.countCards('j')) return true;
                },
              },
              enable: "phaseUse",
              discard: false,
              filter: function (event, player) {
                if (player.hasJudge('lebu')) return false;
                return player.countCards('hes', { suit: 'diamond' }) > 0;
              },
              viewAs: { name: 'lebu' },
              //prepare:"throw",
              position: "hes",
              filterCard: function (card, player, event) {
                return get.suit(card) == 'diamond' && player.canAddJudge({ name: 'lebu', cards: [card] });
              },
              selectTarget: -1,
              filterTarget: function (card, player, target) {
                return player == target;
              },
              check: function (card) {
                return get.number(card) - 3 - Math.random();
              },
              onuse: function (links, player) {
                var next = game.createEvent('limu_recover', false, _status.event.getParent());
                next.player = player;
                next.setContent(function () {
                  player.draw(event.num);
                  player.recover();
                });
                next.num = get.number(links.card);
              },
              ai: {
                result: {
                  target: 1,
                },
                order: 12,
              },
            },
            jlsg_huaiyi: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              delay: false,
              filterTarget: function (card, player, target) {
                return player != target && target.countCards('he');
              },
              content() {
                'step 0'
                player.choosePlayerCard(`选择${get.translation(target)}一张牌置于武将牌上`, target, 'he', true);
                if (target.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.addToExpansion(result.cards, target, 'giveAuto').gaintag.add(event.name);
              },
              marktext: '异',
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              group: ['jlsg_huaiyi2', 'jlsg_huaiyi3'],
              ai: {
                order: 8,
                result: {
                  target: -2,
                },
              }
            },
            jlsg_huaiyi2: {
              audio: 'jlsg_huaiyi',
              trigger: { player: 'phaseDrawBegin2' },
              forced: true,
              locked: false,
              filter: function (event, player) {
                return !event.numFixed && player.getExpansions('jlsg_huaiyi').length;
              },
              content() {
                trigger.num += player.getExpansions('jlsg_huaiyi').length;
              }
            },
            jlsg_huaiyi3: {
              audio: 'jlsg_huaiyi',
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              locked: false,
              filter: function (event, player) {
                return player.getExpansions('jlsg_huaiyi').length > player.hp;
              },
              content() {
                'step 0'
                event.targets = game.filterPlayer(p => p != player).sortBySeat();
                'step 1'
                if (!player.isIn()) {
                  event.finish();
                  return;
                }
                if (!event.targets.length) {
                  return;
                }
                var target = event.targets.shift();
                target.damage();
                event.redo();
                'step 2'
                player.gain('gain2', player.getExpansions('jlsg_huaiyi'));
              }
            },
            jlsg_jiaozhao: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                if (!player.countCards('h')) return false;
                for (var i of lib.inpile) {
                  var type = get.type(i);
                  var card = { name: i };
                  if (['basic', 'trick'].includes(type)
                    && game.hasPlayer(p => p != player && lib.filter.targetEnabled2(card, player, p))) return true;
                }
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  var list = [];
                  for (var i = 0; i < lib.inpile.length; i++) {
                    var name = lib.inpile[i];
                    if (name == 'sha') {
                      if (game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['基本', '', 'sha']);
                      for (var j of lib.inpile_nature) {
                        if (game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name, nature: j }, player, p))) list.push(['基本', '', 'sha', j]);
                      }
                    }
                    else if (get.type(name) == 'trick' && game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['锦囊', '', name]);
                    else if (get.type(name) == 'basic' && game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['基本', '', name]);
                  }
                  return ui.create.dialog('矫诏', [list, 'vcard']);
                },
                check: function (button) {
                  if (_status.event.getParent().type != 'phase') return 1;
                  var player = _status.event.player;
                  var card = {
                    name: button.link[2],
                    nature: button.link[3],
                  };
                  var eff = game
                    .filterPlayer(p => p != player && lib.filter.targetEnabled2(card, player, p))
                    .map(p => get.effect(p, card, player, player))
                    .filter(v => v > 0)
                    .reduce((a, b) => a + b, 0);
                  return eff;
                },
                backup: function (links, player) {
                  return {
                    filterCard: true,
                    audio: 'jlsg_jiaozhao',
                    popname: true,
                    check: function (card) {
                      return 12 - get.value(card);
                    },
                    filterOk: false,
                    selectTarget: [1, Infinity],
                    filterTarget(card, player, target) {
                      return player != target && lib.filter.targetEnabled2(card, player, target);
                    },
                    position: 'h',
                    viewAs: { name: links[0][2], nature: links[0][3] },
                  }
                },
                prompt: function (links, player) {
                  return '将一张牌当做' + (get.translation(links[0][3]) || '') + get.translation(links[0][2]) + '使用';
                }
              },
              hiddenCard: function (player, name) {
                if (!lib.inpile.includes(name)) return false;
                if (!player.isPhaseUsing()) return false;
                var type = get.type(name);
                return (type == 'basic' || type == 'trick') && player.countCards('h') > 0;
              },
              ai: {
                fireAttack: true,
                skillTagFilter: function (player) {
                  if (!player.countCards('h')) return false;
                },
                order: 1,
                result: {
                  player: function (player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    return 1;
                  },
                },
              },
            },
            jlsg_danxin: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              frequent: true,
              derivation: 'jlsg_jiaozhao',
              content() {
                'step 0'
                player.draw(2);
                var list = [];
                for (var i = 0; i < lib.inpile.length; i++) {
                  var name = lib.inpile[i];
                  if (name == 'sha') {
                    if (game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['基本', '', 'sha']);
                    for (var j of lib.inpile_nature) {
                      if (game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name, nature: j }, player, p))) list.push(['基本', '', 'sha', j]);
                    }
                  }
                  else if (get.type(name) == 'trick' && game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['锦囊', '', name]);
                  else if (get.type(name) == 'basic' && game.hasPlayer(p => p != player && lib.filter.targetEnabled2({ name: name }, player, p))) list.push(['基本', '', name]);
                }
                var next = player.chooseButton(['矫诏', [list, 'vcard']]);
                var choice, value = 0;
                for (let link of list) {
                  let card = { name: link[2], nature: link[3] }
                  let newV = game
                    .filterPlayer(p => p != player && lib.filter.targetEnabled2(card, player, p))
                    .map(p => get.effect(p, card, player, player))
                    .filter(v => v > 0)
                    .reduce((a, b) => a + b, 0);
                  if (newV > value) {
                    choice = [link[2], link[3]];
                    value = newV;
                  }
                }
                next.ai = function (button) {
                  return button.link[2] === _status.event.choice[0] &&
                    (button.link[3] || true) === (_status.event.choice[1] || true);
                }
                next.choice = choice;
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.card = { name: result.links[0][2], nature: result.links[0][3] };

                player.chooseCardTarget({
                  filterCard: true,
                  filterTarget: function (card, player, target) {
                    return player != target && lib.filter.targetEnabled2(_status.event.card, player, target);
                  },
                  ai1: function (card) {
                    return 12 - get.value(card);
                  },
                  selectTarget: [1, Infinity],
                  ai2: function (target) {
                    var player = _status.event.player;
                    return get.effect(target, _status.event.card, player, player);
                  },
                  prompt: `###${get.prompt('jlsg_jiaozhao')}###将一张牌当作${get.translation(event.card)}使用`,
                }).set('card', event.card);
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill('jlsg_jiaozhao');
                player.useCard(event.card, result.cards, result.targets, false);
              },
              ai: {
                maixie: true,
                maixie_hp: true,
              }
            },
            jlsg_fanghun: {
              audio: "ext:极略:2",
              enable: ["chooseToUse", "chooseToRespond"],
              position: "hs",
              locked: false,
              prompt: "将【杀】/【闪】当作【闪】/【杀】使用或打出，然后获得对方的一张手牌",
              viewAs(cards, player) {
                if (cards.length) {
                  var name = false;
                  switch (get.name(cards[0], player)) {
                    case 'sha': name = 'shan'; break;
                    case 'shan': name = 'sha'; break;
                  }
                  if (name) return { name: name };
                }
                return null;
              },
              check: (card) => 1,
              filterCard(card, player, event) {
                event = event || _status.event;
                var filter = event._backup.filterCard;
                var name = get.name(card, player);
                if (name == 'sha' && filter({ name: 'shan', cards: [card] }, player, event)) return true;
                if (name == 'shan' && filter({ name: 'sha', cards: [card] }, player, event)) return true;
                return false;
              },
              filter(event, player) {
                if (event.filterCard(get.autoViewAs({ name: 'sha' }, 'unsure'), player, event) && player.countCards('hs', 'shan')) return true;
                if (event.filterCard(get.autoViewAs({ name: 'shan' }, 'unsure'), player, event) && player.countCards('hs', 'sha')) return true;
                return false;
              },
              ai: {
                respondSha: true,
                respondShan: true,
                skillTagFilter(player, tag) {
                  var name;
                  switch (tag) {
                    case 'respondSha': name = 'shan'; break;
                    case 'respondShan': name = 'sha'; break;
                  }
                  if (!player.countCards('hs', name)) return false;
                },
                order(item, player) {
                  if (player && _status.event.type == 'phase') return get.order({ name: 'sha' }) + 0.3;
                  return 10;
                },
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'respondShan') || get.tag(card, 'respondSha')) {
                      if (get.attitude(target, player) <= 0) {
                        if (current > 0) return;
                        if (target.countCards('h') == 0) return 1.6;
                        if (target.countCards('h') == 1) return 1.2;
                        if (target.countCards('h') == 2) return [0.8, 0.2, 0, -0.2];
                        return [0.4, 0.7, 0, -0.7];
                      }
                    }
                  },
                }
              },
              group: ["jlsg_fanghun_cz"],
              subSkill: {
                cz: {
                  trigger: {
                    player: ["useCard", "respond"],
                  },
                  filter: function (event, player) {
                    if (event.card.name != "sha" && event.card.name != "shan") return false;
                    if (!event.skill || event.skill != "jlsg_fanghun") return false;
                    var target = lib.skill.chongzhen.logTarget(event, player);
                    return target && target.countGainableCards(player, "h") > 0;
                  },
                  logTarget: function (event, player) {
                    return lib.skill.chongzhen.logTarget.apply(this, arguments);
                  },
                  "prompt2": function (event, player) {
                    var target = lib.skill.chongzhen.logTarget(event, player);
                    return "获得" + get.translation(target) + "的一张手牌";
                  },
                  content: function () {
                    var target = lib.skill.chongzhen.logTarget(trigger, player);
                    player.gainPlayerCard(target, "h", true);
                  },
                },
              },
            },
            jlsg_fuhan: {
              audio: "ext:极略:2",
              trigger: { player: 'useCardAfter' },
              frequent: true,
              get list() {
                var list = new Set();
                for (let c of lib.jlsg.characterList.filter(c => get.character(c, 1) == 'shu')) {
                  get.character(c)[3].forEach(s => list.add(s));
                }
                delete this.list;
                this.list = [...list];
                return this.list;
              },
              usable: 1,
              filter: function (event) {
                if (!"cards" in event.card || !event.card.cards.length) return false;
                return !event.card.isCard;
              },
              content() {
                var skill = lib.skill.jlsg_fuhan.list.randomGet();
                lib.skill.jlsg_fuhan.list.remove(skill);
                player.addSkills(skill);
              },
            },
            jlsg_pindi: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filter(event, player) {
                return player.countDiscardableCards(player, 'h') && game.hasPlayer(p => p != player && !player.getStorage('jlsg_pindi_target').includes(p));
              },
              filterTarget: function (card, player, target) {
                return player != target && !player.getStorage('jlsg_pindi_target').includes(target);
              },
              filterCard: true,
              check: function (card) {
                var num = _status.event.player.isTurnedOver() ? 3 : 0;
                return 6 + num - get.value(card);
              },
              content: function () {
                'step 0'
                player.addTempSkill('jlsg_pindi_clear', ['phaseUseAfter', 'phaseAfter']);
                player.markAuto('jlsg_pindi_target', [target]);
                player.syncStorage();
                target.judge(function (card) {
                  var evt = _status.event.getParent('jlsg_pindi'), suit = get.suit(card);
                  if (get.color(card) == 'black') {
                    return get.sgn(get.attitude(evt.target, evt.player)) * 3;
                  }
                  switch (suit) {
                    case 'heart': return get.sgn(get.attitude(evt.target, evt.player)) * -3;
                    default: return 0;
                  }
                  return 0;
                }).judge2 = function (result) {
                  if (result.color == 'black') return true;
                  return false;
                };
                'step 1'
                if (result.color == 'black') {
                  player.chooseControlList([
                    '令' + get.translation(target) + '摸三张牌',
                    '令' + get.translation(target) + '弃置三张牌'
                  ], function () {
                    return _status.event.choice;
                  }).set('choice', get.attitude(player, target) > 0 ? 0 : 1);
                } else {
                  switch (result.suit) {
                    case 'heart':
                      player.turnOver();
                      break;
                    case 'diamond':
                      player.draw();
                      break;
                  }
                  event.finish();
                }
                'step 2'
                if (result.index == 0) {
                  target.draw(3, player);
                }
                else {
                  target.chooseToDiscard(3, 'he', true);
                }
              },
              subSkill: {
                clear: {
                  trigger: { player: 'phaseAfter' },
                  charlotte: true,
                  silent: true,
                  onremove: function (player) {
                    delete player.storage.jlsg_pindi_target;
                    delete player.storage.jlsg_pindi_type;
                  }
                }
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    var att = get.attitude(player, target);
                    if (att <= 0 && target.countCards('he') < 3) return 0;
                    return get.sgn(att);
                  }
                }
              }
            },
            jlsg_faen: {
              audio: "ext:极略:2",
              trigger: { global: 'turnOverEnd' },
              frequent(event, player) {
                return event.player == player;
              },
              check(event, player) {
                return get.attitude(player, event.player) > 0;
              },
              content() {
                trigger.player.draw(3, player);
              }
            },
            jlsg_diaodu: {
              audio: "ext:极略:2",
              trigger: { player: "phaseZhunbeiBegin" },
              direct: true,
              content() {
                'step 0'
                var hMax = game
                  .filterPlayer(p => get.attitude(player, p) < 0)
                  .map(p => p.countCards('h'))
                  .reduce((a, b) => a > b ? a : b, -Infinity);
                var hMin = game
                  .filterPlayer(p => get.attitude(player, p) > 0)
                  .map(p => p.countCards('h'))
                  .reduce((a, b) => a < b ? a : b, Infinity);
                var eMax = game
                  .filterPlayer(p => get.attitude(player, p) < 0)
                  .map(p => p.countCards('e'))
                  .reduce((a, b) => a > b ? a : b, -Infinity);
                var eMin = game
                  .filterPlayer(p => get.attitude(player, p) > 0)
                  .map(p => p.countCards('e'))
                  .reduce((a, b) => a < b ? a : b, Infinity);
                if (isFinite(hMax - hMin) || isFinite(eMax - eMin)) {
                  event.aiTargets = [];
                  if (!isFinite(hMax - hMin) || isFinite(eMax - eMin) && (hMax - hMin) < (eMax - eMin) * 1.2) {
                    event.aiRegion = 'e';
                    event.aiTargets.push(game
                      .filterPlayer(p => get.attitude(player, p) < 0 && p.countCards('e') == eMax)
                      .randomGet()
                    );
                    event.aiTargets.push(game
                      .filterPlayer(p => get.attitude(player, p) > 0 && p.countCards('e') == eMin)
                      .randomGet()
                    );
                  } else {
                    event.aiRegion = 'h';
                    event.aiTargets.push(game
                      .filterPlayer(p => get.attitude(player, p) < 0 && p.countCards('h') == hMax)
                      .randomGet()
                    );
                    event.aiTargets.push(game
                      .filterPlayer(p => get.attitude(player, p) > 0 && p.countCards('h') == hMin)
                      .randomGet()
                    );
                  }
                }
                player.chooseTarget(2, get.prompt2(event.name))
                  .set('ai', function (target, targets) { return _status.event.targets && _status.event.targets.includes(target) ? 1 : 0; })
                  .set('targets', event.aiTargets);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.targets = result.targets;
                if (event.targets.every(p => p.countCards('he') == 0)) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                if (event.targets.every(p => p.countCards('e') == 0)) {
                  event._result = {
                    index: 0,
                    control: '手牌区',
                  };
                  return;
                }
                if (event.targets.every(p => p.countCards('h') == 0)) {
                  event._result = {
                    index: 1,
                    control: '装备区',
                  };
                  return;
                }
                let choice;
                if (Math.sign(get.attitude(player, event.targets[0])) == Math.sign(get.attitude(player, event.targets[1]))) {
                  choice = Math.abs(event.targets[0].countCards('h') - event.targets[1].countCards('h')) < Math.abs(event.targets[0].countCards('e') - event.targets[1].countCards('e'))
                    ? 0 : 1;
                } else {
                  let diff = event.targets[0].countCards('h') - event.targets[1].countCards('h') + 1.2 * (event.targets[1].countCards('e') - event.targets[0].countCards('e'));
                  choice = ((diff > 0) ^ (get.attitude(player, event.targets[0]) > get.attitude(player, event.targets[1]))) ? 0 : 1;
                }
                player.chooseControl(['手牌区', '装备区'], true)
                  .set('prompt2', `令${get.translation(event.targets[0])}与${get.translation(event.targets[1])}交换一个区域内的所有牌`)
                  .set('ai', () => _status.event.choice)
                  .set('choice', choice);
                'step 2'
                switch (result.index) {
                  case 0:
                    event.targets[0].swapHandcards(event.targets[1]);
                    event.diff = Math.abs(event.targets[0].countCards('h') - event.targets[1].countCards('h'));
                    break;
                  case 1:
                    event.targets[0].swapEquip(event.targets[1]);
                    event.diff = Math.abs(event.targets[0].countCards('e') - event.targets[1].countCards('e'));
                    break;
                }
                if (Math.sign(get.attitude(player, event.targets[0])) != Math.sign(get.attitude(player, event.targets[0]))
                  && event.targets.some(p => p.ai.shown > player.ai.shown)) {
                  player.addExpose(0.2);
                }
                'step 3'
                if (event.diff != 0 && player.countDiscardableCards(player, 'he') != 0) {
                  player.chooseToDiscard(event.diff, 'he', true);
                }
              }
            },
            jlsg_diancai: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseJieshuBegin' },
              direct: true,
              content() {
                'step 0'
                var players = game.filterPlayer();
                var attMap = new Map();
                for (let p of players) {
                  attMap.set(p, get.attitude(player, p));
                }
                var cntMap = new Map();
                for (let p of players) {
                  let cnt = p.getHistory('lose', e => e.cards2)
                    .map(e => e.cards2.length)
                    .reduce((a, b) => a + b, 0);
                  cntMap.set(p, cnt);
                }
                event.cntMap = cntMap;
                var vMax = -Infinity, aiTargets = null;
                for (let p of players) {
                  for (let p2 of players) {
                    let v = attMap.get(p) * cntMap.get(p2) + attMap.get(p2) * cntMap.get(p);
                    if (v > vMax) {
                      vMax = v;
                      aiTargets = [p, p2];
                    }
                  }
                }

                var custom = {
                  add: {
                    _target: [() => {
                      for (let [p, cnt] of cntMap.entries()) {
                        p.prompt(cnt.toString());
                      }
                    }],
                  },
                  replace: {}
                };
                Object.defineProperty(custom.add, 'target', {
                  enumerable: true,
                  configurable: true,
                  get() {
                    return function () {
                      // console.log(this);
                      for (let f of this._target) {
                        f.call(this);
                      }
                    }
                  },
                  set(newValue) {
                    this._target.add(newValue);
                  }
                })
                var next = player.chooseTarget(2, get.prompt2(event.name))
                  .set('custom', custom)
                  .set('cntMap', cntMap)
                  .set('ai', function (target) {
                    return (_status.event.targets && _status.event.targets.includes(target)) ? 1 : 0;
                  })
                  .set('targetprompt', p => _status.event.cntMap.get(p).toString());
                if (vMax > 0) {
                  next.set('targets', aiTargets)
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                if (result.targets.some(p => p.ai.shown > player.ai.shown)) {
                  player.addExpose(0.1);
                }
                var [p, p2] = result.targets.sortBySeat();
                p.draw(event.cntMap.get(p2));
                p2.draw(event.cntMap.get(p));
              }
            },
            jlsg_zhendu: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseUseBegin' },
              check(event, player) {
                if (event.player == player) {
                  return true;
                }
                let chance = 0.5;
                chance += Math.sign(get.attitude(player, event.player)) * -0.25;
                if ((get.attitude(player, event.player) > 0) == (event.player.hp > 1)) {
                  chance += 0.2;
                }
                return Math.random() < chance;
              },
              content() {
                'step 0'
                var target = trigger.player;
                target.addTempSkill('jlsg_zhendu2', 'phaseAfter');
                target.markAuto('jlsg_zhendu2', [player]);

                if (target != player) {
                  target.loseHp();
                }
              },
              logTarget: 'player',
              ai: {
                expose: 0.2,
              }
            },
            jlsg_zhendu2: {
              forced: true,
              trigger: { source: 'damageBegin1' },
              filter(event, player) {
                return player.getStorage('jlsg_zhendu2').some(p => p != event.player);
              },
              content() {
                trigger.num += player.getStorage('jlsg_zhendu2').filter(p => p != trigger.player).length;
              },
              mark: true,
              intro: {
                content(storage, player, skill) {
                  return `本回合造成伤害+${storage.length}`;
                },
              },
            },
            jlsg_qiluan: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseEnd' },
              filter(event, player) {
                return event.player.isIn();
              },
              direct: true,
              content() {
                'step 0'
                var prompt = `###${get.prompt(event.name, trigger.player)}###其视为对你选择的角色使用一张【杀】`;
                player.chooseTarget(prompt, (_, player, target) => _status.event.target.canUse({ name: 'sha' }, target, false))
                  .set('target', trigger.player)
                  .set('ai', (target, targets) => get.effect(target, { name: 'sha' }, _status.event.player) + 3);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                trigger.player.useCard({ name: 'sha' }, result.targets, 'noai');
                'step 2'
                player.draw(game.getGlobalHistory('changeHp').length);
              },
            },
            jlsg_wurong: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget(card, player, target) {
                return player != target && target.countCards('h');
              },
              frequent: true,
              content() {
                'step 0'
                player.choosePlayerCard(target, true, "h");
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                target.showCards(result.cards);
                event.card = result.cards[0];
                let type = get.type2(result.cards[0]);
                let prompt2 = `弃置非${get.translation(type)}牌对其造成一点伤害，或弃置${get.translation(type)}并获得${get.translation(result.cards[0])}`;
                player.chooseToDiscard()
                  .set('ai', (card) => {
                    if (get.attitude(_status.event.player, _status.event.target) > 0) {
                      return -1;
                    }
                    let value = get.value(card);
                    if (get.type2(card) == get.type2(_status.event.card)) {
                      value += _status.event.target.countCards('h') > 1 ? 2 : -2;
                      value += Math.random() * 2;
                    }
                    return value;
                  })
                  .set('card', result.cards[0])
                  .set('target', target)
                  .set('prompt2', prompt2);
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.same = get.type2(event.card) == get.type2(result.cards[0])
                if (!event.same) {
                  let skills = target.getSkills(null, false, false).filter(function (i) {
                    var info = get.info(i);
                    return info && !info.charlotte && !get.is.locked(i);
                  });
                  if (!skills.length) {
                    target.damage();
                    return;
                  }
                  if (skills.length == 1) {
                    event._result = { index: 0, control: skills[0] };
                  }
                  player.chooseControl(skills).set('prompt', '请选择要禁用的技能')
                    .set('aiSkill', skills.randomGet())
                    .set('ai', () => _status.event.aiSkill);
                } else {
                  player.gain(target, event.card, 'giveAuto');
                }
                'step 3'
                if (event.same) {
                  if (!target.countCards('h')) {
                    event.finish();
                    return;
                  }
                  player.chooseBool(`是否重复此流程？`).frequentSkill = event.name;
                } else {
                  target.addTempSkill('jlsg_wurong2');
                  target.popup(result.control, 'gray');
                  target.storage.jlsg_wurong2 = target.storage.jlsg_wurong2 || [];
                  target.storage.jlsg_wurong2.add(result.control);
                  target.disableSkill('jlsg_wurong2', result.control);
                  game.log(target, '的技能', '#g【' + get.translation(result.control) + '】', '回合内失效了');
                  target.damage();
                  event.finish();
                }
                'step 4'
                if (result.bool) {
                  event.goto(0);
                }
              },
              ai: {
                order: 9,
                result: {
                  player: 1,
                  target: -1,
                }
              }
            },
            jlsg_wurong2: {
              onremove: function (player, skill) {
                player.enableSkill(skill);
              },
              locked: true,
              mark: true,
              charlotte: true,
              intro: {
                content: function (storage, player, skill) {
                  var list = [];
                  for (var i in player.disabledSkills) {
                    if (player.disabledSkills[i].includes(skill)) list.push(i);
                  };
                  if (list.length) {
                    var str = '失效技能：';
                    for (var i = 0; i < list.length; i++) {
                      if (lib.translate[list[i] + '_info']) str += get.translation(list[i]) + '、';
                    };
                    return str.slice(0, str.length - 1);
                  };
                },
              },
            },
            jlsg_shanjia: {
              audio: "ext:极略:2",
              mod: {
                globalFrom: function (from, to, distance) {
                  if (!from.hasEmptySlot(4)) return false;
                  return distance - 2;
                },
                globalTo: function (from, to, distance) {
                  if (!to.hasEmptySlot(3)) return false;
                  return distance + 2;
                }
              },
              forced: true,
              trigger: { player: 'useCard' },
              filter(event, player) {
                if (event.card.name == 'sha') {
                  if (!player.hasEmptySlot(4)) return false;
                }
                else if (get.type(event.card) != 'trick' || ['wuxie', 'tiesuo'].includes(event.card.name) || !player.hasEmptySlot(3)) {
                  return false;
                }
                return true;
              },
              content() {
                trigger.effectCount = 2;
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    let subtype = get.subtype(card);
                    if (player == target) {
                      if (
                        ['equip3', 'equip6'].includes(subtype) && target.hasEmptySlot(3) ||
                        ['equip4', 'equip6'].includes(subtype) && target.hasEmptySlot(4)
                      ) {
                        return 0;
                      }
                    }
                  }
                }
              }
            },
            jlsg_jili: {
              audio: "ext:极略:2",
              trigger: { player: 'useCardAfter' },
              filter(event, player) {
                if (get.type2(event.card) == 'trick') {
                  return false;
                }
                return game.hasPlayer(p => p != player && p.inRangeOf(player) && p.countCards('he'));
              },
              check(event, player) {
                if (player.getHistory('useCard').length <= player.getAttackRange()) {
                  return true;
                }
                return game
                  .filterPlayer(p => p != player && p.inRangeOf(player) && p.countCards('he'))
                  .map(p => Math.sign(get.attitude(player, p)))
                  .reduce((a, b) => a + b, 0)
                  < 0;
              },
              locked: false,
              content() {
                'step 0'
                event.targets = game.filterPlayer(p => p != player && p.inRangeOf(player) && p.countCards('he')).sortBySeat();
                event.discardEvents = [];
                for (let p of event.targets) {
                  let card = p.getCards('he').randomGet();
                  if (!card) {
                    continue;
                  }
                  let next = p.discard(card, 'notBySelf');
                  next.delay = false;
                  event.discardEvents.push(next);
                  game.delayex(0.5);
                }
                'step 1'
                if (player.getHistory('useCard').length <= player.getAttackRange()) {
                  // TODO: better handling of discard failure
                  player.draw(event.discardEvents.length);
                }
              },
              mod: {
                aiOrder: function (player, card, num) {
                  if (get.subtype(card) == 'equip4' && !get.cardtag(card, 'gifts')) {
                    return num + 8;
                  }
                  if (get.type2(card) == 'trick') {
                    return num / 2;
                  }
                  if (get.subtype(card) == 'equip1' && !get.cardtag(card, 'gifts')) {
                    var range0 = player.getAttackRange();
                    var range = 0;
                    var info = get.info(card);
                    if (info && info.distance && info.distance.attackFrom) {
                      range -= info.distance.attackFrom;
                    }
                    if (range > range0) {
                      return num + 10 + range;
                    }
                  }
                },
              },
            },
            jlsg_dujin: {
              audio: "ext:极略:2",
              mod: {
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha') return Infinity;
                },
                aiOrder: function (player, card, num) {
                  if (!card || card.name !== 'sha') {
                    return;
                  }
                  let evt = _status.event.getParent('phaseUse');
                  if (evt.name == 'phaseUse' && !player.hasHistory('useCard', e => e.card.name == 'sha' && e.getParent('phaseUse') === evt)) {
                    return;
                  }
                  return num - 10;
                },
              },
              forced: true,
              trigger: {
                player: "useCard",
              },
              filter: function (event, player) {
                return player.isPhaseUsing() && event.card.name == 'sha';
              },
              content() {
                let evt = trigger.getParent('phaseUse');
                if (player.hasHistory('useCard', e => e != trigger && e.card.name == 'sha' && e.getParent('phaseUse') === evt)) {
                  return;
                }
                trigger.directHit.addArray(game.players);
                trigger.baseDamage += 1;
              },
              group: 'jlsg_dujin2',
              ai: {
                directHit_ai: true,
                skillTagFilter: function (player, tag, arg) {
                  if (arg && arg.card && arg.card.name == 'sha') {
                    let evt = _status.event.getParent('phaseUse');
                    return evt.name == 'phaseUse' && !player.hasHistory('useCard', e => e.card.name == 'sha' && e.getParent('phaseUse') === evt);
                  }
                },
              },
            },
            jlsg_dujin2: {
              audio: false,
              trigger: {
                player: ['shaMiss', 'eventNeutralized'],
              },
              forced: true,
              check: false,
              filter: function (event, player) {
                if (event.type != 'card' || event.card.name != 'sha' || !event.target.isIn()) return false;
                return true;
              },
              content() {
                player.damage(trigger.target);
              },
              ai: {
                neg: true,
              }
            },
            jlsg_sanjue: {
              audio: "ext:极略:3",
              trigger: { player: 'useCard' },
              filter: function (event, player) {
                let s = player.storage.jlsg_sanjue || {};
                return !s[event.card.name] || s[event.card.name] == 2;
              },
              forced: true,
              content: function () {
                player.draw();
                player.storage.jlsg_sanjue = player.storage.jlsg_sanjue || {};
                player.storage.jlsg_sanjue[trigger.card.name] = (player.storage.jlsg_sanjue[trigger.card.name] || 0) + 1;
                var skills = new Set(
                  jlsg.characterList
                    .filter(c => get.character(c, 1) == 'wu')
                    .map(c => get.character(c)[3])
                    .flat()
                    .filter(s => !get.info(s).charlotte)
                );
                for (let s of player.getSkills()) {
                  skills.delete(s);
                }
                let skill = [...skills].randomGet();
                if (skill) {
                  player.addSkills(skill);
                }
              },
              group: 'jlsg_sanjue2',
            },
            jlsg_sanjue2: {
              audio: 'jlsg_sanjue',
              trigger: { player: 'phaseUseBegin' },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name))
                  .set('ai', p => get.attitude(player, p) - Math.random() * 2)
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                var skills = new Set(
                  jlsg.characterList
                    .map(c => get.character(c)[3])
                    .flat()
                    .filter(s => !get.info(s).charlotte)
                );
                for (let s of result.targets[0].getSkills()) {
                  skills.delete(s);
                }
                let skill = [...skills].randomGet();
                if (skill) {
                  result.targets[0].addSkills(skill);
                }
              },
            },
            jlsg_canshi: {
              audio: "ext:极略:2",
              trigger: {
                global: ["recoverAfter", "gainMaxHpAfter"],
                player: "damageEnd",
              },
              filter(event, player) {
                if (event.name == "damage") {
                  return event.source && event.source != player;
                }
                return event.player != player;
              },
              check: () => true,
              marktext: '蚕',
              intro: {
                name: '蚕食',
                name2: '蚕',
                content: 'mark',
              },
              content() {
                'step 0'
                var target = trigger.player;
                if (trigger.name == "damage") {
                  target = trigger.source;
                }
                target.addMark('jlsg_canshi');
                'step 1'
                player.draw(2);
              },
              global: "jlsg_canshi_debuff",
              subSkill: {
                debuff: {
                  mod: {
                    maxHandcard: function (player, num) {
                      return num - player.countMark('jlsg_canshi');
                    }
                  }
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                maixie_defend: true,
              }
            },
            jlsg_xianji: {
              audio: "ext:极略:2",
              trigger: {
                player: 'phaseZhunbeiBegin',
              },
              filter(event, player) {
                return game.hasPlayer(p => p != player
                  && p.countMark('jlsg_canshi') > p.maxHp
                  && !p.storage.jlsg_xianji
                )
              },
              direct: true,
              skillAnimation: true,
              animationColor: 'metal',
              intro: {
                content: "无法作为〖献祭〗的目标",
              },
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name), (_, player, target) => target != player
                  && target.countMark('jlsg_canshi') > target.maxHp
                  && !target.storage.jlsg_xianji).set('ai', () => Math.random());
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.storage.jlsg_xianji = true;
                player.markSkill('jlsg_xianji');
                var target = result.targets[0];
                event.target = target;
                player.logSkill(event.name, target);
                target.removeMark('jlsg_canshi');

                var targetSkills = target.getSkills(null, false, false).filter(function (i) {
                  var info = get.info(i);
                  return info && !info.charlotte;
                });
                if (targetSkills.length) {
                  player.gainMaxHp(targetSkills.length);
                  player.recover(targetSkills.length);
                }
                'step 2'
                var target = event.target;
                var skills = player.getSkills(null, false, false).filter(function (i) {
                  var info = get.info(i);
                  return info && !info.charlotte;
                });
                var targetSkills = target.getSkills(null, false, false).filter(function (i) {
                  var info = get.info(i);
                  return info && !info.charlotte;
                });
                player.changeSkills(targetSkills, skills);
                target.changeSkills(skills, targetSkills);
              }
            },
            jlsg_hanyong: {
              audio: "ext:极略:2",
              group: ['jlsg_hanyong_guanshi', 'jlsg_hanyong_tengjia1', 'jlsg_hanyong_tengjia2', 'jlsg_hanyong_tengjia3'],
              subSkill: {
                guanshi: {
                  audio: 'jlsg_hanyong',
                  audioname: false,
                  inherit: 'guanshi_skill',
                  locked: false,
                  mod: {
                    attackRange: function (player, num) {
                      if (lib.card.guanshi && player.hasEmptySlot(1)) return num - lib.card.guanshi.distance.attackFrom;
                    },
                  },

                  filter: function (event, player) {
                    if (!lib.skill.guanshi_skill.filter(event, player)) return false;
                    if (!player.hasEmptySlot(1)) return false;
                    return true;
                  },
                  get content() {
                    let content = lib.skill.guanshi_skill.content;
                    content = content.toString().replaceAll('guanshi_skill', 'jlsg_hanyong_guanshi');
                    if (content.startsWith("content")) content = "function" + content.slice(7);
                    content = new Function("return " + content)();
                    delete this.content;
                    this.content = content;
                    return content;
                  },
                  ai: {
                    directHit_ai: true,
                    skillTagFilter: function (player, tag, arg) {
                      if (!player.hasEmptySlot(2)) return;
                      return lib.skill.guanshi_skill.ai.skillTagFilter.apply(this, arguments);
                    },
                    effect: {
                      target: function (card, player, target) {
                        if (player == target && get.subtype(card) == 'equip2') {
                          if (!target.hasEmptySlot(2) && get.equipValue(card) <= 7.5) return 0;
                        }
                      },
                    },
                  },
                },
                tengjia1: {
                  audio: 'jlsg_hanyong',
                  audioname: false,
                  inherit: 'tengjia1',
                  equipSkill: true,
                  filter: function (event, player) {
                    if (!lib.skill.tengjia1.filter(event, player)) return false;
                    if (!player.hasEmptySlot(2)) return false;
                    return true;
                  },
                  ai: {
                    effect: {
                      target: function (card, player, target) {
                        if (player == target && get.subtype(card) == 'equip2') {
                          if (get.equipValue(card) <= 5) return 0;
                        }
                        if (!target.hasEmptySlot(2)) return;
                        return lib.skill.tengjia1.ai.effect.target.apply(this, arguments);
                      }
                    }
                  }
                },
                tengjia2: {
                  // use stock audio
                  inherit: 'tengjia2',
                  equipSkill: true,
                  filter: function (event, player) {
                    if (!lib.skill.tengjia2.filter(event, player)) return false;
                    if (!player.hasEmptySlot(2)) return false;
                    return true;
                  },
                  ai: {
                    fireAttack: true,
                    skillTagFilter: function (player, tag, arg) {
                      if (!player.hasEmptySlot(2)) return;
                      return true;
                    },
                    effect: {
                      target: function (card, player, target, current) {
                        if (!target.hasEmptySlot(2)) return;
                        return lib.skill.tengjia2.ai.effect.target.apply(this, arguments);
                      }
                    }
                  }
                },
                tengjia3: {
                  audio: 'jlsg_hanyong',
                  audioname: false,
                  inherit: 'tengjia3',
                  equipSkill: true,
                  filter: function (event, player) {
                    if (!lib.skill.tengjia3.filter(event, player)) return false;
                    if (!player.hasEmptySlot(2)) return false;
                    return true;
                  },
                },
              }
            },
            jlsg_lingruo: {
              audio: "ext:极略:2",
              trigger: {
                player: 'useCardToPlayered',
                target: 'useCardToTargeted',
              },
              filter(event, player) {
                if (event.player == event.target) {
                  return false;
                }
                return event.card.name == 'sha' || get.type(event.card) == 'trick';
              },
              check(event, player) {
                let target = event.target;
                if (event.target == player) {
                  target = event.player;
                }
                if (target.countCards('he') == 0) {
                  return true;
                }
                return get.attitude(player, target) <= 1;
              },
              logTarget(event, player) {
                if (event.name == 'useCardToPlayered') {
                  return event.target;
                }
                return event.player;
              },
              content() {
                'step 0'
                event.target = trigger.target;
                if (event.target == player) {
                  event.target = trigger.player;
                }
                if (event.target.countCards('he') > 0 && event.target.ai.shown > player.ai.shown) {
                  player.addExpose(0.1);
                }
                event.cnt = ['basic', 'trick', 'equip'].filter(
                  t => player.countCards('he', { type: t }) > event.target.countCards('he', { type: t })
                ).length;
                'step 1'
                if (event.cnt > 0) {
                  --event.cnt;
                } else {
                  event.finish();
                  return;
                }
                let choice;
                if (event.target.countCards('he') == 0) {
                  choice = 0;
                } else {
                  let dist = [1, 1, 1];
                  // option 1 & 2 are less likely to happen consecutively 
                  if (event.choice) {
                    dist[event.choice] -= 0.5
                  }
                  choice = jlsg.distributionGet(dist);
                }
                event.choice = choice;
                switch (choice) {
                  case 0:
                    player.draw();
                    break;
                  case 1:
                    var card = target.getCards('he').randomGet();
                    if (card) {
                      player.gain(card, target, 'giveAuto');
                    }
                    break;
                  case 2:
                    var card = target.getCards('he').randomGet();
                    if (card) {
                      target.discard(card, 'notBySelf').discarder = player;
                    }
                    break;
                }
                event.redo();
              },
            },
            jlsg_fujian: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name),
                  (_, player, target) => player != target && target.countCards('h'))
                  .set('ai', target => get.attitude(_status.event.player, target) > 0 ? 0 : target.countCards('h') + 2 * Math.random());
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                event.target = target;
                player.logSkill(event.name, result.targets);
                player.choosePlayerCard(target, 'h', true, 'visible', () => Math.random());
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = event.target;
                if (!target.storage.jlsg_fujian) {
                  target.storage.jlsg_fujian = new Map();
                }
                var cards = target.storage.jlsg_fujian.get(player) || [];
                cards.push([result.cards[0], 0]);
                target.storage.jlsg_fujian.set(player, cards);

                target.addSkill('jlsg_fujian2');
              },
            },
            jlsg_fujian2: {
              charlotte: true,
              silent: true,
              trigger: { player: 'useCard' },
              content() {
                let added = false;
                for (let v of player.storage.jlsg_fujian.values()) {
                  for (let a of v) {
                    added = true;
                    a[1] += 1;
                  }
                }
                if (!added) {
                  player.removeSkill(event.name);
                }
              },
              group: 'jlsg_fujian3',
            },
            jlsg_fujian3: {
              audio: 'jlsg_fujian',
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              charlotte: true,
              silent: true,
              content() {
                'step 0'
                var evt = trigger.getl(player);
                var cards = (evt.hs || []).concat(evt.es || []);
                if (!cards.length) {
                  event.finish();
                  return;
                }
                var result = [];
                event.result = result;
                var sources = [...player.storage.jlsg_fujian.keys()].sortBySeat();
                for (let lostCard of cards) {
                  for (let source of sources) {
                    let cards = player.storage.jlsg_fujian.get(source);
                    cards = cards.filter(([card, cnt]) => {
                      if (lostCard == card) {
                        result.push([source, cnt]);
                      }
                      return lostCard != card;
                    });
                    player.storage.jlsg_fujian.set(source, cards);
                  }
                }
                'step 1'
                if (!event.result.length) {
                  event.finish();
                  return;
                }
                let [source, cnt] = event.result.shift();
                if (source.isIn() && source.hasSkill('jlsg_fujian')) {
                  source.logSkill('jlsg_fujian', player);
                  player.loseHp();
                  source.draw(cnt);
                }
                event.redo();
              }
            },
            jlsg_fengyin: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin1' },
              logTarget: 'player',
              filter(event, player) {
                if (!event.card || event.player == player) {
                  return false;
                }
                if (event.card.name == 'sha' && !player.hasSkill('jlsg_fengyin_sha')) {
                  return true;
                }
                if (event.card.name == 'juedou' && !player.hasSkill('jlsg_fengyin_juedou')) {
                  return true;
                }
                return false;
              },
              check(event, player) {
                return get.attitude(player, event.player) < 0;
              },
              content() {
                'step 0'
                player.addTempSkill('jlsg_fengyin_' + trigger.card.name);
                var criteria = { suit: 'diamond' };
                if (lib.skill.jlsg_rongzhuang.escalate(player)) {
                  criteria = { color: 'red' };
                }
                player.draw(player.countCards('h', criteria));
                trigger.num += trigger.player.countCards('h', criteria);
              },
              combo: 'jlsg_rongzhuang',
              subSkill: {
                sha: {},
                juedou: {},
              }
            },
            jlsg_rongzhuang: {
              audio: "ext:极略:2",
              escalate(player) {
                return player.getEquips(1).length && player.getEquips(2).length;
              },
              trigger: { player: 'useCard1' },
              forced: true,
              filter(event, player) {
                return event.card.name == 'sha' && (
                  player.getEquips(1).length && player.countUsed('sha', true) > 1 && event.getParent().type == 'phase'
                  || player.getEquips(2).length
                );
              },
              content() {
                trigger.audioed = true;
                if (player.getEquips(2).length) {
                  trigger.directHit.addArray(game.filterPlayer(function (current) {
                    return current != player;
                  }));
                }
              },
              mod: {
                cardUsable(card, player, num) {
                  if (card.name == 'sha') return Infinity;
                }
              },
              ai: {
                directHit_ai: true,
              }
            },
            jlsg_huomo: {
              audio: "ext:极略:2",
              enable: 'chooseToUse',
              hiddenCard: function (player, name) {
                if (get.type(name) != 'basic') return false;
                const list = player.getStorage('jlsg_huomo');
                if (list.includes(name)) return false;
                return player.countCards('he', { color: 'black' });
              },
              filter: function (event, player) {
                if (event.type == 'wuxie' || !player.countCards('he', { color: 'black' })) return false;
                const list = player.getStorage('jlsg_huomo');
                for (var name of lib.inpile) {
                  if (get.type(name) != 'basic' || list.includes(name)) continue;
                  var card = { name: name, isCard: true };
                  if (event.filterCard(card, player, event)) return true;
                  if (name == 'sha') {
                    for (var nature of lib.inpile_nature) {
                      card.nature = nature;
                      if (event.filterCard(card, player, event)) return true;
                    }
                  }
                }
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  const vcards = [];
                  const list = player.getStorage('jlsg_huomo');
                  for (let name of lib.inpile) {
                    if (get.type(name) != 'basic' || list.includes(name)) continue;
                    let card = { name: name, isCard: true };
                    if (event.filterCard(card, player, event)) vcards.push(['基本', '', name]);
                    if (name == 'sha') {
                      for (let nature of lib.inpile_nature) {
                        card.nature = nature;
                        if (event.filterCard(card, player, event)) vcards.push(['基本', '', name, nature]);
                      }
                    }
                  }
                  return ui.create.dialog('活墨', [vcards, 'vcard'], 'hidden');
                },
                check: function (button) {
                  const player = _status.event.player;
                  const card = { name: button.link[2], nature: button.link[3] };
                  if (game.hasPlayer(function (current) {
                    return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                  })) {
                    switch (button.link[2]) {
                      case 'tao': return 5;
                      case 'jiu': return 3.01;
                      case 'sha':
                        if (button.link[3] == 'fire') return 2.95;
                        else if (button.link[3] == 'thunder') return 2.92;
                        else return 2.9;
                      case 'shan': return 1;
                    }
                  }
                  return 0;
                },
                backup: function (links, player) {
                  return {
                    check: function (card) {
                      return 1 / Math.max(0.1, get.value(card));
                    },
                    filterCard: function (card) {
                      return get.color(card) == 'black';
                    },
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                    },
                    position: 'he',
                    popname: true,
                    ignoreMod: true,
                    precontent: function () {
                      if (!player.storage.jlsg_huomo) {
                        player.when({ global: ["phaseAfter", "phaseBefore"] }).then(() => {
                          player.unmarkSkill("jlsg_huomo");
                        });
                      }
                      player.markAuto("jlsg_huomo", event.result.card.name);
                    },
                  }
                },
                prompt: function (links, player) {
                  return '将一张黑色牌当作' + get.translation(links[0][3] || '') + get.translation(links[0][2]);
                }
              },
              marktext: '墨',
              intro: {
                content: '本回合已因〖活墨〗使用过$',
                onunmark: true,
              },
              ai: {
                order: function () {
                  var player = _status.event.player;
                  var event = _status.event;
                  var list = player.getStorage('jlsg_huomo');
                  if (!list.includes('jiu') && event.filterCard({ name: 'jiu' }, player, event) && get.effect(player, { name: 'jiu' }) > 0) {
                    return 3.1;
                  }
                  return 2.9;
                },
                respondSha: true,
                fireAttack: true,
                respondShan: true,
                skillTagFilter: function (player, tag, arg) {
                  if (tag == 'fireAttack') return true;
                  if (player.hasCard(function (card) {
                    return get.color(card) == 'black';
                  }, 'he')) {
                    var list = player.getStorage('jlsg_huomo');
                    if (tag == 'respondSha') {
                      if (arg != 'use') return false;
                      if (list.includes('sha')) return false;
                    }
                    else if (tag == 'respondShan') {
                      if (list.includes('shan')) return false;
                    }
                  }
                  else {
                    return false;
                  }
                },
                result: {
                  player: 1,
                }
              }
            },
            jlsg_dingguan: {
              audio: "ext:极略:2",
              trigger: { global: 'useCardToPlayered' },
              filter(event, player) {
                if (!event.isFirstTarget) return false;
                return get.color(event.card) == 'black' &&
                  event.player.isPhaseUsing() && event.targets && event.targets.length && !game.hasPlayer2(function (current) {
                    return current.getHistory('damage').length > 0;
                  });
              },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(get.prompt('jlsg_dingguan'), '令目标角色摸一张牌', function (card, player, target) {
                  return _status.event.targets.includes(target);
                }, [1, trigger.targets.length]).set('ai', function (target) {
                  return get.attitude(_status.event.player, target);
                }).set('targets', trigger.targets);
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_dingguan', result.targets);
                  game.asyncDraw(result.targets.sortBySeat());
                }
              },
              ai: {
                expose: 0.2
              },
            },
            jlsg_xianshou: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseBegin' },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name))
                  .set('ai', function (target) {
                    let v = get.attitude(_status.event.player, target) - 2 + Math.random();
                    if (target.hasSkill('jlsg_tiandao')) {
                      v = v / 3;
                    }
                    return v;
                  });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                event.target = target;
                player.logSkill(event.name, target);
                if (target.ai.shown > player.ai.shown && get.attitude(player, target) > 2) {
                  player.addExpose(0.2);
                }
                if (!target.hasSkill('jlsg_tiandao')) {
                  target.addSkills('jlsg_tiandao');
                  event.finish();
                  return;
                }
                player.judge(function (card) {
                  if (get.suit(card) == "spade") return -3;
                  return 2;
                })
                  .set('judge2', result => result.bool);
                'step 2'
                var diff = result.bool ? 1 : -1;
                let index = [0, 1, 2, 3];
                if (diff < 0) {
                  index = index.filter(i => target.storage.jlsg_tiandao[i] > 0);
                };
                if (index.length) {
                  index = index.randomGet();
                  event.target.storage.jlsg_tiandao[index] += diff;
                }
              },
              derivation: 'jlsg_tiandao',
            },
            jlsg_tiandao: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsg_tiandao = [1, 1, 1, 1];
              },
              trigger: { player: 'phaseZhunbeiBegin' },
              forced: true,
              content() {
                'step 0'
                var [cnt1, cnt2] = player.storage.jlsg_tiandao;
                if (cnt1 > 0) {
                  player.draw(player.storage.jlsg_tiandao[0])
                }
                if (cnt2 > 0) {
                  let skills = jlsg.characterList
                    .filter(c => get.character(c, 1) == 'qun')
                    .map(c => get.character(c)[3])
                    .flat()
                    .filter(s => {
                      if (player.hasSkill(s)) {
                        return false;
                      }
                      let skill = lib.skill[s];
                      return skill &&
                        !skill.zhuSkill &&
                        !skill.limited &&
                        !skill.juexingji &&
                        !skill.hiddenSkill &&
                        !skill.charlotte &&
                        !skill.dutySkill;
                    });
                  skills = [... new Set(skills)];
                  skills = skills.randomGets(cnt2);
                  player.addSkills(skills);
                  for (let s of skills) {
                    player.popup(s);
                  }
                }
                'step 1'
                if (!player.isIn()) {
                  return;
                }
                var [_, _, cnt1, cnt2] = player.storage.jlsg_tiandao;
                if (cnt1 <= 0 && cnt2 <= 0) {
                  event.finish();
                  return;
                }
                var target, maxValue = -Infinity;
                for (let t of game.filterPlayer()) {
                  let value = -Math.min(t.countCards('he'), cnt1) * get.attitude(player, t)
                    + get.damageEffect(t, player, player, 'thunder') * cnt2;
                  if (value > maxValue) {
                    maxValue = value;
                    target = t;
                  }
                }
                var prompt2 = [];
                if (cnt1 > 0) {
                  prompt2.push(`令其随机弃置${cnt1}张牌`);
                }
                if (cnt2 > 0) {
                  prompt2.push(`对其造成${cnt2}点雷电伤害`);
                }
                player.chooseTarget()
                  .set('prompt2', prompt2.join(','))
                  .set('ai', function (target) {
                    return target == _status.event.target;
                  })
                  .set('target', target);
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                var [_, _, cnt1, cnt2] = player.storage.jlsg_tiandao;
                if (cnt1 > 0) {
                  target.randomDiscard(cnt1);
                }
                if (cnt2 > 0) {
                  target.damage(cnt2, 'thunder');
                }
              },
            },
            jlsg_chengfeng: {
              audio: "ext:极略:2",
              trigger: { player: "damageBegin2" },
              forced: true,
              content() {
                'step 0'
                player.judge();
                'step 1'
                if (result.suit == 'spade') {
                  player.addMark('jlsg_chengfeng');
                } else {
                  trigger.num -= 1;
                }
              },
              intro: {
                name: "乘风",
                content: "mark",
              },
              group: 'jlsg_chengfeng_extra',
              subSkill: {
                extra: {
                  audio: 'jlsg_chengfeng',
                  trigger: { global: 'phaseAfter' },
                  filter(event, player) {
                    return player.countMark('jlsg_chengfeng') >= 2;
                  },
                  forced: true,
                  content() {
                    player.removeMark('jlsg_chengfeng', 2);
                    player.insertPhase(event.name);
                  }
                },
              },
              ai: {
                maixie: true,
                maixie_hp: true,
              },
            },
            jlsg_kunfen: {
              audio: "ext:极略:2",
              trigger: { player: ["damageEnd", "loseHpEnd", "loseMaxHpAfter"] },
              forced: true,
              async content(event, trigger, player) {
                await player.draw(3);
                let evts = player.getHistory("useSkill", e => e.skill == 'jlsg_kunfen');
                if (evts.length == 1 && player.isDamaged()) {
                  player.recover();
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                result: {
                  effect: function (card, player, target) {
                    if (get.tag(card, "damage")) {
                      if (!target.hasFriend()) return;
                      var num = 1;
                      if (get.attitude(player, target) > 0) {
                        if (player.needsToDiscard()) num = 0.7;
                        else num = 0.5;
                      }
                      if (player.hp >= 4) return [1, num * 2];
                      if (target.hp == 3) return [1, num * 1.5];
                      if (target.hp == 2) return [1, num * 0.5];
                    }
                  },
                },
              },
            },
            jlsg_caiyu: {
              audio: "ext:极略:2",
              trigger: { player: "phaseZhunbeiBegin" },
              check(event, player) {
                if (player.maxHp <= 1 || player.isHealthy()) {
                  return false;
                }
                if (player.hasSkill('jlsg_kunfen') && player.getDamagedHp() > 1) {
                  return true;
                }
                return Math.random() < 0.5;
              },
              async content(event, trigger, player) {
                await player.loseMaxHp();
                let names = jlsg.characterList.filter(n => n.includes('zhugeliang') || lib.translate[n] && lib.translate[n].includes('诸葛亮'));
                names.addArray([
                  'jlsgsr_zhugeliang',
                  'sp_zhugeliang',
                  'jlsgsoul_zhugeliang',
                  'jlsgsoul_sp_zhugeliang',
                ]);
                let skills = [];
                for (let name of names) {
                  skills.addArray(get.character(name)?.[3] ?? []);
                }
                // TODO
                let skill = skills.removeArray(player.getSkills(null, false, false)).randomGet();
                if (skill) {
                  player.addSkills(skill);
                }
              },
            },
            jlsg_qinqing: {
              audio: "ext:极略:2",
              trigger: { player: "phaseJieshuBegin" },
              async cost(event, trigger, player) {
                event.result = await player
                  .chooseTarget(`###${get.prompt(event.skill)}###令攻击范围含有其的角色交给其一张牌`)
                  .set("ai", target => {
                    const player = get.event("player");
                    const targets = game.filterPlayer(p => p != player && p != target)
                      .filter(p => p.countCards('he') && p.inRange(target));
                    let eff = targets.map(p => -get.attitude(player, p)).reduce((a, b) => a + b, 0)
                      + targets.length * get.attitude(player, target);
                    if (target.isDamaged() && target.countCards('h') + targets.length <= player.countCards('h')) {
                      eff += get.recoverEffect(target, player, player);
                    }
                    return eff;
                  })
                  .forResult();
              },
              async content(event, trigger, player) {
                const target = event.targets[0];
                const givers = game.filterPlayer(p => p != player && p != target)
                  .filter(p => p.countCards('he') && p.inRange(target));
                for (let giver of givers) {
                  if (!target.isIn()) {
                    return;
                  }
                  if (!giver.isIn()) {
                    continue;
                  }
                  await giver.chooseToGive(target, true, 'he');
                }
                if (!target.isDamaged() || target.countCards('h') > player.countCards('h')) {
                  return;
                }
                let { result } = await player.chooseBool(`是否令${get.translation(target)}回复1点体力？`, get.recoverEffect(target, player, player) > 0);
                if (result.bool) {
                  target.recover(player);
                }
              },
            },
            jlsg_huisheng: {
              audio: "ext:极略:2",
              trigger: { player: "damageBegin4" },
              filter: function (event, player) {
                if (!player.countCards("h")) return false;
                if (!event.source || event.source == player || !event.source.isIn()) return false;
                return true;
              },
              async cost(event, trigger, player) {
                let max = Math.min(3, player.countCards('h'));
                let prompt = `###${get.prompt(event.skill)}###令${get.translation(trigger.source)}观看你至多${max}张手牌`;
                event.result = await player
                  .chooseCard(prompt, [1, max])
                  .set("ai", card => {
                    let value = get.value(card) / _status.event.dmgCnt;
                    if (!ui.selected.cards.length) {
                      return 7 - get.value(card);
                    }
                    return 4 - value;
                  })
                  .set('dmgCnt', trigger.num)
                  .forResult();
              },
              async content(event, trigger, player) {
                const target = trigger.source;
                // target.viewCards(event.name, event.cards);
                if (target.countDiscardableCards(target, "he") >= event.cards.length) {
                  let { result } = await target.chooseToDiscard(event.cards.length, 'he')
                    .set('dialog', [`###贿生###选择${get.cnNumber(event.cards.length)}张牌弃置，否则获得${get.translation(player)}的一张手牌并防止此伤害`, event.cards])
                    .set('ai', card => {
                      let target = _status.event.target;
                      if (get.attitude(_status.event.player, target) >= 0) {
                        return 0;
                      }
                      let cnt = _status.event.selectCard[0];
                      let value = 8 - cnt * 1.5 - get.value(card) + 2 * Math.random();
                      if (cnt > 1 && cnt == target.countCards('h')) {
                        value -= cnt / 2;
                      }
                      return value;
                    })
                    .set('target', player);
                  if (result.bool) {
                    if (player.ai.shown > target.ai.shown && get.attitude(target, player) < 0) {
                      target.addExpose(0.3);
                    }
                    return;
                  }
                }
                let { result } = await target.chooseCardButton(event.cards, true, `获得的${get.translation(player)}一张牌`)
                  .set('ai', card => get.value(card));
                if (result.cards) {
                  await target.gain(player, result.cards, 'giveAuto');
                  trigger.cancel();
                }
              },
            },
            jlsg_manyi: {
              audio: "ext:极略:2",
              trigger: {
                player: "useCardToPlayered",
                target: "useCardToTargeted",
              },
              filter(event, player, name) {
                if (event.card.name == "nanman") return false;
                if (name == "useCardToTargeted" && event.player == player) return false;
                return event.card.name == "sha" || get.type(event.card) == "trick"
              },
              prompt(event, player) {
                return `蛮裔：是否将${get.translation(event.card)}的效果改为【南蛮入侵】？`;
              },
              prompt2(event, player) {
                return `然后你可以摸一张牌`;
              },
              check(event, player, name) {
                let eff1 = 0, eff2 = 0, source = event.player,
                  card = get.autoViewAs({ name: "nanman", ...event.card }, event.cards);
                if (name == "useCardToPlayered") source = player;
                for (let target of event.targets) {
                  eff1 += get.effect(target, card, source, player);
                  eff2 += get.effect(target, event.card, source, player);
                };
                return eff1 >= eff2;
              },
              async content(event, trigger, player) {
                game.log(player, "将", trigger.card, "的效果改为了【南蛮入侵】");
                trigger.card.name = 'nanman';
                if (trigger.card.isCard) trigger.card.isCard = false;
                trigger.getParent().effectCount = get.info(trigger.card, false).effectCount || 1;
                trigger.getParent().excluded = [];
                trigger.getParent().directHit = [];
                trigger.getParent().card.storage = {};
                trigger.getParent().baseDamage = 1;
                trigger.getParent().extraDamage = 0;
                await player.draw();
              },
              ai: {
                expose: 0.2,
              },
            },
            jlsg_souying: {
              audio: "ext:极略:2",
              trigger: { global: 'respondAfter' },
              filter(event, player) {
                switch (event.card.name) {
                  case 'sha':
                    return game.hasPlayer(p => !player.getStorage('jlsg_souying_temp').includes(p));
                    break;
                  case 'sha':
                    return game.hasPlayer(p => !player.getStorage('jlsg_souying_temp').includes(p) && p.isDamaged());
                    break;
                  default:
                    return false;
                }
              },
              async cost(event, trigger, player) {
                event.result = await player.chooseTarget((_, player, target) => {
                  if (player.getStorage('jlsg_souying_temp').includes(target)) { return false; }
                  return _status.event.cardName != 'shan' || target.isDamaged();
                })
                  .set('prompt', get.prompt(event.skill))
                  .set('prompt2', trigger.card.name == 'sha' ? '对一名角色造成1点伤害' : '令一名角色回复1点体力')
                  .set('cardName', trigger.card.name)
                  .set('ai', target => get[_status.event.cardName == 'sha' ? 'damageEffect' : 'recoverEffect'](target, _status.event.player, _status.event.player))
                  .forResult();
              },
              async content(event, trigger, player) {
                if (trigger.card.name == 'sha') {
                  event.targets[0].damage();
                } else {
                  event.targets[0].recover();
                }
                player.addTempSkill('jlsg_souying_temp');
                player.storage.jlsg_souying_temp = player.getStorage('jlsg_souying_temp').concat(event.targets[0]);
              }
            },
            jlsg_souying_temp: {
              onremove: true,
            },
            jlsg_guolun: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsg_guolun = 0;
              },
              trigger: { global: ['drawAfter', 'discardAfter', 'recoverAfter', 'damageAfter'] },
              priority: 1,
              filter(event, player) {
                return game.hasPlayer(p => this.filterTargetDefault(event, player, p, false));
              },
              usable: 1,
              filterTargetDefault(trigger, player, target, isReverse) {
                switch (player.storage.jlsg_guolun) {
                  case 0:
                    if (!isReverse) {
                      return false;
                    }
                  // fall through
                  case 1:
                    if (trigger.player != player) {
                      return false;
                    }
                  // fall through
                  case 2:
                    if (!['draw', 'discard'].includes(trigger.name)) {
                      return false;
                    }
                }
                let action = trigger.name;
                if (isReverse) {
                  action = {
                    'draw': 'discard',
                    'discard': 'draw',
                    'recover': 'damage',
                    'damage': 'recover',
                  }[trigger.name];
                }
                let source = trigger.player;
                if (trigger.name == 'damage') {
                  if (!trigger.source) {
                    return false;
                  }
                  source = trigger.source;
                }
                if (source == target) {
                  return false;
                }
                if (action == 'discard') {
                  return target.countDiscardableCards(target, 'he');
                }
                if (action == 'recover') {
                  return target.isDamaged();
                }
                return true;
              },
              getAITarget(trigger, player, isReverse) {
                let targets = game.filterPlayer(p => lib.skill.jlsg_guolun.filterTargetDefault(trigger, player, p, isReverse));
                let action = trigger.name;
                if (isReverse) {
                  action = {
                    'draw': 'discard',
                    'discard': 'draw',
                    'recover': 'damage',
                    'damage': 'recover',
                  }[trigger.name];
                }
                let aiTarget, maxEff = 0;
                switch (action) {
                  case 'draw':
                    return targets.filter(p => get.attitude(player, p) > 0).randomGet();
                  case 'discard':
                    for (let target of targets) {
                      let eff = -Math.min(trigger.num, target.countDiscardableCards(target, 'he'));
                      eff *= get.attitude(player, target);
                      if (eff > maxEff) {
                        maxEff = eff;
                        aiTarget = target;
                      }
                    }
                    return aiTarget;
                  case 'recover':
                    for (let target of targets) {
                      let eff = get.recoverEffect(target, trigger.source || player, player);
                      if (eff > maxEff) {
                        maxEff = eff;
                        aiTarget = target;
                      }
                    }
                    return aiTarget;
                  case 'damage':
                    for (let target of targets) {
                      let eff = get.damageEffect(target, trigger.source || player, player, trigger.nature);
                      if (eff > maxEff) {
                        maxEff = eff;
                        aiTarget = target;
                      }
                    }
                    return aiTarget;
                    break;
                }
              },
              async cost(event, trigger, player) {
                let prompt2 = '选择一名角色';
                let aiTarget = lib.skill.jlsg_guolun.getAITarget(trigger, player, false);
                switch (trigger.name) {
                  case 'draw':
                    prompt2 += `摸${get.cnNumber(trigger.num)}张牌`;
                    break;
                  case 'discard':
                    prompt2 += `弃${get.cnNumber(trigger.cards.length)}张牌`;
                    break;
                  case 'recover':
                    prompt2 += `回复${trigger.num}点体力`;
                    break;
                  case 'damage':
                    let nature = '';
                    if (trigger.nature) {
                      nature = get.translation(trigger.nature) + '属性';
                    }
                    prompt2 += `受到来自${get.translation(trigger.source)}的${trigger.num}点${nature}伤害`;
                    break;
                }
                event.result = await player
                  .chooseTarget(`###${get.prompt('jlsg_guolun')}###${prompt2}`, (_, player, target) => {
                    return lib.skill.jlsg_guolun.filterTargetDefault(_status.event.getTrigger(), player, target, false);
                  })
                  .set("ai", target => {
                    return target == _status.event.aiTarget;
                  })
                  .set('aiTarget', aiTarget)
                  .forResult();
                if (event.result.bool) {
                  let target = event.result.targets[0];
                  if (trigger.source) {
                    player.line2([trigger.source, target], 'green');
                  } else {
                    player.line(target, 'green');
                  }
                }
              },
              line: false,
              async content(event, trigger, player) {
                let target = event.targets[0];
                switch (trigger.name) {
                  case 'draw':
                    target.draw(trigger.num);
                    break;
                  case 'discard':
                    target.chooseToDiscard(true, 'he', trigger.cards.length);
                    break;
                  case 'recover':
                    target.recover(trigger.num, trigger.source || player);
                    break;
                  case 'damage':
                    target.damage(trigger.num, trigger.source);
                    break;
                }
              },
              group: 'jlsg_guolun_reverse',
              derivation: ['jlsg_guolun2', 'jlsg_guolun3', 'jlsg_guolun4'],
              subSkill: {
                reverse: {
                  audio: 'jlsg_guolun',
                  trigger: { global: ['drawAfter', 'discardAfter', 'recoverAfter', 'damageAfter'] },
                  filter(event, player) {
                    return game.hasPlayer(p => lib.skill.jlsg_guolun.filterTargetDefault(event, player, p, true));
                  },
                  usable: 1,
                  async cost(event, trigger, player) {
                    let prompt2 = '选择一名角色';
                    let aiTarget = lib.skill.jlsg_guolun.getAITarget(trigger, player, true);
                    switch (trigger.name) {
                      case 'draw':
                        prompt2 += `弃${get.cnNumber(trigger.num)}张牌`;
                        break;
                      case 'discard':
                        prompt2 += `摸${get.cnNumber(trigger.cards.length)}张牌`;
                        break;
                      case 'recover':
                        let source = '';
                        if (trigger.source) {
                          source = `来自${get.translation(trigger.source)}的`;
                        }
                        prompt2 += `受到${source}${trigger.num}点伤害`;
                        break;
                      case 'damage':
                        prompt2 += `回复${trigger.num}点体力`;
                        break;
                    }
                    event.result = await player
                      .chooseTarget(`###${get.prompt('jlsg_guolun')}###${prompt2}`, (_, player, target) => {
                        return lib.skill.jlsg_guolun.filterTargetDefault(_status.event.getTrigger(), player, target, true);
                      })
                      .set("ai", target => {
                        return target == _status.event.aiTarget;
                      })
                      .set('aiTarget', aiTarget)
                      .forResult();
                    if (event.result.bool) {
                      let target = event.result.targets[0];
                      if (trigger.source) {
                        player.line2([trigger.source, target], 'green');
                      } else {
                        player.line(target, 'green');
                      }
                    }
                  },
                  line: false,
                  async content(event, trigger, player) {
                    let target = event.targets[0];
                    switch (trigger.name) {
                      case 'draw':
                        target.chooseToDiscard(true, 'he', trigger.num);
                        break;
                      case 'discard':
                        target.draw(trigger.cards.length);
                        break;
                      case 'recover':
                        target.damage(trigger.num, trigger.source || player);
                        break;
                      case 'damage':
                        target.recover(trigger.num, trigger.source);
                        break;
                    }
                  },
                },
              }
            },
            jlsg_songsang: {
              audio: "ext:极略:2",
              trigger: { global: 'die' },
              filter(event, player) {
                return event.player != player;
              },
              forced: true,
              async content(event, trigger, player) {
                if (player.hasSkill('jlsg_guolun')) {
                  player.storage.jlsg_guolun = Math.min(3, player.storage.jlsg_guolun + 1);
                  player.syncStorage("jlsg_guolun");
                }
                player.draw(game.countPlayer());
              },
            },
            jlsg_qinguo: {
              audio: "ext:极略:2",
              locked: false,
              mod: {
                playerEnabled: (card, player, target) => {
                  let info = get.info(card);
                  if (info.type != 'equip') {
                    return;
                  }
                  if (!player.isPhaseUsing()) {
                    return;
                  }
                  if (info.selectTarget && info.selectTarget !== -1) {
                    return true;
                  }
                  if (info.modTarget) {
                    if (typeof info.modTarget == 'boolean') return info.modTarget;
                    if (typeof info.modTarget == 'function') return Boolean(info.modTarget(card, player, target));
                  }
                },
                selectTarget(card, player, num) {
                  let info = get.info(card);
                  if (info.type != 'equip') {
                    return;
                  }
                  if (!player.isPhaseUsing()) {
                    return;
                  }
                  if (num[1] < 0) {
                    if (num[0] === num[1]) {
                      num[0] = 1;
                    }
                    num[1] = 1;
                  }
                }
              },
              trigger: { player: 'useCardAfter' },
              filter(event, player) {
                if (get.type(event.card) != 'equip') {
                  return false;
                }
                let cards = lib.inpile
                  .filter(c => lib.card[c].type === 'basic')
                  .map(c => {
                    let cards = [{ name: c, isCard: true }];
                    if (c == 'sha') {
                      for (let nature of lib.inpile_nature) {
                        cards.push({ name: c, nature, isCard: true });
                      }
                    }
                    return cards;
                  })
                  .flat()
                  .filter(c => player.hasUseTarget(c, undefined, false));
                return cards.length;
              },
              direct: true,
              async content(event, trigger, player) {
                let cards = lib.inpile
                  .filter(c => lib.card[c].type === 'basic')
                  .map(c => {
                    let cards = [{ name: c, isCard: true }];
                    if (c == 'sha') {
                      for (let nature of lib.inpile_nature) {
                        cards.push({ name: c, nature, isCard: true });
                      }
                    }
                    return cards;
                  })
                  .flat()
                  .filter(c => player.hasUseTarget(c, undefined, false));

                let { result } = await player.chooseButton([
                  get.prompt('jlsg_qinguo'),
                  [
                    cards.map(c => ["基本", "", c.name, c.nature]),
                    'vcard',
                  ],
                ]);
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let card = { name: result.links[0][2], nature: result.links[0][3], isCard: true };
                await player.chooseUseTarget(card, false)
                  .set('logSkill', event.name);
              },
              group: ['jlsg_qinguo_gain'],
              subSkill: {
                gain: {
                  audio: 'jlsg_qinguo',
                  trigger: {
                    global: ["equipAfter", "loseAfter", "loseAsyncAfter", "cardsDiscardAfter"],
                  },
                  filter(event, player) {
                    let cards = this.getCards(event, player);
                    return cards.length;
                  },
                  getCards(event, player) {
                    if (event.name == 'cardsDiscard') {
                      // 装备牌转化出牌
                      let parent = event.getParent();
                      if (parent.name !== 'orderingDiscard') {
                        return false;
                      }
                      let source = parent.relatedEvent || parent.getParent();
                      let dcards = event.getd().filter(c => get.type(c) == 'equip');
                      let lcards = new Set();
                      for (let p of game.filterPlayer(p => p != player)) {
                        let events = p.getHistory('lose', e => source == (e.relatedEvent || e.getParent()));
                        for (let plose of events) {
                          for (let v of plose.getl(p).es) {
                            lcards.add(v);
                          }
                        }
                      }
                      return dcards.filter(c => lcards.has(c)).filterInD('d');
                    }
                    let lcards = game.filterPlayer(p => p != player)
                      .map(p => event.getl(p).es)
                      .flat();
                    let dcards = game.filterPlayer(p => p != player)
                      .map(p => event.getd(p))
                      .flat();
                    return lcards.filter(c => get.type(c) == 'equip' && dcards.includes(c)).filterInD('d');
                  },
                  usable: 1,
                  async cost(event, trigger, player) {
                    let cards = lib.skill.jlsg_qinguo_gain.getCards(trigger, player);
                    if (cards.length == 1) {
                      let prompt = `###${get.prompt('jlsg_qinguo')}###获得弃牌堆中的${get.translation(cards[0])}`;
                      event.result = await player.chooseBool(prompt, true)
                        .forResult();
                      if (event.result.bool) {
                        event.result.cards = cards;
                      }
                    } else {
                      let prompt = `###${get.prompt('jlsg_qinguo')}###获得弃牌堆中的一张装备`;
                      event.result = await player.chooseCardButton(prompt, cards)
                        .set('ai', button => {
                          let player = _status.event.player;
                          let card = button.link;
                          let value = get.value(card);
                          let cnt = player.countCards('hx', { type: 'equip', subtype: get.subtype(card) });
                          if (cnt) {
                            value /= (1 + 2 * cnt);
                          }
                          if (player.countCards('hx', { name: card.name })) {
                            value /= 2;
                          }
                          return value;
                        })
                        .forResult();
                      event.result.cards = event.result.links.slice();
                    }
                  },
                  async content(event, trigger, player) {
                    player.gain(event.cards[0], 'gain2');
                  },
                },
              }
            },
            jlsg_zhenge: {
              audio: "ext:极略:2",
              derivation: 'jlsg_zhenge_derivation',
              trigger: { player: 'useCardBegin' },
              silent: true,
              forced: true,
              lastDo: true,
              filter(event, player) {
                return Array.isArray(event.cards);
              },
              async content(event, trigger, player) {
                if (trigger.cards.some(c => !c.hasGaintag('jlsg_zhenge'))) {
                  trigger.set('jlsg_zhenge_gain_valid', true);
                }
                if (trigger.cards.length && trigger.cards.every(c => c.hasGaintag('jlsg_zhenge'))) {
                  trigger.set('jlsg_zhenge_target_valid', true);
                  trigger.set('addCount', false);
                }
              },
              subfrequent: 'gain',
              group: ['jlsg_zhenge_gain', 'jlsg_zhenge_target'],
              subSkill: {
                gain: {
                  audio: 'jlsg_zhenge',
                  trigger: { player: 'useCardAfter' },
                  frequent: true,
                  filter(event, player) {
                    return event.jlsg_zhenge_gain_valid;
                  },
                  async content(event, trigger, player) {
                    let card = ui.cardPile.lastChild;
                    if (card) {
                      player.gain(card).set("gaintag", ['jlsg_zhenge']);
                      player.$drawAuto([card]);
                      await game.delayx(0.5);
                    }
                  },
                },
                target: {
                  audio: 'jlsg_zhenge',
                  trigger: { player: 'useCardToPlayered' },
                  filter(event, player) {
                    return event.getParent().jlsg_zhenge_target_valid && ['red', 'black'].includes(get.color(event.card));
                  },
                  logTarget: 'target',
                  check(event, player) {
                    if (get.color(event.card) == 'red') {
                      return get.attitude(player, event.target) > 0.5 + Math.random();
                    } else {
                      return get.attitude(player, event.target) < 0.5 - Math.random();
                    }
                  },
                  locked: false,
                  prompt2(event, player) {
                    let eff = get.color(event.card) == 'red' ? '正面效果' : '负面效果';
                    return '使其获得随机一个' + eff;
                  },
                  async content(event, trigger, player) {
                    let target = trigger.target;
                    if (get.color(trigger.card) == 'red') {
                      if (get.attitude(player, target) > 1 && target.ai.shown > player.ai.shown) {
                        player.addExpose(0.2);
                      }
                      let index = Math.floor(8 * Math.random());
                      let cnt;
                      switch (index) {
                        case 0:
                          let skills = [];
                          for (let name of jlsg.characterList) {
                            skills.addArray(get.character(name)?.[3] ?? []);
                          }
                          for (let p of game.filterPlayer()) {
                            skills.removeArray(p.getSkills(null, false, false));
                          }
                          let skill = skills.randomGet();
                          if (!skill) {
                            break;
                          }
                          target.popup(skill);
                          target.flashAvatar(player == target ? event.name : null, skill);
                          await target.addSkills(skill);
                          break;
                        case 1:
                          target.addSkill('jlsg_zhenge_buff');
                          target.storage.jlsg_zhenge_buff.hand += 1;
                          break;
                        case 2:
                          cnt = [1, 2].randomGet();
                          let type = ['basic', 'trick', 'equip'].randomGet();
                          let cards = Array.from(ui.cardPile.childNodes).filter(c => get.type(c) == type);
                          if (cards.length < cnt) {
                            cards.push(...Array.from(ui.discardPile.childNodes).filter(c => get.type(c) == type));
                          }
                          cards = cards.randomGets(cnt);
                          if (!cards.length) {
                            game.log(target, '没能获得', get.translation(type), '牌');
                            await game.delayx(0.5);
                          } else {
                            await target.gain(cards, 'gain2');
                          }
                          break;
                        case 3:
                          cnt = jlsg.distributionGet([0, 1, 0.2, 0.1]);
                          await target.gainMaxHp(cnt);
                          break;
                        case 4:
                          cnt = jlsg.distributionGet([0, 1, 0.2, 0.1]);
                          if (target.isHealthy()) {
                            game.log(target, "回复了体力");
                            await game.delayx(0.5);
                          } else {
                            await target.recover(cnt, player);
                          }
                          break;
                        case 5:
                          target.addSkill('jlsg_zhenge_buff');
                          target.storage.jlsg_zhenge_buff.draw += 1;
                          break;
                        case 6:
                          target.addSkill('jlsg_zhenge_buff');
                          target.storage.jlsg_zhenge_buff.sha += 1;
                          break;
                        case 7:
                          cnt = jlsg.distributionGet([0, 1, 1, 0.4, 0.2, 0.1]);
                          target.draw(cnt, player);
                          break;
                      }
                    } else {
                      if (get.attitude(player, target) < -1 && target.ai.shown > player.ai.shown) {
                        player.addExpose(0.2);
                      }
                      let index = Math.floor(8 * Math.random());
                      let cnt;
                      switch (index) {
                        case 0:
                          await target.link();
                          break;
                        case 1:
                          cnt = jlsg.distributionGet([0, 1, 1, 0.4, 0.2, 0.1]);
                          target.randomDiscard(cnt);
                          break;
                        case 2:
                          cnt = jlsg.distributionGet([0, 1, 0.2, 0.1]);
                          target.damage(cnt);
                          break;
                        case 3:
                          let skill = target.getSkills(null, false, false);
                          if (!skill) {
                            game.log(target, '没有可以失去的技能');
                          } else {
                            target.popup(skill, 'gray');
                            await target.removeSkills(skill);
                          }
                          break;
                        case 4:
                          await target.turnOver();
                          break;
                        case 5:
                          cnt = jlsg.distributionGet([0, 1, 0.2, 0.1]);
                          target.damage(cnt, 'fire');
                          break;
                        case 6:
                          cnt = jlsg.distributionGet([0, 1, 0.1]);
                          target.loseMaxHp(cnt);
                          break;
                        case 7:
                          cnt = jlsg.distributionGet([0, 1, 0.2, 0.1]);
                          target.loseHp(cnt);
                          break;
                      }
                    }
                  },
                  mod: {
                    ignoredHandcard(card, player) {
                      if (card.hasGaintag("jlsg_zhenge")) {
                        return true;
                      }
                    },
                    cardDiscardable(card, player, name) {
                      if (name == "phaseDiscard" && card.hasGaintag("jlsg_zhenge")) {
                        return false;
                      }
                    },
                    cardUsable(card, player, num) {
                      if (card.cards && card.cards.every(i => i.hasGaintag("jlsg_zhenge"))) {
                        return Infinity;
                      }
                    },
                  },
                },
                buff: {
                  init(player) {
                    player.storage.jlsg_zhenge_buff = {
                      hand: 0,
                      draw: 0,
                      sha: 0,
                    };
                  },
                  locked: false,
                  popup: false,
                  forced: true,
                  trigger: { player: "phaseDrawBegin2" },
                  filter: function (event, player) {
                    return !event.numFixed && player.storage.jlsg_zhenge_buff.draw;
                  },
                  content: function () {
                    trigger.num += player.storage.jlsg_zhenge_buff.draw;
                  },
                  mark: true,
                  marktext: '枕',
                  intro: {
                    markcount(storage) {
                      return storage.hand + storage.draw + storage.sha;
                    },
                    content(storage) {
                      let result = [];
                      if (storage.hand) {
                        result.push(`手牌上限+${storage.hand}`);
                      }
                      if (storage.draw) {
                        result.push(`摸牌阶段摸牌数+${get.cnNumber(storage.draw)}`);
                      }

                      if (storage.sha) {
                        result.push(`使用杀次数上限+${get.cnNumber(storage.sha)}`);
                      }

                      return result.join('<br>');
                    },
                  },
                  mod: {
                    cardUsable(card, player, num) {
                      if (card.name == "sha") {
                        return num + player.storage.jlsg_zhenge_buff.sha;
                      }
                    },
                    maxHandcard: function (player, num) {
                      return num + player.storage.jlsg_zhenge_buff.hand;
                    },
                  },
                },
              }
            },
            jlsg_zhenge_derivation: { sub: true },
            jlsg_xinghan: {
              audio: "ext:极略:2",
              forbid: ['hearth', 'guozhan'],
              changeSeat: true,
              init(player) {
                player.storage.jlsg_xinghan_token = lib.group.filter(g => jlsg.characterList.some(c => get.character(c, 1) == g));
                player.storage.jlsg_xinghan_location = false;
                player.storage.jlsg_xinghan = [];
                player.storage.jlsg_xinghan_removed = [];
                if (_status.jlsg_xinghan_init) {
                  return;
                }
                _status.jlsg_xinghan_init = true;
                Object.defineProperty(_status, 'jlsg_xinghan_compact', {
                  enumerable: true,
                  configurable: true,
                  get() {
                    let result = game.hasPlayer(p => p.getSkills(null, false, false).some(s => s != 'jlsg_xinghan' && lib.skill[s].changeSeat));
                    delete this.jlsg_xinghan_compact;
                    this.jlsg_xinghan_compact = result;
                    return result;
                  },
                });
                game.broadcastAll(function () {
                  // player.isMin
                  let isMin = Object.getOwnPropertyDescriptor(lib.element.Player.prototype, 'isMin');
                  Object.defineProperty(lib.element.Player.prototype, 'isMin', {
                    ...isMin,
                    value: function (distance) {
                      if (this.hasSkill('jlsg_xinghan_recruit')) {
                        return false;
                      }
                      return isMin.value.apply(this, arguments);
                    }
                  });
                  // player.setIdentity
                  let setIdentity = Object.getOwnPropertyDescriptor(lib.element.Player.prototype, 'setIdentity');
                  Object.defineProperty(lib.element.Player.prototype, 'setIdentity', {
                    ...setIdentity,
                    value: function (identity, nature) {
                      let result = setIdentity.value.apply(this, arguments);
                      if (this.storage.jlsg_xinghan) {
                        arguments[0] = lib.skill.jlsg_xinghan.mapIdentity(identity);
                        for (let recruit of this.storage.jlsg_xinghan) {
                          setIdentity.value.apply(recruit, arguments);
                        }
                      }
                      return result;
                    }
                  });
                  player.isUnderControl
                  let isUnderControl = Object.getOwnPropertyDescriptor(lib.element.Player.prototype, 'isUnderControl');
                  Object.defineProperty(lib.element.Player.prototype, 'isUnderControl', {
                    ...isUnderControl,
                    value: function (self, me) {
                      me = me || game.me;
                      var that = this._trueMe || this;
                      if (that.isMad() || game.notMe) return false;
                      if (this === me) {
                        if (self) return true;
                        return false;
                      }
                      me = me._trueMe || me;
                      if (that === me) {
                        return true;
                      }
                      if (_status.connectMode) return false;
                      if (lib.config.mode == "versus") {
                        if (_status.mode == "three") return this.side == me.side;
                        if (_status.mode == "standard") return lib.storage.single_control && this.side == me.side;
                        if (_status.mode == "four") return get.config("four_phaseswap") && this.side == me.side;
                        if (_status.mode == "two") return get.config("two_phaseswap") && this.side == me.side;
                        return false;
                      } else if (lib.config.mode == "boss") {
                        if (me.side) return false;
                        return this.side == me.side && get.config("single_control");
                      } else if (game.chess) {
                        if (lib.config.mode == "chess") {
                          if (_status.mode == "combat" && !get.config("single_control")) return false;
                        }
                        return this.side == me.side;
                      }
                      return false;
                    }
                  });
                  // get.realAttitude
                  if (get.realAtitude) {
                    get.realAtitude = new Proxy(get.realAtitude, {
                      apply(target, thisArg, argumentsList) {
                        let [from, to] = argumentsList;
                        if (from.storage.jlsg_xinghan_recruit) {
                          argumentsList[0] = from.storage.jlsg_xinghan_recruit;
                        }
                        if (to.storage.jlsg_xinghan_recruit) {
                          argumentsList[1] = to.storage.jlsg_xinghan_recruit;
                        }
                        return Reflect.apply(target, thisArg, argumentsList);
                      },
                    });
                  }
                  const style = document.createElement('style');
                  style.type = 'text/css';
                  style.id = "jlsg-xinghan";
                  document.head.appendChild(style);
                  let scale = 0.8, scale2 = 0.9;
                  if (ui.arena.dataset.number > 8) {
                    scale = 4.8 / ui.arena.dataset.number;
                    scale2 = 5.4 / ui.arena.dataset.number;
                  }
                  let testP = ui.create.player(ui.arena);
                  testP.classList.add('fullskin', 'minskin');
                  if (getComputedStyle(testP).width == "120px") {
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit { width: 110px; height: 110px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .avatar { left: 2px !important; top: 2px !important; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .identity { left: 92px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .hp { left: 82px; bottom: 8px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .count { left: -11px; bottom: 10px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .equips > *:first-child:last-child { border-radius: 8px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .equips > *:first-child { border-radius: 8px 8px 0px 0px; }`);
                    style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .equips > *:last-child { border-radius: 0px 0px 8px 8px; }`);
                  }
                  testP.remove();
                  style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit { transform: scale(${scale}); }`);
                  style.sheet.insertRule(`#arena > .player.minskin.jlsg-xinghan-recruit .equips { left: 2px; bottom: 1px; }`);
                  style.sheet.insertRule(`#arena > .player.jlsg-xinghan-recruit:not(.minskin):not([data-position="0"]) { transform: scale(${scale2}); }`);
                  style.sheet.insertRule(`#arena > .player.jlsg-xinghan-recruit > .dieidentity { display:none; }`);
                });
              },
              onremove(player) {
                let recruits = player.storage.jlsg_xinghan.slice();
                if (typeof player.seatNum == "number") {
                  recruits.sort((a, b) => a.seatNum - b.seatNum);
                }
                for (let recruit of recruits) {
                  let next = recruit.die();
                  next._triggered = null;
                  next.then(() => {
                    lib.skill.jlsg_xinghan.removeRecruit(recruit);
                  })
                }
              },
              intro: {
                mark: function (dialog, storage, player) {
                  dialog.add(storage);
                  if (player.storage.jlsg_xinghan_removed.length) {
                    let removed = player.storage.jlsg_xinghan_removed;
                    dialog.add(removed);
                    for (let i = 0; i != removed.length; ++i) {
                      dialog.buttons[dialog.buttons.length - i].classList.add('dead');
                    }
                  }
                },
              },
              trigger: {
                player: ["enterGame", "phaseEnd"],
                global: "phaseBefore",
              },
              filter(event, player, triggerName) {
                if (triggerName == "phaseBefore" && game.phaseNumber != 0) {
                  return false;
                }
                if (!player.storage.jlsg_xinghan_token.length) {
                  return false;
                }
                return player.storage.jlsg_xinghan.length < 3;
              },
              async cost(event, trigger, player) {
                let result;
                if (player.storage.jlsg_xinghan_token.length == 1) {
                  result = {
                    control: player.storage.jlsg_xinghan_token[0],
                  };
                } else {
                  ({ result } = await player.chooseControl(player.storage.jlsg_xinghan_token.concat('cancel2'))
                    .set('prompt', get.prompt('jlsg_xinghan'))
                    .set('prompt2', '选择招募的势力'));
                }
                if (result.control == 'cancel2') {
                  return;
                }
                let choices = jlsg.characterList.filter(c => get.character(c, 1) == result.control).randomGets(3);
                if (!choices.length) {
                  return;
                }
                let { result: result2 } = await player.chooseButton([
                  `招募一名的${get.translation(result.control)}势力武将`,
                  [choices, 'character'],
                ]);
                event.result = {
                  bool: result2.bool,
                  cost_data: [result.control, result2.links[0]],
                };
              },
              async content(event, trigger, player) {
                let [token, name] = event.cost_data;
                player.storage.jlsg_xinghan_token.remove(token);
                let compact = _status.jlsg_xinghan_compact;
                let recruit;
                if (compact) {
                  let before;
                  if (player.storage.jlsg_xinghan_location) {
                    before = player;
                    while (before.previousSeat.storage.jlsg_xinghan_recruit === player) {
                      before = before.previous;
                    }
                  } else {
                    before = player.nextSeat;
                    while (before.storage.jlsg_xinghan_recruit === player) {
                      before = before.next;
                    }
                  }
                  let position = before.dataset.position;
                  recruit = game.addPlayer(position, name);
                  recruit.getId();
                } else {
                  recruit = game.addFellow(player.dataset.position, name, 'zoominanim');
                  if (player.storage.jlsg_xinghan_location) {
                    game.players.remove(recruit);
                    game.players.unshift(recruit);
                    game.arrangePlayers();
                  }
                }
                if (recruit.previousSeat.seatNum) {
                  // 在一号位前时作为末置位
                  recruit.seatNum = recruit.previousSeat.seatNum + 1;
                  for (let p of game.players.concat(game.dead)) {
                    if (p != recruit && p.seatNum >= recruit.seatNum) {
                      p.seatNum += 1;
                    }
                  }
                }
                jlsg.characterList.remove(name);
                recruit.storage.jlsg_xinghan_recruit = player;
                recruit.addSkill('jlsg_xinghan_recruit');
                recruit.draw(2)._triggered = null;
                game.log(player, '招募了', recruit);
                player.storage.jlsg_xinghan_location = !player.storage.jlsg_xinghan_location;
                recruit._trueMe = player;
                game.addGlobalSkill("autoswap");
                // await game.delayx(0.3);
                if (!compact) {
                  // relocate
                  jlsg.makeDraggable(recruit);
                  let { top: pTop, height: pHeight, left: pLeft, width: pWidth } = getComputedStyle(recruit.previous);
                  let { top: nTop, left: nLeft } = getComputedStyle(recruit.next);
                  let { height: rHeight, width: rWidth } = getComputedStyle(recruit);
                  let pDist = 0.5;
                  switch (player) {
                    case recruit.previous:
                      pDist = 0.625;
                      break;
                    case recruit.next:
                      pDist = 0.375;
                      break;
                    case recruit.previous.previous:
                      pDist = 0.375;
                      break;
                    case recruit.next.next:
                      pDist = 0.625;
                      break;
                  }
                  recruit.style.top = `calc(${pDist} * ${pTop} + ${1 - pDist} * ${nTop} + 0.5 * ${pHeight} - 0.5 * ${rHeight})`;
                  recruit.style.left = `calc(${pDist} * ${pLeft} + ${1 - pDist} * ${nLeft} + 0.5 * ${pWidth} - 0.5 * ${rWidth})`;
                }
                // AI expose
                recruit.ai = {
                  ...player.ai,
                  handcards: recruit.ai.handcards,
                }
                game.broadcastAll(function (recruit, player) {
                  Object.defineProperty(recruit.ai, 'shown', {
                    enumerable: true,
                    get() {
                      return player.ai.shown;
                    },
                    set(value) {
                      player.ai.shown = value;
                    },
                  })
                }, recruit, player);
                Object.defineProperty(recruit, 'identity', {
                  enumerable: true,
                  get() {
                    if (this.storage.jlsg_xinghan_recruit) {
                      return lib.skill.jlsg_xinghan.mapIdentity(this.storage.jlsg_xinghan_recruit.identity);
                    }
                  },
                });
                Object.defineProperty(recruit, 'identityShown', {
                  enumerable: true,
                  get() {
                    let recruiter = this.storage.jlsg_xinghan_recruit;
                    if (recruiter) {
                      return recruiter.identityShown;
                    }
                  },
                  set(value) {
                    let recruiter = this.storage.jlsg_xinghan_recruit;
                    if (recruiter) {
                      recruiter.identityShown = value;
                    }
                  },
                });
                if (recruit.showIdentity) {
                  game.broadcastAll(function (player, recruit) {
                    if (player.identity && !game.getIdentityList(player)) {
                      recruit.setIdentity();
                    } else {
                      recruit.setIdentity(player.node.identity.firstChild.innerHTML, player.node.identity.dataset.color);
                    }
                  }, player, recruit);
                }
                const players = player.storage.jlsg_xinghan.concat(player);
                for (let p of players) {
                  p.storage.zhibi = p.getStorage('zhibi').concat(recruit);
                  recruit.storage.zhibi = recruit.getStorage('zhibi').concat(p);
                  p.ai.modAttitudeFrom = function (from, to, att) {
                    if (from.storage.jlsg_xinghan_recruit) {
                      let origin = from.getStorage('jlsg_xinghan_recruit');
                      if (to?.playerid == origin?.playerid || to.getStorage('jlsg_xinghan_recruit')?.playerid == origin?.playerid) {
                        return 5;
                      }
                      const currents = game.filterPlayer(current => {
                        if (current == form) return false;
                        if (current.storage.jlsg_xinghan_recruit?.playerid == origin?.playerid || current?.playerid == origin?.playerid) return false;
                        return true;
                      }, undefined, true);
                      if (currents.length == 1 && currents[0] == to) return -2;
                      return get.attitude(origin, to);
                    }
                    const currents = game.filterPlayer(current => {
                      if (current == form) return false;
                      if (current.storage.jlsg_xinghan_recruit?.playerid == from?.playerid) return false;
                      return true;
                    }, undefined, true);
                    if (currents.length == 1 && currents[0] == to) return -2;
                    return att;
                  }
                  p.ai.modAttitudeTo = function (from, to, att) {
                    if (to.storage.jlsg_xinghan_recruit) {
                      let origin = to.getStorage('jlsg_xinghan_recruit');
                      if (from.playerid == origin?.playerid || from.getStorage('jlsg_xinghan_recruit')?.playerid == origin?.playerid) {
                        return 5;
                      }
                      const currents = game.filterPlayer(current => {
                        if (current == to) return false;
                        if (current.storage.jlsg_xinghan_recruit?.playerid == origin?.playerid) return false;
                        return true;
                      }, undefined, true);
                      if (currents.length == 1 && currents[0] == from) return -2;
                      return get.attitude(from, origin);
                    }
                    const currents = game.filterPlayer(current => {
                      if (current == to) return false;
                      if (current.storage.jlsg_xinghan_recruit?.playerid == to?.playerid) return false;
                      return true;
                    }, undefined, true);
                    if (currents.length == 1 && currents[0] == from) return -2;
                    return att;
                  }
                };
                // AI attitude
                player.markAuto('jlsg_xinghan', recruit);
                /*if (get.attitude(player, recruit) <= 0 || get.attitude(recruit, player) <= 0) {
                  if (_status.jlsg_xinghan_attitude_patch) {
                    console.error("jlsg_xinghan get.attitude not working");
                  } else {
                    _status.jlsg_xinghan_attitude_patch = true;
                    get.attitude = new Proxy(get.attitude, {
                      apply(target, thisArg, argumentsList) {
                        let [from, to] = argumentsList;
                        if (from?.storage.jlsg_xinghan_recruit) {
                          argumentsList[0] = from.storage.jlsg_xinghan_recruit;
                        }
                        if (to?.storage.jlsg_xinghan_recruit) {
                          argumentsList[1] = to.storage.jlsg_xinghan_recruit;
                        }
                        return Reflect.apply(target, thisArg, argumentsList);
                      },
                    });
                  }
                }*/
                //
                game.triggerEnter(recruit);
              },
              mapIdentity(identity) {
                switch (identity) {
                  case 'rZhu':
                    return 'rZhong';
                  case 'bZhu':
                    return 'bZhong';
                  case 'zhu':
                    return 'zhong';
                  case 'nei':
                    return 'commoner';
                  default:
                    return identity;
                }
              },
              removeRecruit(player) {
                let recruiter = player.storage.jlsg_xinghan_recruit;
                recruiter.storage.jlsg_xinghan.remove(player);
                recruiter.storage.jlsg_xinghan_removed.push(player);
                if (!_status.over) {
                  if (_status.jlsg_xinghan_compact) {
                    game.removePlayer(player);
                  } else {
                    player.delete();
                    game.dead.remove(player);
                    player.removed = true;
                  }
                }
              },
              ai: {
                threaten(player, target) {
                  if (!target.storage.jlsg_xinghan_token.length && !target.storage.jlsg_xinghan.length) return 0;
                  return 3;
                },
              }
            },
            jlsg_xinghan_recruit: {
              init(player) {
                player.classList.add('jlsg-xinghan-recruit');
                if (!_status.jlsg_xinghan_compact) {
                  player.classList.add('minskin');
                }
              },
              firstDo: true,
              charlotte: true,
              mark: true,
              marktext: '招',
              intro: {
                name: '招募',
                name2: '招募',
                content(storage) {
                  return `受${get.translation(storage)}招募`;
                },
              },
              silent: true,
              forceDie: true,
              forced: true,
              trigger: { global: ['phaseBefore', 'phaseAfter', 'die'] },
              filter(event, player) {
                if (event.name == 'die') {
                  return event.player == player.storage.jlsg_xinghan_recruit || event.player == player;
                }
                return !player._trueMe;
              },
              async content(event, trigger, player) {
                let recruiter = player.storage.jlsg_xinghan_recruit;
                if (!player._trueMe) {
                  player._trueMe = recruiter;
                }
                if (trigger.name == 'die') {
                  if (trigger.player == recruiter) {
                    let next = player.die();
                    next._triggered = null;
                    await next;
                    if (recruiter.isUnderControl(self)) {
                      game.swapPlayerAuto(recruiter);
                    }
                  }
                  lib.skill.jlsg_xinghan.removeRecruit(player);
                }
              },
            },
            jlsg_qianchong: {
              audio: "ext:极略:2",
              group: ['jlsg_qianchong_red', 'jlsg_qianchong_black', 'jlsg_qianchong_extra'],
              subSkill: {
                red: {
                  audio: 'jlsg_qianchong',
                  trigger: { global: 'phaseEnd' },
                  priority: 1,
                  filter(event, player) {
                    let evts = player.getHistory('useCard', e => get.color(e.card) == 'red');
                    return evts.length == 1;
                  },
                  async cost(event, trigger, player) {
                    let { result } = await player.chooseTarget(`###${get.prompt('jlsg_qianchong')}###令一名角色回复2点体力或摸其体力上限张牌`)
                      .set('ai', target => {
                        let player = _status.event.player;
                        let eff = get.recoverEffect(target, player, player);
                        if (target.getDamagedHp() >= 2) {
                          eff += 0.58 * eff;
                        }
                        let eff2 = get.attitude(player, target) * target.maxHp;
                        return Math.max(eff, eff2);
                      });
                    if (!result.bool) {
                      return;
                    }
                    let target = result.targets[0];
                    let result2;
                    if (target.isHealthy()) {
                      result2 = {
                        index: 1,
                      };
                    } else {
                      let eff = get.recoverEffect(target, player, player);
                      if (target.getDamagedHp() >= 2) {
                        eff += 0.58 * eff;
                      }
                      let eff2 = get.attitude(player, target) * target.maxHp;
                      let choice = eff > eff2 ? 0 : 1;
                      result2 = await player.chooseControlList([
                        `令${get.translation(target)}回复2点体力`,
                        `令${get.translation(target)}摸${get.cnNumber(target.maxHp)}张牌`,
                      ])
                        .set('ai', () => _status.event.choice)
                        .set('choice', choice)
                        .forResult();
                      if (result2.control == 'cancel2') {
                        return;
                      }
                    }
                    event.result = {
                      bool: true,
                      targets: [target],
                      cost_data: result2.index,
                    }
                  },
                  async content(event, trigger, player) {
                    let target = event.targets[0];
                    if (get.attitude(player, target) > 0 && target.ai.shown > player.ai.shown) {
                      player.addExpose(0.2);
                    }
                    if (event.cost_data == 0) {
                      target.recover(2, player);
                    } else {
                      target.draw(target.maxHp, player);
                    }
                  },
                },
                black: {
                  audio: 'jlsg_qianchong',
                  trigger: { global: 'phaseEnd' },
                  priority: 0.9,
                  filter(event, player) {
                    let evts = player.getHistory('useCard', e => get.color(e.card) == 'black');
                    return evts.length == 1;
                  },
                  async cost(event, trigger, player) {
                    let { result } = await player.chooseTarget(`###${get.prompt('jlsg_qianchong')}###令一名角色失去2点体力或弃置其体力上限张牌`)
                      .set('ai', target => {
                        let player = _status.event.player;
                        let eff = 1.4 * jlsg.getLoseHpEffect(target) * (get.attitude(player, target) - 1);
                        let eff2 = (get.attitude(player, target) - 1) * -Math.min(target.countCards('he'), target.maxHp);
                        return Math.max(eff, eff2);
                      });
                    if (!result.bool) {
                      return;
                    }
                    let target = result.targets[0];
                    let result2;
                    if (target.countCards('he') == 0) {
                      result2 = {
                        index: 0,
                      };
                    } else {
                      let eff = 1.4 * jlsg.getLoseHpEffect(target) * (get.attitude(player, target) - 1);
                      let eff2 = (get.attitude(player, target) - 1) * -Math.min(target.countCards('he'), target.maxHp);
                      let choice = eff > eff2 ? 0 : 1;
                      result2 = await player.chooseControlList([
                        `令${get.translation(target)}失去2点体力`,
                        `令${get.translation(target)}弃置${get.cnNumber(target.maxHp)}张牌`,
                      ])
                        .set('ai', () => _status.event.choice)
                        .set('choice', choice)
                        .forResult();
                      if (result2.control == 'cancel2') {
                        return;
                      }
                    }
                    event.result = {
                      bool: true,
                      targets: [target],
                      cost_data: result2.index,
                    }
                  },
                  async content(event, trigger, player) {
                    let target = event.targets[0];
                    if (get.attitude(player, target) < 0 && target.ai.shown > player.ai.shown) {
                      player.addExpose(0.3);
                    }
                    if (event.cost_data == 0) {
                      target.loseHp(2);
                    } else {
                      target.chooseToDiscard(target.maxHp, 'he', true);
                    }
                  },
                },
                extra: {
                  forced: true,
                  locked: false,
                  trigger: { player: 'phaseEnd' },
                  filter(event, player) {
                    let evts = player.getHistory('useSkill');
                    return !event.skill && evts.some(e => e.skill == 'jlsg_qianchong_red') &&
                      evts.some(e => e.skill == 'jlsg_qianchong_black');
                  },
                  popup: false,
                  async content(event, trigger, player) {
                    game.log(player, '获得了一个额外回合');
                    player.insertPhase(event.name)
                  }
                },
              },
              ai: {
                effect: {
                  player_use: function (card, player, target) {
                    if (_status.currentPhase != player) {
                      return;
                    }
                    let color = get.color(card);
                    if (!color) {
                      return;
                    }
                    let cnt = player.getHistory('useCard', e => get.color(e) == color).length;
                    if (cnt == 0) {
                      return [1, 8];
                    }
                    else if (cnt == 1) {
                      let color2 = color == 'red' ? 'black' : 'red';
                      let cnt2 = player.getHistory('useCard', e => get.color(e) == color2).length;
                      if (_status.event.getParent('phase').skill || cnt2 > 1) {
                        return;
                      }
                      return [1, -8];
                    }
                  },
                },
                pretao: true,
              },
            },
            jlsg_shangjian: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDiscardBegin' },
              filter(event, player) {
                return player.countCards('h') > player.getHandcardLimit();
              },
              forced: true,
              async content(event, trigger, player) {
                let num = player.countCards('h') - player.getHandcardLimit();
                let num0 = num;
                let list = [];
                while (num > 0) {
                  let select = [1, num];
                  if (game.filterPlayer(p => p != player && !list.map(i => i[0]).includes(p)).length == 1) {
                    select = num;
                  }
                  let { result } = await player.chooseCardTarget({
                    forced: true,
                    selectCard: [1, num],
                    filterCard(card, player) {
                      return !_status.event.list.map(i => i[1]).flat().includes(card);
                    },
                    filterTarget(card, player, target) {
                      return player != target && !_status.event.list.map(i => i[0]).includes(target);
                    },
                    ai1(card) {
                      if (card.name == "du") return 20;
                      if (ui.selected.cards.some(c => c.name == 'du')) {
                        return -Math.random();
                      }
                      return Math.random();
                    },
                    ai2: function (target) {
                      const player = get.event("player"),
                        att = get.attitude(player, target);
                      if (ui.selected.cards.some(c => c.name == 'du') && !target.hasSkillTag("nodu"))
                        return -20 * att;
                      return att + 2 * Math.random();
                    },
                    prompt: `尚俭：将${get.cnNumber(num0)}张手牌分配给其他角色`,
                    prompt2: num == num0 ? null : `剩余${get.cnNumber(num)}张`,
                  }).set('list', list);
                  if (!result.bool) {
                    return;
                  }
                  list.push([result.targets[0], result.cards]);
                  player.addGaintag(result.cards, "olsujian_given");
                  num -= result.cards.length;
                }
                let cards = list.map(i => i[1]).flat();
                await game.loseAsync({
                  gain_list: list,
                  player: player,
                  cards: cards,
                  giver: player,
                  animate: "giveAuto",
                })
                  .setContent("gaincardMultiple");
                player.when({ player: "phaseDiscardEnd" })
                  .filter(evt => evt == trigger)
                  .vars({ cnt: cards.length })
                  .then(() => {
                    player.draw(cnt);
                  });
              }
            },
            jlsg_yanjiao: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsg_yanjiao = [null, false, false, false, false];
              },
              enable: "phaseUse",
              filter(event, player) {
                let invalid = [];
                let hand = player.getCards('h');
                invalid.push(
                  player.storage.jlsg_yanjiao[1] || hand.length < 1,
                );
                let nums = new Set(hand.map(c => get.number(c, player)));
                invalid.push(
                  player.storage.jlsg_yanjiao[2] || hand.length < 2 || hand.length == nums.size,
                );
                let suits = hand.map(c => get.suit(c, player));
                invalid.push(
                  player.storage.jlsg_yanjiao[3] || hand.length < 3 || lib.suits.every(s => suits.filter(cs => cs == s).length < 3),
                );
                let continuous = Array.from(new Array(14).keys())
                  .some(n => nums.has(n) && nums.has(n + 1) && nums.has(n + 2) && nums.has(n + 3));
                invalid.push(
                  player.storage.jlsg_yanjiao[4] || hand.length < 4 || !continuous,
                );
                let valid5 = !player.storage.jlsg_yanjiao[5] && hand.length >= 5;
                if (valid5) {
                  valid5 = lib.suits.some(s => {
                    let nums = new Set(hand
                      .filter(c => get.suit(c, player) == s)
                      .map(c => get.number(c, player)));
                    return Array.from(new Array(14).keys())
                      .some(n => nums.has(n) && nums.has(n + 1) && nums.has(n + 2) && nums.has(n + 3) && nums.has(n + 4));
                  });
                }
                invalid.push(!valid5);
                return invalid.some(invalid => !invalid);
              },
              filterCard(card, player) {
                return lib.skill.jlsg_yanjiao.mayValid(ui.selected.cards.concat(card));
              },
              check(card) {
                return Math.random();
              },
              selectCard: [1, 5],
              complexCard: true,
              discard: false,
              lose: false,
              delay: false,
              filterTarget(_, player, target) {
                if (!lib.skill.jlsg_yanjiao.isValid(ui.selected.cards)) {
                  return false;
                }
                return player != target;
              },
              filterOk() {
                return lib.skill.jlsg_yanjiao.isValid(ui.selected.cards);
              },
              isValid(cards) {
                let player = _status.event.player;
                let hand = player.getCards('h');
                if (player.storage.jlsg_yanjiao[cards.length]) {
                  return false;
                }
                let nums;
                switch (cards.length) {
                  case 1:
                    return hand.every(c => get.number(c, player) <= get.number(cards[0], player));
                  case 2:
                    return get.number(cards[0], player) === get.number(cards[1], player);
                  case 3:
                    let suit0 = get.suit(cards[0], player);
                    return suit0 == get.suit(cards[1], player) && suit0 == get.suit(cards[2], player);
                  case 4:
                    nums = cards.map(c => get.number(c, player)).sort((a, b) => a - b);
                    return nums.every((n, i) => n - nums[0] == i);
                  case 5:
                    let suit = get.suit(cards[0], player);
                    if (cards.some(c => get.suit(c, player) != suit)) {
                      return false;
                    }
                    nums = cards.map(c => get.number(c, player)).sort((a, b) => a - b);
                    return nums.every((n, i) => n - nums[0] == i);
                  default:
                    return false;
                }
              },
              mayValid(cards) {
                let player = _status.event.player;
                if (cards.length == 0) {
                  return this.filter(null, player);
                }
                if (this.isValid(cards)) {
                  return true;
                }
                let hand = player.getCards('h');
                hand.removeArray(cards);
                let nums = cards.map(c => get.number(c, player));
                let suits = cards.map(c => get.suit(c, player));
                let suit;
                if (suits.every(s => s == suits[0])) {
                  suit = suits[0];
                }
                switch (cards.length) {
                  case 1:
                    if (!player.storage.jlsg_yanjiao[2] && hand.some(c => get.number(c, player) == nums[0])) {
                      return true;
                    }
                  // fall through
                  case 2:
                    if (!player.storage.jlsg_yanjiao[3]
                      && suit
                      && hand.filter(c => get.suit(c, player) == suit).length + cards.length >= 3
                    ) {
                      return true;
                    };
                  case 3:
                  case 4:
                    nums.sort((a, b) => a - b);
                    let num0 = nums[0], num1 = nums[nums.length - 1];
                    if (player.storage.jlsg_yanjiao[4] && (player.storage.jlsg_yanjiao[5] || !suit)) {
                      return false;
                    }
                    if (nums.some((n, i) => i != 0 && n == nums[i - 1])) {
                      return false;
                    }
                    if (num1 - num0 + 1 > (player.storage.jlsg_yanjiao[4] ? 5 : 4)) {
                      return false;
                    }
                    let allNums = hand.map(c => get.number(c, player));
                    for (let i = num0; i <= num1; ++i) {
                      if (!nums.includes(i) && !allNums.includes(i)) {
                        return false;
                      }
                    }
                    while (allNums.includes(num1 + 1)) {
                      num1 += 1;
                      if (num1 - num0 + 1 >= (player.storage.jlsg_yanjiao[4] ? 5 : 4)) {
                        return true;
                      }
                    }
                    while (allNums.includes(num0 - 1)) {
                      num0 -= 1;
                      if (num1 - num0 + 1 >= (player.storage.jlsg_yanjiao[4] ? 5 : 4)) {
                        return true;
                      }
                    }
                    return false;
                  default:
                    return false;
                }
              },
              async content(event, trigger, player) {
                let num = event.cards.length;
                let target = event.target;
                player.storage.jlsg_yanjiao[num] = true;
                player.when({ player: "phaseUseAfter", global: "phaseAfter", })
                  .then(() => {
                    player.storage.jlsg_yanjiao = [null, false, false, false, false];
                  });
                await player.give(event.cards, target);
                await player.draw(num);
                if (player.hasMark('jlsg_xingshen')) {
                  let { result } = await player.chooseBool(
                    `是否对${get.translation(target)}造成${num}点伤害？`,
                    get.damageEffect(target, player, player) > 0,
                  );
                  if (result.bool) {
                    target.damage(num);
                  }
                }
              },
              combo: 'jlsg_xingshen',
              ai: {
                order: 7,
                result: {
                  target(player, target) {
                    if (!player.hasMark('jlsg_xingshen')) {
                      return 2;
                    }
                    return get.attitude(player, target) >= 0 ? 2 : -1;
                  },
                },
              }
            },
            jlsg_xingshen: {
              audio: "ext:极略:2",
              trigger: { player: "damageEnd" },
              filter(event, player) {
                return event.num > 0;
              },
              getIndex(event, player) {
                return event.num;
              },
              forced: true,
              async content(event, trigger, player) {
                await player.draw(2);
                if (!player.hasMark('jlsg_xingshen')) {
                  await player.recover();
                  player.addMark('jlsg_xingshen');
                  player.when({ player: ['phaseEnd', 'phaseAfter'] })
                    .then(() => {
                      player.removeMark('jlsg_xingshen');
                    });
                }
              },
              intro: {
                content: 'mark',
              }
            },


            //SK秦宓
            jlsg_jianzheng: {
              audio: "ext:极略:2",
              trigger: { global: "useCardToPlayer" },
              filter: function (event, player) {
                if (player.hasSkill("jlsg_jianzheng_used") || !event.isFirstTarget) return false;
                let history = player.hasHistory("useSkill", evt => {
                  if (evt.skill != "jlsg_jianzheng") return false;
                  return evt.event.getParent("useCard") == event.getParent("useCard");
                })
                if (history) return false;
                if (!player.canCompare(event.player)) return false;
                let info = get.info(event.card);
                if (info.multitarget) return false;
                if (info.filterAddedTarget) return false;
                return event.player != player && ["basic", "trick"].includes(get.type(event.card));
              },
              check(event, player) {
                let effect = event.targets.reduce((effect, target) => effect + get.effect(target, event.card, event.player, player), 0),
                  effect2 = game.filterPlayer()
                    .reduce((effect, current) => {
                      let eff = get.effect(current, event.card, event.player, player);
                      return eff > 0 ? (effect + eff) : effect;
                    }, 0);
                if (!event.targets.includes(player)) effect2 += get.effect(player, event.card, event.player, player) * Math.random() * 2;
                effect2 += get.effect(event.player, { name: "guohe_copy2" }, player, player);
                effect2 += get.effect(player, { name: "guohe_copy2" }, event.player, player);
                if (player.countCards("h") == 1) effect2 = effect2 * 0.5;
                return effect2 > effect;
              },
              prompt(event, player) {
                return `是否对${get.translation(event.player)}发动【谏征】与其拼点？)`
              },
              prompt2(event, player) {
                return `若你赢，你可以修改${get.translation(event.card)}的结算目标,否则你也成为此牌的目标，且此技能本回合失效`
              },
              logTarget: "player",
              async content(event, trigger, player) {
                const { result: result1 } = await player.chooseToCompare(trigger.player)
                  .set("small", get.effect(player, trigger.card, trigger.player, player) > 0);
                if (result1.bool) {
                  const { result: result2 } = await player.chooseTarget(`谏征：请选择${get.translation(trigger.card)}的结算目标`)
                    .set("selectTarget", [0, game.countPlayer()])
                    .set("filterTarget", () => true)
                    .set("ai", (target) => {
                      const source = get.event("source"),
                        player = get.player(),
                        card = get.event("card");
                      return get.effect(target, card, source, player);
                    })
                    .set("source", trigger.player)
                    .set("card", trigger.card);
                  if (result2.bool) {
                    result2.targets.sortBySeat(_status.currentPhase);
                    trigger.getParent().targets.addArray(result2.targets);
                    trigger.getParent().excluded.addArray(game.filterPlayer(i => !result2.targets.includes(i)))
                    if (result2.targets.length) {
                      trigger.player.line(result2.targets);
                      game.log(player, "将", trigger.card, "的结算目标改为", result2.targets);
                    }
                    else {
                      player.line(trigger.targets);
                      game.log(player, "取消了", trigger.card, "的所有结算目标");
                    }
                  }
                }
                else {
                  if (!trigger.getParent().targets.includes(player)) {
                    trigger.getParent().targets.add(player);
                    trigger.player.line(player);
                    game.log(player, "成为", trigger.card, "的额外目标");
                  }
                  player.addTempSkill("jlsg_jianzheng_used");
                }
              },
              ai: {
                threaten: 0.9,
                expose: 0.25,
              },
              subSkill: {
                used: {
                  sub: true,
                  temp: true,
                  charlotte: true,
                  mark: true,
                  marktext: "谏",
                  intro: {
                    content: "本回合“谏征”失效",
                  },
                },
              },
            },
            jlsg_tianbian: {
              audio: "ext:极略:2",
              enable: ["chooseToUse", "chooseToRespond"],
              trigger: { global: ["chooseToCompareBegin"] },
              hiddenCard(player, name) {
                if (player != _status.currentPhase && get.type(name) == "basic" && lib.inpile.includes(name)) return true;
              },
              filter(event, player) {
                if (event.name == "chooseToCompare") {
                  if (!player.countCards("h")) return false;
                  if (player == event.player) return true;
                  if (event.targets) return event.targets.includes(player);
                  return player == event.target;
                }
                if (event.responded || player == _status.currentPhase || event.jlsg_tianbian) return false;
                return lib.inpile.some(i => get.type(i) == "basic" && event.filterCard(get.autoViewAs({ name: i }, "unsure"), player, event));
              },
              delay: false,
              async content(event, trigger, player) {
                const evt = (trigger?.name == "chooseToCompare") ? trigger : event.getParent(2);
                evt.set("jlsg_tianbian", true);
                const cards = get.cards(3, true);
                const cardsx = cards.slice().map(card => {
                  const cardx = ui.create.card();
                  cardx.init(get.cardInfo(card));
                  cardx._cardid = card.cardid;
                  return cardx;
                });
                player.directgains(cardsx, null, "jlsg_tianbian_hs");
                let str = "天辩：选择要",
                  next;
                if (evt.name == "chooseToCompare") str += "拼点的牌";
                else str += `${(evt.name == "chooseToUse" ? "使用" : "打出")}的牌`
                if (evt.name != "chooseToCompare") {//使用|打出
                  player.storage.jlsg_tianbian ??= Object.entries(await game.createEvent("empty").setContent(function () { }));
                  let args = Object.entries(evt),
                    obj = {
                      prompt: str,
                      position: "s",
                      forced: false,
                      filterCard(card, player, event) {
                        return get.event("cards").includes(card);
                      },
                      filterTarget: () => false,
                      selectTarget: -1,
                      ai1(card) {
                        if (get.type(card) == "equip") return 0;
                        const evt = get.event().getParent(3),
                          player = get.event().player;
                        if (evt.type == "phase" && !player.hasValueTarget(card, null, true)) return 0;
                        if (evt && evt.ai) {
                          const tmp = _status.event;
                          _status.event = evt;
                          const result = (evt.ai || event.ai1)(card, player, evt);
                          _status.event = tmp;
                          return result;
                        }
                        return 1;
                      },
                      ai2(target) {
                        const player = get.player(),
                          card = ui.selected.cards[0];
                        return get.effect(target, card, player, player);
                      },
                    };
                  for (let arg of args) {
                    if (!obj[arg[0]] && arg[1] !== undefined && !player.storage.jlsg_tianbian.some(i => i[0] == arg[0])) {
                      obj[arg[0]] = arg[1];
                    }
                  }
                  //重新game.check()
                  delete obj.fakeforce;
                  delete obj._checked;
                  next = player.chooseCardTarget(obj);
                }
                else {//拼点
                  const hs = player.getCards("h");
                  next = player.chooseCard(str, (card, player) => get.event("cards").includes(card), "s")
                    .set("ai", (card, cards) => {
                      const samll = get.event().getParent().samll,
                        total = get.event("hs").concat((cards || []));
                      if (samll) return Math.min.apply(Math, total.map(c => get.number(c))) == get.number(card);
                      return Math.max.apply(Math, total.map(c => get.number(c))) == get.number(card);
                    })
                    .set("hs", hs.length == 1 ? [] : hs);
                }
                next.set("cards", cardsx.filter(card => {//公共部分
                  if (evt.name != "chooseToCompare") {
                    if (get.type(card) != "basic") return false;
                    if (player.hasSkill("aozhan") && card.name == "tao") {
                      return (
                        evt.filterCard(
                          { name: "sha", isCard: true, cards: [card] },
                          evt.player,
                          evt
                        ) ||
                        evt.filterCard(
                          { name: "shan", isCard: true, cards: [card] },
                          evt.player,
                          evt
                        )
                      );
                    }
                    return evt.filterCard(card, evt.player, evt);
                  }
                  return true;
                }))
                const result = await next.forResult();
                let card;
                if (result.bool) card = cards.find(card => card.cardid === result.cards[0]._cardid);
                const cards2 = player.getCards("s", card => card.hasGaintag("jlsg_tianbian_hs"));
                if (player.isOnline2()) {
                  player.send(
                    (cards, player) => {
                      cards.forEach(i => i.delete());
                      if (player == game.me) ui.updatehl();
                    },
                    cards2,
                    player
                  );
                }
                cards2.forEach(i => i.delete());
                if (player == game.me) ui.updatehl();
                if (evt.name != "chooseToCompare") {
                  if (card) {
                    let cardx = get.autoViewAs(card, card),
                      name = card.name,
                      aozhan = player.hasSkill("aozhan") && name == "tao";
                    if (aozhan) {
                      name = evt.filterCard(
                        {
                          name: "sha",
                          isCard: true,
                          cards: [card],
                        },
                        evt.player,
                        evt
                      )
                        ? "sha"
                        : "shan";
                    }
                    if (evt.name == "chooseToUse") {
                      evt.result = { bool: true, card: cardx, cards: card, targets: result.targets };
                    }
                    else {
                      delete evt.result.skill;
                      delete evt.result.used;
                      evt.result.card = cardx;
                      if (aozhan) evt.result.card.name = name;
                      evt.result.cards = [card];
                    }
                    evt.redo();
                    return;
                  }
                  evt.goto(0);
                }
                else {
                  if (!card) return;
                  if (!trigger.fixedResult) trigger.fixedResult = {};
                  trigger.fixedResult[player.playerid] = card;
                  await game.cardsGotoOrdering(card);
                }
              },
              ai: {
                effect: {
                  target(card, player, target, effect) {
                    if (get.tag(card, "respondShan")) return 0.7;
                    if (get.tag(card, "respondSha")) return 0.7;
                  },
                },
                order: 11,
                respondShan: true,
                respondSha: true,
                result: {
                  player(player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    return 1;
                  },
                },
              },
            },
            //SK邢道荣
            jlsg_xuhe: {
              audio: "ext:极略:2",
              trigger: { global: "useCard2" },
              filter(event, player) {
                if (!["basic", "trick"].includes(get.type(event.card))) return false;
                let targets = (event._targets || event.targets).slice();
                if (!targets.length) return false;
                if (event.player == player) return player.isHealthy();
                else return player.isDamaged() && targets.includes(player);
              },
              forced: true,
              async content(event, trigger, player) {
                let targets = (trigger._targets || trigger.targets).slice(),
                  targetx = [player];
                if (trigger.player == player) targetx = game.filterPlayer(cur => cur != player);
                trigger.directHit.addArray(targetx);
                game.log(targetx, "无法响应", trigger.card);
                let drawCheck = player.hasHistory("gain", evt => {
                  if (!evt.getParent() || evt.getParent().name != "draw") return false;
                  return evt.getParent().skill == "jlsg_xuhe";
                });
                if (!drawCheck) {
                  player.when({ global: "useCardAfter" })
                    .filter(evt => evt == trigger)
                    .then(() => {
                      if (!player.hasHistory("gain", evt => {
                        if (!evt.getParent() || evt.getParent().name != "draw") return false;
                        return evt.getParent().skill == "jlsg_xuhe";
                      })) {
                        player.chooseBool(`虚猲：是否摸${drawNum}张牌？`)
                          .set("ai", (event, player) => {
                            return get.effect(player, { name: "draw" }, player, player) * get.event("drawNum");
                          })
                          .set("drawNum", drawNum);
                      }
                    })
                    .then(() => {
                      if (result.bool) {
                        player.logSkill("jlsg_xuhe");
                        player.draw(drawNum).set("skill", "jlsg_xuhe");
                      }
                    })
                    .vars({ drawNum: targets.length })
                };
              },
              ai: {
                halfneg: true,
                directHit_ai: true,
                skillTagFilter(player, tag, arg) {
                  if (tag == "directHit_ai") {
                    if (!arg || !arg.card || !arg.target) return false;
                    return player.isHealthy();
                  }
                  else if (tag == "halfneg") return player.isDamaged();
                }
              },
              global: ["jlsg_xuhe_globalAi"],
              subSkill: {
                globalAi: {
                  sourceSkill: "jlsg_xuhe",
                  sub: true,
                  ai: {
                    directHit_ai: true,
                    skillTagFilter(player, tag, arg) {
                      if (!game.hasPlayer(cur => cur.hasSkill("jlsg_xuhe"))) return false;
                      if (!arg || !arg.card || !arg.target || arg.target == player) return false;
                      return arg.target.hasSkill("jlsg_xuhe") && arg.target.isDamaged();
                    },
                  },
                },
              },
            },
            //SK周夷
            jlsg_zhukou: {
              audio: "ext:极略:2",
              direct: true,
              trigger: { global: "phaseUseEnd" },
              filter(event, player) {
                return player.hasHistory("useCard", evt => evt.getParent("phaseUse") == event);
              },
              async content(event, trigger, player) {
                const func = () => {
                  const event = get.event();
                  const controls = [
                    link => {
                      const targets = game.filterPlayer();
                      if (targets.length) {
                        for (let i = 0; i < targets.length; i++) {
                          const target = targets[i];
                          target.classList.remove("selectable");
                          target.classList.remove("selected");
                          const counterNode = target.querySelector(".caption");
                          if (counterNode) {
                            counterNode.childNodes[0].innerHTML = ``;
                          }
                        }
                        ui.selected.targets.length = 0;
                        game.check();
                      }
                      return;
                    },
                  ];
                  event.controls = [ui.create.control(controls.concat(["清除选择", "stayleft"]))];
                };
                if (event.isMine()) func();
                else if (event.isOnline()) event.player.send(func);
                const sum = player.getHistory("useCard", evt => evt.getParent("phaseUse") == trigger)
                  .map(evt => get.type2(evt.card))
                  .unique()
                  .length;
                const { result } = await player.chooseTarget(`逐寇：是否分配至多${sum}点伤害？`, [1, sum], false)
                  .set("filterTarget", (card, player, target) => target != player)
                  .set("ai", function (target) {
                    return get.damageEffect(target, player, player);
                  })
                  .set("custom", {
                    add: {
                      confirm: function (bool) {
                        if (bool != true) return;
                        const event = get.event().parent;
                        if (event.controls) {
                          event.controls.forEach(i => {
                            if (i.innerText == "清除选择") i.custom();
                            i.close();
                          });
                        }
                        if (ui.confirm) ui.confirm.close();
                        game.uncheck();
                      },
                      target: function () {
                        if (ui.selected.targets.length) return;
                        const targets = game.filterPlayer();
                        if (targets.length) {
                          for (let i = 0; i < targets.length; i++) {
                            const target = targets[i];
                            const counterNode = target.querySelector(".caption");
                            if (counterNode) {
                              counterNode.childNodes[0].innerHTML = ``;
                            }
                          }
                        }
                        if (!ui.selected.targets.length) {
                          const evt = event.parent;
                          if (evt.controls) evt.controls[0].classList.add("disabled");
                        }
                      },
                    },
                    replace: {
                      target: function (target) {
                        const event = get.event(),
                          sum = get.event("sum");
                        if (!event.isMine()) return;
                        if (target.classList.contains("selectable") == false) return;
                        if (ui.selected.targets.length >= sum) return false;
                        target.classList.add("selected");
                        ui.selected.targets.push(target);
                        let counterNode = target.querySelector(".caption");
                        const count = ui.selected.targets.filter(i => i == target).length;
                        if (counterNode) {
                          counterNode = counterNode.childNodes[0];
                          counterNode.innerHTML = `×${count}`;
                        } else {
                          counterNode = ui.create.caption(`<span style="font-size:24px; font-family:xinwei; text-shadow:#FFF 0 0 4px, #FFF 0 0 4px, rgba(74,29,1,1) 0 0 3px;">×${count}</span>`, target);
                          counterNode.style.right = "30px";
                          counterNode.style.bottom = "15px";
                        }
                        const evt = event.parent;
                        if (evt.controls) evt.controls[0].classList.remove("disabled");
                        game.check();
                      },
                    },
                  })
                  .set("sum", sum);
                if (result.bool) {
                  if (!event.isMine()) await game.delay();
                  const targets = result.targets;
                  await player.logSkill("jlsg_zhukou", targets);
                  for (let i = 0; i < targets.length; i++) {
                    await targets[i].damage("nocard");
                    await game.delayx();
                  }
                }
              },
              ai: {
                expose: 0.25,
              },
            },
            jlsg_duannian: {
              audio: "ext:极略:2",
              trigger: { global: "phaseUseBegin" },
              filter(event, player) {
                return player.countDiscardableCards(player, "h");
              },
              check(event, player) {
                if (player.isDamaged()) return get.recoverEffect(player, player, player);
                if (event.player == player) return player.countCards("h", card => player.hasValueTarget(card)) < 3;
                return (player.getCards("h").reduce((v, c) => v + get.value(c, player), 0)) / player.countCards("h") < 8;
              },
              prompt: "断念：是否弃置所有手牌并摸等量张牌？",
              async content(event, trigger, player) {
                const cards = player.getDiscardableCards(player, "h")
                await player.discard(cards);
                await player.draw(cards.length);
                let list = ["选项一", "选项二"],
                  choiceList = ["使用一张牌", "回复1点体力"];
                const { result } = await player.chooseControl(list)
                  .set("prompt", "断念：请选择一项")
                  .set("choiceList", choiceList)
                  .set("ai", () => _status.event.choice)
                  .set(
                    "choice",
                    (function () {
                      let num = player.getCards("h")
                        .map(c => player.getUseValue(c))
                        .sort((a, b) => b - a)[0];
                      let recover = get.recoverEffect(player, player, player);
                      if (recover > num) return "选项二";
                      return "选项一";
                    })()
                  );
                if (result.control == "选项一") await player.chooseToUse();
                else await player.recover(1);
              }
            },
            //SK郭淮
            jlsg_jingce: {
              audio: "ext:极略:2",
              onremove: true,
              locked: false,
              mod: {
                cardUsable(card, player, num) {
                  if (get.name(card, player) == "sha") return num + (player.storage?.jlsg_jingce?.sha || 0);
                },
              },
              mark: true,
              intro: {
                mark(dialog, storage, player) {
                  let list2 = [
                    lib.skill.jlsg_jingce.countShaUsable(player),
                    2 + (player.storage?.jlsg_jingce?.draw || 0),
                  ];
                  let drawCheck = player.getAllHistory("gain", evt => {
                    return evt.getParent(2).name == "phaseDraw";
                  });
                  if (drawCheck.length) drawCheck = drawCheck[drawCheck.length - 1].cards.length;
                  if (list2[1] < drawCheck) list2[1] = drawCheck;
                  dialog.addText(`出杀次数(${list2[0]})`);
                  dialog.addText(`摸牌阶段摸牌数(${list2[1]})`);
                },
              },
              usable: 1,
              trigger: { player: "useCardAfter" },
              countShaUsable(player) {
                const card = get.autoViewAs({ name: "sha" }),
                  name = "cardUsable";
                let num = get.info(card).usable,
                  skills = [];
                if (typeof num == "function") num = num(card, player);
                if (typeof player.getModableSkills == "function") {
                  skills = player.getModableSkills();
                } else if (typeof player.getSkills == "function") {
                  skills = player.getSkills().concat(lib.skill.global);
                  game.expandSkills(skills);
                  skills = skills.filter(function (skill) {
                    let info = get.info(skill);
                    return info && info.mod;
                  });
                  skills.sort((a, b) => get.priority(a) - get.priority(b));
                }
                const arg = [card, player, num];
                skills.forEach(value => {
                  var mod = get.info(value).mod[name];
                  if (!mod) return;
                  const result = mod.call(this, ...arg);
                  if (!result || result === Infinity) return;
                  if (typeof arg[arg.length - 1] != "object") arg[arg.length - 1] = result;
                });
                return arg[arg.length - 1];
              },
              checkList(event) {
                const list = [null, null, null],
                  player = event.player;
                player.storage.jlsg_jingce ??= { draw: 0, sha: 0 };
                const num = player.getHistory("useCard", evt => {
                  return evt.getParent("phaseUse") == event.getParent("phaseUse");
                }).length,
                  list2 = [
                    lib.skill.jlsg_jingce.countShaUsable(player),
                    2 + (player.storage?.jlsg_jingce?.draw || 0),
                    player.maxHp,
                  ];
                let drawCheck = player.getAllHistory("gain", evt => {
                  return evt.getParent(2).name == "phaseDraw";
                });
                if (drawCheck.length) drawCheck = drawCheck[drawCheck.length - 1].cards.length;
                if (list2[1] < drawCheck) list2[1] = drawCheck;
                for (let i = 0; i < 3; i++) {
                  if (list2[i] == num) list[i] = list2[i];
                };
                return [list2, list];
              },
              filter(event, player) {
                if (!player.isPhaseUsing()) return false;
                let checkList = lib.skill.jlsg_jingce.checkList(event)[1];
                return (checkList ?? []).filter(i => i).length;
              },
              async cost(event, trigger, player) {
                const [numList, checkList] = lib.skill.jlsg_jingce.checkList(trigger);
                const choiceList = [`使用【杀】次数(${numList[0]})`, `摸牌阶段摸牌数(${numList[1]})`, `体力上限(${numList[2]})`],
                  dialog = ui.create.dialog("是否发动【精策】", "hidden")
                dialog.forcebutton = true;
                for (let i = 0; i < checkList.length; i++) {
                  let str = choiceList[i];
                  if (checkList[i]) choiceList[i] = str.slice(0, -1) + `<span class='yellowtext'>+1</span>` + str.slice(-1);
                  else choiceList[i] = '<span style="opacity:0.5">' + str + "</span>";
                  dialog.add('<div class="popup text" style="width:calc(100% - 10px);display:inline-block">' + choiceList[i] + "</div>");
                };
                event.result = await player.chooseBool()
                  .set("dialog", dialog)
                  .set("ai", () => true)
                  .forResult();
              },
              async content(event, trigger, player) {
                const checkList = lib.skill.jlsg_jingce.checkList(trigger)[1];
                player.storage.jlsg_jingce ??= { draw: 0, sha: 0 };
                if (checkList[0]) player.storage.jlsg_jingce.sha++;
                if (checkList[1]) player.storage.jlsg_jingce.draw++;
                if (checkList[2]) player.gainMaxHp(1);
                player.markSkill("jlsg_jingce");
                await player.draw(2);
              },
              group: ["jlsg_jingce_effect"],
              subSkill: {
                effect: {
                  sub: true,
                  charlotte: true,
                  forced: true,
                  popup: false,
                  trigger: { player: "phaseDrawBegin2" },
                  filter(event) {
                    return !event.numFixed;
                  },
                  content() {
                    trigger.num += (player.storage?.jlsg_jingce?.draw || 0);
                  },
                },
              },
            },
            //SK黄承彦
            jlsg_guanxu: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsg_guanxu = new Array(8)
                  .fill(1)
                  .map((v, i) => i)
                  .randomGet();
              },
              trigger: { global: "phaseBegin" },
              filter(event, player) {
                return event.player.countCards("h");
              },
              prompt(event, player) {
                return "观虚：是否观看" + get.translation(event.player) + "的手牌？";
              },
              prompt2(event, player) {
                let str = get.skillInfoTranslation("jlsg_guanxu", player).slice(22, -1);
                if (str.includes("X")) str = str.slice(0, -7).replace("X", event.player.getHp().toString())
                return str;
              },
              logTarget(event) {
                return event.player;
              },
              check(event, player) {
                return true;
              },
              async content(event, trigger, player) {
                const storage = player.storage.jlsg_guanxu,
                  cards = trigger.player.getCards("h");
                let str = get.skillInfoTranslation("jlsg_guanxu", player).slice(25, -1);
                if (storage == 0) str = str.slice(0, -7).replace("X", trigger.player.getHp().toString())
                for (let i of cards) i.addKnower(player);
                const cards2Info = new Map([
                  [0, trigger.player.getGainableCards(player, "h")],
                  [1, trigger.player.getDiscardableCards(player, "h")],
                  [2, (function () {
                    let cards2 = trigger.player.getDiscardableCards(player, "h");
                    let max = Math.max(...cards2.map(i => get.number(i)));
                    return cards2.filter(i => get.number(i) == max);
                  })()],
                  [3, (function () {
                    let cards2 = trigger.player.getDiscardableCards(player, "h");
                    let min = Math.min(...cards2.map(i => get.number(i)));
                    return cards2.filter(i => get.number(i) == min);
                  })()],
                  [4, (function () {
                    let cards2 = trigger.player.getDiscardableCards(player, "h");
                    let map = cards2.reduce((list, card) => {
                      let suit = get.suit(card);
                      if (!list[suit]) list[suit] = 0;
                      list[suit]++;
                      return list;
                    }, {});
                    let min = Math.min(...Object.values(map));
                    return cards2.filter(i => map[get.suit(i)] == min);
                  })()],
                  [5, (function () {
                    let cards2 = trigger.player.getDiscardableCards(player, "h");
                    let map = cards2.reduce((list, card) => {
                      let suit = get.suit(card);
                      if (!list[suit]) list[suit] = 0;
                      list[suit]++;
                      return list;
                    }, {});
                    let max = Math.max(...Object.values(map));
                    return cards2.filter(i => map[get.suit(i)] == max);
                  })()],
                  [6, cards],
                  [7, cards],
                ]);
                const numInfo = new Map([
                  [0, trigger.player.getHp()],
                  [1, 1],
                  [2, cards2Info.get(2).length],
                  [3, cards2Info.get(3).length],
                  [4, cards2Info.get(4).length],
                  [5, cards2Info.get(5).length],
                  [6, 1],
                  [7, 1],
                ]);
                const func = () => {
                  const event = get.event();
                  event.controls = [ui.create.control([link => { ui.click.cancel() }, "取消"])];
                };
                if (storage > 1 && storage < 6) {
                  if (event.isMine()) func();
                  else if (event.isOnline()) event.player.send(func);
                }
                const { result } = await player.chooseButton(["观虚", get.translation(trigger.player) + "的手牌", cards, str])
                  .set("forced", false)
                  .set("complexSelect", true)
                  .set("cards2", cards2Info.get(storage))
                  .set("num", numInfo.get(storage))
                  .set("storage", storage)
                  .set("source", trigger.player)
                  .set("selectButton", () => {
                    if (get.event("storage") > 1 && get.event("storage") < 6) return [0, get.event("num")];
                    return [1, get.event("num")];
                  })
                  .set("filterButton", button => {
                    if (!get.event("cards2").includes(button.link)) return false;
                    if (get.event("storage") > 1 && get.event("storage") < 6) {
                      if (get.event("cards2").includes(button.link) && !ui.selected.buttons.includes(button)) {
                        button.classList.add("selected");
                        ui.selected.buttons.add(button);
                      }
                      return false;
                    }
                    return true;
                  })
                  .set("ai", button => {
                    const storage = get.event("storage"),
                      player = _status.event.player,
                      target = get.event("source");
                    const att = get.attitude(player, target),
                      value = get.value(button.link, target);
                    switch (storage) {
                      case 0:
                        if (att < 0) return value;
                      case 1:
                        if (att > 0) return 8 - value;
                      case 6:
                        let sha = get.autoViewAs({ name: "sha", isCard: true }, []);
                        return game.hasPlayer(current => current != target && get.effect(target, sha, current, player) > 0);
                      case 7:
                        let damage = get.damageEffect(target, undefined, player, "thunder"),
                          result = {
                            card: button.link,
                            name: button.link.name,
                            number: get.number(button.link),
                            suit: get.suit(button.link),
                            color: get.color(button.link),
                          };
                        if (lib.card.shandian.judge(button.link) < 0) result.bool = false;
                        else if (lib.card.shandian.judge(button.link) > 0) result.bool = true;
                        else result.bool = null;
                        _status.event.cardname = "shandian";
                        game.checkMod(target, result, "judge", target);
                        delete _status.event.cardname;
                        if (result.bool && damage >= 0) {
                          if (att > 0) return 8 - value;
                          else return value + damage;
                        }
                        if (att < 0) return value;
                      default: return 0;
                    };
                  })
                  .set("filterOk", () => {
                    const player = _status.event.player,
                      target = get.event("source");
                    if (_status.connectMode && !player.isAuto) return true;
                    else if (!_status.auto) return true;
                    const storage = get.event("storage"),
                      att = get.attitude(player, target);
                    switch (storage) {
                      case 2:
                        let skills = target.getSkills(null, false, false)
                          .filter(i => {
                            let info = get.info(i);
                            return info && !info.charlotte && !info.persevereSkill
                          })
                        if (skills.length) {
                          if (att > 0 && skills.some(i => get.info(i).ai?.nag)) return true;
                        }
                        if (att < 0) return true;
                        return false;
                      case 3: return att > 0;
                      case 4: return att < 0;
                      case 5: return att > 0;
                      default: return true;
                    };
                  })
                  .set("custom", {
                    add: {
                      confirm: function (bool) {
                        if (bool != true) return;
                        const event = get.event().parent;
                        if (event.controls) event.controls.forEach(i => i.close());
                        if (ui.confirm) ui.confirm.close();
                        game.uncheck();
                      },
                    },
                    replace: {},
                  });
                if (result.bool) {
                  const cardx = result.links;
                  if (storage > 0 && storage < 6) await trigger.player.discard(cardx);
                  switch (storage) {
                    case 0:
                      await player.gain(trigger.player, cardx, "giveAuto");
                      break;
                    case 1:
                      await trigger.player.gainMaxHp(1);
                      await trigger.player.recover(1);
                      break;
                    case 2:
                      var skills = trigger.player.getSkills(null, false, false)
                        .filter(i => {
                          if (!lib.translate[i] || !lib.translate[i + "_info"]) return false;
                          let info = get.info(i);
                          return info && !info.charlotte && !info.persevereSkill
                        })
                      if (skills.length) {
                        var buttons = skills.map(i => [
                          i,
                          '<div class="popup pointerdiv" style="width:80%;display:inline-block"><div class="skill">【' +
                          get.translation(i) +
                          "】</div><div>" +
                          lib.translate[i + "_info"] +
                          "</div></div>"
                        ]);
                        var { result: result2 } = await player.chooseButton(true, [get.translation(trigger.player) + "的技能", [buttons, "textbutton"]])
                          .set("ai", button => {
                            if (get.attitude(get.player(), get.event("source")) < 0) return get.skillRank(button.link);
                            return get.info(button.link).ai?.neg;
                          })
                          .set("source", trigger.player);
                        if (result2.bool) {
                          trigger.player.popup(result2.links[0]);
                          trigger.player.tempBanSkill(result2.links[0]);
                        }
                      }
                      break;
                    case 3:
                      var skills = get.gainableSkills();
                      skills.removeArray(player.getSkills());
                      skills = skills.randomGets(3);
                      var buttons = skills.map(i => [
                        i,
                        '<div class="popup pointerdiv" style="width:80%;display:inline-block"><div class="skill">【' +
                        get.translation(i) +
                        "】</div><div>" +
                        lib.translate[i + "_info"] +
                        "</div></div>"
                      ]);
                      var { result: result2 } = await trigger.player.chooseButton(true, ["选择要获得的技能", [buttons, "textbutton"]])
                        .set("ai", button => get.skillRank(button.link))
                        .set("source", trigger.player);
                      if (result2.bool) {
                        trigger.player.popup(result2.links[0]);
                        await trigger.player.addSkills(result2.links);
                      }
                      break;
                    case 4:
                      if (cardx.every(i => get.color(i) == "black")) await trigger.player.loseMaxHp(1);
                      break;
                    case 5:
                      await trigger.player.draw(cardx.length * 2);
                      break;
                    case 6:
                      var { result: result2 } = await player.chooseTarget("###选择一名角色令其获得" + get.translation(cardx) + "###且可以对" + get.translation(trigger.player) + "使用一张“杀”")
                        .set("source", trigger.player)
                        .set("cardx", cardx)
                        .set("filterTarget", (card, player, target) => target != get.event("source"))
                        .set("ai", target => {
                          const sha = get.autoViewAs({ name: "sha", isCard: true }, []);
                          return target.getUseValue(get.event("cardx")) + get.effect(get.event("source"), sha, target, player);
                        })
                      if (result2.bool) {
                        const target = result2.targets[0];
                        await trigger.player.give(cardx, target);
                        const sha = get.autoViewAs({ name: "sha", isCard: true }, []);
                        if (target.canUse(sha, trigger.player, false)) await target.useCard(sha, trigger.player);
                      }
                      break;
                    case 7:
                      await trigger.player.lose(cardx, ui.cardPile, 'insert');
                      game.log(player, '将', trigger.player, '的一张手牌置于牌堆顶');
                      await trigger.player.executeDelayCardEffect("shandian");
                      break;
                  };
                }
                else await game.delayx();
                let num2 = player.storage.jlsg_guanxu;
                player.storage.jlsg_guanxu = new Array(8)
                  .fill(1)
                  .map((v, i) => i)
                  .remove(num2)
                  .randomGet();
                player.update();
              },
              ai: {
                expose: 0.25,
              },
            },
            jlsg_yashi: {
              audio: "ext:极略:2",
              trigger: { player: "damageEnd" },
              getIndex(event, player) {
                return event.num;
              },
              filter(event, player) {
                return event.num > 0;
              },
              check(event, player) {
                return true;
              },
              prompt(event, player) {
                return "雅士：是否摸两张牌？"
              },
              prompt2(event, player) {
                let str = "然后可以";
                if (player.hasSkill("jlsg_guanxu")) str += "重置“观虚”";
                else str += "获得“观虚”";
                return str;
              },
              async content(event, trigger, player) {
                await player.draw(2);
                let result
                if (!player.hasSkill("jlsg_guanxu")) {
                  result = await player.chooseBool("是否获得技能“观虚”？")
                    .set(ai, () => true)
                    .forResult();
                }
                else {
                  result = await player.chooseBool(`###是否重置“观虚”？###${get.skillInfoTranslation("jlsg_guanxu", player)}`)
                    .set("ai", () => true)
                    .forResult();
                }
                if (!result.bool) return;
                if (!player.hasSkill("jlsg_guanxu")) await player.addSkills("jlsg_guanxu");
                else {
                  let num2 = player.storage.jlsg_guanxu
                  player.storage.jlsg_guanxu = new Array(8)
                    .fill(1)
                    .map((v, i) => i)
                    .remove(num2)
                    .randomGet();
                  player.update();
                }
              },
              ai: {
                maixie: true,
                "maixie_hp": true,
                effect: {
                  target(card, player, target) {
                    if (get.tag(card, "damage")) {
                      if (player.hasSkillTag("jueqing", false, target)) return [1, -2];
                      if (!target.hasFriend()) return;
                      let num = 1;
                      if (get.attitude(player, target) > 0) {
                        if (player.needsToDiscard()) num = 0.7;
                        else num = 0.5;
                      }
                      if (target.hp >= 4) return [1, num * 2];
                      if (target.hp == 3) return [1, num * 1.5];
                      if (target.hp == 2) return [1, num * 0.5];
                    }
                  },
                },
                threaten: 0.6,
              },
            },
            //SK吕凯
            jlsg_tunan: {
              audio: "ext:极略:2",
              trigger: { global: "phaseUseBegin" },
              filter(event, player) {
                const target = event.player,
                  next = event.player.getNext();
                return target.isIn() && target != next;
              },
              check(event, player) {
                const target = event.player,
                  next = event.player.getNext(),
                  sha = get.autoViewAs({ name: "sha" }, []),
                  shunshou = get.autoViewAs({ name: "shunshou" }, []);
                return get.effect(next, sha, target, player) > 0 || get.effect(next, shunshou, target, player) > 0;
              },
              prompt(event, player) {
                const target = event.player,
                  next = event.player.getNext();
                return `图南：是否令${get.translation(target)}对${get.translation(next)}使用一张无距离限制和不计入次数的【杀】或【顺手牵羊】？`;
              },
              logTarget: "player",
              async content(event, trigger, player) {
                const target = trigger.player,
                  next = trigger.player.getNext(),
                  list = ["sha", "shunshou"];
                if (!next.countCards("hej")) list.remove("shunshou");
                const { result } = await player.chooseControl(list)
                  .set("prompt", `请选择${get.translation(target)}对${get.translation(next)}使用的牌`)
                  .set("ai", () => get.event("choice"))
                  .set("choice", (function () {
                    const cards = list.map(name => {
                      const card = get.autoViewAs({ name: name }, []);
                      return get.effect(next, card, target, player);
                    });
                    let num = Math.max(...cards);
                    return list[cards.indexOf(num)];
                  })());
                if (result.control != "cancel2") {
                  const card = get.autoViewAs({ name: result.control }, []);
                  await target.useCard(card, next).set("addCount", false);
                }
              },
            },
            jlsg_bijing: {
              audio: "ext:极略:2",
              trigger: { target: "useCardToTargeted" },
              filter(event, player) {
                if (event.player == player) return false;
                if (get.name(event.card) != "sha" && get.type(event.card, null, false) != "trick") return false;
                return event.player.countDiscardableCards(player, "he") > 1 && player.countDiscardableCards(player, "he") > 0;
              },
              check(event, player) {
                let effect = get.effect(player, event.card, event.player, player),
                  att = get.attitude(player, event.player);
                if (effect / att > 0) return false;
                return get.effect(player, { name: "guohe_copy2" }, player, player) + 2 * get.effect(event.player, { name: "guohe_copy2" }, player, player);
              },
              prompt(event, player) {
                return `闭境：是否弃置${get.translation(event.player)}的两张牌，然后弃置自己一张牌`;
              },
              prompt2(event, player) {
                return `若弃置的牌颜色均相同，你令${get.translation(event.card)}对你无效`
              },
              logTarget: "player",
              async content(event, trigger, player) {
                const { result: result1 } = await player.discardPlayerCard(true, "he", [2, 2], trigger.player)
                  .set("ai", (button) => {
                    if (get.event("check") > 0) return false;
                    return get.event("choice").includes(button.link);
                  })
                  .set("check", (function () {
                    let effect = trigger.player.getUseValue(trigger.card),
                      att = get.attitude(player, trigger.player);
                    return effect / att;
                  })())
                  .set("choice", (function () {
                    let cards = trigger.player.getDiscardableCards(player, "he");
                    if (trigger.player.isUnderControl(true) || player.hasSkillTag("viewHandcard", null, trigger.player, true)) {
                      cards = trigger.player.getDiscardableCards(player, "e");
                    }
                    const black = cards.filter(i => get.color(i, null, false) == "black")
                      .sort((a, b) => get.value(a) - get.value(b)),
                      red = cards.filter(i => get.color(i, null, false) == "red")
                        .sort((a, b) => get.value(a) - get.value(b));
                    if (black.length == 1 && red.length == 1) return cards;
                    else if (black.length == 1 && red.length) return red.slice(0, 2);
                    else if (red.length == 1 && black.length) return black.slice(0, 2);
                    else {
                      if (cards.length == 0 || black.length == 1 || red.length == 1) {
                        return cards.concat(trigger.player.getDiscardableCards(player, "h")).unique().slice(0, 2);
                      }
                      const blacksum = black.reduce((num, card) => num + get.value(card), 0),
                        redsum = black.reduce((num, card) => num + get.value(card), 0);
                      if (blacksum > redsum) return black.slice(0, 2);
                      return red.slice(0, 2);
                    }
                  })());
                if (result1.bool) {
                  const colors = result1.links.map(i => get.color(i, false));
                  const { result: result2 } = await player.chooseToDiscard(true, 1, "he")
                    .set("prompt", `闭境：请弃置一张牌（已弃置${get.translation(colors)}）`)
                    .set("ai", (card) => {
                      const colors = get.event("colors");
                      if (colors.length == 2) return 6 - get.value(card);
                      else {
                        if (get.color(card) == colors[0]) return 8 - get.value(card);
                        return 6 - get.value(card);
                      }
                    })
                    .set("colors", colors.unique());
                  if (result2.bool) {
                    colors.add(get.color(result2.cards[0])).unique();
                    if (colors.length == 1) {
                      trigger.getParent().excluded.add(player);
                      game.log(player, "取消了", trigger.card, "对自己的目标");
                    }
                  }
                }
              },
            },
            //SK诸葛诞
            jlsg_gongao: {
              audio: "ext:极略:2",
              trigger: { global: "dying" },
              filter(event, player) {
                if (event.player == player) return false;
                return !player.hasHistory("useSkill", evt => evt.skill == "jlsg_gongao" && evt.targets?.includes(event.player));
              },
              forced: true,
              logTarget: "player",
              async content(event, trigger, player) {
                await player.gainMaxHp(1);
                await player.recover(1);
              },
              ai: {
                threaten: 1.5,
              },
            },
            jlsg_juyi: {
              audio: "ext:极略:2",
              onremove: true,
              mod: {
                maxHandcard: function (player, num) {
                  return num + player.storage?.jlsg_juyi;
                },
                attackRange(player, num) {
                  return num + player.storage?.jlsg_juyi;
                },
                cardUsable: function (card, player, num) {
                  if (get.name(card, player) == 'sha') return num + player.storage?.jlsg_juyi;
                },
              },
              marktext: "举",
              intro: {
                content(storage, player) {
                  return "摸牌数、手牌上限、攻击范围、使用【杀】的次数上限+" + storage;
                },
              },
              trigger: { player: ["phaseZhunbeiBegin", "phaseDrawBegin1"] },
              filter(event, player) {
                if (event.name == "phaseZhunbei") return true;
                return !event.numFixed && player.storage?.jlsg_juyi > 0;
              },
              locked: false,
              async cost(event, trigger, player) {
                if (trigger.name == "phaseZhunbei") {
                  event.result = await player.chooseBool("###功獒：是否减1点体力上限并获得以下效果？###摸牌数、手牌上限、攻击范围、使用【杀】的次数上限+1")
                    .set("ai", (event, player) => {
                      if (player.maxHp > game.countPlayer(true, undefined, true)) return player.isDamaged();
                      return player.isDamaged() && player.maxHp > 3;
                    }).forResult();
                }
                else event.result = {
                  bool: true,
                  skill_popup: false,
                }
              },
              async content(event, trigger, player) {
                if (trigger.name == "phaseZhunbei") {
                  await player.loseMaxHp(1);
                  player.storage.jlsg_juyi ??= 0;
                  player.storage.jlsg_juyi++;
                  player.markSkill("jlsg_juyi");
                }
                else trigger.num += player.storage.jlsg_juyi;
              },
              ai: {
                effect: {
                  target(card, player, target) {
                    if (get.tag(card, "recover")) {
                      let num = get.tag(card, "recover");
                      if (target.isDamaged() && target.maxHp < 5) return;
                      if (target.hp <= target.maxHp - num && target.hp > 4) return [1, -1];
                    }
                  },
                }
              },
            },
            jlsg_weizhong: {
              audio: "ext:极略:2",
              onremove: true,
              trigger: { player: ["gainMaxHpEnd", "loseMaxHpEnd", "dying"] },
              filter(event, player) {
                if (event.name != "dying") return event.num > 0;
                if (player.storage.jlsg_weizhong) return false;
                const first = game.getAllGlobalHistory("everything", evt => evt.name == "dying")[0];
                return first == event && first.player == player;
              },
              forced: true,
              async content(event, trigger, player) {
                if (trigger.name != "dying") await player.draw(2);
                else {
                  player.storage.jlsg_weizhong = true;
                  await player.recoverTo(player.maxHp);
                }
              },
            },
          },
          translate: {
            jlsg_sk: "SK武将",
            jlsg_tiangang: "天罡包",
            jlsg_disha: "地煞包",
            jlsg_renjie: "人杰包",
            jlsg_pojun: "破军包",
            jlsg_yinyang: "阴阳包",
            jlsg_tanlang: "贪狼包",
            jlsg_jiangxing: "将星包",
            jlsg_sp: "特别包",
            jlsgsk_dengzhi: 'SK邓芝',
            jlsgsk_xuyou: 'SK许攸',
            jlsgsk_zhangbu: 'SK张布',
            jlsgsk_miheng: 'SK祢衡',
            jlsgsk_zumao: 'SK祖茂',
            jlsgsk_huaxiong: 'SK华雄',
            jlsgsk_sunce: 'SK孙策',
            jlsgsk_caoren: 'SK曹仁',
            jlsgsk_gongsunzan: 'SK公孙瓒',
            jlsgsk_sunqian: 'SK孙乾',
            jlsgsk_maliang: 'SK马良',
            jlsgsk_buzhi: 'SK步骘',
            jlsgsk_wangping: 'SK王平',
            jlsgsk_huangyueying: 'SK黄月英',
            jlsgsk_dongzhuo: 'SK董卓',
            jlsgsk_chendao: 'SK陈到',
            jlsgsk_dingfeng: 'SK丁奉',
            jlsgsk_wenchou: 'SK文丑',
            jlsgsk_yanliang: 'SK颜良',
            jlsgsk_zhuran: 'SK朱然',
            jlsgsk_lukang: 'SK陆抗',
            jlsgsk_lvlingqi: 'SK吕玲绮',
            jlsgsk_zhoucang: 'SK周仓',
            jlsgsk_kongrong: 'SK孔融',
            jlsgsk_caochong: 'SK曹冲',
            jlsgsk_zhanglu: 'SK张鲁',
            jlsgsk_guanlu: 'SK管辂',
            jlsgsk_simazhao: 'SK司马昭',
            jlsgsk_yangxiu: 'SK杨修',
            jlsgsk_liyan: 'SK李严',
            jlsgsk_jiping: 'SK吉平',
            jlsgsk_sunhao: 'SK孙皓',
            jlsgsk_zhugejin: 'SK诸葛瑾',
            jlsgsk_zhangxiu: 'SK张绣',
            jlsgsk_sunluyu: 'SK孙鲁育',
            jlsgsk_zuoci: 'SK左慈',
            jlsgsk_luzhi: 'SK卢植',
            jlsgsk_zhangning: 'SK张宁',
            jlsgsk_yuji: 'SK于吉',
            jlsgsk_mifuren: 'SK糜夫人',
            jlsgsk_guonvwang: 'SK郭女王',
            jlsgsk_chengyu: 'SK程昱',
            jlsgsk_zhangren: 'SK张任',
            jlsgsk_mizhu: 'SK糜竺',
            jlsgsk_zangba: 'SK臧霸',
            jlsgsk_hejin: 'SK何进',
            jlsgsk_wangyi: 'SK王异',
            jlsgsk_guanyu: '★SK关羽',
            jlsgsk_guanyu_ab: '极略★SK关羽',
            jlsgsk_guanyu_prefix: '极略★SK',
            jlsgsk_machao: 'SP马超',
            jlsgsk_caiwenji: 'SP蔡文姬',
            jlsgsk_zhangbao: 'SK张宝',
            jlsgsk_guanxing: 'SK关兴',
            jlsgsk_kuaiyue: 'SK蒯越',
            jlsgsk_zhoutai: 'SK周泰',
            jlsgsk_zoushi: 'SK邹氏',
            jlsgsk_zhugeguo: 'SK诸葛果',
            jlsgsk_xizhicai: 'SK戏志才',
            jlsgsk_guansuo: 'SK关索',
            jlsgsk_baosanniang: 'SK鲍三娘',
            jlsgsk_dongbai: 'SK董白',
            jlsgsk_xushi: 'SK徐氏',
            jlsgsk_zhoufei: 'SK周妃',
            jlsgsk_wuyi: 'SK吴懿',
            jlsgsk_zhangliang: 'SK张梁',
            jlsgsk_panshu: 'SK潘淑',
            jlsgsk_caorui: 'SK曹叡',
            jlsgsk_liuchen: 'SK刘谌',
            jlsgsk_sunxiu: 'SK孙休',
            jlsgsk_zhangrang: 'SK张让',
            jlsgsk_xiahoushi: 'SK夏侯氏',
            jlsgsk_sundeng: 'SK孙登',
            jlsgsk_caoxiu: 'SK曹休',
            jlsgsk_caojie: 'SK曹节',
            jlsgsk_xinxianying: 'SK辛宪英',
            jlsgsk_zhuzhi: 'SK朱治',
            jlsgsk_wanglang: 'SK王朗',
            jlsgsk_wuxian: 'SK吴苋',
            jlsgsk_jushou: 'SK沮授',
            jlsgsk_sunliang: 'SK孙亮',
            jlsgsk_wenyang: 'SK文鸯',
            jlsgsk_yanyan: 'SK严颜',
            jlsgsk_zhugezhan: 'SK诸葛瞻',
            jlsgsk_panzhang: 'SK潘璋',
            jlsgsk_sunru: 'SK孙茹',
            jlsgsk_liuyan: 'SK刘焉',
            jlsgsk_gongsunyuan: 'SK公孙渊',
            jlsgsk_guohuanghou: 'SK郭皇后',
            jlsgsk_zhaoxiang: 'SK赵襄',
            jlsgsk_chenqun: 'SK陈群',
            jlsgsk_lvfan: 'SK吕范',
            jlsgsk_hetaihou: 'SK何太后',
            jlsgsk_zhangyi: 'SK张嶷',
            jlsgsk_caochun: 'SK曹纯',
            jlsgsk_shamoke: 'SK沙摩柯',
            jlsgsk_lingcao: 'SK凌操',
            jlsgsk_zhaoyan: 'SK赵嫣',
            jlsgsk_beimihu: 'SK卑弥呼',
            jlsgsk_wutugu: 'SK兀突骨',
            jlsgsk_caoying: 'SK曹婴',
            jlsgsk_mayunlu: 'SK马云禄',
            jlsgsk_zhongyao: 'SK钟繇',
            jlsgsk_nanhualaoxian: 'SK南华老仙',
            jlsgsk_jiangwei: 'SP姜维',
            jlsgsk_huanghao: 'SK黄皓',
            jlsgsk_huaman: 'SK花鬘',
            jlsgsk_pangtong: 'SP庞统',
            jlsgsk_lvdai: 'SK吕岱',
            jlsgsk_wanniangongzhu: 'SK万年公主',
            jlsgsk_wangyuanji: 'SK王元姬',
            jlsgsk_zhangchangpu: 'SK张昌蒲',

            jlsg_hemeng: '和盟',
            jlsg_sujian: '素检',
            jlsg_yexi: '夜袭',
            jlsg_kuangyan: '狂言',
            jlsg_kuangyan1: '狂言',
            jlsg_kuangyan2: '狂言',
            jlsg_chaochen: '朝臣',
            jlsg_chaochen2: '朝臣',
            jlsg_quanzheng: '全政',
            jlsg_shejian: '舌剑',
            jlsg_kuangao: '狂傲',
            jlsg_yinbing: '引兵',
            jlsg_yinbing2: '引兵',
            jlsg_fenwei: '奋威',
            jlsg_shiyong: '恃勇',
            jlsg_angyang: '昂扬',
            jlsg_angyang2: '昂扬',
            jlsg_weifeng: '威风',
            jlsg_xieli: '协力',
            jlsg_jushou: '据守',
            jlsg_yicong: '义从',
            jlsg_muma: '募马',
            jlsg_suiji: '随骥',
            jlsg_fengyi: '凤仪',
            jlsg_yalv: '雅虑',
            jlsg_xiemu: '协穆',
            jlsg_xiemu2: '协穆',
            jlsg_zhejie: '折节',
            jlsg_fengya: '风雅',
            jlsg_yijian: '义谏',
            jlsg_feijun: '飞军',
            jlsg_muniu: '木牛',
            jlsg_muniu2: '木牛',
            jlsg_liuma: '流马',
            jlsg_baozheng: '暴征',
            jlsg_lingnu: '凌怒',
            jlsg_zhongyong: '忠勇',
            jlsg_bozhan: '搏战',
            jlsg_qingxi: '轻袭',


            jlsg_danshou: '胆守',
            jlsg_yonglie: '勇烈',
            jlsg_hengshi: '衡势',
            jlsg_zhijiao: '至交',
            jlsg_zhijiao2: '至交',
            jlsg_jiwux: '戟舞',
            jlsg_daoshi: '刀侍',
            jlsg_lirang: '礼让',
            jlsg_lirang2: '礼让',
            jlsg_lirang2_backup: '礼让',
            jlsg_xianshi: '贤士',
            jlsg_chengxiang: '称象',
            jlsg_renxin: '仁心',
            jlsg_midao: '米道',
            jlsg_yishe: '义舍',
            jlsg_pudu: '普渡',
            jlsg_zongqing: '纵情',
            jlsg_bugua: '卜卦',
            jlsg_zhaoxin: '昭心',
            jlsg_zhihe: '制合',
            jlsg_caijie: '才捷',
            jlsg_jilei: '鸡肋',
            jlsg_yanliang: '延粮',
            jlsg_duzhi: '毒治',
            jlsg_duzhi2: '毒治',
            jlsg_lieyi: '烈医',
            jlsg_lieyi1: '烈医',
            jlsg_baoli: '暴戾',
            jlsg_huanbing: '缓兵',
            jlsg_huanbing2: '缓兵',
            jlsg_hongyuan: '弘援',
            jlsg_huaqiang: '花枪',
            jlsg_chaohuang: '朝凰',
            jlsg_huilian: '慧敛',
            jlsg_wenliang: '温良',
            jlsg_qianhuan: '千幻',
            jlsg_jinglun: '经纶',
            jlsg_ruzong: '儒宗',
            jlsg_ruzong_wuxie: '儒宗',
            jlsg_ruzong_shan: '儒宗',
            jlsg_leiji: '雷祭',
            jlsg_shanxi: '闪戏',
            jlsg_guhuo: '蛊惑',
            jlsg_fulu: '符箓',
            jlsg_guixiu: '闺秀',
            jlsg_cunsi: '存嗣',
            jlsg_yongjue: '勇决',
            jlsg_yongjue2: '勇决',
            jlsg_gongshen: '恭慎',
            jlsg_jianyue: '俭约',
            jlsg_pengri: '捧日',
            jlsg_danmou: '胆谋',
            jlsg_fushe: '伏射',
            jlsg_ziguo: '资国',
            jlsg_shangdao: '商道',
            jlsg_hengjiang: '横江',
            jlsg_zhuanshan: '专擅',
            jlsg_zhenlie: '贞烈',
            jlsg_miji: '秘计',
            jlsg_danqi: '单骑',
            jlsg_tuodao: '拖刀',
            jlsg_wusheng: '武圣',
            jlsg_zhuiji: '追击',
            jlsg_xionglie: '雄烈',
            jlsg_chenqing: '陈情',
            jlsg_mozhi: '默识',
            jlsg_zhoufu: '咒缚',
            jlsg_zhoufu2: '咒缚',
            jlsg_yingbing: '影兵',
            jlsg_yongji: '勇继',
            jlsg_yongjiBuff: '勇继',
            jlsg_wuzhi: '武志',
            jlsg_wuzhi2: '武志',
            jlsg_yidu: '异度',
            jlsg_zhubao: '诛暴',
            jlsg_fenji: '奋激',
            jlsg_jiaomei: '娇媚',
            jlsg_huoshui: '祸水',

            jlsg_yuhua: '羽化',
            jlsg_yuhua_info: '当你使用锦囊牌造成伤害时，或当你受到锦囊牌造成的伤害时，你可以摸一张牌并防止之。若如此做，你的手牌上限-1',
            jlsg_dengxian: '登仙',
            jlsg_dengxian2: '登仙',
            jlsg_dengxian_info: '觉醒技，回合开始阶段，若你的手牌上限为0，你移除弃牌阶段并选择一项：1.替换为摸牌阶段；2.替换为出牌阶段。',
            jlsg_tiance: '天策',
            jlsg_tiance_info: '回合开始阶段，你可以令一名角色进行判定，然后你选择并令其从牌堆或弃牌堆或除其以外的随机一名角色处获得两张与判定结果花色相同的牌',
            jlsg_jiexin: '竭心',
            jlsg_jiexin_info: '当你受到伤害后，你可以发动一次〖天策〗，然后若判定结果与对你造成伤害牌的颜色相同，你额外再发动一次〖天策〗。',
            jlsg_jiexin_tiance: '竭心',
            jlsg_tongxin: '同心',
            jlsg_tongxin_info: '限定技，当你处于濒死状态时，你可以回复体力至2点，然后若关索或鲍三娘不在场，你可以将武将牌替换为其中之一。',
            jlsg_zhengnan: '征南',
            jlsg_zhengnan2: '征南',
            jlsg_zhengnan_info: '出牌阶段限一次，你可以弃置一名角色区域里的一张牌，若以此法弃置的牌为非基本牌，视为其使用一张【南蛮入侵】；以此法使用的【南蛮入侵】造成伤害时，你摸一张牌。',
            jlsg_jianwu: '剑舞',
            jlsg_jianwu2: '剑舞',
            jlsg_jianwu_info: '锁定技，若你使用的上一张牌为基本牌，你使用【杀】时无距离和次数限制，且目标上限+1',
            jlsg_zhennan: '镇南',
            jlsg_zhennan_info: '每回合限一次，当一张【杀】或普通锦囊指定目标后，若目标数大于一，你可以对其中一个目标造成一点伤害。',
            jlsg_shemi: '奢靡',
            jlsg_shemi2: '奢靡',
            jlsg_shemi_draw: '奢靡',
            jlsg_shemi_info: '锁定技，弃牌阶段，你可以多弃置任意张牌，若你于此阶段内弃置牌的数量大于你的上一个弃牌阶段，你的摸牌阶段摸牌数+1，若你未受伤，你加一点体力上限。',
            jlsg_jiaohui: '狡慧',
            jlsg_jiaohui_info: '当你受到伤害时，你可以摸一张牌或弃置一张牌，然后若你的手牌数等于体力值，你令此伤害-1。',
            jlsg_wengua: '问卦',
            jlsg_wengua2: '问卦',
            jlsg_wengua_info: '一名角色的回合开始阶段，其可以交给你一张牌，然后你可以将一张牌置于牌堆底，再与其各摸一张牌。',
            jlsg_fuzhu: '伏诛',
            jlsg_fuzhu_info: '限定技，出牌阶段，你可以选择一名其他角色，然后展示牌堆底牌，若此牌为黑色，你将此牌当【杀】对其使用，然后重复此流程。',
            jlsg_yinyuan: '姻缘',
            jlsg_yinyuan_info: '结束阶段，你可以令一名角色从牌堆获得一张红桃牌，然后若该角色是第一次成为此技能的目标，你从牌堆获得一张红桃牌。',
            jlsg_konghou: '箜篌',
            jlsg_konghou_info: '当其他角色于其出牌阶段使用第一/二张牌时，若此牌为非延时锦囊/基本牌，你可以弃置一张牌，令此牌无效',
            jlsg_zhidi: '制敌',
            jlsg_zhidi_info: '锁定技，准备阶段，你随机获得以下一项你还未获得的效果：1.你使用【杀】造成伤害后，你摸一张牌；2.你使用【杀】无视防具且不能被【闪】相应；3.你使用【杀】无距离限制且次数上限+X；4.你使用【杀】可以额外指定X个目标（X为你以此法获得的效果数）',
            jlsg_jijun: '集军',
            jlsg_jijun_info: '出牌阶段限一次，你可以将任意张不同花色的手牌置于武将牌上，称为「兵」,然后获得其中其余与你本次放入的牌同花色的牌，并可视为使用一张基本牌（无距离和次数限制）。',
            jlsg_fangtong: '方统',
            jlsg_fangtong2: '方统',
            jlsg_fangtong_info: '锁定技，若你的「兵」的点数之和不小于：9，你拥有技能〖雷击〗；18，你拥有技能〖咒缚〗；27，你拥有技能〖神道〗；36，你拥有技能〖变天〗。结束阶段，你将手牌数补至X张（X为你因〖方统〗激活的技能数）',
            jlsg_jinzhi: '锦织',
            jlsg_jinzhi2: '锦织',
            jlsg_jinzhi_info: '你可以将所有手牌当任意基本牌或非延时锦囊使用（同名牌每轮限一次），然后摸X张牌（X为本轮此技能已发动的次数），每轮限四次。',
            jlsg_yuyou: '鱼忧',
            jlsg_yuyou_info: '锁定技，你一次获得至少两张牌后，你须选择保留其中一张并弃置其余的牌，然后你可以令一名男性角色选择一项：1.弃置等量的牌；2.失去一点体力。',
            jlsg_huituo: '恢拓',
            jlsg_huituo_info: '准备阶段，你可以选择一名角色并选择一项：1.令其回复体力至唯一最多；2.令其摸牌至唯一最多；3.令其从弃牌堆或牌堆随机选择装备并依次使用，直到装备区没有空位；4.令其获得〖恢拓〗。每项限一次。',
            jlsg_xingshuai: '兴衰',
            jlsg_xingshuai_info: '你受到其他角色造成的伤害后，可以令一名其他角色选择一项：1.翻面；2.令你与此回合结束后执行一个额外的回合。',
            jlsg_zhanjue: '战绝',
            jlsg_zhanjue_info: '出牌阶段，你可以将所有手牌当作【决斗】使用。此【决斗】结算后，你与以此法受到伤害的角色各摸一张牌。若你在同一阶段内以此法摸了两张或更多的牌，则此技能失效直到回合结束。当你失去一个区域内所有牌后，可以对一名角色造成1点伤害。',
            jlsg_yanzhu: '宴诛',
            jlsg_yanzhu_info: '出牌阶段限三次，你可以令一名角色获得一枚“宴诛”标记，然后若其拥有的标记数为：1，你令其摸X张牌；2，你令其弃置X张牌；3，你对其造成X点伤害。（X为与其拥有标记数相同的角色数量）',
            jlsg_xingxue: '兴学',
            jlsg_xingxue_info: '回合结束阶段，你可以令一名角色摸等同于其拥有“宴诛”标记数的牌，然后其将超出体力上限的牌交给你，并弃置其所有“宴诛”标记。',
            jlsg_taoluan: '滔乱',
            jlsg_taoluan2: '滔乱',
            jlsg_taoluan_info: '一名角色使用基本牌或非延时锦囊牌指定目标后（濒死状态除外），你可以弃置一张牌，令其使用的牌名改为由你指定的另一张同类型的牌，每轮每种牌名限一次。',
            jlsg_shiqiao: "拾樵",
            jlsg_shiqiao_info: "一名角色的回合结束时，你可以从弃牌堆随机获得X张牌（X为该角色于此回合内使用杀的次数）",
            jlsg_yingge: "莺歌",
            jlsg_yingge2: "莺歌",
            jlsg_yingge_info: "一名角色的出牌阶段开始时，你可以弃置一张手牌，令其不能使用点数小于X的非转化非虚拟牌、点数不小于X的手牌均视为【杀】、攻击范围和【杀】的使用次数上限+X，直到该阶段结束。（X为你弃置牌的点数）",
            jlsg_kuangbi: "匡弼",
            jlsg_kuangbi_info: "当基本牌或非延时锦囊指定目标时，你可以为此牌增加或减少一个目标，每回合限一次。",
            jlsg_taoxi: "讨袭",
            jlsg_taoxi2: "讨袭",
            jlsg_taoxi_info: "出牌阶段限一次，你可以获得其他角色各一张手牌，此阶段结束时，你交还剩余的牌。",
            jlsg_huaibi: "怀璧",
            jlsg_huaibi_info: "锁定技，游戏开始时，回合结束阶段，若你没有「玺」，你摸两张牌，然后将一张手牌置于武将牌上，称为「玺」。其他角色使用与「玺」花色相同的【杀】和非延时锦囊对你无效。",
            jlsg_zhixi: "掷玺",
            jlsg_zhixi_info: "出牌阶段限一次，你可以将「玺」交给一名其他角色，令其失去3点体力。若你已对其发动过此技能则改为失去1点体力。",
            jlsg_caijian: "才鉴",
            jlsg_caijian_info: "出牌阶段限一次，当你受到1点伤害后，你可以将一名角色的一张牌置于武将牌上，称为「鉴」，若此牌为黑色且与其他「鉴」的花色均不同，你令该角色翻面。",
            jlsg_zhishix: "智识",
            jlsg_zhishix_backup: "智识",
            jlsg_zhishix_info: "出牌阶段，你可以将三张花色各不相同的「鉴」置入弃牌堆，摸三张牌，并获得随机一名魏势力武将的技能。",
            jlsg_anguo: "安国",
            jlsg_anguo_info: "摸牌阶段，你可以少摸一张牌，然后令一名角色随机使用一张装备牌，若此牌为：武器牌，其摸X张牌（X为此武器牌的攻击范围）；防具或宝物牌，其回复1点体力；坐骑牌，重复此流程。",
            jlsg_quanxiang: "劝降",
            jlsg_quanxiang2: "劝降",
            jlsg_quanxiang_info: "出牌阶段，你可以与一名角色拼点。若你赢，你令其失去所有体力且你此阶段不能再发动此技能，若其以此法进入濒死状态后脱离濒死状态，你令其回复等量的体力，然后你获得1枚「饶舌」标记。若你没赢，你获得2枚「饶舌」标记。若你拥有7枚「饶舌」标记，你死亡。",
            jlsg_raoshe: "饶舌",
            jlsg_gushe: "鼓舌",
            jlsg_gushe2: "鼓舌",
            jlsg_gushe_info: "锁定技，你的拼点牌点数+X (X为「饶舌」标记数)，当你拼点赢/没赢后，你获得对方/你的拼点牌。",
            jlsg_jici: "激词",
            jlsg_jici_info: "当你受到其他角色对你造成的伤害时，你可以令其摸一张牌，然后与其拼点。若你赢，你防止此伤害。若你没赢，你将此伤害改为1点，然后获得1枚「饶舌」标记。若你拥有7枚「饶舌」标记，你死亡。",
            jlsg_hechun: "贺春",
            jlsg_hechun_info: "出牌阶段限一次，你可以令所有其他角色展示并交给你一张牌， 然后你可以令以此法交给你黑色/红色牌的角色失去/回复1点体力。",
            jlsg_daiyan: "怠宴",
            jlsg_daiyan_info: "回合结束时，你可以令一名角色获得一个额外的回合，若你已对其发动过此技能，你令其先失去X点体力(X为你对其再次发动此技能的次数)",
            // jlsg_jianying: "渐营",
            jlsg_shibei: "矢北",
            jlsg_shibei2: "矢北",
            jlsg_shibei_info: "每回合限一次，当你受到伤害后，你可以回复1点体力，然后你可以将一张牌当对你造成此伤害的牌使用。若如此做，当你于此回合内再次受到伤害后，你失去1点体力。",
            jlsg_kuizhu: '溃诛',
            jlsg_kuizhu_info: '锁定技，回合结束阶段，若其他角色于本回合内弃置的牌数多于你，你对一名角色造成2点伤害，否则你失去1点体力并摸X张牌(X为角色数)。',
            jlsg_chezheng: '掣政',
            jlsg_chezheng_info: '非额外出牌阶段结束后，你可以选择一项: 1. 令至多X名角色各弃置一张牌，若如此做，这些角色各进行一个额外出牌阶段; 2.令至多X名角色各摸一张牌，若如此做，这些角色各进行一个额外弃牌阶段(X为你的体力) 。',
            jlsg_jueyong: '绝勇',
            jlsg_jueyong_info: '当你使用【杀】对目标角色造成伤害时，你可以将体力或体力上限调整至与其手牌数相同，然后摸X张牌（X为你体力或体力上限的变化量），若你以此法减少了体力或体力上限，你令此伤害翻倍，每回合限一次。',
            jlsg_choujue: '仇决',
            jlsg_choujue_info: '出牌阶段限一次，你可以减一半（向下取整，至少为1）体力上限并视为使用【杀】（无次数限制），当你以此法造成伤害时，令你所有出牌阶段限一次的技能视为未发动过。',
            jlsg_juzhan: '拒战',
            jlsg_juzhan_info: '其他角色的出牌阶段开始时，你可以摸X张牌，然后令其视为对你使用【杀】，若此【杀】对你造成了伤害，除非其弃置X张牌(X为你已损失体力且至多为5)，否则结束此出牌阶段。 ',
            jlsg_zuilun: "罪论",
            jlsg_zuilun_info: "锁定技，回合结束阶段，若你本回合内没有弃置牌/回复体力/造成伤害，你摸四张牌/失去1点体力/减一点体力上限，否则将此效果改为令另一名角色执行。",
            jlsg_fuzhi: "父志",
            jlsg_fuzhi_info: "觉醒技，回合开始阶段，若你的体力为1，你加1点体力上限并回复1点体力，失去〖罪论〗并获得〖妖智〗和〖星陨〗。",
            jlsg_jiejun: "截军",
            jlsg_jiejun_info: "你的回合外，当其他角色使用红色牌后，你可以对其使用一张【杀】，当此【杀】造成伤害后，你获得其所有牌。",
            jlsg_xiecui: "撷翠",
            jlsg_xiecui_info: "当一名角色于回合内首次造成伤害时，你可以弃置两张花色不同的牌，令此伤害+1/-1，然后其摸/弃置X张牌(X为其于本回合内已使用的牌数)",
            jlsg_youxu: "忧恤",
            jlsg_youxu_info: "一名角色的出牌阶段开始时，你可以选择其X张牌，令其将这些牌当【桃】或【五谷丰登】使用(X为其已损失的体力值)",
            jlsg_zhulu: "逐鹿",
            jlsg_zhulu_info: "当你对一名角色造成伤害后，你可以令除该角色以外的角色各获得其一张牌。",
            jlsg_huaiyi: "怀异",
            jlsg_huaiyi2: "怀异",
            jlsg_huaiyi3: "怀异",
            jlsg_huaiyi_info: "出牌阶段限一次，你可以将其他角色的一张牌置于你的武将牌上，称为「异」，你摸牌阶段的摸牌数+X;回合结束阶段，若X大于你的体力(X为「异」数)，你对其他角色各造成1点伤害，然后获得所有「异」。",
            jlsg_jiaozhao: "矫诏",
            jlsg_jiaozhao_info: "出牌阶段限一次，你可以将一张手牌当任意基本牌或非延时锦囊牌使用，你可以选择任意其他角色为此牌的目标且你不能成为目标，以此法使用的牌无距离和次数限制。",
            jlsg_danxin: "殚心",
            jlsg_danxin_info: "当你受到伤害后，你可以摸两张牌，然后你可以发动〖矫诏〗。",
            jlsg_fanghun: "芳魂",
            jlsg_fanghun_sha: "芳魂",
            jlsg_fanghun_shan: "芳魂",
            jlsg_fanghun_cz1: "芳魂",
            jlsg_fanghun_cz2: "芳魂",
            jlsg_fanghun_info: "你可以将【杀】/【闪】当【闪】/【杀】使用或打出，然后你可以获得对方的一张牌。",
            jlsg_fuhan: "扶汉",
            jlsg_fuhan_info: "当你使用转化的牌后，你可以随机获得蜀势力武将的一个技能，每回合限一次。",
            jlsg_pindi: "品第",
            jlsg_pindi_info: "出牌阶段对每名其他角色限一次，你可以弃置一张手牌令一名其他角色判定，若结果为:黑色，你令其摸或弃置三张牌;方片，你摸一张牌;红桃，你翻面。",
            jlsg_faen: "法恩",
            jlsg_faen_info: "当一名角色翻面后，你可以令其摸三张牌。",
            jlsg_diaodu: "调度",
            jlsg_diaodu_info: "准备阶段，你可以令两名角色交换手牌或装备区里的牌，然后你弃置X张牌(X为交换的牌数差)。",
            jlsg_diancai: "典财",
            jlsg_diancai_info: "结束阶段，你可以令两名角色摸等同于对方于本回合内失去牌数的牌。",
            jlsg_zhendu: "鸩毒",
            jlsg_zhendu2: "鸩毒",
            jlsg_zhendu_info: "一名角色的出牌阶段开始时，你可以令其于本回合内对除你以外的角色造成的伤害+1；若该角色不是你，你令其失去1点体力。",
            jlsg_qiluan: "戚乱",
            jlsg_qiluan_info: "一名角色的回合结束时，你可以令其视为对你指定的另一名角色使用【杀】，然后你摸X张牌(X为所有角色于本回合内体力改变的次数)。",
            jlsg_wurong: "怃戎",
            jlsg_wurong2: "怃戎",
            jlsg_wurong_info: "出牌阶段限一次，你可以展示其他角色的一张手牌，然后你可以弃置一张手牌。若这两张牌的类别:不同，你令其一个非锁定技于本回合内无效，并对其造成1点伤害;相同，你获得其展示的牌，并可以对其重复此流程。",
            jlsg_shanjia: "缮甲",
            jlsg_shanjia_info: "锁定技，若你的-1坐骑栏内没牌且未被废除，你与其他角色的距离-2，你使用的【杀】结算两次;若你+1坐骑栏内没牌且未被废除，其他角色与你的距离+2,你使用的非延时锦囊牌结算两次(【铁索连环】、【无懈可击】除外)",
            jlsg_jili: "蒺藜",
            jlsg_jili_info: "当你使用或打出非锦囊牌后，你可以令攻击范围内的其他角色各随机弃置一张牌，然后若你于本回合内使用的牌数不多于你的攻击范围，你摸X张牌(X为弃牌的角色数)",
            jlsg_dujin: "独进",
            jlsg_dujin2: "独进",
            jlsg_dujin_info: "锁定技，你使用【杀】无次数限制。你于出牌阶段内使用的第一张【杀】的伤害+1且不能被【闪】响应，其余的【杀】被其他角色的【闪】响应后，其对你造成1点伤害。",
            jlsg_sanjue: "三绝",
            jlsg_sanjue2: "三绝",
            jlsg_sanjue_info: "锁定技，当你第一次或第三次使用同名牌时，你摸一张牌，然后获得一个随机吴势力技能。出牌阶段开始时，你可以令一名角色获得一个随机技能。",
            jlsg_sanjue2_info: "出牌阶段开始时，你可以令一名角色获得一个随机技能。",
            jlsg_canshi: "蚕食",
            jlsg_canshi_info: "当其他角色回复体力/加体力上限/对你造成伤害后，你可以令其获得1枚「蚕食」标记，然后你摸两张牌。拥有此标记的角色手牌上限-X(X为标记数)。",
            jlsg_xianji: "献祭",
            jlsg_xianji_info: "回合开始阶段，你可以选择一名拥有「蚕食」标记数大于其体力上限的其他角色并移除其所有「蚕食」标记。若如此做，你加X点体力上限并回复X点体力(X为目标角色拥有的技能数)，然后与其交换所有技能且你于本局游戏中不能成为〖献祭〗的目标。",
            jlsg_hanyong: "悍勇",
            jlsg_hanyong_info: "锁定技，若你的装备区里没有武器牌/防具牌，你视为装备着【贯石斧】/【藤甲】。",
            jlsg_lingruo: "凌弱",
            jlsg_lingruo_info: "当你使用【杀】或非延时锦囊牌指定一名其他角色为目标后，或成为其他角色对你使用这些牌的目标后，你可以随机执行以下效果之一:摸一张牌;随机获得其一张牌;令其随机弃置一张牌。共执行X次(X为你的基本牌/锦囊牌/装备牌中数量多于该角色的类别数)。",
            jlsg_fujian: "伏间",
            jlsg_fujian2: "伏间",
            jlsg_fujian3: "伏间",
            jlsg_fujian_info: "回合开始阶段，你可以观看一名其他角色的手牌并标记其中一张，若如此做，当该角色失去此牌后，你令其失去1点体力，然后你摸X张牌(X为其拥有此标记牌时使用的牌数)。",
            jlsg_fengyin: "凤吟",
            jlsg_fengyin_info: "每回合各牌名限一次，当你使用【杀】或【决斗】对其他角色造成伤害时，你可以摸X张牌并令此伤害+Y(X为你手牌里的方片牌数，Y为目标角色手牌里的方片牌数)。",
            jlsg_rongzhuang: "戎妆",
            jlsg_rongzhuang_info: "锁定技，若你的装备区里有:武器牌，你使用【杀】无次数限制;防具牌，你使用的【杀】不能被其他角色响应;武器牌和防具牌，将你〖凤吟〗中的“方片牌”改为“红色牌”。",
            jlsg_huomo: "活墨",
            jlsg_huomo_info: "每回合每种牌名限一次，你可以将黑色牌当任意基本牌使用。",
            jlsg_dingguan: "定关",
            jlsg_dingguan_info: "当任意角色于其出牌阶段内使用黑色牌指定目标后，若本阶段内没有角色受到伤害，你可以令其中任意个目标各摸一张牌。",
            jlsg_xianshou: "仙授",
            jlsg_xianshou_info: "回合开始时，你可以选择一名角色，令其获得〖天道〗，若其已拥有〖天道〗，改为判定：若结果不为黑桃，你令其〖天道〗中的随机一项数字+1;若结果为黑桃，改为-1。",
            jlsg_tiandao: "天道",
            jlsg_tiandao_info: "锁定技，回合开始阶段，你摸1张牌，随机获得1个群势力技能，然后可以选择一名角色，令其随机弃置1张牌，对其造成1点雷电伤害。",
            jlsg_chengfeng: "乘风",
            jlsg_chengfeng_info: "锁定技，当你受到伤害时，你判定：若结果不为黑桃，你令此伤害-1；若结果为黑桃，你获得1枚「乘风」标记。一名角色的回合结束后，你弃置2枚「乘风」标记并执行一个额外回合。",
            jlsg_kunfen: "困奋",
            jlsg_kunfen_info: "锁定技，当你受到伤害后、失去体力后、减体力上限后，你摸三张牌，若本次是你于本回合内第一次发动此技能，你回复1点体力。",
            jlsg_caiyu: "才遇",
            jlsg_caiyu_info: "回合开始阶段，你可以减1点体力上限，随机获得一个诸葛亮的技能。",
            jlsg_qinqing: "寝情",
            jlsg_qinqing_info: "回合结束阶段，你可以选择一名角色，若如此做，你令攻击范围内含有该角色的其他角色各交给其一张牌，然后若该角色的手牌不多于你，你可以令其回复1点体力。",
            jlsg_huisheng: "贿生",
            jlsg_huisheng_info: "当你受到其他角色造成的伤害时，你可以令其观看你至多三张手牌并选择一项: 1.获得其中一张并防止此伤害; 2.弃置等量的牌。",
            jlsg_manyi: "蛮裔",
            jlsg_manyi_info: "当你使用的【杀】或非延时锦囊牌指定目标后，或当你成为其他角色使用这些牌的目标后，你可以将此牌的效果改为【南蛮入侵】，然后摸一张牌。",
            jlsg_souying: "薮影",
            jlsg_souying_info: "每回合对每名角色限一次，当任意角色打出【杀】后，你可以对一名角色造成1点伤害;每回合对每名角色限一次，当任意角色打出【闪】后，你可以令一名角色回复1点体力。",
            jlsg_guolun: "过论",
            jlsg_guolun_info: "每回合限一次，当你摸牌或弃牌后，你可以令一名其他角色执行相反的效果。",
            jlsg_guolun2: "过论2",
            jlsg_guolun2_info: "每回合限一次， 当你摸牌或弃牌后， 你可以令一名其他角色执行相反的效果;每回合限一次，当你摸牌或弃牌后，你可以令一名其他角色执行相同的效果。",
            jlsg_guolun3: "过论3",
            jlsg_guolun3_info: "每回合限一次，当任意角色摸牌或弃牌后，你可以令另一名角色执行相反的效果;每回合限一次，当任意角色摸牌或弃牌后，你可以令另一名角色执行相同的效果。",
            jlsg_guolun4: "过论4",
            jlsg_guolun4_info: "每回合限一次，当任意角色摸牌、弃牌、回复体力或受到伤害后， 你可以令另一名角色执行相反的效果;每回合限一次，当任意角色摸牌、弃牌、回复体力或造成伤害后，你可以令另一名角色执行相同的效果。",
            jlsg_songsang: "送丧",
            jlsg_songsang_info: "锁定技，当其他角色死亡时，你修改“过论”(至多三次)并摸X张牌(X为存活角色数)。",
            jlsg_qinguo: "勤国",
            jlsg_qinguo_info: "出牌阶段，你可以对任意角色使用装备牌。当你使用装备牌后，你可以视为使用任意一张无次数限制的基本牌。每回合限一次，当任意角色装备区里的牌进入弃牌堆后，你可以获得之。",
            jlsg_zhenge: "枕戈",
            jlsg_zhenge_buff: "枕戈",
            jlsg_zhenge_info: "锁定技，当你使用非「枕戈」牌后，你获得牌堆底牌并标记为「枕戈」牌，你的「枕戈」牌不计入手牌上限且无次数限制。当你使用黑色/红色「枕戈」牌指定一名角色为目标后，你可以令其受到随机负面/正面效果。",
            jlsg_zhenge_derivation: "负面/正面效果",
            jlsg_zhenge_derivation_ab: "负面/正面效果",
            jlsg_zhenge_derivation_info: "正面：随机获得一个技能；手牌上限+1；从牌堆或弃牌堆获得1/2张基本牌/锦囊牌/装备牌；随机加1~3点体力上限；随机回复1~3点体力；摸牌数+1；使用【杀】的次数上限+1；随机摸1~5张牌。<br>负面：横置；随机弃置1~5张牌；随机受到1~3点伤害；随机失去一个技能；翻面；随机受到1~3点火焰伤害；随机减1~2点体力上限；随机失去1~3点体力。",
            jlsg_xinghan: "兴汉",
            jlsg_xinghan_info: "游戏开始时，或回合结束时，你可以从任意势力中招募一名未上场过的武将。你至多拥有三名势力各不相同的招募武将，若任意势力的招募武将阵亡，则不可再从该势力中招募其他武将。",
            jlsg_qianchong: "谦冲",
            jlsg_qianchong_info: "任意角色的回合结束时，若你于本回合内使用的红色牌数为1，你可以令一名角色回复2点体力或摸X张牌;若你于本回合内使用的黑色牌数为1，你可以令一名角色失去2点体力或弃置X张牌(X为其体力上限)。若你执行了以上两项，且本回合不为额外回合，你于本回合结束后执行一个额外回合。",
            jlsg_shangjian: "尚俭",
            jlsg_shangjian_info: "锁定技，弃牌阶段开始时，你将超出手牌上限数量的手牌交给任意名其他角色，然后于此阶段结束时摸等量的牌。",
            jlsg_yanjiao: "严教",
            jlsg_yanjiao_info: "出牌阶段不同的X各限一次，你可以将满足条件的X张手牌交给一名角色，然后摸X张牌。X为1的条件是点数最大的牌; X为2的条件是点数相同的牌; X为3的条件是花色相同的牌; X为4的条件是点数连续的牌; X为5的条件是花色相同且点数连续的牌。当其他角色以此法获得牌后，若你拥有「省身」标记，你可以对其造成X点伤害。",
            jlsg_xingshen: "省身",
            jlsg_xingshen_info: "锁定技，当你受到1点伤害后，你摸两张牌，然后若你没有「省身」标记，你回复1点体力，并获得1枚「省身」标记直到你的下个回合结束。",

            jlsg_limu: "立牧",
            jlsg_limu_info: "出牌阶段限一次，你可以将方片牌当【乐不思蜀】对自己使用，然后回复1点体力并摸X张牌(X为 此牌的点数)；若你的判定区里有牌，你使用牌无次数限制。",
            jlsg_jiaomei_info: '出牌阶段限一次，当你使用【杀】或非延时锦囊牌指定目标后，你可以令其横置。若其已横置，改为令其重置并翻面。',
            jlsg_huoshui_info: '回合结束阶段，你可以依次获得已横置角色的一张牌，然后对所有武将牌背面向上的角色造成1点伤害。',
            jlsg_fenji_info: '当一名角色成为【杀】的目标后，你可以失去1点体力，然后令该角色摸两张牌。',
            jlsg_yidu_info: '你的回合外，当你失去手牌后，你可以摸X张牌（X为当前回合角色手牌中花色与这些牌相同的数量）。每回合限一次。',
            jlsg_zhubao_info: '你的回合内，当其他角色失去手牌后，你可以摸X张牌（X为你手牌中花色与这些牌相同的数量）。每回合对每名其他角色限触发一次。',
            // jlsg_zhubao_append: '<span style="font-family: yuanli">每次至多摸十张。</span>',
            jlsg_yongji_info: '锁定技，当你于出牌阶段使用【杀】造成伤害后，你摸X张牌（X为你已损失的体力值且至多为3），且本回合可额外使用一张【杀】。',
            jlsg_wuzhi_info: '锁定技，弃牌阶段结束后，若你本回合内【杀】的使用次数未达到上限，你受到一点无来源伤害并从牌堆中获得一张【杀】',
            jlsg_wusheng_info: '你可以将一张红色牌当【杀】使用或打出。',
            jlsg_zhoufu_info: '其他角色的回合开始时，你可以弃置一张手牌，令其判定，若结果为黑桃，你令其所有非Charlotte技失效直到回合结束；若结果为梅花，其弃置两张牌。',
            jlsg_yingbing_info: '每回合限一次，当一名其他角色的黑色判定牌生效后，你可以视为对其使用一张【杀】。',
            jlsg_tuodao_info: '每当你用【闪】抵消了一次【杀】的效果时，若使用者在你的攻击范围内，你可以立刻对其使用一张【杀】，此【杀】无视防具且不可被【闪】响应',
            jlsg_zhuiji_info: '锁定技，你对其他角色造成伤害后，你令你与其的距离-1',
            jlsg_xionglie_info: '当你使用【杀】指定目标后，你可以选择一项：1.令此【杀】不能被【闪】响应；2.令此【杀】伤害+1。若你与所有其他角色的距离为1，则改为依次执行两项',
            jlsg_chenqing_info: '每回合限一次，当一名角色进入濒死状态时，你可以令另一名其他角色摸四张牌，然后其弃置X张牌。若其以此法弃置的牌花色各不相同，则视为该角色对濒死的角色使用一张【桃】。(X为此技能发动过的次数)',
            jlsg_mozhi_info: '一名角色的结束阶段开始时，你可以将一张手牌当作其此回合内使用的最后一张基本或普通锦囊牌使用。',
            jlsg_mozhi_append: '<span style="font-family: yuanli">你不能通过此技能使用【酒】</span>',
            jlsg_danqi_info: '觉醒技，回合开始阶段，若你的手牌数大于你的体力值，你失去1点体力上限，恢复2点体力，并获得技能〖拖刀〗。',
            jlsg_zhenlie_info: '当你成为其他角色使用的【杀】或非延时锦囊牌的目标时，你可以失去1点体力，令此牌对你无效，然后你可以弃置一张牌，令该角色展示所有手牌并弃置与之花色相同的牌。若其未以此法弃置牌，其失去1点体力。',
            jlsg_miji_info: '回合开始阶段开始时，若你已受伤，你可以声明一种牌的类别，然后从牌堆随机亮出一张此类别的牌，将之交给一名角色。回合结束阶段开始时，若你的体力为全场最少（或之一），你亦可以如此做。',
            jlsg_pengri_info: '出牌阶段限一次，你可以摸两张牌，然后攻击范围内含有你的其他角色可依次对你使用一张【杀】',
            jlsg_danmou_info: '当你受到伤害后，你可以与伤害来源交换手牌。',
            jlsg_fushe_info: '其他角色的出牌阶段开始时，若其在你的攻击范围内，你可以选择一种花色。若如此做，此阶段结束时，若有此花色的牌进入弃牌堆，你对其造成1点伤害，然后摸一张牌。',
            jlsg_ziguo_info: '出牌阶段限一次，你可以令一名已受伤的角色摸两张牌，若如此做，本回合你的手牌上限-2。',
            jlsg_shangdao_info: '锁定技，一名其他角色的准备阶段开始时，若其手牌数大于你，你展示牌堆顶牌并获得之。',
            jlsg_hengjiang_info: '弃牌阶段开始时，你可以令你的手牌上限+1或-1，若如此做，此阶段结束时，你可以弃置场上的至多X张牌（X为此阶段你弃置的牌数）。',
            jlsg_zhuanshan_info: '回合开始/结束阶段开始时，你可以令一名角色摸一张牌，然后将该角色的一张牌置于牌堆顶。',
            jlsg_hemeng_info: '出牌阶段，若你有手牌，可令一名其他角色观看你的手牌并获得其中一张，然后你观看该角色的手牌并获得其一张牌。每阶段限X+1次，X为你此阶段开始时已损失的体力值。',
            jlsg_sujian_info: '每当你从其他角色处获得一次牌时，可令一名其他角色弃置你一张牌，然后你弃置其一张牌。',
            jlsg_yexi_info: '回合结束阶段，你可以多弃一张手牌， 然后指定你以外的一名角色选择一项:1.使用黑色【杀】时无视防具。2.使用红色【杀】时无视距离。该角色在他的下个出牌阶段中得到此效果。',
            jlsg_kuangyan_info: '锁定技，你受到1点无属性伤害时，该伤害对你无效，你受到两点或以上伤害时，该伤害+1。',
            jlsg_chaochen_info: '出牌阶段限一次，你可以将至少一张手牌交给一名其他角色，若如此做，该角色的下个回合开始阶段开始时，若其手牌数大于体力值，你对其造成1点伤害。',
            jlsg_quanzheng_info: '当你成为其他角色使用的【杀】或非延时类锦囊牌的目标后，若其手牌或装备区的牌数大于你对应的区域，你可以摸一张牌。',
            jlsg_shejian_info: '出牌阶段对每名其他角色限一次，若你未装备防具，你可以弃置一名其他角色的一张牌，然后该角色可以视为对你使用一张【杀】。',
            jlsg_kuangao_info: '当一张对你使用的【杀】结算后，你可以选择一项：弃置所有牌（至少一张），然后该【杀】的使用者弃置所有牌；或令该【杀】的使用者将手牌补至其体力上限的张数（至多5张）。',
            jlsg_yinbing_info: '你攻击范围内的一名其他角色成为【杀】的目标时，你可以获得其装备区的一张牌，然后将该【杀】转移给你（你不得是此【杀】的使用者）；当你成为【杀】的目标时，你可以弃置一张牌，然后摸X张牌（X为你已损失的体力值）。',
            jlsg_fenwei_info: '当你使用【杀】对目标角色造成伤害时，你可以展示该角色的一张手牌：若为【桃】或【酒】，则你获得之；若不为基本牌，你弃掉该牌并令该伤害+1。',
            jlsg_shiyong_info: '锁定技，当你受到一次红色【杀】或【酒】【杀】造成的伤害后，须减1点体力上限。',
            jlsg_angyang_info: '每当你使用（指定目标后）或被使用（成为目标后）一张【决斗】或红色的【杀】时，你可以摸一张牌，若对方判定区内有牌，你改为摸两张。',
            jlsg_weifeng_info: '准备阶段，若你的手牌数小于你的体力值，你可以与一名角色拼点，赢的角色摸两张牌。',
            jlsg_xieli_info: '主公技，当你需要打出一张拼点牌时，你可请场上吴将帮你出，所有吴将给出牌后，你必须从中挑选一张作为拼点牌并弃掉其余。',
            jlsg_jushou_info: '回合结束阶段，你可以摸(X+1)张牌，最多5张。若如此做，将你的武将牌翻面。X为仅计算攻击范围和距离时，场上可以攻击到你的人数。',
            jlsg_yicong_info: '锁定技，只要你的体力值大于2点，你计算与其他角色的距离时，始终-1；只要你的体力值为2点或更低，其他角色计算与你的距离时，始终+1。',
            jlsg_muma_info: '锁定技，你的回合外，若你没有装备+1/-1马，则其他角色的+1/-1马从装备区失去时，你获得之。',
            jlsg_suiji_info: '其他角色的弃牌阶段开始时，你可以交给其至少一张手牌，然后其将超出其体力值数量的手牌交给你。',
            jlsg_fengyi_info: '当你成为非延时类锦囊牌的唯一目标后，你可以摸一张牌。',
            jlsg_yalv_info: '当你受到伤害后，或出牌阶段开始时，你可以观看牌堆顶两张牌并以任意顺序置于牌堆顶，然后你可以摸一张牌。',
            jlsg_xiemu_info: '一名角色的回合开始阶段开始时，你可以将一张牌置于牌堆顶，若如此做，该角色回合结束阶段开始时，你可以令其摸一张牌。',
            jlsg_zhejie_info: '其他角色的弃牌阶段结束时，你可以弃置一张手牌，令其弃置一张牌，若该角色弃置的牌为装备牌，你将之交给除该角色外的一名角色。',
            jlsg_fengya_info: '每当你受到一次伤害时，你可以摸一张牌，然后伤害来源可以摸一张牌并令此伤害-1。',
            jlsg_yijian_info: '你可以跳过你的出牌阶段并令一名其他角色摸一张牌，然后若该角色的手牌数不小于你的手牌数，你恢复1点体力。',
            jlsg_feijun_info: '锁定技，出牌阶段开始时，若你的手牌数不小于你的体力值，本阶段你的攻击范围+X且可以额外使用一张【杀】（X为你当前体力值）；若你的手牌数小于你的体力值，你不能使用【杀】直到回合结束。',
            jlsg_muniu_info: '你的回合内，当任意角色装备区的牌发生一次变动时，你可以选择一名角色并选择一项： 弃置其一张手牌，或令其摸一张牌。',
            jlsg_liuma_info: '出牌阶段限一次，你可以弃置一张基本牌，然后令至多两名装备区有牌的其他角色依次选择一项：将其装备区的一张牌交给一名其他角色，或令你获得其一张手牌。',
            jlsg_baozheng_info: '锁定技，回合结束阶段开始时，你令其他有手牌的角色依次选择一项：交给你一张手牌；或弃置两张牌，然后对你造成1点伤害。',
            jlsg_lingnu_info: '锁定技，回合结束时，若你于此回合受到2点或更多的伤害，你减1点体力上限，然后从其他角色处依次获得一张牌。',
            jlsg_zhongyong_info: '回合开始阶段开始时，你可以失去1点体力，若如此做，本回合的摸牌阶段，你可以额外摸X张牌（X为你已损失的体力值）；本回合的出牌阶段，你与其他角色的距离为1；本回合的弃牌阶段结束时，你可以令一名其他角色获得你本阶段弃置的牌。',
            jlsg_bozhan_info: '当你使用或被使用一张【杀】并完成结算后，若此【杀】未造成伤害，则此【杀】的目标或你可以对你或此【杀】的使用者使用一张【杀】(无距离限制）。',
            jlsg_qingxi_info: '锁定技，当你使用【杀】指定一名其他角色为目标后，若你装备区的牌数少于该角色，其不能使用【闪】响应此【杀】。',

            jlsg_danshou_info: '锁定技，当一名角色使用【杀】指定你为目标后，若你与其均有手牌，你与该角色拼点，若你赢，你摸两张牌，然后弃置其一张牌；若你没赢，此【杀】不可被【闪】响应。',
            jlsg_yonglie_info: '当你攻击范围内的一名角色受到【杀】造成的伤害后，你可以失去1点体力，然后对伤害来源造成1点伤害。',
            jlsg_hengshi_info: '弃牌阶段开始时，你可以摸等同于手牌数的牌。',
            jlsg_zhijiao_info: '限定技，回合结束阶段开始时，你可以令一名其他角色获得你的本回合因弃置而进入弃牌堆的牌。',
            // jlsg_jiwux_info: '出牌阶段开始时，你可以展示一张【杀】，令其获得以下效果之一（离开手牌区后失效）：1、此【杀】不计入次数限制，且此杀被【闪】响应时你从牌堆中获得一张【杀】；2、此【杀】无距离限制且可以额外指定1个目标；，若此【杀】未造成伤害，你令你手牌中所有【杀】获得随机一项【戟舞】效果；3、此【杀】的伤害值+1,且你使用此【杀】指定目标后，可以弃置一张【杀】令此【杀】结算时视为拥有其余两项【戟舞】效果。',
            jlsg_jiwux_info: '出牌阶段开始时，你可以展示一张【杀】，令其获得以下效果之一（离开手牌区后失效）：1、此【杀】不计入次数限制；2、此【杀】无距离限制，且可以额外指定1个目标；3、此【杀】的伤害值+1。',
            jlsg_daoshi_info: '一名角色的回合结束阶段开始时，若其装备区有牌，其可以摸一张牌，然后将其装备区的一张牌交给你。',
            jlsg_lirang_info: '一名角色的回合开始阶段结束时，其可以将一张与所有「礼」花色均不同的手牌置于你的武将牌上作为「礼」，然后摸一张牌。你可以将两张「礼」当【桃】使用。',
            jlsg_xianshi_info: '每当你受到一次伤害时，可以令伤害来源选择一项：展示所有手牌并弃置其中一张；或令此伤害-1.',
            jlsg_chengxiang_info: '每当你受到伤害后，你可以亮出牌顶堆的4张牌，然后获得其中的至少一张点数和不大于13的牌，将其余的牌置入弃牌堆。',
            jlsg_renxin_info: '每当一名其他角色处于濒死状态时，你可以翻面并将所有手牌交给该角色，令其恢复1点体力。',
            jlsg_midao_info: '出牌阶段限一次，你可以令手牌数大于你的其他角色依次交给你一张牌，然后若你的手牌数为全场最多，你失去1点体力。',
            jlsg_yishe_info: '出牌阶段限一次，你可以与一名手牌数不大于你的其他角色交换手牌。',
            jlsg_pudu_info: '限定技，出牌阶段，你可以获得所有其他角色的手牌，然后依次交给其他角色一张牌，直到你的手牌数不为全场最多。',
            jlsg_zongqing_info: '摸牌阶段开始时，你可以进行一次判定，若如此做，此阶段摸牌后你须展示之，然后弃置其中与该判定牌颜色不同的牌。若以此法弃置的牌为黑色，视为你使用一张【酒】；若以此法弃置的牌为红色，视为你使用一张【桃】。',
            jlsg_bugua_info: '当一名角色将要进行判定时，你可以展示牌堆顶的一张牌，然后选择一项：1.将一张手牌置于牌堆顶，或令其将一张手牌置于牌堆顶。当一名角色的判定牌为红色且生效后，你可以令其摸一张牌：当一名角色的判定牌为黑色且生效后，你可以令其弃一张牌。',
            jlsg_zhaoxin_info: '当你受到伤害后，你可以展示所有手牌，然后摸X张牌（X为缺少的花色数）。',
            jlsg_zhihe_info: '出牌阶段限一次，你可以展示所有手牌，并将其中每种花色的牌弃置至一张，然后将手牌数翻倍。',
            jlsg_caijie_info: '其他角色的回合开始阶段开始时，若其手牌数不小于你，你可以与其拼点，若你赢，你摸两张牌；若你没赢，视为其对你使用一张【杀】。',
            jlsg_jilei_info: '当你受到伤害后，你可以令伤害来源展示所有手牌并弃置其中类别相同且最多（或之一）的所有牌。',
            jlsg_yanliang_info: '一名角色的回合开始阶段开始时，你可以弃置一张红色牌，令其本回合的摸牌阶段改为在出牌阶段后进行；或弃置一张黑色牌，令其本回合的摸牌阶段改为在弃牌阶段后进行。',
            jlsg_duzhi_info: '当你恢复体力后，你可以令一名其他角色失去X点体力，然后该角色可以对你使用一张【杀】；当你使用红色【杀】造成伤害后，你可以令至多X名其他角色失去1点体力，然后这些角色可以依次对你使用一张【杀】（X为当前体力的改变值）。',
            jlsg_lieyi_info: '锁定技，你的【桃】均视为【杀】；你的【闪】均视为【酒】。',
            jlsg_baoli_info: '出牌阶段限一次，你可以对一名装备区没有牌或判定区有牌的其他角色造成1点伤害。',
            jlsg_huanbing_info: '锁定技，当你成为【杀】的目标时，终止此【杀】的结算，改为将之置于你的武将牌上。回合开始阶段开始时，你须为你武将牌上的每一张【杀】进行一次判定：若结果为红色，你摸一张牌；若结果为黑色，你须失去1点体力。然后将【杀】收入手牌。',
            // jlsg_hongyuan_info: '出牌阶段限一次，你可以弃置两张手牌，将一名角色装备区的牌移动到另一名其他角色对应的区域（不可覆盖）。',
            jlsg_hongyuan_info: '出牌阶段限一次，你可以弃置至多X张手牌，然后选择一名角色获得场上的X张牌（X为你已损失的体力值）。',
            jlsg_huaqiang_info: '出牌阶段限一次，你可以弃置X种不同花色的手牌，然后对一名其他角色造成1点伤害（X为你的体力值且至多为4）。',
            // jlsg_chaohuang_info: '出牌阶段限一次，你可以失去1点体力，然后视为对你攻击范围内的任意名角色依次使用一张【杀】（不计入出牌阶段的使用限制）。',
            jlsg_chaohuang_info: '出牌阶段限一次，你可以失去1点体力视为使用一张【杀】，（不计入出牌阶段的使用限制）指定你攻击范围内的任意名角色为目标。',
            jlsg_huilian_info: '出牌阶段限一次，你可以令一名其他角色进行一次判定并获得生效后的判定牌。若结果为红桃，该角色恢复1点体力。',
            jlsg_wenliang_info: '一名角色的红色判定牌生效后，你可以摸一张牌。',
            jlsg_qianhuan_info: '锁定技，你的每个回合开始时，随机展示3张未上场且你拥有的武将，你获得其中的2个技能（主公技，限定技，觉醒技，隐匿技，使命技，带有Charlotte标签的技能除外），直到你的下个回合开始。若该局游戏为双将模式，则移除你的另一名武将，将“2个”改为“4个”。',
            jlsg_jinglun_info: '你响应其他角色的牌，或其他角色响应你的牌时，你可以获得其使用或响应的牌。每回合限一次。',
            jlsg_ruzong_info: '你可以将【闪】/【无懈可击】当【无懈可击】/【闪】使用或打出。',
            jlsg_leiji_info: '当其他角色使用【闪】时，你可以将牌堆或弃牌堆里的一张【闪电】置入一名角色的判定区。',
            jlsg_shanxi_info: '锁定技，你不能成为【闪电】的目标，其他角色的【闪电】的判定牌生效后，你获得之。',
            jlsg_guhuo_info: '其他角色的回合开始时，你可以与其拼点：若你赢，你视为使用一张基本牌或非延时锦囊牌；若你没赢，其对你造成1点伤害。',
            jlsg_fulu_info: '当你受到一点伤害后，你可以令最近三名对你造成伤害的角色随机弃置一张牌，你最近三次回复体力的来源（若有）各摸一张牌。',
            jlsg_guixiu_info: '若你于此回合内未造成过伤害，你可以跳过弃牌阶段并摸一张牌。',
            jlsg_cunsi_info: '当你死亡时，你可以将区域内的所有牌移出游戏，然后令一名角色获得〖勇决〗',
            jlsg_yongjue_info: '锁定技，你使用【杀】造成的伤害+1；你杀死一名角色后，你获得所有〖存嗣〗移出游戏的牌。',
            jlsg_gongshen_info: '出牌阶段，你可以弃置3张牌，然后摸一张牌，若此时你的手牌数为最少（或之一），你恢复1点体力。',
            jlsg_jianyue_info: '一名角色的回合结束阶段开始时，若该角色的手牌数为最少（或之一），你可以令其从弃牌堆随机获得牌直到其手牌数不为最少（或之一）。',
            jlsgsk_simashi: "SK司马师",
            jlsgsk_xianglang: "SK向朗",
            jlsgsk_luji: "SK陆绩",
            jlsgsk_bianfuren: "SK卞夫人",
            jlsgsk_heqi: "SK贺齐",
            jlsgsk_mateng: "SK马腾",
            jlsgsk_tianfeng: "SK田丰",
            jlsgsk_feiyi: "SK费祎",
            jlsgsk_jiangqin: "SK蒋钦",
            jlsgsk_dongyun: "SK董允",
            jlsgsk_dongxi: "SK董袭",
            jlsgsk_quancong: "SK全琮",
            jlsgsk_yujin: "SK于禁",
            jlsgsk_panfeng: "SK潘凤",
            jlsg_quanlue: "权略",
            jlsg_quanlue_info: "出牌阶段开始时，你可以展示所有手牌并选择其中一种花色的手牌，然后摸与之等量的牌。若如此做，此阶段结束时，你须展示手牌并弃置所有此花色的手牌。",
            jlsg_huaiju: "怀橘",
            jlsg_huntian: "浑天",
            jlsg_huaiju_info: "你的一个阶段结束时，若你的手牌数为3，你可以摸一张牌或弃置两张牌。",
            jlsg_huntian_info: "当你的牌因弃置而进入弃牌堆时，你可将其中任意张置于牌堆顶，然后从牌堆随机获得一张与这些牌类别均不同的牌。",
            jlsg_cangshu: "藏书",
            jlsg_kanwu: "勘误",
            jlsg_kanwu_shan: "勘误",

            jlsg_cangshu_info: "当其他角色使用非延时类锦囊牌时，你可以交给其一张基本牌，然后获得此牌并令其无效。每回合限一次。",
            jlsg_kanwu_info: "当你于回合外需要使用或打出一张基本牌时，你可以弃置一张锦囊牌，视为使用或打出之。",
            jlsg_huage: "化戈",
            jlsg_muyi: "母仪",
            jlsg_huage_info: "出牌阶段限一次，你可以令所有角色依次弃置至少一张牌，目标角色每弃置一张【杀】则摸一张牌。",
            jlsg_muyi_info: "其他角色的回合开始阶段开始时，其可以交给你一至两张牌，然后此回合结束时，你交给其等量的牌。",
            jlsg_diezhang: "迭嶂",
            jlsg_diezhang_info: "出牌阶段，当你使用牌时，若此牌的点数大于本回合你上一张使用的牌，你可以摸一张牌。",
            jlsg_xiongyi: "雄异",
            jlsg_xiongyi_info: "锁定技，准备阶段，若你的体力值为1，你恢复1点体力；若你没有手牌，你摸两张牌。",
            jlsg_sijian: "死谏",
            jlsg_gangzhi: "刚直",
            jlsg_gangzhi2: "刚直",
            jlsg_sijian_info: "当你失去所有手牌后，你可以弃置一名其他角色的X张牌(X为你的体力值)。",
            jlsg_gangzhi_info: "当你受到伤害时，若你有手牌，你可以弃置所有手牌，然后防止此伤害，若你没有手牌，你可以将武将牌翻面，然后将手牌数补至体力上限。",
            jlsg_yanxi: "衍息",
            jlsg_zhige: "止戈",
            jlsg_zhige_3: "止戈·闪",
            jlsg_zhige_4: "止戈·杀",
            jlsg_yanxi_info: "回合开始阶段开始时或回合结束阶段开始时，若你的装备区内没有牌，你可以摸一张牌。",
            jlsg_zhige_info: "你可以弃置你装备区内的所有牌(至少一张)，视为使用一张【杀】或【闪】。",
            jlsg_shangyi: "尚义",
            jlsg_wangsi: "忘私",
            jlsg_shangyi_info: "出牌阶段限一次，你可以令一名其他角色观看你的手牌，然后你选择一项：观看其手牌，并可以弃置其中一张黑色牌；或观看其身份牌。",
            jlsg_wangsi_info: "当你受到伤害后，你可以观看伤害来源的手牌，并可以弃置其中一张红色牌。",
            jlsg_bibu: "裨补",
            jlsg_bibu1: "裨补",
            jlsg_kuangzheng: "匡正",
            jlsg_bibu_info: "其他角色的结束阶段，若你的手牌数大于体力值，你可以将一张手牌交给一名其他角色；否则你可以摸一张牌。",
            jlsg_kuangzheng_info: "你的回合结束时，你可以将一名角色的武将牌恢复至游戏开始时的状态（即将其武将牌翻转至正面朝上并重置之）。",
            jlsg_duanlan: "断缆",
            jlsg_duanlan_info: "出牌阶段限一次，你可以弃置其他角色区域内的1至3张牌，然后选择一项： 1、失去1点体力;2、弃置一张大于这些牌点数之和的牌。",
            jlsg_yaoming: "邀名",
            jlsg_yaoming_1: "邀名",
            jlsg_yaoming_2: "邀名",
            jlsg_yaoming_3: "邀名",
            jlsg_yaoming_4: "邀名",
            jlsg_yaoming_info: "出牌阶段，当你使用或打出一张花色与本阶段皆不相同的牌时：第一种，你可以摸一张牌；第二种，你可以弃置一名其他角色的一张牌；第三种，你可以将场上一张牌移至另一位置；第四种，你可以对一名其他角色造成一点伤害。",
            jlsg_yaoming_3_info: "你可以移动场上的一张牌",
            jlsg_zhengyi: "整毅",
            jlsg_zhengyi_shan: "整毅",
            jlsg_zhengyi_info: "你出牌阶段出牌时，若你的手牌数等于你的体力值+1，你可以视为使用任意一张基本牌，然后弃一张牌；你的回合外，当你需要使用或打出一张基本牌时，若你的手牌数等于你的体力值-1，则你可以摸一张牌并视为使用或打出了此牌。",
            jlsg_kuangfu: "狂斧",
            jlsg_kuangfu_info: "当你使用【杀】对目标角色造成伤害后，你可以获得其装备区里的一张牌。",
            jlsg_hubu: "虎步",
            jlsg_hubu_info: '你每使用【杀】造成一次伤害后或受到一次其他角色使用【杀】造成的伤害后，可以令除你外的任意角色进行一次判定；若结果不为黑桃，则视为你对其使用一张【决斗】（此【决斗】不能被【无懈可击】响应）。',

            jlsgsk_qinmi: "SK秦宓",
            jlsgsk_xingdaorong: "SK邢道荣",
            jlsgsk_zhouyi: "SK周夷",
            jlsgsk_guohuai: "SK郭淮",
            jlsgsk_huangchengyan: "SK黄承彦",
            jlsgsk_lvkai: "SK吕凯",
            jlsg_jianzheng: "谏征",
            jlsg_jianzheng_info: "当其他角色使用基本牌或非延时锦囊牌指定目标时，你可以与其拼点：当你赢后，你可以修改此牌的结算目标；当你没赢后，你也成为此牌的目标且此技能于本回合内无效。",
            jlsg_tianbian: "天辩",
            jlsg_tianbian_info: "当你需要拼点或于回合外需要使用/打出基本牌时，你可以观看牌堆顶的三张牌，然后可以将其中一张用作拼点牌或使用/打出。",
            jlsg_tianbian_hs: "invisible",
            jlsg_xuhe: "虚猲",
            jlsg_xuhe_info: "锁定技，若你未受伤，你使用的牌不能被其他角色响应；若你已受伤，你不能响应其他角色对你使用的牌。每回合限一次，一张牌结算后，若你因此牌触发过此技能，你可以摸X张牌（X为触发此技能的牌的目标数）。",
            jlsg_zhukou: "逐寇",
            jlsg_zhukou_info: "任意角色的出牌阶段结束时，你可以依次选择一名其他角色至多X次，对这些角色依次造成1点伤害（X为你于本阶段内使用过的牌的类型数）。",
            jlsg_duannian: "断念",
            jlsg_duannian_info: "任意角色的出牌阶段开始时，你可以弃置所有手牌并摸等量的牌，然后选择一项1．使用一张牌；2．回复1点体力。",
            jlsg_jingce: "精策",
            jlsg_jingce_info: "出牌阶段限一次，当你于本阶段内使用过的牌数等于你的使用【杀】的次数上限、摸牌数或体力上限时，你可以令此项数值+1，然后摸两张牌。",
            jlsg_guanxu: "观虚",
            jlsg_guanxu_info: "任意角色的回合开始时，你可以观看其手牌，然后你可以。。。",
            jlsg_yashi: "雅士",
            jlsg_yashi_info: "当你受到1点伤害后，你可以摸两张牌，然后若你拥有“观虚”，你可以重置之，否则你可以获得之。",
            jlsg_tunan: "图南",
            jlsg_tunan_info: "任意角色的出牌阶段开始时，你可以令其视为对其下家使用一张无距离限制和不计入次数的【杀】或【顺手牵羊】。",
            jlsg_bijing: "闭境",
            jlsg_bijing_info: "当你称为其他角色使用【杀】或非延时锦囊牌的目标后，你可以弃置其两张牌，然后弃置一张牌，若这些牌颜色均相同，并令其对你使用的牌无效。",
            jlsgsk_zhugedan: "SK诸葛诞",
            jlsg_gongao: "功獒",
            jlsg_gongao_info: "锁定技，每回合每名角色限一次，当其他角色进入濒死状态时，你加1点体力上限并回复1点体力。",
            jlsg_juyi: "举义",
            jlsg_juyi_info: "准备阶段，你可以减1点体力上限，令你的摸牌数、手牌上限、攻击范围和使用【杀】的次数上限+1。",
            jlsg_weizhong: "威重",
            jlsg_weizhong_info: "锁定技，当你加或减体力上限后，你摸两张牌。当你进入濒死状态时，若你是本局第一个且第一次进入濒死状态的角色，你回复体力至体力上限。",
          },
          dynamicTranslate: {
            jlsg_zhidi: function (player) {
              var flags = player?.storage?.jlsg_zhidi || [false, false, false, false];
              var cnt = flags.reduce((a, b) => a + b);
              var result = '锁定技，准备阶段，你随机获得以下一项你还未获得的效果：';
              var effects = [
                `1.你使用【杀】造成伤害后，你摸一张牌；`,
                `2.你使用【杀】无视防具且不能被【闪】相应；`,
                `3.你使用【杀】无距离限制且次数上限+X；`,
                `4.你使用【杀】可以额外指定X个目标`,
              ];
              for (var i = 0; i != 4; ++i) {
                if (flags[i]) {
                  result += `<span class="bluetext">${effects[i]}</span>`
                } else {
                  result += effects[i];
                }
              }
              result += `（X为你以此法获得的效果数<span class="legendtext">(${cnt})</span>）`;
              return result;
            },
            jlsg_tiandao(player) {
              let storage = player?.storage?.jlsg_tiandao || [1, 1, 1, 1];
              return `锁定技，回合开始阶段，你摸${storage[0]}张牌，随机获得${storage[1]}个群势力技能，然后可以选择一名角色，令其随机弃置${storage[2]}张牌，对其造成${storage[3]}点雷电伤害。`;
            },
            jlsg_guolun(player) {
              switch (player?.storage?.jlsg_guolun) {
                case 3:
                  return lib.translate['jlsg_guolun4_info'];
                case 2:
                  return lib.translate['jlsg_guolun3_info'];
                case 1:
                  return lib.translate['jlsg_guolun2_info'];
                default:
                  return lib.translate['jlsg_guolun_info'];
              }
            },

            jlsg_guanxu: function (player) {
              if (!player.storage.jlsg_guanxu && player.storage.jlsg_guanxu != 0) return "任意角色的回合开始时，你可以观看其手牌，然后你可以。。。";
              let map = new Map([
                [0, "获得其中至多X张牌（X为其体力）。"],
                [1, "弃置其中一张牌，令其加1点体力上限并回复1点体力。"],
                [2, "弃置其中点数最大的牌，选择其一个技能于本回合内无效。"],
                [3, "弃置其中点数最小的牌，令其发现一个你拥有的技能。"],
                [4, "弃置其中花色相同且数量最少的所有牌，若这些牌为黑色，你令其减1点体力上限。"],
                [5, "弃置其中花色相同且数量最多的所有牌，令其摸等同于弃牌数双倍的牌。"],
                [6, `将其中一张牌交给另一名角色，视为后者对前者使用"杀"。`],
                [7, `将其中一张牌置于牌堆顶，令其进行"闪电"判定。`],
              ]);
              return "任意角色的回合开始时，你可以观看其手牌，然后你可以" + map.get(player.storage.jlsg_guanxu);
            },
          },
        };
        lib.namePrefix.set('极略★SK', {
          getSpan(prefix, name) {
            return `${get.prefixSpan('★SP', name)}${get.prefixSpan('极略SK', name)}`;
          }
        });
        postProcessPack(jlsg_sk);
        return jlsg_sk;
      });
      game.import('character', function () { // 皮肤武将
        var jlsg_skpf = {
          name: 'jlsg_skpf',
          connect: true,
          character: {
            jlsgsk_jdjg_sunshangxiang: ["female", 'wu', 3, ["jlsg_jieyin", "jlsg_xiaoji"], []],
            jlsgsk_syqj_guanyu: ["male", 'shu', 4, ["jlsg_syqj_wusheng"], []],
            jlsgsk_sslh_zhenji: ["female", 'wei', 3, ["jlsg_sslh_luoshen", "jlsg_sslh_qingguo"], []],
            jlsgsk_spwq_lvbu: ["male", 'qun', 4, ["jlsg_spwq_wushuang"], []],
            jlsgsk_smdq_diaochan: ["female", "qun", 3, ["jlsg_smdq_lijian", "jlsg_smdq_biyue"], []],
          },
          characterTitle: {
            jlsgsk_jdjg_sunshangxiang: '绝代巾帼',
            jlsgsk_syqj_guanyu: '水淹七军',
            jlsgsk_sslh_zhenji: '似水莲华',
            jlsgsk_spwq_lvbu: '杀破万千',
            jlsgsk_smdq_diaochan: "水墨丹青",
          },
          skill: {
            jlsg_jieyin: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filterCard: true,
              usable: 1,
              position: 'he',
              filter: function (event, player) {
                return player.countCards('he') > 0;
              },
              check: function (card) {
                var player = _status.event.player;
                if (get.position(card) == 'e') {
                  var subtype = get.subtype(card);
                  if (player.countCards('h', { subtype: subtype })) return 20 - get.value(card);
                  return 10 - get.value(card);
                }
                else {
                  if (player.countCards('e')) return 0;
                  if (player.countCards('h', { type: 'equip' })) return 0;
                  return 8 - get.value(card);
                }
              },
              filterTarget: lib.filter.notMe,
              delay: false,
              content() {
                'step 0'
                event.targets = [player, target].sortBySeat();
                event.drawn = event.targets.filter(p => p.isHealthy());
                event.drawn.forEach(p => p.draw(2, player));
                'step 1'
                event.targets
                  .filter(p => p.isDamaged())
                  .forEach(p => p.recover(player));
                if (event.drawn.length) {
                  event.finish();
                }
                'step 2'
                var stat = player.getStat().skill;
                delete stat.jlsg_jieyin;
              },
              ai: {
                threaten: 1,
              }
            },
            jlsg_xiaoji: {
              audio: "ext:极略:2",
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              direct: true,
              filter: function (event, player) {
                var evt = event.getl(player);
                return evt && evt.player == player && evt.es && evt.es.length > 0;
              },
              content: function () {
                "step 0"
                event.cards = trigger.getl(player).es;
                "step 1"
                event.card = event.cards.shift();
                if (!event.card) {
                  event.finish();
                  return;
                }
                player.chooseBool(get.prompt2(event.name), true).set('frequentSkill', 'jlsg_xiaoji');
                "step 2"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                player.draw();
                switch (get.subtype(event.card)) {
                  case 'equip1':
                    player.chooseTarget(function (card, player, target) {
                      return target != player;
                    }).set('ai', function (target) {
                      return get.damageEffect(target, _status.event.player, _status.event.player);
                    }).set('source', target)
                      .set('prompt2', '对其造成1点伤害');
                    break;
                  case 'equip2':
                  case 'equip5':
                    player.chooseBool('是否摸两张牌？', true).set('frequentSkill', 'jlsg_xiaoji');
                    break;
                  case 'equip3':
                  case 'equip4':
                    player.chooseTarget(function (card, player, target) {
                      if (player == target) return false;
                      return target.countDiscardableCards(player, 'he');
                    }).set('ai', function (target) {
                      return -get.attitude(_status.event.player, target);
                    }).set('prompt2', '弃置一名其他角色的一张牌');
                    break;
                  default:
                    break;
                }
                "step 3"
                if (result.bool) {
                  switch (get.subtype(event.card)) {
                    case 'equip1':
                      result.targets[0].damage();
                      break;
                    case 'equip2':
                    case 'equip5':
                      player.draw(2);
                      break;
                    case 'equip3':
                    case 'equip4':
                      player.discardPlayerCard(result.targets[0], 'he', true);
                      player.chooseTarget(function (card, player, target) {
                        if (player == target) return false;
                        return target.countDiscardableCards(player, 'he');
                      }).set('ai', function (target) {
                        return -get.attitude(_status.event.player, target);
                      }).set('prompt2', '弃置一名其他角色的一张牌');
                      return;
                      break;
                    default:
                      break;
                  }
                }
                event.goto(1);
                "step 4"
                if (result.bool) {
                  player.discardPlayerCard(result.targets[0], 'he', true);
                }
                event.goto(1);
              },
              ai: {
                noe: true,
                reverseEquip: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                  }
                }
              }
            },
            jlsg_syqj_wusheng: {
              audio: "ext:极略:2",
              enable: ['chooseToRespond', 'chooseToUse'],
              filterCard: function (card, player) {
                return get.color(card) == 'red';
              },
              position: 'hes',
              viewAs: {
                name: 'sha',
              },
              viewAsFilter: function (player) {
                return player.countCards('hes', { color: 'red' }) != 0;
              },
              prompt: '将一张红色牌当杀使用或打出',
              check: function (card) {
                var val = get.value(card);
                if (_status.event.name == 'chooseToRespond') return 1 / Math.max(0.1, val);
                return 7 - val;
              },
              group: 'jlsg_syqj_wusheng2',
              ai: {
                skillTagFilter: function (player) {
                  if (!player.countCards('hes', { color: 'red' })) return false;
                },
                respondSha: true,
              }
            },
            jlsg_syqj_wusheng2: {
              sourceSkill: "jlsg_syqj_wusheng",
              audio: false,
              trigger: { player: 'useCardToPlayered' },
              filter(event, player) {
                return event.card.name == "sha" && event.skill === 'jlsg_syqj_wusheng' && event.isFirstTarget;
              },
              silent: true,
              frequent: true,
              content() {
                'step 0'
                player.draw();
                'step 1'
                player.chooseToDiscard(`###${get.prompt(event.name, trigger.targets)}###弃置一~三张手牌，然后目标弃置等量的牌`, [1, 3])
                  .set('ai', card => 9 - get.value(card) - (get.color(card) == 'red' ? 1 : 0) - 2 * ui.selected.cards.length + Math.random());
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.cnt = result.cards.length;
                trigger.targets.slice().sortBySeat().forEach(p => p.chooseToDiscard('he', true, event.cnt));
                trigger.getParent().baseDamage += event.cnt;
                player.addTempSkill('jlsg_syqj_wusheng_buff', ['phaseChange', 'phaseAfter']);
                player.addMark('jlsg_syqj_wusheng_buff', event.cnt);
              },
            },
            jlsg_syqj_wusheng_buff: {
              onremove(player) {
                player.removeMark('jlsg_syqj_wusheng_buff', Infinity);
              },
              mod: {
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha') return num + player.countMark('jlsg_syqj_wusheng_buff');
                },
              },
            },
            jlsg_sslh_luoshen: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              frequent: true,
              content: function () {
                "step 0"
                event.cards = [];
                "step 1"
                var next = player.judge(function (card) {
                  var evt = _status.event.getParent('jlsg_sslh_luoshen');
                  if (!evt) {
                    return 0;
                  }
                  if (evt.cards.some(c => get.number(c) == get.number(card))) return -1.5;
                  return 1.5;
                });
                next.judge2 = function (result) {
                  return result.bool;
                };
                if (get.mode() != 'guozhan' && !player.hasSkillTag('rejudge')) next.set('callback', function () {
                  if (get.position(card, true) == 'o') {

                    player.gain(card, false);
                    player.$gain2(card);
                    game.delayx(0.5);
                  }
                });
                else next.set('callback', function () {
                  event.getParent().orderingCards.remove(card);
                });
                "step 2"
                if (result.bool) {
                  event.cards.push(result.card);
                  player.chooseBool('是否再次发动【洛神】？').set('frequentSkill', 'jlsg_sslh_luoshen');
                }
                else {
                  let number = get.number(event.cards[event.cards.length - 1]);
                  if (number) {
                    player.addTempSkill('jlsg_sslh_luoshen_hand');
                    player.storage.jlsg_sslh_luoshen_hand =
                      (player.storage.jlsg_sslh_luoshen_hand || 0) + number;
                  }
                  event.cards = event.cards.filter(c => get.position(c, true) == 'o');
                  if (event.cards.length) {
                    player.gain(event.cards, 'gain2');
                  }
                  event.finish();
                }
                "step 3"
                if (result.bool) {
                  event.goto(1);
                }
                else {
                  event.cards = event.cards.filter(c => get.position(c, true) == 'o');
                  if (event.cards.length) {
                    player.gain(event.cards, 'gain2');
                  }
                }
              },
              subSkill: {
                hand: {
                  onremove: true,
                  mod: {
                    maxHandcard: function (player, num) {
                      return num + player.storage.jlsg_sslh_luoshen_hand;
                    }
                  },
                },
              },
            },
            jlsg_sslh_qingguo: {
              audio: "ext:极略:2",
              filter: function (event, player) {
                return event.player != player && event.card && (event.card.name == 'sha' || get.type(event.card) == 'trick');
              },
              trigger: { target: 'useCardToTargeted' },
              direct: true,
              locked: false,
              content() {
                'step 0'
                player.chooseToDiscard('h', get.prompt2(event.name, trigger.player), c => get.color(c) == 'black')
                  .set('ai', c => {
                    let player = _status.event.player;
                    let eff = 2.5 * get.effect(player, _status.event.card, _status.event.target, player)
                    let eff2 = 0;
                    if (get.suit(card) == 'spade') {
                      eff2 = jlsg.getLoseHpEffect(_status.event.target) * get.attitude(player, _status.event.target) / 6;
                    }
                    return eff + eff2 - get.value(c);
                  })
                  .set('card', trigger.card)
                  .set('target', trigger.player);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                trigger.getParent().excluded.add(player);
                if (get.suit(result.cards[0]) != 'spade') {
                  event.finish();
                  return;
                }
                player.chooseBool(`是否令${get.translation(trigger.player)}失去1点体力？`, get.attitude(player, trigger.player) < 0);
                'step 2'
                if (result.bool) {
                  trigger.player.loseHp();
                  if (trigger.player.ai.shown > player.ai.shown) {
                    player.addExpose(0.3);
                  }
                }
              },
              mod: {
                aiValue: function (player, card, num) {
                  if (get.name(card) != 'shan' && get.color(card) != 'black') return;
                  var cards = player.getCards('hs', function (card) {
                    return get.name(card) == 'shan' || get.color(card) == 'black';
                  });
                  cards.sort(function (a, b) {
                    return (get.name(b) == 'shan' ? 1 : 2) - (get.name(a) == 'shan' ? 1 : 2);
                  });
                  var geti = function () {
                    if (cards.includes(card)) {
                      return cards.indexOf(card);
                    }
                    return cards.length;
                  };
                  if (get.name(card) == 'shan') return Math.min(num, [6, 4, 3][Math.min(geti(), 2)]) * 0.6;
                  return Math.max(num, [6.5, 4, 3][Math.min(geti(), 2)]);
                },
                aiUseful: function () {
                  return lib.skill.jlsg_sslh_qingguo.mod.aiValue.apply(this, arguments);
                },
              },
            },
            jlsg_spwq_wushuang: {
              audio: "ext:极略:2",
              mod: {
                cardUsable(card, player, num) {
                  if (_status.event.skill == "jlsg_spwq_wushuang") return Infinity;
                  if (card && card.storage?.jlsg_spwq_wushuang) return Infinity;
                },
                targetInRange: function () {
                  if (_status.event.skill == "jlsg_spwq_wushuang") return true;
                },
              },
              onChooseToUse(event) {
                if (game.online || event.jlsg_spwq_wushuang) return;
                let bool = true,
                  num = event.player.getHistory("useCard", evt => {
                    if (evt.skill != "jlsg_spwq_wushuang") return false;
                    return evt.card.storage?.jlsg_spwq_wushuang_double;
                  }).length,
                  history = event.player.getHistory("useSkill", evt => {
                    if (evt.skill != "jlsg_spwq_wushuang") return false;
                    return !evt.targets;
                  }).length;
                if (history > num) bool = false;
                event.set("jlsg_spwq_wushuang", bool);
              },
              enable: "chooseToUse",
              filter(event, player) {
                let check = event.jlsg_spwq_wushuang;
                if (!check) return false;
                if (!player.countCards("h")) return false;
                let vcard = get.autoViewAs({ name: "sha", isCard: true, storage: { jlsg_spwq_wushuang: true }, cards: [] }, []);
                return event.filterCard(vcard, player, event);
              },
              hiddenCard(name, player) {
                if (name == "sha") return player.countCards("h");
              },
              position: "h",
              filterCard: true,
              selectCard: -1,
              prompt: "无双：是否弃置所有手牌并摸等量张牌，视为使用【杀】？",
              viewAsFilter: function (player) {
                if (!player.countCards('h')) return false;
                let num = player.getHistory("useCard", evt => {
                  if (evt.skill != "jlsg_spwq_wushuang") return false;
                  return evt.card.storage.jlsg_spwq_wushuang_double;
                }).length,
                  history = player.getHistory("useSkill", evt => {
                    if (evt.skill != "jlsg_spwq_wushuang") return false;
                    return !evt.targets;
                  });
                return history.length < num;
              },
              viewAs(cards, player) {
                return {
                  name: "sha",
                  isCard: true,
                  storage: { jlsg_spwq_wushuang: true },
                  cards: [],
                }
              },
              discard: false,
              lose: false,
              log: false,
              locked: false,
              onuse(event, player) {
                let hs = player.getCards("h");
                player.logSkill("jlsg_spwq_wushuang");
                player.discard(hs);
                if (hs.some(i => get.subtype(i) == "equip1")) event.card.storage.jlsg_spwq_wushuang_double = true;
                if (player.isIn()) player.draw(hs.length);
              },
              group: ["jlsg_spwq_wushuang_useCardTo", "jlsg_spwq_wushuang_damage"],
              subSkill: {
                useCardTo: {
                  trigger: { player: "useCardToPlayered" },
                  filter(event, player, name, target) {
                    if (!target || !target.isIn() || event.getParent().excluded.includes(target)) return false;
                    return event.card.name == "sha" && event.card.storage?.jlsg_spwq_wushuang;
                  },
                  getIndex: (event) => event.targets,
                  async cost(event, trigger, player) {
                    const target = event.indexedData;
                    if (!target.isIn()) return;
                    event.result = {
                      bool: true,
                      targets: [target],
                    }
                    if (trigger.card.storage.jlsg_spwq_wushuang_double) event.result.cost_data = [0, 1];
                    else {
                      const { result } = await player.chooseButton(true, [
                        get.prompt("jlsg_spwq_wushuang"),
                        [
                          [
                            [0, `将${get.translation(target)}区域里所有牌于本回合内移出游戏`],
                            [1, `令${get.translation(target)}所有技能本回合无效`],
                          ],
                          "textbutton",
                        ],
                      ])
                        .set("target", target)
                        .set("ai", button => {
                          const player = get.player(),
                            target = get.event("target");
                          if (get.attitude(player, target) < 1) {
                            if (get.effect(target, { name: "sha", isCard: true, cards: [] }, player, target) > target.countCards("hej")) return button.link == 1;
                            else return button.link == 0;
                          }
                          else return 1;
                        });
                      if (result.bool && result.links) event.result.cost_data = result.links;
                    }
                  },
                  async content(event, trigger, player) {
                    if (!trigger.parent.jlsg_spwq_wushuang_damage) {
                      trigger.parent.jlsg_spwq_wushuang_damage = true;
                      trigger.parent.baseDamage *= 2;
                      trigger.parent.extraDamage *= 2;
                    }
                    const target = event.targets[0];
                    if (event.cost_data.includes(0) && target.countCards("hej")) {
                      target.addTempSkill("jlsg_spwq_wushuang_lose");
                      await target.addToExpansion("log", "giveAuto", target.getCards("hej"), target)
                        .set("gaintag", ["jlsg_spwq_wushuang"]);
                    }
                    if (event.cost_data.includes(1)) target.addTempSkill("baiban");
                  },
                },
                lose: {
                  forced: true,
                  popup: false,
                  charlotte: true,
                  onremove: function (player) {
                    let cards = player.getExpansions("jlsg_spwq_wushuang");
                    if (cards.length) {
                      player.gain(cards, "draw");
                      game.log(player, "收回了" + get.cnNumber(cards.length) + "张“无双”牌");
                    }
                  },
                  mark: true,
                  intro: {
                    markcount: "expansion",
                    mark: function (dialog, storage, player) {
                      var cards = player.getExpansions("jlsg_spwq_wushuang");
                      if (player.isUnderControl() || player == game.me) dialog.addAuto(cards);
                      else return "共有" + get.cnNumber(cards.length) + "张牌";
                    },
                  },
                },
              },
              ai: {
                respondSha: true,
                skillTagFilter: function (player) {
                  return !!lib.skill.jlsg_spwq_wushuang.viewAsFilter(player);
                },
                order: function (item, player) {
                  return get.order({ name: "sha" }, player) - 0.1;
                },
                result: {
                  target: function (player, target) {
                    if (!target) return;
                    var cards = player.getCards("h").slice(0);
                    var names = [];
                    for (var i of cards) names.add(i.name);
                    if (names.length < player.hp) return 0;
                    if (player.hasUnknown() && (player.identity != "fan" || !target.isZhu)) return 0;
                    if (get.attitude(player, target) >= 0) return -20;
                    return lib.card.sha.ai.result.target.apply(this, arguments);
                  },
                },
                basic: {
                  useful: [5, 3, 1],
                  value: [5, 3, 1],
                },
                tag: {
                  respond: 1,
                  respondShan: 1,
                  damage: function (card) {
                    if (game.hasNature(card, "poison")) return;
                    return 2;
                  },
                  natureDamage: function (card) {
                    if (game.hasNature(card, "linked")) return 2;
                  },
                  fireDamage: function (card, nature) {
                    if (game.hasNature(card, "fire")) return 2;
                  },
                  thunderDamage: function (card, nature) {
                    if (game.hasNature(card, "thunder")) return 2;
                  },
                  poisonDamage: function (card, nature) {
                    if (game.hasNature(card, "poison")) return 2;
                  },
                },
              },
            },
            //貂蝉（水墨丹青）
            jlsg_smdq_lijian: {
              audio: "ext:极略:2",
              multitarget: true,
              complexCard: true,
              discard: false,
              enable: ["phaseUse", "chooseToRespond"],
              filter(event, player) {
                let juedou = get.autoViewAs({ name: "juedou", isCard: true }, []);
                if (event.type == "phase") {
                  if (player.hasSkill("jlsg_smdq_lijian_used")) return false;
                  return game.hasPlayer(cur => cur.hasUseTarget(juedou));
                }
                else if (event.getParent().name == "juedou") {
                  if (!player.countCards("h", card => {
                    const mod2 = game.checkMod(card, player, "unchanged", "cardEnabled2", player);
                    return mod2 !== false;
                  })) return false;
                  return event.filterCard(get.autoViewAs({ name: "sha", isCard: false }, "unsure"), player, event);
                }
                return false;
              },
              selectTarget() {
                if (_status.event.type == "phase") return [2, 2];
                return [0, 0];
              },
              filterTarget(card, player, target) {
                let juedou = get.autoViewAs({ name: "juedou", isCard: true }, []);
                if (!ui.selected.targets.length) return target.hasUseTarget(juedou);
                return target.canUse(juedou, ui.selected.targets[0]);
              },
              targetprompt: ["先决斗", "后决斗"],
              selectCard() {
                if (_status.event.type == "phase") return [0, 0];
                return [1, 1];
              },
              filterCard(card, player, event) {
                const mod2 = game.checkMod(card, player, "unchanged", "cardEnabled2", player);
                return mod2 !== false;
              },
              check(card) {
                return 10 - get.value(card);
              },
              prompt() {
                const event = _status.event;
                if (event.type == "phase") return "离间：出牌阶段限一次，你可以令两名角色依次对对方使用决斗（不能被【无懈可击】响应），直到其中一名角色进入濒死或以此法没有造成伤害";
                return "离间：将任意手牌当【杀】打出响应【决斗】";
              },
              async content(event, trigger, player) {
                const evt = event.getParent(2);
                if (evt.type == "phase") {
                  player.addTempSkill("jlsg_smdq_lijian_used", "phaseUseAfter");
                  let turn = event.targets[0],
                    other = event.targets[1];
                  const card = get.autoViewAs({ name: "juedou", isCard: true, storage: { jlsg_smdq_lijian: true } }, []);
                  player.storage.jlsg_smdq_lijian_dying = true;
                  player.when({ global: "dying" })
                    .filter(evt => {
                      //if(!evt.getParent()?.card?.storage?.jlsg_smdq_lijian)return false;
                      return event.targets.includes(evt.player);
                    })
                    .then(() => delete player.storage.jlsg_smdq_lijian_dying)
                  while (turn.isIn() && other.isIn()) {
                    const next = turn.useCard(other, card, 'nowuxie');
                    await next;
                    let source = other.hasHistory("sourceDamage", evt => {
                      return evt.getParent("useCard") == next;
                    }) || turn.hasHistory("sourceDamage", evt => {
                      return evt.getParent("useCard") == next;
                    });
                    if (!source || !player.storage.jlsg_smdq_lijian_dying) break;
                    let storage = turn;
                    turn = other;
                    other = storage;
                  };
                  delete player.storage.jlsg_smdq_lijian_dying
                }
                else {
                  const card = get.autoViewAs({ name: "sha", isCard: false, }, event.cards);
                  delete evt.result.skill;
                  delete evt.result.used;
                  evt.result.card = card;
                  evt.result.cards = event.cards;
                  evt.redo();
                }
              },
              subSkill: {
                used: {
                  charlotte: true,
                  sub: true,
                  sourceSkill: "jlsg_smdq_lijian",
                },
              },
              ai: {
                expose: 0.4,
                threaten: 4.8,
                order: 8,
                preSha: true,
                respondSha: true,
                skillTagFilter: function (player, tag, arg) {
                  if (!player.countCards("h")) return false;
                  if (arg == "use") return false;
                  return true;
                },
                result: {
                  target: function (player, target) {
                    let card = get.autoViewAs({ name: "juedou", isCard: true, storage: { jlsg_smdq_lijian: true } }, []);
                    if (!ui.selected.targets.length) {
                      return Math.sign(get.attitude(player, target)) * (target.getUseValue(card) > 0 ? target.getUseValue(card) : -1);
                    }
                    return get.effect(target, card, ui.selected.targets[0], target);
                  },
                },
              },
            },
            jlsg_smdq_biyue: {
              audio: "ext:极略:2",
              trigger: { player: "phaseJieshuBegin" },
              check(event, player) {
                const targets = game.filterPlayer(cur => cur != player);
                let num = targets.reduce((n, t) => n + get.effect(t, { name: "shunshou_copy" }, player, player), 0);
                if (Array.from(ui.discardPile.childNodes).length) num += 1;
                if (_status.pileTop) num += 1;
                return num > 0;
              },
              async content(event, trigger, player) {
                const targets = game.filterPlayer(cur => cur != player),
                  cards = [];
                let position = ["h", "e", "j"];
                for (let target of targets) {
                  for (let i of position) {
                    let cardx = { shown: [], hide: [] };
                    if (target.countGainableCards(player, i)) {
                      let card = target.getGainableCards(player, i).randomGet();
                      if (i == "h") cardx.hide.add(card);
                      else cardx.shown.add(card);
                      cards.add(card);
                    }
                    if (cardx.shown.length) target.$give(cardx.shown, player);
                    if (cardx.hide.length) target.$giveAuto(cardx.hide, player);
                  };
                };
                if (_status.pileTop) {
                  let card = Array.from(ui.cardPile.childNodes).randomGet();
                  game.log(player, "从牌堆中获得了一张牌");
                  player.$drawAuto([card], player);
                  cards.add(card);
                }
                if (Array.from(ui.discardPile.childNodes).length) {
                  let card = Array.from(ui.discardPile.childNodes).randomGet();
                  game.log(player, "从弃牌堆中获得了一张牌");
                  player.$drawAuto([card], player);
                  cards.add(card);
                }
                if (!cards.length) return;
                await game.loseAsync({
                  gain_list: [[player, cards]],
                  cards: cards,
                }).setContent("gaincardMultiple");
                await game.delayx();
              },
            },
          },
          translate: {
            jlsg_skpf: '极略皮肤',

            jlsgsk_jdjg_sunshangxiang: 'SPF孙尚香',
            jlsgsk_jdjg_sunshangxiang_ab: '孙尚香',
            jlsgsk_syqj_guanyu: 'SPF关羽',
            jlsgsk_syqj_guanyu_ab: '关羽',
            jlsgsk_sslh_zhenji: 'SPF甄姬',
            jlsgsk_sslh_zhenji_ab: '甄姬',
            jlsgsk_spwq_lvbu: 'SPF吕布',
            jlsgsk_spwq_lvbu_ab: '吕布',
            jlsgsk_smdq_diaochan: "SPF貂蝉",
            jlsgsk_smdq_diaochan_ab: "貂蝉",

            jlsg_jieyin: '结姻',
            jlsg_jieyin_info: '出牌阶段限一次，你可以弃置一张牌并选择一名其他角色，你与该角色中未受伤的角色摸两张牌，已受伤的角色回复1点体力，若没有角色以此法摸牌，此技能视为未发动过。',
            jlsg_xiaoji: '枭姬',
            jlsg_xiaoji_info: '当你失去装备区里的一张牌后，你可以摸一张牌，然后可以根据失去牌的类型执行以下效果：武器牌，对一名其他角色造成1点伤害；防具牌或奇门牌，摸两张牌；坐骑牌，弃置其他角色至多两张牌。',
            jlsg_syqj_wusheng: '武圣',
            jlsg_syqj_wusheng2: '武圣',
            jlsg_syqj_wusheng_info: '你可以将红色牌当【杀】使用或打出，以此法使用的【杀】指定目标后，你摸一张牌并弃置至多三张手牌，若如此做，目标角色弃置X张牌，此【杀】的伤害+X，若此时是你的出牌阶段，你于此阶段内使用【杀】的次数上限+X(X为你弃置的牌数)。',
            jlsg_sslh_luoshen: '洛神',
            jlsg_sslh_luoshen_info: '回合开始阶段，你可以判定并获得生效后的判定牌，重复此流程直到点数重复的判定牌生效后，你于本回合内加此牌点数的手牌上限。',
            jlsg_sslh_qingguo: '倾国',
            jlsg_sslh_qingguo_info: '当其他角色使用【杀】或非延时锦囊牌指定你为目标后，你可以弃置一张黑色手牌并令此牌对你无效，然后若你弃置的牌为黑桃牌，你可以令该角色失去1点体力。',
            jlsg_spwq_wushuang: '无双',
            jlsg_spwq_wushuang_info: '每回合限一次，当你需要使用【杀】时，你可以弃置所有手牌并摸等量的牌，视为使用之。你以此法使用的【杀】造成的伤害翻倍，无次数和距离限制，并于指定目标后选择一项: 1.将其区域里的所有牌于本回合内移出游戏; 2.令其所有非Charlotte技能于本回合内失效。若你以此法弃置的牌里有武器牌，改为依次执行两项且令此技能于本回合内可再发动一次。',
            jlsg_smdq_lijian: "离间",
            jlsg_smdq_lijian_info: "出牌阶段限一次，你可以选择两名角色，从先选择的角色开始，其轮流视为对对方使用【决斗】（不能被【无懈可击】响应），直到其中一名角色进入濒死或以此法没有造成伤害。你可以将任意手牌当【杀】打出响应【决斗】。",
            jlsg_smdq_biyue: "闭月",
            jlsg_smdq_biyue_info: "结束阶段，你可以从每个不属于你的区域里随机获得一张牌。",
          },

          dynamicTranslate: {},
        };
        postProcessPack(jlsg_skpf);
        return jlsg_skpf;
      });
      game.import('character', function () { // SR
        var jlsg_sr = {
          name: 'jlsg_sr',
          connect: true,
          character: {
            jlsgsr_zhangliao: ['male', 'wei', 4, ['jlsg_wuwei', 'jlsg_yansha'], []],
            jlsgsr_xiahoudun: ['male', 'wei', 4, ['jlsg_zhonghou', 'jlsg_ganglie'], ['name:夏侯|惇']],
            // jlsgsr_zhenji: ['female', 'wei', 3, ['jlsg_liuyun', 'jlsg_lingbo', 'jlsg_qingcheng_zhu'], []],
            jlsgsr_zhenji: ['female', 'wei', 3, ['jlsg_liuyun', 'jlsg_lingbo', 'jlsg_qingcheng'], []],
            jlsgsr_xuzhu: ['male', 'wei', 4, ['jlsg_aozhan', 'jlsg_huxiao'], []],
            jlsgsr_simayi: ['male', 'wei', 3, ['jlsg_guicai', 'jlsg_langgu', 'jlsg_zhuizun'], []],
            jlsgsr_guojia: ['male', 'wei', 3, ['jlsg_tianshang', 'jlsg_yiji', 'jlsg_huiqu'], []],
            jlsgsr_caocao: ['male', 'wei', 4, ['jlsg_zhaoxiang', 'jlsg_zhishi', 'jlsg_jianxiong'], ['zhu',]],
            jlsgsr_zhaoyun: ['male', 'shu', 4, ['jlsg_jiuzhu', 'jlsg_tuwei'], []],
            jlsgsr_zhangfei: ['male', 'shu', 4, ['jlsg_xujin', 'jlsg_paoxiao'], []],
            jlsgsr_machao: ['male', 'shu', 4, ['jlsg_benxi', 'jlsg_yaozhan'], []],
            jlsgsr_guanyu: ['male', 'shu', 4, ['jlsg_wenjiu', 'jlsg_shuixi'], []],
            jlsgsr_zhugeliang: ['male', 'shu', 3, ['jlsg_sanfen', 'jlsg_guanxing', 'jlsg_weiwo'], ['name:诸葛|亮']],
            jlsgsr_huangyueying: ['female', 'shu', 3, ['jlsg_shouji', 'jlsg_hemou', 'jlsg_qicai'], []],
            jlsgsr_liubei: ['male', 'shu', 4, ['jlsg_rende', 'jlsg_chouxi', 'jlsg_yongbing'], ['zhu',]],
            jlsgsr_sunshangxiang: ['female', 'wu', 3, ['jlsg_yinmeng', 'jlsg_xiwu', 'jlsg_juelie'], []],
            jlsgsr_daqiao: ['female', 'wu', 3, ['jlsg_fangxin', 'jlsg_xiyu', 'jlsg_wanrou'], ['name:桥|null']],
            jlsgsr_huanggai: ['male', 'wu', 4, ['jlsg_zhouyan', 'jlsg_zhaxiang'], []],
            jlsgsr_lvmeng: ['male', 'wu', 4, ['jlsg_shixue', 'jlsg_guoshi'], []],
            jlsgsr_zhouyu: ['male', 'wu', 3, ['jlsg_yingcai', 'jlsg_weibao', 'jlsg_choulve'], []],
            jlsgsr_ganning: ['male', 'wu', 4, ['jlsg_jiexi', 'jlsg_youxia'], []],
            jlsgsr_luxun: ['male', 'wu', 3, ['jlsg_dailao', 'jlsg_youdi', 'jlsg_ruya'], []],
            jlsgsr_sunquan: ['male', 'wu', 4, ['jlsg_quanheng', 'jlsg_xionglve', 'jlsg_fuzheng'], ['zhu',]],
            jlsgsr_lvbu: ['male', 'qun', 4, ['jlsg_jiwu', 'jlsg_sheji'], []],
            jlsgsr_huatuo: ['male', 'qun', 3, ['jlsg_xingyi', 'jlsg_guagu', 'jlsg_wuqin'], []],
            jlsgsr_diaochan: ['female', 'qun', 3, ['jlsg_lijian', 'jlsg_manwu', 'jlsg_baiyue'], ['name:null|null']],
          },
          characterIntro: {},
          skill: {

            _jlsgsr_choice: {
              // mode: ["boss", "brawl", "chess", "connect", "doudizhu", "guozhan", "identity", "realtime", "single", "stone", "tafang", "versus"],
              trigger: {
                global: "gameStart",
                player: "enterGame",
              },
              forced: true,
              popup: false,
              unique: true,
              silent: true,
              filter: function (event, player) {
                // if (player == game.me) return false;
                if (!lib.config.extension_极略_srlose) return false;

                if (get.itemtype(player) != 'player') return false;
                var names = [];
                if (player.name) names.add(player.name);
                if (player.name1) names.add(player.name1);
                if (player.name2) names.add(player.name2);
                for (var i = 0; i < names.length; i++) {
                  if (names[i].indexOf('jlsgsr_') == 0) return true;
                }
                return false;
              },
              createList: function (name) {
                var list = [];
                var info = get.character(name);
                if (info) {
                  var skills = info[3];
                  for (var j = 0; j < skills.length; j++) {
                    if (lib.translate[skills[j] + '_info'] && lib.skill[skills[j]] && lib.skill[skills[j]].srlose) {
                      list.push(skills[j]);
                    }
                  }
                }
                return list;
              },
              content: function () {
                'step 0'
                event.names = [];
                if (player.name) event.names.add(player.name);
                if (player.name1) event.names.add(player.name1);
                if (player.name2) event.names.add(player.name2);
                'step 1'
                for (var i = 0; i < event.names.length; i++) {
                  if (event.names[i].indexOf('jlsgsr_') == 0) {
                    event.deleting = event.names[i];
                    event.names.remove(event.deleting);
                    var list = lib.skill._jlsgsr_choice.createList(event.deleting);
                    var str = '';
                    for (i = 0; i < list.length; i++) {
                      str += '<div class="text" style="width:90%;display:inline-block"><div class="skill"><font color="#FFFF00"><span style="font-size:20px">【' +
                        get.translation(list[i]) + '】</font></span></div><div><font color="#9AFF02"><span style="font-size:17px">' + lib.translate[list[i] + '_info'] + '</font></span></div></div><br><br><br>';
                    }
                    player.chooseControl(list, function (event, player) {
                      return list.randomGet();
                    }).prompt = '选择' + get.translation(event.deleting) + '禁用1个技能<br><br>' + str;
                    event.goto(2);
                  }
                }
                'step 2'
                player.removeSkill(result.control);
                if (get.mode() == 'guozhan') {
                  get.character(event.deleting)[3].remove(result.control);
                  player.hiddenSkills.remove(result.control);
                  player.removeSkillTrigger(result.control);
                }
                player.checkMarks();
                'step 3'
                for (var i = 0; i < event.names.length; i++) {
                  if (event.names[i].indexOf('jlsgsr_') == 0) {
                    event.deleting = event.names[i];
                    event.names.remove(event.deleting);
                    var list = lib.skill._jlsgsr_choice.createList(event.deleting);
                    var str = '';
                    for (i = 0; i < list.length; i++) {
                      str += '<div class="text" style="width:90%;display:inline-block"><div class="skill"><font color="#FFFF00"><span style="font-size:20px">【' +
                        get.translation(list[i]) + '】</font></span></div><div><font color="#9AFF02"><span style="font-size:17px">' + lib.translate[list[i] + '_info'] + '</font></span></div></div><br><br><br>';
                    }
                    player.chooseControl(list, function (event, player) {
                      return list.randomGet();
                    }).prompt = '选择' + get.translation(event.deleting) + '禁用1个技能<br><br>' + str;
                    event.goto(2);
                  }
                }
              },
            },
            jlsg_wuwei: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseDrawBegin' },
              priority: -1,
              check: function (event) {
                return event.num <= 3;
              },
              // prompt: '是否发动技能【无畏】，展示牌中每有一张基本牌便可视为对一名角色使用一张【杀】（每名角色限一次）',
              content: function () {
                'step 0'
                trigger.cancel();
                event.cards = game.cardsGotoOrdering(get.cards(3)).cards;
                player.showCards(event.cards);
                'step 1'
                event.lose = 0;
                for (var i = 0; i < event.cards.length; i++) {
                  if (get.type(event.cards[i], 'trick') == 'basic') {
                    event.lose++;
                  }
                }
                if (event.lose > 0 && game.hasPlayer(function (cur) {
                  return lib.filter.targetEnabled({ name: 'sha' }, player, cur);
                })) {
                  var next = player.chooseCardButton('请选择无畏视为使用【杀】弃置的牌', event.cards);
                  next.ai = function (button) {
                    if (jlsg.isWeak(player)) {
                      return button.link.name != 'du' || button.link.name != 'tao';
                    }
                    return 8 - get.value(button.link);
                  }
                  next.filterButton = function (button) {
                    return get.type(button.link) == 'basic';
                  }
                } else {
                  player.gain(event.cards, 'gain2');
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  event.cards1 = result.links[0];
                  player.chooseTarget('请选择无畏的目标', function (card, player, target) {
                    return lib.filter.targetEnabled({ name: 'sha' }, player, target);
                  }).set('ai', function (target) {
                    if (jlsg.isEnemy(player, target)) {
                      return 10 - jlsg.getDefenseSha(target, player);
                    }
                    return false;
                  });
                } else {
                  player.gain(event.cards, 'gain2');
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  player.useCard({ name: 'sha', suit: 'none', number: null }, result.targets, [event.cards1], false);
                  event.cards.remove(event.cards1);
                  event.goto(1);
                } else {
                  player.gain(event.cards, 'gain2');
                  event.finish();
                }
              },
              ai: {
                threaten: 1.5,
                // expose: 0.2,
              }
            },
            jlsg_yansha: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { player: 'phaseDrawBefore' },
              check: function (event, player) {
                if (Math.min(3, player.hp) < player.countCards('h') && player.skipList.includes('phaseUse') && !player.skipList.includes('phaseDiscard')) return true;
                return (3 - player.getExpansions('jlsg_yansha2').length) && player.countCards('h') > 1;
              },
              content: function () {
                trigger.num--;
                player.addTempSkill('jlsg_yansha_cards', 'phaseAfter');
              },
              group: ['jlsg_yansha2'],
              subSkill: {
                cards: {
                  trigger: { player: 'phaseDiscardBegin' },
                  filter: function (event, player) {
                    return player.countCards('h') > 0;
                  },
                  direct: true,
                  content: function () {
                    'step 0'
                    var next = player.chooseCard(`###${get.prompt(event.name)}###将一张手牌牌置于武将牌上作为「掩」`, 'h');
                    next.ai = function (card) {
                      return 7 - get.value(card);
                    };
                    'step 1'
                    if (result.bool) {
                      player.logSkill('jlsg_yansha');
                      player.addToExpansion(result.cards, player, 'give').gaintag.add('jlsg_yansha2');
                    }
                  }
                }
              }
            },
            jlsg_yansha2: {
              audio: "ext:极略:true",
              trigger: { global: 'shaBegin' },
              filter: function (event, player) {
                return event.player != player && player.getExpansions('jlsg_yansha2').length > 0 && event.player.countCards('he') > 0;
              },
              logTarget: 'player',
              check: function (event, player) {
                if (event.player.countCards('he') > 1 && get.attitude(player, event.player) < 0) return 2;
                if (get.attitude(player, event.target) > 0) {
                  if (event.target.isDamaged() && event.target.getEquip('baiyin')) return 2;
                  if (!event.target.countCards('h') && event.player.countCards('he') > 0) return 1;
                }
                if (get.attitude(player, event.player) < 0) {
                  if (!player.get('e', '1') && event.player.get('e', '1')) return 1;
                  if (!player.get('e', '2') && event.player.get('e', '2')) return 1;
                  if (!player.get('e', '3') && event.player.get('e', '3')) return 1;
                  if (!player.get('e', '4') && event.player.get('e', '4')) return 1;
                  if (!player.get('e', '5') && event.player.get('e', '5')) return 3;
                }
                return 0;
              },
              content: function () {
                "step 0"
                var att = get.attitude(player, trigger.player);
                player.chooseCardButton('掩杀', player.getExpansions('jlsg_yansha2'), true);
                "step 1"
                if (result.bool) {
                  var cards = result.links;
                  player.discard(cards);
                  if (trigger.player.countCards('he')) {
                    player.gainPlayerCard(trigger.player, 2, 'he', true);
                  }
                }
              },
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
            },
            jlsg_liuyun: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterCard: function (card) {
                return get.color(card) == 'black';
              },
              position: 'he',
              filter: function (event, player) {
                return player.num('he', { color: 'black' }) > 0 && !player.isLinked();
              },
              check: function (card) {
                return 8 - ai.get.value(card)
              },
              prompt: '弃置一张黑色牌，令一名角色选择一项：回复一点体力或摸两张牌',
              filterTarget: true,
              content: function () {
                'step 0'
                player.link();
                event.target = target;
                if (target.hp == target.maxHp) {
                  target.draw(2);
                  event.finish();
                }
                else {
                  var controls = ['draw_card'];
                  if (target.hp < target.maxHp) {
                    controls.push('recover_hp');
                  }
                  target.chooseControl(controls).ai = function () {
                    if (target.hp == 1 && target.maxHp > 2) {
                      return 'recover_hp';
                    }
                    else if (target.hp == 2 && target.maxHp > 2 && target.num('h') > 1) {
                      return 'recover_hp';
                    }
                    else {
                      return 'draw_card';
                    }
                  }
                }
                "step 1"
                event.control = result.control;
                switch (event.control) {
                  case 'recover_hp': event.target.recover(); event.finish(); break;
                  case 'draw_card': event.target.draw(2); event.finish(); break;
                }
              },
              ai: {
                expose: 0.2,
                order: 9,
                result: {
                  player: function (player) {
                    if (player.num('h') > player.hp) return 1;
                    if (jlsg.hasLoseHandcardEffective(player)) return 2;
                    return -1;
                  },
                  target: function (player, target) {
                    if (jlsg.isWeak(target)) return 5;
                    return 2;
                  }
                },
                threaten: 1.5
              }
            },
            jlsg_lingbo: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'phaseBegin' },
              direct: true,
              filter: function (event, player) {
                if (!player.isLinked()) return false;
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  num += game.players[i].num('ej');
                }
                return num > 0;
              },
              content: function () {
                'step 0'
                player.chooseTarget('###是否发动【凌波】？###将场上的一张牌置于牌堆顶', function (card, player, target) {
                  return target.num('ej') > 0;
                }).set("ai", function (target) {
                  if (ai.get.attitude(player, target) > 0) return target.num('j');
                  if (ai.get.attitude(player, target) < 0) return target.num('e');
                  return 0;
                })
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_lingbo');
                  if (player.isLinked()) player.link();
                  event.target = result.targets[0];
                }
                else {
                  event.finish();
                }
                'step 2'
                player.choosePlayerCard('将目标的一张牌置于牌堆顶', event.target, 'ej', true);
                'step 3'
                event.card = result.links[0];
                if (!event.card) {
                  event.finish(); return;
                }
                event.target.lose(event.card, ui.cardPile, 'insert', 'visible');
                event.target.$throw(1, 1000);
                game.log(player, '将', event.card, '置于牌堆顶');
                'step 4'
                if (event.target == game.me) game.delay(0.5);
                // if (event.card) {
                //   event.card.fix();
                //   ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                // }
              },
              ai: {
                effect: {
                  target: function (card) {
                    if (card.name == 'tiesuo') return 0.5;
                  }
                }
              }
            },
            jlsg_qingcheng: {
              audio: "ext:极略:1",
              srlose: true,
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function () { return false; },
              selectCard: -1,
              viewAs: { name: 'sha' },
              viewAsFilter: function (player) {
                return !player.isLinked();
              },
              prompt: '横置你的武将牌，视为打出一张杀',
              check: () => 1,
              onuse: function (result, player) {
                player.link();
              },
              onrespond: function (result, player) {
                if (!player.isLinked()) player.link();
              },
              ai: {
                skillTagFilter: function (player) {
                  return !player.isLinked();
                },
                respondSha: true,
              },
              group: ['jlsg_qingcheng2']
            },
            jlsg_qingcheng2: {
              audio: "ext:极略:1",
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function () { return false; },
              selectCard: -1,
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return player.isLinked();
              },
              prompt: '重置你的武将牌，视为打出一张闪',
              check: () => 1,
              onrespond: function (result, player) {
                if (player.isLinked()) player.link(false);
              },
              onuse: function (result, player) {
                return this.onrespond.apply(this, arguments);
              },
              ai: {
                skillTagFilter: function (player) {
                  return player.isLinked();
                },
                respondShan: true,
              }
            },
            // jlsg_lingbo: {
            //   audio: "ext:极略:1",
            //   srlose: true,
            //   group: ['jlsg_lingbo1', 'jlsg_lingbo2'],
            // },
            // jlsg_lingbo1: {
            //   trigger: {
            //     global: "phaseEnd",
            //   },
            //   filter: function (event, player) {
            //     return player.countCards('e') > 0 && event.player != player && player.isLinked();
            //   },
            //   check: function (event, player) {
            //     return get.attitude(player, event.player) > 0;
            //   },
            //   content: function () {
            //     'step 0'
            //     player.chooseCard('e', 1, true).set('ai', function (card) {
            //       var sub = get.subtype(card);
            //       if (_status.event.player.isEmpty(sub)) return -10;
            //       return get.unuseful(card);
            //     });
            //     'step 1'
            //     if (result.bool) {
            //       trigger.player.equip(result.cards[0]);
            //       player.$give(result.cards, trigger.player);
            //     }
            //     'step 2'
            //     if (player.isLinked()) player.link();
            //   },
            // },
            // jlsg_lingbo2: {
            //   trigger: {
            //     global: "phaseBegin",
            //   },
            //   filter: function (event, player) {
            //     var card = ui.selected.cards[0];
            //     if (!card) return false;
            //     if (get.position(card) == 'e' && !target.isEmpty(get.subtype(card))) return false;
            //     return event.player != player && event.player.countCards('ej') > 0 && !player.isLinked();
            //   },
            //   check: function (event, player) {
            //     return get.attitude(player, event.player) > 0;
            //   },
            //   content: function () {
            //     "step 0"
            //     var List = [];
            //     List.push(trigger.player.getCards('ej'));
            //     player.chooseButton(List, 1, true).set('ai', function (button) {
            //       //if(get.attitude(player,trigger.player)<=0){
            //       //if(get.type(button.link)=='equip')  return 10;
            //       //return 0;
            //       //}
            //       //else if(get.attitude(player,trigger.player)>=3){
            //       //if(get.type(button.link)=='delay')  return 10;
            //       //return 0;
            //       //}
            //       if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('lebu') && get.type(button.link) == 'equip') return get.suit(card) == 'heart';
            //       if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('bingliang') && get.type(button.link) == 'equip') return get.suit(card) == 'club';
            //       if (get.attitude(player, trigger.player) > 0 && trigger.player.hasJudge('shandian') && get.type(button.link) == 'equip') return (get.suit(card) != 'spade' || (card.number < 2 || card.number > 9));
            //       if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('lebu') && get.type(button.link) == 'equip') return get.suit(card) != 'heart';
            //       if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('bingliang') && get.type(button.link) == 'equip') return get.suit(card) != 'club';
            //       if (get.attitude(player, trigger.player) < 0 && trigger.player.hasJudge('shandian') && get.type(button.link) == 'equip') return (get.suit(card) == 'spade' && card.number >= 2 && card.number <= 9);
            //       return 0;
            //     });
            //     "step 1"
            //     if (result.bool) {
            //       ui.cardPile.insertBefore(result.links[0], ui.cardPile.firstChild);
            //     }
            //     "step 2"
            //     if (!player.isLinked()) player.link();
            //   },
            // },
            // jlsg_liuyun: {
            //   audio: "ext:极略:2",
            //   srlose: true,
            //   enable: 'phaseUse',
            //   usable: 1,
            //   filterCard: function (card) {
            //     return get.color(card) == 'black';
            //   },
            //   position: 'he',
            //   filter: function (event, player) {
            //     return player.countCards('he', { color: 'black' }) > 0 && !player.isLinked();
            //   },
            //   check: function (card) {
            //     return 8 - get.value(card)
            //   },
            //   prompt: '弃置一张黑色牌，令一名角色选择一项：恢复1点体力或摸两张牌',
            //   filterTarget: true,
            //   content: function () {
            //     player.link();
            //     target.chooseDrawRecover(2, true);
            //   },
            //   ai: {
            //     expose: 0.2,
            //     order: 9,
            //     result: {
            //       player: function (player) {
            //         if (player.countCards('h', function (card) {
            //           return get.color(card) == 'black';
            //         }) > player.hp) return 1;
            //         return -1;
            //       },
            //       target: function (player, target) {
            //         var result = 2;
            //         if (target.isTurnedOver()) result += 3;
            //         if (target.hp == 1) result += 3;
            //         return result;
            //       }
            //     },
            //     threaten: 1.5
            //   }
            // },
            // jlsg_qingcheng_zhu: {
            //   srlose: true,
            //   trigger: { global: "gameDrawEnd" },
            //   forced: true,
            //   content: function () {
            //     if (player.hasSkill('jlsg_liuyun')) {
            //       player.addSkill('jlsg_qingcheng_yin');
            //       player.removeSkill('jlsg_qingcheng_zhu');
            //     } else {
            //       player.addSkill('jlsg_qingcheng_yang');
            //       player.removeSkill('jlsg_qingcheng_zhu');
            //     }
            //   },
            // },
            // jlsg_qingcheng_yang: {
            //   audio: "ext:极略:1",
            //   group: ['jlsg_qingcheng_yang1', 'jlsg_qingcheng_yang2'],
            // },
            // jlsg_qingcheng_yang1: {
            //   audio: "ext:极略:true",
            //   enable: ['chooseToUse', 'chooseToRespond'],
            //   filterCard: function () {
            //     return false;
            //   },
            //   selectCard: -1,
            //   viewAs: { name: 'sha' },
            //   viewAsFilter: function (player) {
            //     return !player.isLinked();
            //   },
            //   prompt: '横置你的武将牌，视为打出一张【杀】',
            //   check: function () {
            //     return 1
            //   },
            //   onuse: function (result, player) {
            //     if (!player.isLinked()) player.link();
            //   },
            //   onrespond: function (result, player) {
            //     if (!player.isLinked()) player.link();
            //   },
            //   ai: {
            //     skillTagFilter: function (player) {
            //       return !player.isLinked();
            //     },
            //     respondSha: true,
            //     basic: {
            //       useful: [5, 1],
            //       value: [5, 1],
            //     },
            //     order: function () {
            //       if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
            //       return 3;
            //     },


            //     result: {
            //       target: function (player, target) {
            //         if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
            //           if (get.attitude(player, target) > 0) {
            //             return -6;
            //           } else {
            //             return -3;
            //           }
            //         }
            //         return -1.5;
            //       },
            //     },
            //     tag: {
            //       respond: 1,
            //       respondShan: 1,
            //       damage: function (card) {
            //         if (card.nature == 'poison') return;
            //         return 1;
            //       },
            //       natureDamage: function (card) {
            //         if (card.nature) return 1;
            //       },
            //       fireDamage: function (card, nature) {
            //         if (card.nature == 'fire') return 1;
            //       },
            //       thunderDamage: function (card, nature) {
            //         if (card.nature == 'thunder') return 1;
            //       },
            //       poisonDamage: function (card, nature) {
            //         if (card.nature == 'poison') return 1;
            //       },
            //     },

            //   },

            // },
            // jlsg_qingcheng_yang2: {
            //   audio: "ext:极略:true",
            //   enable: ["chooseToUse", "chooseToRespond"],
            //   filterCard: function () {
            //     return false;
            //   },
            //   selectCard: -1,
            //   viewAs: { name: 'shan' },
            //   viewAsFilter: function (player) {
            //     return player.isLinked();
            //   },
            //   prompt: '重置你的武将牌，视为打出一张【闪】',
            //   check: function () {
            //     return 1
            //   },
            //   onuse: function (result, player) {
            //     if (player.isLinked()) player.link();
            //   },
            //   onrespond: function (result, player) {
            //     if (player.isLinked()) player.link();
            //   },
            //   ai: {
            //     skillTagFilter: function (player) {
            //       return player.isLinked();
            //     },
            //     respondShan: true,
            //     basic: {
            //       useful: [7, 2],
            //       value: [7, 2],
            //     },
            //   }
            // },
            // jlsg_qingcheng_yin: {
            //   audio: "ext:极略:1",
            //   group: ['jlsg_qingcheng_yin1', 'jlsg_qingcheng_yin2'],
            // },
            // jlsg_qingcheng_yin1: {
            //   audio: "ext:极略:true",
            //   enable: ['chooseToUse', 'chooseToRespond'],
            //   filterCard: function () {
            //     return false;
            //   },
            //   selectCard: -1,
            //   viewAs: { name: 'sha' },
            //   viewAsFilter: function (player) {
            //     return player.isLinked();
            //   },
            //   prompt: '重置你的武将牌，视为打出一张【杀】',
            //   check: function () {
            //     return 1
            //   },
            //   onuse: function (result, player) {
            //     if (player.isLinked()) player.link();
            //   },
            //   onrespond: function (result, player) {
            //     if (player.isLinked()) player.link();
            //   },
            //   ai: {
            //     skillTagFilter: function (player) {
            //       return !player.isLinked();
            //     },
            //     respondSha: true,
            //     basic: {
            //       useful: [5, 1],
            //       value: [5, 1],
            //     },
            //     order: function () {
            //       if (_status.event.player.hasSkillTag('presha', true, null, true)) return 10;
            //       return 3;
            //     },


            //     result: {
            //       target: function (player, target) {
            //         if (player.hasSkill('jiu') && !target.getEquip('baiyin')) {
            //           if (get.attitude(player, target) > 0) {
            //             return -6;
            //           } else {
            //             return -3;
            //           }
            //         }
            //         return -1.5;
            //       },
            //     },
            //     tag: {
            //       respond: 1,
            //       respondShan: 1,
            //       damage: function (card) {
            //         if (card.nature == 'poison') return;
            //         return 1;
            //       },
            //       natureDamage: function (card) {
            //         if (card.nature) return 1;
            //       },
            //       fireDamage: function (card, nature) {
            //         if (card.nature == 'fire') return 1;
            //       },
            //       thunderDamage: function (card, nature) {
            //         if (card.nature == 'thunder') return 1;
            //       },
            //       poisonDamage: function (card, nature) {
            //         if (card.nature == 'poison') return 1;
            //       },
            //     },

            //   },

            // },
            // jlsg_qingcheng_yin2: {
            //   audio: "ext:极略:true",
            //   enable: ["chooseToUse", "chooseToRespond"],
            //   filterCard: function () {
            //     return false;
            //   },
            //   selectCard: -1,
            //   viewAs: { name: 'shan' },
            //   viewAsFilter: function (player) {
            //     return !player.isLinked();
            //   },
            //   prompt: '横置你的武将牌，视为打出一张【闪】',
            //   check: function () {
            //     return 1
            //   },
            //   onuse: function (result, player) {
            //     if (!player.isLinked()) player.link();
            //   },
            //   onrespond: function (result, player) {
            //     if (!player.isLinked()) player.link();
            //   },
            //   ai: {
            //     skillTagFilter: function (player) {
            //       return player.isLinked();
            //     },
            //     respondShan: true,
            //     basic: {
            //       useful: [7, 2],
            //       value: [7, 2],
            //     },
            //   }
            // },
            jlsg_aozhan: {
              audio: "ext:极略:true",
              srlose: true,
              shaRelated: true,
              marktext: '战',
              intro: {
                markcount: 'expansion',
                content: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              frequent: true,
              trigger: { player: 'damageEnd', source: 'damageSource' },
              filter: function (event, player) {
                if (event.num <= 0) return false;
                return event.card && (event.card.name == 'sha' || event.card.name == 'juedou') && event.notLink();
              },
              content: function () {
                var cards = get.cards(trigger.num);
                player.addToExpansion(cards, 'gain2').gaintag.add(event.name);
              },
              group: ['jlsg_aozhan2']
            },
            jlsg_aozhan2: {
              audio: "ext:极略:true",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.getExpansions('jlsg_aozhan').length;
              },
              content: function () {
                'step 0'
                player.chooseControl('收入手牌', '置入弃牌堆')
                  .set("dialog", ['战', player.getExpansions('jlsg_aozhan')])
                  .set("ai", function (event, player) {
                    var value = 0, i;
                    var cards = player.getExpansions('jlsg_aozhan');
                    for (i = 0; i < cards.length; i++) {
                      value += get.value(cards[i]);
                      if (jlsg.isWeak(player) && get.tag(cards[i], 'save')) value += get.value(cards[i]);
                    }
                    value /= player.getExpansions('jlsg_aozhan').length;
                    if (value > 4) return '收入手牌';
                    return '置入弃牌堆';
                  })
                'step 1'
                if (result.control == '置入弃牌堆') {
                  var cards = player.getExpansions('jlsg_aozhan');
                  player.discard(cards);
                  player.draw(cards.length);
                } else {
                  player.gain(player.getExpansions('jlsg_aozhan'), 'log', 'gain2');
                }
              },
              ai: {
                order: 1,
                result: {
                  player: function (player) {
                    if (player.getExpansions('jlsg_aozhan').length >= 2) return 1;
                    if (player.hp + player.countCards('h') <= 3) return 0.5;
                    return 0;
                  }
                }
              }
            },
            jlsg_huxiao: {
              audio: "ext:极略:true",
              srlose: true,
              shaRelated: true,
              trigger: { source: 'damageBegin1' },
              filter: function (event, player) {
                return !player.isTurnedOver() && player.isPhaseUsing() && event.card && event.card.name == 'sha'; // && event.notLink();
              },
              priority: 10,
              check: function (event, player) {
                if (!event.player) return -1;
                if (get.attitude(player, event.player) > 0) return false;
                if (event.player.hasSkillTag('filterDamage')) return false;
                if (event.player.hasSkillTag('filterDamage', null, {
                  player: player,
                  card: event.card,
                })) {
                  return -10;
                }
                var e2 = event.player.get('e', '2');
                if (e2) {
                  if (e2.name == 'tengjia') {
                    if (event.nature == 'fire') return 10;
                  }
                }
                if (event.player.hasSkill('kuangfeng2') && event.nature == 'fire') return 10;
                //game.log(get.damageEffect(event.player,player,player,event.nature));
                return get.damageEffect(event.player, player, player, event.nature);
              },
              content: function () {
                trigger.num++;
                player.draw();
                player.addTempSkill('jlsg_huxiao2', 'shaAfter');
              }
            },
            jlsg_old_huxiao: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { source: 'damageBegin1' },
              filter: function (event, player) {
                return !player.isTurnedOver() && player.isPhaseUsing() && event.card && event.card.name == 'sha';
              },
              priority: 10,
              check: function (event, player) {
                if (!event.player) return -1;
                if (get.attitude(player, event.player) > 0) return false;
                if (event.player.hasSkillTag('filterDamage', null, {
                  player: player,
                  card: event.card,
                })) {
                  return -10;
                }
                var e2 = event.player.get('e', '2');
                if (e2) {
                  if (e2.name == 'tengjia') {
                    if (event.nature == 'fire') return 10;
                  }
                }
                if (event.player.hasSkill('kuangfeng2') && event.nature == 'fire') return 10;
                //game.log(get.damageEffect(event.player,player,player,event.nature));
                return get.damageEffect(event.player, player, player, event.nature);
              },
              content: function () {
                trigger.num++;
                player.draw(3);
                player.addTempSkill('jlsg_huxiao2', 'shaAfter');
              }
            },
            jlsg_huxiao2: {
              audio: false,
              trigger: { player: 'shaEnd' },
              forced: true,
              popup: false,
              content: function () {
                var evt = _status.event;
                for (var i = 0; i < 10; i++) {
                  if (evt && evt.getParent) {
                    evt = evt.getParent();
                  }
                  if (evt.name == 'phaseUse') {
                    evt.skipped = true;
                    break;
                  }
                }
                player.turnOver();
                player.skip('phaseDiscard');
              }
            },
            jlsg_guicai: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'judge' },
              check: function (event, player) {
                var judge = event.judge(event.player.judging[0]);
                if (get.attitude(player, event.player) < 0) return judge > 0;
                if (get.attitude(player, event.player) > 0) return judge < 0;
                return 0;
              },
              content: function () {
                "step 0"
                player.chooseCard(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                  get.translation(trigger.player.judging[0]) + '，打出一张手牌代替之或亮出牌顶的一张牌代替之').set('ai', function (card) {
                    var trigger = _status.event.getParent()._trigger;
                    var player = _status.event.player;
                    var judging = _status.event.judging;
                    var result = trigger.judge(card) - trigger.judge(judging);
                    var attitude = get.attitude(player, trigger.player);
                    if (attitude == 0 || result == 0) return 0;
                    if (attitude > 0) {
                      return result - get.value(card) / 2;
                    } else {
                      return -result - get.value(card) / 2;
                    }
                  }).set('judging', trigger.player.judging[0]);
                "step 1"
                if (result.bool) {
                  event.cards = result.cards;
                } else {
                  event.cards = get.cards();
                  game.log(get.translation(player) + '亮出了牌堆顶的' + get.translation(event.cards));
                  player.showCards(event.cards);
                  // game.cardsGotoOrdering(event.cards).relatedEvent=trigger;
                }
                trigger.orderingCards.addArray(event.cards);
                player.respond(event.cards, 'highlight', 'noOrdering');
                "step 2"
                if (result.bool) {
                  if (trigger.player.judging[0].clone) {
                    trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                    game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                  }
                  // ui.discardPile.appendChild(trigger.player.judging[0]);
                  trigger.player.judging[0] = result.cards[0];
                  // if (!get.owner(result.cards[0], 'judge')) {
                  //   trigger.position.appendChild(result.cards[0]);
                  // }
                  // game.log(trigger.player, '的判定牌改为', result.cards[0]);
                  game.delayx(2);
                } else {
                  if (trigger.player.judging[0].clone) {
                    trigger.player.judging[0].clone.classList.remove('thrownhighlight');
                    game.addVideo('deletenode', player, get.cardsInfo([trigger.player.judging[0].clone]));
                  }
                  // ui.discardPile.appendChild(trigger.player.judging[0]);
                  trigger.player.judging[0] = event.cards[0];
                  // if (!get.owner(event.cards[0], 'judge')) {
                  //   trigger.position.appendChild(event.cards[0]);
                  // }
                  // game.log(trigger.player, '的判定牌改为', event.cards[0]);
                }
              },
              ai: {
                tag: {
                  rejudge: 1,
                }
              }
            },
            jlsg_langgu: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { player: 'damageEnd' },
              check: function (event, player) {
                return event.source && get.attitude(player, event.source) <= 0;
              },
              filter: function (event, player) {
                return event.source != undefined && event.source.countCards("he") > 0;
              },
              logTarget: 'source',
              content: function () {
                "step 0"
                player.judge(function (card) {
                  if (get.color(card) == 'black') return 2;
                  return -2;
                }).judge2 = result => result.bool;
                "step 1"
                if (result.bool && trigger.source.countCards('he')) {
                  player.gainPlayerCard(trigger.source, 'he', true);
                }
              },
              ai: {
                expose: 0.2,
                effect: {
                  target: function (card, player, target) {
                    if (player.hasSkill('jueqing')) return [1, -1.5];
                    if (get.tag(card, 'damage') && Math.random() < 0.5) {
                      if (get.attitude(target, player) < 0) return [1, 0, 0, -1.5];
                    }
                  }
                }
              },
              group: ['jlsg_langgu2']
            },
            jlsg_langgu2: {
              audio: "ext:极略:true",
              trigger: { source: 'damageEnd' },
              check: function (event, player) {
                return get.attitude(player, event.player) <= 0;
              },
              filter: function (event, player) {
                return event.player != undefined && event.player.countCards("he") > 0;
              },
              prompt: function (event, player) {
                var str = '';
                str += '是否对' + get.translation(event.player) + '发动【狼顾】？';
                return str;
              },
              content: function () {
                "step 0"
                player.judge(function (card) {
                  if (get.color(card) == 'black') return 2;
                  return -2;
                }).judge2 = result => result.bool;
                "step 1"
                if (result.bool && trigger.player.countCards('he')) {
                  player.gainPlayerCard(trigger.player, 'he', true);
                }
              },
              ai: {
                expose: 0.2,
                effect: {
                  target: function (card, player, target) {
                    if (player.hasSkill('jueqing')) return [1, -1.5];
                    if (get.tag(card, 'damage') && Math.random() < 0.5) {
                      if (get.attitude(target, player) < 0) return [1, 0, 0, -1.5];
                    }
                  }
                }
              },
            },
            jlsg_zhuizun: {
              audio: "ext:极略:true",
              srlose: true,
              enable: 'chooseToUse',
              mark: true,
              unique: true,
              limited: true,
              skillAnimation: true,
              animationStr: '追尊',
              animationColor: 'water',
              init: function (player) {
                player.storage.jlsg_zhuizun = false;
              },
              filter: function (event, player) {
                if (event.type != 'dying') return false;
                if (player != event.dying) return false;
                if (player.storage.jlsg_zhuizun) return false;
                return true;
              },
              content: function () {
                'step 0'
                player.awakenSkill('jlsg_zhuizun');
                player.storage.jlsg_zhuizun = true;
                player.addSkill('jlsg_zhuizun2');
                if (player.hp < 1) {
                  player.recover(1 - player.hp);
                }
                'step 1'
                var targets = game.players.slice(0);
                targets.remove(player);
                targets.sort(lib.sort.seat);
                event.targets = targets;
                'step 2'
                if (event.targets.length) {
                  event.target = event.targets.shift();
                } else {
                  event.finish();
                }
                'step 3'
                if (event.target.countCards('h')) {
                  event.target.chooseCard('选择一张手牌交给' + get.translation(player), true).ai = function (card) {
                    return -get.value(card);
                  }
                } else {
                  event.goto(2);
                }
                'step 4'
                if (result.bool) {
                  player.gain(result.cards[0]);
                  target.$give(1, player);
                }
                event.goto(2);
              },
              ai: {
                order: 1,
                skillTagFilter: function (player) {
                  if (player.storage.jlsg_zhuizun) return false;
                  if (player.hp > 0) return false;
                },
                save: true,
                result: {
                  player: 10
                },
                threaten: function (player, target) {
                  if (!target.storage.jlsg_zhuizun) return 0.6;
                }
              },
              intro: {
                content: 'limited'
              }
            },
            jlsg_zhuizun2: {
              trigger: { global: 'phaseAfter' },
              forced: true,
              audio: false,
              content: function () {
                player.removeSkill('jlsg_zhuizun2');
                player.insertPhase();
              }
            },
            jlsg_tianshang: {
              audio: "ext:极略:true",
              srlose: true,
              unique: true,
              trigger: { player: 'die' },
              forceDie: true,
              direct: true,
              limited: true,
              skillAnimation: true,
              animationColor: 'thunder',
              content: function () {
                "step 0"
                player.chooseTarget('是否发动【天殇】？', function (card, player, target) {
                  return player != target;
                }).ai = function (target) {
                  var num = get.attitude(player, target);
                  if (num > 0) {
                    if (target.isDamaged() && target.hasSkills(jlsg.ai.skill.need_maxhp)) return 5;
                    if (jlsg.isWeak(target)) return 3;
                    if (target.isDamaged()) return 2;
                    return 1;
                  }
                  return 0;
                };
                "step 1"
                if (!result.bool) {
                  event.finish(); return;
                }
                player.line(target, 'green');
                event.target = result.targets[0];
                player.logSkill('jlsg_tianshang', event.target);
                let skills = ['jlsg_huiqu', 'jlsg_old_yiji', 'jlsg_yiji']
                  .filter(s => player.hasSkill(s));
                event.target.addSkills(skills);
                "step 2"
                event.target.gainMaxHp();
                event.target.recover();
              },
              ai: {
                expose: 0.5,
              },
            },
            jlsg_yiji: {
              audio: "ext:极略:true",
              srlose: true,
              inherit: 'yiji'
            },
            jlsg_old_yiji: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: {
                player: "damageEnd",
              },
              filter: function (event) {
                return (event.num > 0);
              },
              content: function () {
                "step 0"
                event.num = trigger.num;
                event.targets = [];
                "step 1"
                if (event.num > 0) {
                  event.num--;
                  event.cards = get.cards(2);
                } else {
                  event.finish();
                }
                "step 2"
                if (event.cards.length > 1) {
                  player.chooseCardButton('将［遗计］牌分配给任意角色', true, event.cards, [1, event.cards.length]);
                } else if (event.cards.length == 1) {
                  event._result = { links: event.cards.slice(0), bool: true };
                } else {
                  event.goto(5);
                  return;
                }
                "step 3"
                if (result.bool) {
                  for (var i = 0; i < result.links.length; i++) {
                    event.cards.remove(result.links[i]);
                  }
                  event.togive = result.links.slice(0);
                  player.chooseTarget('将' + get.translation(result.links) + '交给一名角色', true);
                }
                "step 4"
                if (result.targets.length) {
                  if (!event.targets.includes(result.targets[0])) {
                    event.targets.add(result.targets[0]);
                  }
                  result.targets[0].gain(event.togive, 'draw');
                  player.line(result.targets[0], 'green');
                  game.log(result.targets[0], '获得了' + get.cnNumber(event.togive.length) + '张牌');
                  event.goto(2);
                }
                "step 5"
                if (event.targets.length == 1) {
                  event.goto(6);
                  return;
                } else {
                  if (event.num > 0) {
                    event.goto(1);
                  } else {
                    event.finish();
                  }
                }
                "step 6"
                player.judge(function (card) {
                  if (get.suit(card) == 'heart') return 2;
                  return -2;
                }).judge2 = result => result.bool;
                "step 7"
                if (result.bool) {
                  player.recover();
                }
              },
              ai: {
                maixie: true,
                "maixie_hp": true,
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                      if (!target.hasFriend()) return;
                      var num = 1;
                      if (get.attitude(player, target) > 0) {
                        if (player.needsToDiscard()) {
                          num = 0.7;
                        } else {
                          num = 0.5;
                        }
                      }
                      if (target.hp >= 4) return [1, num * 2];
                      if (target.hp == 3) return [1, num * 1.5];
                      if (target.hp == 2) return [1, num * 0.5];
                    }
                  },
                },
              },
            },
            jlsg_huiqu: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.countDiscardableCards(player, 'h');
              },
              direct: true,
              content: function () {
                'step 0'
                var check = player.canMoveCard(true);
                var next = player.chooseToDiscard('是否弃置一张手牌发动【慧觑】？');
                next.set('ai', function (card) {
                  if (check) {
                    return 8 - get.value(card);
                  }
                  return 4 - get.value(card);
                });
                next.logSkill = 'jlsg_huiqu';
                'step 1'
                if (result.bool) {
                  player.judge(function (card) {
                    if (get.color(card) == 'red') return (player.canMoveCard(true)) ? 1.5 : 0;
                    return 1;
                  });
                } else {
                  event.finish();
                }
                'step 2'
                if (result.color) {
                  event.result = result.color;
                  if (result.color == 'red') {
                    player.moveCard();
                    event.finish();
                  } else {
                    player.chooseTarget('选择一名目标对其造成1点伤害，然后摸一张牌。', true).ai = function (target) {
                      return get.damageEffect(target, player, player) + 2;
                    }
                  }
                }
                'step 3'
                if (result.bool) {
                  player.line(result.targets[0]);
                  result.targets[0].damage(player);
                  player.draw();
                }
                // player.line2(result.targets);
                // event.targets = result.targets;
              },
            },
            jlsg_jiwu: {
              audio: "ext:极略:true",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              // filter: function (event, player) {
              //   return player.countCards('h') != 1;
              // },
              filterCard: true,
              selectCard: function () {
                return Math.min(1, _status.event.player.countCards('h') - 1);
              },
              check: function (event) {
                var player = _status.event.player;
                if (player.countCards('h') > player.maxHp) return false;
                if (!player.hasSha()) return false;
                return game.hasPlayer(function (current) {
                  return get.attitude(player, current) < 0 && player.canUse('sha', current);
                });
              },
              discard: false,
              lose: false,
              prompt: "选择保留的手牌",
              content: function () {
                'step 0'
                if (cards[0]) {
                  player.discard(player.getCards('h').remove(cards[0]));
                } else if (player.countCards('h') == 0) {
                  player.draw();
                }
                'step 1'
                player.addSkill('jlsg_jiwu_buff1');
                player.addSkill('jlsg_jiwu_buff2');
                player.addTempSkill('jlsg_jiwu_buff3', 'phaseAfter');

              },
              mod: {
                selectTarget: function (card, player, range) {
                  if (card.name != 'sha') return;
                  if (range[1] == -1) return;
                  if (player.countCards('e') != 0) {
                    if (!card.cards || player.countCards('e', eCard => !card.cards.includes(eCard))) {
                      return;
                    }
                  }
                  range[1] += 2;
                }
              },
              subSkill: {
                buff1: {
                  audio: "ext:极略:true",
                  trigger: { source: 'damageBegin' },
                  filter: function (event) {
                    return event.card && event.card.name == 'sha' && event.notLink();
                  },
                  forced: true,
                  content: function () {
                    trigger.num++;
                  }
                },
                buff2: {
                  //audio:"ext:极略:true",
                  trigger: { player: 'useCardAfter', global: 'phaseAfter' },
                  priority: 2,
                  filter: function (event) {
                    if (event.name == 'useCard') return (event.card && (event.card.name == 'sha'));
                    return true;
                  },
                  forced: true,
                  popup: false,
                  content: function () {
                    player.removeSkill('jlsg_jiwu_buff1');
                    player.removeSkill('jlsg_jiwu_buff2');
                  },
                },
                buff3: {
                  mod: {
                    attackRangeBase: function (player, num) {
                      return Infinity;
                    },
                  }
                }
              },
              ai: {
                order: function () {
                  return lib.card.sha.ai.order + 0.1;
                },
                result: {
                  player: function (player, target) {
                    if (player.countCards('h') == 0) return 1;
                    if (player.hasSkill('jiu') || player.hasSkill('tianxianjiu')) return 3;
                    return 4 - player.countCards('h');
                  }
                },
                effect: {
                  target: function (card, player, target) {
                    if (get.subtype(card) == 'equip1') {
                      var num = 0;
                      for (var i = 0; i < game.players.length; i++) {
                        if (get.attitude(player, game.players[i]) < 0) {
                          num++;
                          if (num > 1) return [0, 0, 0, 0];
                        }
                      }
                    }
                  }
                }
              }
            },
            jlsg_sheji: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { global: 'damageEnd' },
              filter: function (event, player) {
                return player.countDiscardableCards(player, 'he') &&
                  event.source && event.source.get('e', '1') &&
                  event.source != player;
              },
              check: function (event, player) {
                return get.attitude(player, event.source) <= 0;
              },
              direct: true,
              content: function () {
                'step 0'
                event.card = trigger.source.get('e', '1');
                if (!event.card) {
                  event.finish(); return;
                }
                var prompt = `###是否发动【射戟】？###弃置一张牌获得${get.translation(trigger.source)}的${get.translation(event.card)}`;
                var next = player.chooseToDiscard('he', prompt);
                next.logSkill = ['jlsg_sheji', trigger.source];
                next.set("ai", function (card) {
                  if (get.attitude(player, trigger.source) < 0) {
                    return 6 - get.value(card);
                  }
                  return 0;
                });
                'step 1'
                if (result.bool) {
                  trigger.source.$give(event.card, player);
                  player.gain(event.card);
                }
              },
              group: ['jlsg_sheji2', 'jlsg_sheji_wushuang'],
              subSkill: {
                wushuang: {
                  audio: false,
                  trigger: { player: 'useCardToPlayered' },
                  forced: true,
                  filter: function (event, player) {
                    return event.card.name == 'sha' && !event.getParent().directHit.includes(event.target) && event.parent.skill == 'jlsg_sheji2';
                  },
                  logTarget: 'target',
                  content: function () {
                    var id = trigger.target.playerid;
                    var map = trigger.getParent().customArgs;
                    if (!map[id]) map[id] = {};
                    if (typeof map[id].shanRequired == 'number') {
                      map[id].shanRequired++;
                    } else {
                      map[id].shanRequired = 2;
                    }
                  }
                }
              }
            },
            jlsg_sheji2: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: { type: 'equip' },
              viewAs: { name: 'sha' },
              viewAsFilter: function (player) {
                return player.countCards('he', { type: 'equip' }) != 0;
              },
              position: 'he',
              prompt: '将一张装备牌当【杀】使用或打出',
              check: function (card) {
                if (get.subtype(card) == 'equip1') return 10 - get.value(card);
                return 7 - get.equipValue(card);
              },
              mod: {
                targetInRange: function (card) {
                  if (_status.event.skill == 'jlsg_sheji2') return true;
                }
              },
              ai: {
                order: function () {
                  return lib.card.sha.ai.order + 0.1;
                },
                respondSha: true,
                skillTagFilter: function (player) {
                  if (!player.countCards('he')) return false;
                }
              }
            },
            jlsg_xingyi: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              srlose: true,
              filterTarget: function (card, player, target) {
                return target.countCards('h') > 0 && player != target;
              },
              content: function () {
                if (target.countCards('h') > 0) {
                  player.gainPlayerCard(target, true, 'h');
                }
                target.recover();
              },
              ai: {
                order: 2,
                result: {
                  player: function (card, player, target) {
                    if (jlsg.needKongcheng(player, true)) return -1;
                    return 1;
                  },
                  target: function (player, target) {
                    if (jlsg.needKongcheng(target) && target.countCards('h') == 1) return 5;
                    if (target.countCards('h') > target.hp && target.isDamaged()) return 4;
                    if (jlsg.isWeak(target)) return 2;
                    if (target.isDamaged()) return 1;
                    if (!jlsg.hasLoseHandcardEffective(target) && target.isDamaged()) return 1;
                    if (target.hp == jlsg.getBestHp(target)) return -0.1;
                    if (!target.isDamaged() && jlsg.hasLoseHandcardEffective(target)) return -1;
                    return 0;
                  }
                },
                threaten: 2
              }
            },
            jlsg_guagu: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'dying' },
              priority: 6,
              filter: function (event, player) {
                return event.player.hp <= 0 && event.player.countCards('h') != 0;
              },
              logTarget: 'player',
              check: function (event, player) {
                var att = get.attitude(player, event.player);
                var num = event.player.countCards('h');
                if (att > 0 && event.player.hasSkillTag('nosave')) {
                  return false;
                }
                if (num < 3) {
                  return att > 0;
                }
                if (num > 4) {
                  return att < 0;
                }
                return [true, false].randomGet();
              },
              content: function () {
                "step 0"
                var cards = trigger.player.getCards('h');
                event.bool = cards.length >= 2;
                trigger.player.discard(cards);
                trigger.player.recover();
                "step 1"
                if (event.bool) {
                  trigger.player.draw();
                }
              },
              ai: {
                expose: 0.2,
                threaten: 1.5,
                // save:true,
                // skillTagFilter:function(player,tag,target){
                //   debugger;
                //   return target.countCards('h');
                // },
              }
            },
            jlsg_wuqin: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseJieshuEnd' },
              filter: function (event, player) {
                return player.countCards('h', { type: 'basic' }) > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseToDiscard('是否发动【五禽】？', function (card) {
                  return get.type(card) == 'basic';
                }).ai = function (card) {
                  if (jlsg.needKongcheng(player) && player.countCards('h') == 1) return 10 - get.value(card);
                  return 5 - get.useful(card);
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill("jlsg_wuqin");
                player.draw(2);
                player.getStat().card = {};
                player.getStat().skill = {};
                player.phaseUse();
              }
            },
            jlsg_lijian: {
              audio: "ext:极略:2",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return game.countPlayer(function (current) {
                  return current != player && current.hasSex('male');
                }) > 1;
              },
              check: function (card) {
                return 10 - get.value(card)
              },
              filterCard: true,
              position: 'he',
              filterTarget: function (card, player, target) {
                if (player == target) return false;
                if (!target.hasSex('male')) return false;
                if (ui.selected.targets.length == 1) {
                  return target.canUse({ name: 'juedou' }, ui.selected.targets[0]);
                }
                return true;
              },
              targetprompt: ['先出杀', '后出杀'],
              selectTarget: 2,
              multitarget: true,
              content: function () {
                targets[1].useCard({
                  name: 'juedou',
                  isCard: true
                }, 'nowuxie', targets[0], 'noai').animate = false;
                game.delay(0.5);
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    if (ui.selected.targets.length == 0) {
                      return -3;
                    } else {
                      return get.effect(target, { name: 'juedou' }, ui.selected.targets[0], target);
                    }
                  }
                },
                expose: 0.4,
                threaten: 3,
              }
            },
            jlsg_manwu: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                if (!target.hasSex('male')) return false;
                return target.countCards('h') && player != target;
              },
              content: function () {
                event.card = target.get('h').randomGet();
                player.showCards(event.card);
                if (get.suit(event.card) == 'diamond') {
                  target.addJudge('lebu', event.card);
                  target.$give(event.card, target);
                } else {
                  player.gain(event.card, target, 'give').set('visible', true);
                  // target.$give(event.card, player);
                }
              },
              ai: {
                order: 9,
                result: {
                  // player: function (card, player, target) {
                  // },
                  target: function (target, player) {
                    return get.effect(target, { name: 'lebu' }, player, target);
                  },
                  player: 1,
                }
              }
            },
            jlsg_baiyue: {
              audio: "ext:极略:2",
              srlose: true,
              forced: true,
              popup: false,
              silent: true,
              charlotte: true,
              marktext: "拜",
              intro: {
                content: 'cards',
              },
              init: function (player) {
                player.storage.jlsg_baiyue = [];
              },
              trigger: { global: ["loseAfter", "loseAsyncAfter", "cardsDiscardAfter", "equipAfter"] },
              filter: function (event, player) {
                if (_status.currentPhase != player) return false;
                if (event.name == 'cardsDiscard') {
                  var evt = event.getParent();
                  if (evt.name != 'orderingDiscard') return false;
                  var evtx = (evt.relatedEvent || evt.getParent());
                  if (evtx.player == player) return false;
                  return game.hasGlobalHistory('cardMove', (e) => e.name == 'lose' && (e.relatedEvent || e.getParent()) == evtx && e.cards2.length > 0)

                }
                var cards = event.getd();
                cards.removeArray(event.getd(player));
                return cards.length;
              },
              content: function () {
                var cards = trigger.getd();
                cards.removeArray(trigger.getd(player));
                player.markAuto("jlsg_baiyue", cards.filterInD('d'));
                player.addTempSkill('jlsg_baiyue_phaseEnd');
              },
              subSkill: {
                phaseEnd: {
                  audio: 'jlsg_baiyue',
                  onremove: function (player) {
                    player.storage.jlsg_baiyue = [];
                    player.unmarkSkill("jlsg_baiyue");
                  },
                  trigger: { player: 'phaseJieshuBegin' },
                  filter: function (event, player) {
                    return player.getStorage('jlsg_baiyue').filterInD('d').length;
                  },
                  direct: true,
                  content: function () {
                    'step 0'
                    player.chooseCardButton('是否发动【拜月】？', player.getStorage('jlsg_baiyue').filterInD('d')).ai = function (button) {
                      return get.value(button.link);
                    }
                    'step 1'
                    if (result.bool) {
                      player.logSkill('jlsg_baiyue');
                      player.unmarkAuto('jlsg_baiyue', [result.buttons[0].link]);
                      player.gain(result.buttons[0].link);
                      player.$gain(result.buttons[0].link);
                    }
                  },
                }
              }
            },
            // jlsg_baiyue: {
            //   audio: "ext:极略:2",
            //   srlose: true,
            //   trigger: { player: 'phaseEnd' },
            //   filter: function (event, player) {
            //     return player.storage.jlsg_baiyue.length;
            //   },
            //   direct: true,
            //   content: function () {
            //     'step 0'
            //     player.chooseCardButton('是否发动【拜月】？', player.storage.jlsg_baiyue, true).ai = function (button) {
            //       return get.value(button.link);
            //     }
            //     'step 1'
            //     if (result.bool) {
            //       player.logSkill('jlsg_baiyue');
            //       player.storage.jlsg_baiyue.remove(result.buttons[0].link);
            //       player.gain(result.buttons[0].link);
            //       player.$gain(result.buttons[0].link);
            //     }
            //     player.storage.jlsg_baiyue = [];
            //   },
            //   group: ['jlsg_baiyue_countGeneral'],
            //   subSkill: {
            //     countGeneral: {
            //       trigger: { global: ['useCardAfter', 'respondAfter', 'discardAfter'] },
            //       forced: true,
            //       popup: false,
            //       filter: function (event, player) {
            //         if (_status.currentPhase != player) return false;
            //         //if(event.player==player) return false;
            //         if (event.cards) {
            //           for (var i = 0; i < event.cards.length; i++) {
            //             if (event.cards[i].position != 'd')
            //               return true;
            //           }
            //         }
            //         return false;
            //       },
            //       content: function () {
            //         for (var i = 0; i < trigger.cards.length; i++) {
            //           if (get.position(trigger.cards[i]) == 'd') {
            //             player.storage.jlsg_baiyue = player.storage.jlsg_baiyue.concat(trigger.cards[i]);
            //           }
            //         }
            //       }
            //     },
            //   },
            //   init: function (player) {
            //     player.storage.jlsg_baiyue = [];
            //   }
            // },
            jlsg_yinmeng: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              group: ['jlsg_yinmeng2'],
              filter: function (event, player) {
                return player.countCards('h') && (player.storage.jlsg_yinmeng < Math.max(1, player.getDamagedHp()));
              },
              filterTarget: function (card, player, target) {
                return target.hasSex('male') && target.countCards('h') && player != target;
              },
              content: function () {
                'step 0'
                player.storage.jlsg_yinmeng++;
                'step 1'
                event.card = target.get('h').randomGet();
                //target.$phaseJudge(event.card);
                target.showCards(event.card);
                player.chooseCard(get.translation(target) + '展示的牌是' + get.translation(event.card) + ',请选择你展示的牌', true).ai = function (card) {
                  if (ai.get.attitude(player, target) > 0) return (get.type(event.card, 'trick') == get.type(card, 'trick'));
                  return (get.type(event.card, 'trick') != get.type(card, 'trick'));
                }
                'step 2'
                player.showCards(result.cards[0]);
                if (get.type(result.cards[0], 'trick') == get.type(event.card, 'trick')) {
                  game.asyncDraw([player, target]);
                }
                else {
                  target.discard(event.card);
                }
              },
              ai: {
                order: 4,
                result: {
                  player: 0.5,
                  target: function (player, target) {
                    var suits = player.getCards('h').map(card => get.type(card, 'trick'));
                    var num = new Set(suits).size;
                    var m = num / 3;
                    if (get.attitude(player, target) > 0 && Math.random() < m) return 1;
                    if (get.attitude(player, target) < 0 && Math.random() < m) return -1;
                    return 0;
                  }
                }
              },
            },
            jlsg_yinmeng2: {
              trigger: { player: 'phaseBefore' },
              forced: true,

              silent: true,
              popup: false,
              priority: 10,
              content: function () {
                player.storage.jlsg_yinmeng = 0;
              }
            },
            jlsg_xianger: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: {
                global: "phaseBegin",
              },
              filter: function (event, player) {
                return event.player.sex == 'male' && event.player != player && player.countCards('h', { type: 'basic' }) > 1 && !event.player.hasSkill("jlsg_xianger2");
              },
              check: function (event, player) {
                if (get.attitude(player, event.player) > 0 && event.player.hasJudge('lebu')) return 1;
                if (get.attitude(player, event.player) > 0 && event.player.hasJudge('bingliang')) return 1;
                if (get.attitude(player, event.player) < 0 && event.player.hp == 1) return 1;
                return 0;
              },
              content: function () {
                "step 0"
                player.chooseCard(2, 'h', function (card) {
                  return get.type(card) == 'basic';
                }, '交给' + get.translation(trigger.player) + '两张基本牌', true).set('ai', function (card) {
                  return 7 - get.value(card);
                });
                "step 1"
                if (result.bool) {
                  player.$give(2, trigger.player);
                  trigger.player.gain(result.cards, player);
                  trigger.player.skip('phaseUse');
                  trigger.player.chooseBool('是否视为对' + get.translation(player) + '使用一张【杀】').set('ai', function (event, player) {
                    if (get.attitude(player, trigger.player) < 0 || player == 1) return 1;
                    if (get.attitude(player, trigger.player) < 0 || trigger.player == 1) return 0;
                    if (get.effect(player, { name: 'sha' }, trigger.player, trigger.player) < 0 && get.attitude(player, trigger.player) < 0) return 1;
                    if (get.effect(player, { name: 'sha' }, trigger.player, trigger.player) > 0 && get.attitude(player, trigger.player) > 0) return 0;
                    return 0;
                  });
                } else {
                  event.finish();
                }
                "step 2"
                if (result.bool) {
                  trigger.player.useCard({ name: 'sha' }, player);
                } else {
                  trigger.player.storage.jlsg_xianger2 = player;
                  trigger.player.addSkill("jlsg_xianger2");
                }
                "step 3"
                if (!trigger.player.getStat("damage")) {
                  trigger.player.skip('phaseDiscard');
                  player.draw();
                }
              },
            },
            jlsg_xianger2: {
              trigger: {
                player: "phaseUseBegin",
              },
              unique: true,
              forced: true,
              mark: true,
              marktext: "饵",
              intro: {
                content: function (player) {
                  return "回合开始受到1点伤害";
                },
              },
              content: function () {
                player.damage(1, player.storage.jlsg_xianger2);
                player.line(player.storage.jlsg_xianger2, 'red');
                player.removeSkill('jlsg_xianger2');
              },
            },
            jlsg_juelie: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return target.countCards('h') != player.countCards('h');
              },
              content: function () {
                'step 0'
                var prompt = `选择将手牌数调整至${get.cnNumber(player.countCards('h'))}张，或令${get.translation(player)}视为对你使用一张杀`;
                target.chooseControl('调整手牌', '对你出杀').set('ai', function () {
                  if (target.countCards('h') > player.countCards('h') && target.countCards('h', 'shan')) return '对你出杀';
                  if (target.countCards('h') < player.countCards('h')) return '调整手牌';
                  if (target.countCards('h') - player.countCards('h') >= 2) return '对你出杀';
                  if (get.effect(target, { name: 'sha' }, player, target) > 0) return '对你出杀';
                  return '调整手牌';
                }).set('prompt', prompt);
                'step 1'
                if (result.control == '调整手牌') {
                  if (target.countCards('h') > player.countCards('h')) {
                    target.chooseToDiscard(target.countCards('h') - player.countCards('h'), true);
                  } else {
                    target.draw(player.countCards('h') - target.countCards('h'));
                  }
                } else {
                  player.useCard({ name: 'sha' }, target, false);
                }
              },
              ai: {
                threaten: 2,
                order: 12,
                result: {
                  target: function (player, target) {
                    return (player.countCards('h') - target.countCards('h'));
                  }
                }
              }
            },
            jlsg_xiwu: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { player: 'shaMiss' },
              priority: -1,
              shaRelated: true,
              check: function (event, player) {
                return get.attitude(player, event.target) < 2;
              },
              content: function () {
                player.draw();
                if (trigger.target.countCards('h')) {
                  player.discardPlayerCard(trigger.target, 'h', true);
                }
              }
            },
            jlsg_fangxin: {
              audio: "ext:极略:2",
              srlose: true,
              enable: 'chooseToUse',
              discard: false,
              prepare: function (cards, player) {
                player.$give(cards, player);
              },
              filter: function (event, player) {
                if (event.type == 'dying') {
                  return event.filterCard({ name: 'tao' }, player) && ((!player.hasJudge('lebu') && player.countCards('he', { suit: 'diamond' })) || (!player.hasJudge('bingliang') && player.countCards('he', { suit: 'club' })));
                }
                if (event.parent.name != 'phaseUse') return false;
                if (!lib.filter.filterCard({ name: 'tao' }, player, event)) {
                  return false;
                }
                return player.isDamaged() && ((!player.hasJudge('lebu') && player.countCards('he', { suit: 'diamond' })) || (!player.hasJudge('bingliang') && player.countCards('he', { suit: 'club' })));
              },
              position: 'he',
              filterCard: function (card, player, target) {
                return ((get.suit(card) == 'diamond' && !player.hasJudge('lebu')) || (get.suit(card) == 'club' && !player.hasJudge('bingliang')));
              },
              filterTarget: function (card, player, target) {
                if (_status.event.type == 'dying') {
                  return target == _status.event.dying;
                }
                return player == target;
              },
              selectTarget: -1,
              check: function (card) {
                return 8 - get.value(card);
              },
              content: function () {
                if (get.suit(cards[0]) == 'diamond') {
                  player.addJudge('lebu', cards[0]);
                } else {
                  player.addJudge('bingliang', cards[0]);
                }
                player.useCard({ name: 'tao' }, targets).delayx = false;
              },
              ai: {
                threaten: 1.5,
                save: true,
                order: 9,
                result: {
                  player: function (player) {
                    return get.effect(player, { name: 'lebu' }, player, player);
                  },
                  target: function (player, target) {
                    return get.effect(target, { name: 'tao' }, player, target);
                  }
                }
              }
            },
            jlsg_fangxin_old: {
              srlose: true,
              enable: 'chooseToUse',
              check: function (event, player) {
                return get.attitude(player, event.player) > 0;
              },
              audio: "ext:极略:2",
              filter: function (event, player) {
                if (event.type == 'dying') {
                  return event.filterCard({ name: 'tao' }, player) && ((!player.hasJudge('lebu') && player.countCards('he', { suit: 'diamond' })) || (!player.hasJudge('bingliang') && player.countCards('he', { suit: 'club' })));
                }
                if (event.parent.name != 'phaseUse') return false;
                if (!lib.filter.filterCard({ name: 'tao' }, player, event)) {
                  return false;
                }
                return player.isDamaged() && ((!player.hasJudge('lebu') && player.countCards('he', { suit: 'diamond' })) || (!player.hasJudge('bingliang') && player.countCards('he', { suit: 'club' })));
              },
              chooseButton: {
                dialog: function (event, player) {
                  return ui.create.dialog('将一张梅花牌当【兵粮寸断】或将一张方片牌当【乐不思蜀】对自己使用，若如此做，视为你使用一张【桃】。', player.get('he'), 'hidden');
                },
                filter: function (button, player) {
                  return ((get.suit(button.link) == 'diamond' && !player.hasJudge('lebu')) || (get.suit(button.link) == 'club' && !player.hasJudge('bingliang')));
                },
                backup: function (links, player) {
                  return {
                    filterCard: function () {
                      return false
                    },
                    selectCard: -1,
                    viewAs: { name: 'tao' },
                    cards: links,
                    onuse: function (result, player) {
                      player.logSkill('jlsg_fangxin');
                      if (get.suit(lib.skill.jlsg_fangxin_backup.cards) == 'diamond') {
                        player.addJudge('lebu', lib.skill.jlsg_fangxin_backup.cards);
                      } else {
                        player.addJudge('bingliang', lib.skill.jlsg_fangxin_backup.cards);
                      }

                    }
                  }
                }
              },
              ai: {
                order: 10,
                result: {
                  target: function (player) {
                    if (player.countCards('h') <= player.hp) return 1;
                    if (player.hp <= 1) return 10;
                    return -2;
                  }
                },
                save: true
              }
            },
            jlsg_xiyu: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseBegin' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget('细语：弃置一名角色的一张牌，然后该角色进行1个额外的出牌阶段', function (card, player, target) {
                  return target.countCards('he') > 0;
                }).ai = function (target) {
                  if (target.countCards('h') >= 3) return get.attitude(_status.event.player, target);
                  if (target.countCards('h') < 2) return -get.attitude(_status.event.player, target);
                  return -get.attitude(_status.event.player, target);
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_xiyu', result.targets);
                  event.targets = result.targets;
                  if (event.targets[0].num('he') > 0) {
                    player.discardPlayerCard('he', event.targets[0], true);
                  }
                  event.targets[0].phaseUse();
                  event.targets[0].getStat().card = {};
                  event.targets[0].getStat().skill = {};
                }
              }
            },
            jlsg_wanrou: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: {
                player: "loseAfter",
                global: ["cardsDiscardAfter", "loseAsyncAfter", 'equipAfter'],
              },
              direct: true,
              filter: function (event, player) {
                if (event.name == 'cardsDiscard') { // judge
                  var evt = event.getParent();
                  if (!(evt.name == 'orderingDiscard' && evt.relatedEvent && evt.relatedEvent.player === player)) {
                    return false;
                  }
                  var relatedEvent = evt.relatedEvent;
                  var loses = player.getHistory('lose', e => relatedEvent == (e.relatedEvent || e.getParent()));
                  loses = loses.map(e => {
                    e = e.getl(player);
                    if (!e) {
                      return [];
                    }
                    let cards = e.js || [];
                    if (e.hs) {
                      cards.addArray(e.hs.filter(c => get.suit(c, player) == 'diamond'));
                    }
                    if (e.es) {
                      cards.addArray(e.es.filter(c => get.suit(c, player) == 'diamond'));
                    }
                    return cards;
                  }).flat();
                  loses = event.getd().filter(c => loses.includes(c));
                  return loses.length;
                  // return event.getd().filter(c => c.original === 'j');
                }
                var cards = event.getd(player);
                if (cards.some(c => get.suit(c, player) == 'diamond')) {
                  return true;
                }
                var evt = event.getl(player);
                if (!evt || !evt.js) {
                  return false;
                }
                return evt.js.some(c => cards.includes(c));
              },
              content: function () {
                'step 0'
                if (trigger.name == 'cardsDiscard') {
                  var relatedEvent = trigger.getParent().relatedEvent;
                  var loses = player.getHistory('lose', e => relatedEvent == (e.relatedEvent || e.getParent()));
                  loses = loses.map(e => {
                    e = e.getl(player);
                    if (!e) {
                      return [];
                    }
                    let cards = e.js || [];
                    if (e.hs) {
                      cards.addArray(e.hs.filter(c => get.suit(c, player) == 'diamond'));
                    }
                    if (e.es) {
                      cards.addArray(e.es.filter(c => get.suit(c, player) == 'diamond'));
                    }
                    return cards;
                  }).flat();
                  loses = trigger.getd().filter(c => loses.includes(c));
                  event.count = loses.length;
                } else {
                  var evt = trigger.getl(player);
                  if (!evt || !evt.js) {
                    event.count = trigger.getd(player).filter(c => get.suit(c, player) == 'diamond').length;
                  } else {
                    event.count = trigger.getd(player).filter(c => get.suit(c, player) == 'diamond' || evt.js.includes(c)).length;
                  }
                }
                'step 1'
                --event.count;
                player.chooseTarget(`###${get.prompt(event.name)}###令一名角色摸一张牌`).ai = function (target) {
                  return ai.get.attitude(player, target)
                }
                'step 2'
                if (result.bool) {
                  player.logSkill('jlsg_wanrou', result.targets[0]);
                  result.targets[0].draw();
                  if (event.count) {
                    event.goto(1);
                  }
                }
              },
              ai: {
                threaten: 0.7
              },
            },
            jlsg_zhouyan: {
              audio: "ext:极略:1",
              srlose: true,
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, player, target) {
                return player != target;
              },
              direct: true,
              init: function (player) {
                player.storage.isjlsg_zhouyan = false;
                player.storage.jlsg_zhouyanDamage = false;
              },
              content: function () {
                'step 0'
                player.logSkill('jlsg_zhouyan');
                player.storage.isjlsg_zhouyan = true;
                target.draw();
                player.useCard({ name: 'huogong' }, target);
                'step 1'
                if (player.storage.jlsg_zhouyanDamage && target.isAlive()) {
                  player.storage.jlsg_zhouyanDamage = false;
                  player.chooseBool('是否继续发动【舟焰】？').ai = function () {
                    return get.attitude(player, target) < 0;
                  }
                } else {
                  player.storage.isjlsg_zhouyan = false;
                  player.storage.jlsg_zhouyanDamage = false;
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  event.goto(0);
                }
                player.storage.isjlsg_zhouyan = false;
                player.storage.jlsg_zhouyanDamage = false;
              },
              group: ['jlsg_zhouyan_damage'],
              subSkill: {
                damage: {
                  trigger: { source: 'damageEnd' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return event.card && event.card.name == 'huogong';
                  },
                  content: function () {
                    player.draw();
                    if (player.storage.isjlsg_zhouyan) {
                      player.storage.isjlsg_zhouyan = false;
                      player.storage.jlsg_zhouyanDamage = true;
                    }
                  }
                }
              },
              ai: {
                order: 4,
                player: 0,
                fireattack: true,
                target: function (player, target) {
                  if (player == target) return 1;
                  if (!lib.card.huogong) return 0;
                  var result = lib.card.huogong.ai.result.target;

                  if ((player.countCards('h') > 2 || target.hp <= 2) && !target.hasSkill('huogong2') && get.damageEffect(target, player, player, 'fire') > 0 && result(player, target) < 0) return -2;
                  if (get.attitude(player, target) > 0) return 0.9;
                  if (target.countCards('h') == 0) return 1;
                  return 0.5;
                }
              }
            },
            jlsg_zhaxiang: {
              audio: "ext:极略:true",
              srlose: true,
              enable: 'phaseUse',
              filterCard: true,
              discard: false,
              filterTarget: function (card, target, player) {
                return player != target;
              },
              complexCard: true,
              prepare: function (cards, player, targets) {
                player.$give(cards.length, targets[0]);
              },
              check: function (card) {
                var player = _status.event.player;
                if (player.countCards('h', 'sha') > player.getCardUsable('sha') || !game.hasPlayer(function (current) {
                  return player.canUse('sha', current) && current.inRangeOf(player) && player.hasCard('sha', 'h') && player.hasCard(function (cardx) {
                    return get.effect(current, cardx, player, player) > 0 && cardx.name == 'sha';
                  }, 'h');
                })) {
                  if (card.name == 'sha') {
                    for (var i = 0; i < game.players.length; i++) {
                      if (player == game.players[i]) continue;
                      var target = game.players[i];
                      var effect = get.effect(target, {
                        name: 'sha',
                        nature: 'fire'
                      }, player, player);
                      if (effect > 0) return 7 - get.value(card);
                    }
                  }
                } else {
                  if (player.needsToDiscard() || player.countCards('h') > 4) return 6 - get.value(card);
                }
                return 0;
              },
              content: function () {
                'step 0'
                event.cards1 = cards[0];
                event.target = target;
                var cardx = ui.create.card();
                cardx.name = '诈降牌';
                cardx.classList.add('infohidden');
                cardx.classList.add('infoflip');
                player.showCards(cardx, '诈降');
                var random = Math.random();
                var att = get.attitude(event.target, player);
                event.target.chooseCard('交给' + get.translation(player) + '一张牌，或展示并获得此牌。').ai = function (card) {
                  if (['sha', 'jiu', 'tao'].includes(card.name)) return -1;
                  var effect = get.attitude(player, event.target) > 0 ?
                    0 : get.damageEffect(event.target, player, event.target, 'fire');
                  return -effect - get.value(card, event.target) + (get.attitude(event.target, player) / 5 * get.value(card, player)) - 2;
                }
                'step 1'
                if (result.bool) {
                  player.gain(result.cards[0]);
                  event.target.$give(result.cards[0], player);
                  event.target.discard(event.cards1);
                } else {
                  event.target.showCards(event.cards1);
                  event.target.gain(event.cards1);
                  event.target.$gain2(event.cards1);
                  if (event.cards1.name == 'sha') {
                    player.useCard({ name: 'sha', nature: 'fire' }, event.target, false);
                  }
                }
              },
              ai: {
                order: 6,
                fireattack: true,
                result: {
                  target: function (target, player) {
                    if (!ui.selected.cards.length) return 0;
                    if (ui.selected.cards[0].name == 'sha') {
                      var effect = get.effect(target, {
                        name: 'sha',
                        nature: 'fire'
                      }, player, player);
                      if (target.mayHaveShan()) effect *= 1.2;
                      if (effect > 0) {
                        return (get.attitude(player, target) > 0 ? 1 : -1) * effect
                      }
                      return 0;
                    } else {
                      return 1;
                    }
                    return 0;
                  }
                }
              },
              group: "jlsg_zhaxiang_directHit",
              subSkill: {
                directHit: {
                  shaRelated: true,
                  trigger: { player: 'useCard1' },
                  firstDo: true,
                  silent: true,
                  filter: function (event, player) {
                    return event.parent.name == 'jlsg_zhaxiang';
                  },
                  content: function () {
                    trigger.directHit.addArray(game.players);
                  },
                }
              },
            },
            jlsg_old_zhaxiang: {
              audio: "ext:极略:true",
              enable: "phaseUse",
              usable: 1,
              srlose: true,
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                "step 0"
                target.useCard({ name: 'sha' }, target, player, true);
                "step 1"
                player.draw(2);
                "step 2"
                player.addTempSkill('jlsg_buff_chuantou');
                "step 3"
                player.useCard({ name: 'sha' }, player, target, false);
                game.delay();
                "step 4"
                player.removeSkill('jlsg_buff_chuantou');
              },
              ai: {
                order: 4,
                result: {
                  target: function (player, target) {
                    if (!player.hasShan() && player.hp <= 1) {
                      return 0;
                    }
                    return -1;
                  },
                }
              }
            },
            jlsg_buff_chuantou: {
              ai: {
                unequip: true,
                skillTagFilter: function (player, tag, arg) {
                  if (arg && arg.name == 'sha') return true;
                  return false;
                },
              },
            },
            jlsg_shixue: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'shaBegin' },
              frequent: true,
              content: function () {
                player.draw(2);
                player.addTempSkill('jlsg_shixue2', 'shaAfter');
              }
            },
            jlsg_shixue2: {
              trigger: { player: 'shaMiss' },
              forced: true,
              popup: false,
              content: function () {
                player.chooseToDiscard(2, true);
              }
            },
            jlsg_guoshi: {
              audio: "ext:极略:2",
              srlose: true,
              trigger: { global: 'phaseJieshuBegin' },
              filter: function (event, player) {
                return lib.skill.jlsg_guoshi.getCards().length > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                var att = get.attitude(player, trigger.player);
                player.chooseCardButton(get.prompt('jlsg_guoshi', trigger.player), lib.skill.jlsg_guoshi.getCards()).ai = function (button) {
                  if (att > 0) return get.value(button.link, trigger.player);
                  return -get.value(button.link, trigger.player);
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_guoshi', trigger.player);
                  trigger.player.gain(result.buttons[0].link);
                  trigger.player.$gain(result.buttons[0].link);
                }
                if (trigger.player.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                'step 2'
                trigger.player.storage.jlsg_guoshi = [];
              },
              getCards() {
                let cards = game.getGlobalHistory('cardMove').filter(
                  e => {
                    if (e.type == 'discard') {
                      return true;
                    }
                    if (e.name != 'cardsDiscard') {
                      return false;
                    }
                    let evt = e.getParent().relatedEvent;
                    return evt && evt.name == 'judge';
                  }
                ).map(e => e.getd()).flat();
                return [...new Set(cards)].filterInD('d');
              },
              group: ['jlsg_guoshi2'],
              ai: {
                expose: 0.2
              }
            },
            jlsg_guoshi2: {
              audio: "jlsg_guoshi",
              trigger: { global: 'phaseZhunbeiBegin' },
              prompt: '是否发动【国士】观看牌顶的牌？',
              frequent: true,
              content: function () {
                player.chooseToGuanxing(2);
              },
              contentBackup: function () {
                "step 0"
                if (player.isUnderControl()) {
                  game.modeSwapPlayer(player);
                }
                var cards = get.cards(2);
                event.cards = cards;
                var switchToAuto = function () {
                  _status.imchoosing = false;
                  if (event.dialog) event.dialog.close();
                  if (event.control) event.control.close();
                  var top = [];
                  var judges = event.player.node.judges.childNodes;
                  var stopped = false;
                  if (get.attitude(player, event.player) > 0) {
                    for (var i = 0; i < judges.length; i++) {
                      var judge = get.judge(judges[i]);
                      cards.sort(function (a, b) {
                        return judge(b) - judge(a);
                      });
                      if (judge(cards[0]) < 0) {
                        stopped = true;
                        break;
                      } else {
                        top.unshift(cards.shift());
                      }
                    }
                  }
                  var bottom;
                  if (!stopped) {
                    cards.sort(function (a, b) {
                      return get.value(b, player) - get.value(a, player);
                    });
                    while (cards.length) {
                      if (get.value(cards[0], player) <= 5) break;
                      top.unshift(cards.shift());
                    }
                  }
                  bottom = cards;
                  for (var i = 0; i < top.length; i++) {
                    ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                  }
                  for (i = 0; i < bottom.length; i++) {
                    ui.cardPile.appendChild(bottom[i]);
                  }
                  player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(bottom.length) + '下');
                  game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                  game.delay(2);
                }
                var chooseButton = function (online, player, cards) {
                  var event = _status.event;
                  player = player || event.player;
                  cards = cards || event.cards;
                  event.top = [];
                  event.bottom = [];
                  event.status = true;
                  event.dialog = ui.create.dialog('按顺序选择置于牌堆顶的牌（先选择的在上）', cards);
                  event.switchToAuto = function () {
                    event._result = 'ai';
                    event.dialog.close();
                    event.control.close();
                    _status.imchoosing = false;
                  },
                    event.control = ui.create.control('ok', 'pileTop', 'pileBottom', function (link) {
                      var event = _status.event;
                      if (link == 'ok') {
                        if (online) {
                          event._result = {
                            top: [],
                            bottom: []
                          }
                          for (var i = 0; i < event.top.length; i++) {
                            event._result.top.push(event.top[i].link);
                          }
                          for (var i = 0; i < event.bottom.length; i++) {
                            event._result.bottom.push(event.bottom[i].link);
                          }
                        } else {
                          var i;
                          for (i = 0; i < event.top.length; i++) {
                            ui.cardPile.insertBefore(event.top[i].link, ui.cardPile.firstChild);
                          }
                          for (i = 0; i < event.bottom.length; i++) {
                            ui.cardPile.appendChild(event.bottom[i].link);
                          }
                          for (i = 0; i < event.dialog.buttons.length; i++) {
                            if (event.dialog.buttons[i].classList.contains('glow') == false &&
                              event.dialog.buttons[i].classList.contains('target') == false)
                              ui.cardPile.appendChild(event.dialog.buttons[i].link);
                          }
                          player.popup(get.cnNumber(event.top.length) + '上' + get.cnNumber(event.cards.length - event.top.length) + '下');
                          game.log(player, '将' + get.cnNumber(event.top.length) + '张牌置于牌堆顶');
                        }
                        event.dialog.close();
                        event.control.close();
                        game.resume();
                        _status.imchoosing = false;
                      } else if (link == 'pileTop') {
                        event.status = true;
                        event.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆顶的牌';
                      } else {
                        event.status = false;
                        event.dialog.content.childNodes[0].innerHTML = '按顺序选择置于牌堆底的牌';
                      }
                    });
                  for (var i = 0; i < event.dialog.buttons.length; i++) {
                    event.dialog.buttons[i].classList.add('selectable');
                  }
                  event.custom.replace.button = function (link) {
                    var event = _status.event;
                    if (link.classList.contains('target')) {
                      link.classList.remove('target');
                      event.top.remove(link);
                    } else if (link.classList.contains('glow')) {
                      link.classList.remove('glow');
                      event.bottom.remove(link);
                    } else if (event.status) {
                      link.classList.add('target');
                      event.top.unshift(link);
                    } else {
                      link.classList.add('glow');
                      event.bottom.push(link);
                    }
                  }
                  event.custom.replace.window = function () {
                    for (var i = 0; i < _status.event.dialog.buttons.length; i++) {
                      _status.event.dialog.buttons[i].classList.remove('target');
                      _status.event.dialog.buttons[i].classList.remove('glow');
                      _status.event.top.length = 0;
                      _status.event.bottom.length = 0;
                    }
                  }
                  game.pause();
                  game.countChoose();
                }
                event.switchToAuto = switchToAuto;
                if (event.isMine()) {
                  chooseButton();
                  event.finish();
                } else if (event.isOnline()) {
                  event.player.send(chooseButton, true, event.player, event.cards);
                  event.player.wait();
                  game.pause();
                } else {
                  event.switchToAuto();
                  event.finish();
                }
                "step 1"
                if (event.result == 'ai' || !event.result) {
                  event.switchToAuto();
                } else {
                  var top = event.result.top || [];
                  var bottom = event.result.bottom || [];
                  for (var i = 0; i < top.length; i++) {
                    ui.cardPile.insertBefore(top[i], ui.cardPile.firstChild);
                  }
                  for (i = 0; i < bottom.length; i++) {
                    ui.cardPile.appendChild(bottom[i]);
                  }
                  for (i = 0; i < event.cards.length; i++) {
                    if (!top.contains(event.cards[i]) && !bottom.contains(event.cards[i])) {
                      ui.cardPile.appendChild(event.cards[i]);
                    }
                  }
                  player.popup(get.cnNumber(top.length) + '上' + get.cnNumber(event.cards.length - top.length) + '下');
                  game.log(player, '将' + get.cnNumber(top.length) + '张牌置于牌堆顶');
                  game.delay(2);
                }
              }
            },
            jlsg_yingcai: {
              audio: "ext:极略:true",
              srlose: true,
              trigger: { player: 'phaseDrawBegin1' },
              check: function () {
                return true;
              },
              filter: function (event, player) {
                return !event.numFixed;
              },
              content: function () {
                'step 0'
                trigger.changeToZero();
                event.suit = [];
                event.cards = [];
                'step 1'
                event.cards2 = get.cards();
                game.cardsGotoOrdering(event.cards2);
                var card = event.cards2[0];
                if (card.clone) {
                  card.clone.classList.add('thrownhighlight');
                  game.addVideo('highlightnode', player, get.cardInfo(card));
                }
                event.node = trigger.player.$throwordered(card.copy(), true);
                event.node.classList.add('thrownhighlight');
                ui.arena.classList.add('thrownhighlight');
                game.delayx();
                if (!event.suit.includes(get.suit(event.cards2)))
                  event.suit.push(get.suit(event.cards2));
                if (event.suit.length <= 2) {
                  event.cards = event.cards.concat(event.cards2);
                  event.redo();
                } else {
                  event.cards1 = event.cards;
                  event.cards1 = event.cards1.concat(event.cards2[0]);
                  ui.discardPile.appendChild(event.cards2[0]);
                  game.delayx(2);
                }
                'step 2'
                ui.arena.classList.remove('thrownhighlight');
                player.gain(event.cards, 'gain2');
                event.cards2[0].clone.hide();
                game.delay();
              }
            },
            jlsg_old_yingcai: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseDrawBegin' },
              check: function () {
                return 1;
              },
              content: function () {
                'step 0'
                trigger.cancel();
                event.suit = [];
                event.cards = [];
                'step 1'
                event.cards2 = get.cards();
                if (!event.suit.includes(get.suit(event.cards2)))
                  event.suit.push(get.suit(event.cards2));
                if (event.suit.length <= 2) {
                  event.cards = event.cards.concat(event.cards2);
                  event.redo();
                } else {
                  event.cards1 = event.cards;
                  event.cards1 = event.cards1.concat(event.cards2[0]);
                  player.showCards(event.cards1);
                  ui.discardPile.appendChild(event.cards2[0]);
                }
                'step 2'
                player.gain(event.cards);
                if (event.cards.length) {
                  player.$draw(event.cards);
                }
              }
            },
            jlsg_weibao: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              filterTarget: function (card, player, target) {
                return player != target;
              },
              filterCard: true,
              check: function (card) {
                return 8 - get.value(card);
              },
              discard: false,
              content: function () {
                'step 0'
                player.$throw(1, 1000);
                cards[0].fix();
                ui.cardPile.insertBefore(cards[0], ui.cardPile.firstChild);
                target.chooseControl('heart2', 'diamond2', 'club2', 'spade2').set('ai', function (event) {
                  switch (Math.floor(Math.random() * 6)) {
                    case 0:
                      return 'heart2';
                    case 1:
                    case 4:
                    case 5:
                      return 'diamond2';
                    case 2:
                      return 'club2';
                    case 3:
                      return 'spade2';
                  }
                });
                'step 1'
                game.log(target, '选择了' + get.translation(result.control));
                event.choice = result.control;
                target.popup(event.choice);
                event.cards = get.cards();
                target.showCards(event.cards);
                target.gain(event.cards);
                target.$draw();
                'step 2'
                if (get.suit(event.cards) + '2' != event.choice) target.damage();
              },
              ai: {
                order: 1,
                result: {
                  target: function (player, target) {
                    var eff = get.damageEffect(target, player);
                    if (eff >= 0) return 1 + eff;
                    var value = 0, i;
                    var cards = player.get('h');
                    for (i = 0; i < cards.length; i++) {
                      value += get.value(cards[i]);
                    }
                    value /= player.countCards('h');
                    if (target.hp == 1) return Math.min(0, value - 7);
                    return Math.min(0, value - 5);
                  }
                }
              }
            },
            jlsg_choulve: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.countCards('h') > 1 && game.countPlayer(p => p != player) >= 2;
              },
              check: function (card) {
                if (ui.selected.cards.length == 0) return get.value(card);
                return 6 - get.value(card) && card.number < ui.selected.cards[0].number;
              },
              filterCard: true,
              selectCard: 2,
              filterTarget: function (card, player, target) {
                return player != target;
              },
              prepare: function (cards, player, targets) {
                player.$give(1, targets[0]);
                player.$give(1, targets[1]);
              },
              targetprompt: ['先拿牌', '后拿牌'],
              selectTarget: 2,
              discard: false,
              lose: false,
              multitarget: true,
              content: function () {
                targets[0].gain(cards[0]);
                targets[1].gain(cards[1]);
                targets[0].showCards(cards[0]);
                targets[1].showCards(cards[1]);
                if (get.number(cards[0]) != get.number(cards[1])) {
                  if (get.number(cards[0]) > get.number(cards[1])) {
                    targets[0].storage.jlsg_choulve = player;
                    targets[0].addTempSkill('jlsg_choulve_shaHit', 'shaAfter');
                    targets[0].useCard({ name: 'sha' }, targets[1], 'noai', false);
                  } else {
                    targets[1].storage.jlsg_choulve = player;
                    targets[1].addTempSkill('jlsg_choulve_shaHit', 'shaAfter');
                    targets[1].useCard({ name: 'sha' }, targets[0], 'noai', false);
                  }
                }
              },
              subSkill: {
                shaHit: {
                  trigger: { source: 'damageAfter' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return event.card.name == 'sha'
                  },
                  content: function () {
                    player.storage.jlsg_choulve.draw();
                  }
                }
              },
              ai: {
                order: 4,
                result: {
                  player: function (player) {
                    if (player.countCards('h') > player.hp) return 0.5;
                    return -5;
                  },
                  target: function (player, target) {
                    var card1 = ui.selected.cards[0];
                    var card2 = ui.selected.cards[1];
                    if (card1 && card2 && card1.number == card2.number) {
                      return 2;
                    }
                    if (ui.selected.targets.length == 0) {
                      return 1;
                    } else {
                      return get.effect(target, { name: 'sha' }, ui.selected.targets[0], target);
                    }
                  }
                }
              }
            },
            jlsg_old_jiexi: {
              audio: "ext:极略:true",
              srlose: true,
              enable: "phaseUse",
              filterTarget: function (card, player, target) {
                return player.canCompare(target) && target.countCards('h') > 0;
              },
              filter: function (event, player) {
                return player.countCards('h') > 0 && !player.isTurnedOver() && !player.hasSkill('jlsg_jilve2');
              },
              content: function () {
                "step 0"
                player.chooseToCompare(target);
                "step 1"
                if (result.bool) {
                  player.useCard({ name: 'guohe' }, target, true);
                } else {
                  player.addTempSkill('jlsg_jilve2', 'phaseAfter');
                }
                "step 2"
                if (!player.isTurnedOver() && player.countCards('h') < 4) {
                  player.turnOver();
                  player.draw();
                }
              },
              mod: {
                targetEnabled: function (card, player, target, now) {
                  if (target.isTurnedOver()) {
                    if (card.name == 'nanman' || card.name == 'shandian') return false;
                  }
                }
              },
              ai: {
                order: 5,
                result: {
                  target: function (player, target) {
                    var att = get.attitude(player, target);
                    var nh = target.countCards('h');
                    if (att > 0) {
                      var js = target.getCards('j');
                      if (js.length) {
                        var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                        if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                          return 3;
                        }
                      }
                      if (target.getEquip('baiyin') && target.isDamaged() &&
                        get.recoverEffect(target, player, player) > 0) {
                        if (target.hp == 1 && !target.hujia) return 1.6;
                        if (target.hp == 2) return 0.01;
                        return 0;
                      }
                    }
                    var es = target.getCards('e');
                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                    if (noh && (noe || noe2)) return 0;
                    if (att <= 0 && !target.countCards('he')) return 1.5;
                    return -1.5;
                  },
                },
              }
            },
            jlsg_old_youxia: {
              audio: "ext:极略:2",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, target, player) {
                return player != target && target.countCards('hej') > 0;
              },
              selectTarget: [1, 2],
              multitarget: true,
              multiline: true,
              content: function () {
                player.turnOver();
                targets.sortBySeat();
                for (var i = 0; i < targets.length; i++) {
                  player.discardPlayerCard('hej', targets[i], true);
                }
              },
              mod: {
                targetEnabled: function (card, player, target, now) {
                  if (target.isTurnedOver()) {
                    if (card.name == 'sha' || card.name == 'bingliang') return false;
                  }
                }
              },
              ai: {
                order: 5,
                result: {
                  player: -1,
                  target: function (player, target) {
                    if (get.attitude(player, target) <= 0) return (target.countCards('he') > 0) ? -1.5 : 1.5;
                    return 0;
                  },
                }
              }
            },
            jlsg_jiexi: {
              audio: "ext:极略:true",
              srlose: true,
              usable: 1,
              enable: 'phaseUse',
              filterTarget: function (card, target, player) {
                return player.canCompare(target);
              },
              filterCard: function () {
                return false
              },
              selectCard: -1,
              prompt: '你可以与一名其他角色拼点，若你赢，视为对其使用一张【过河拆桥】。你可重复此流程直到你以此法拼点没赢',
              content() {
                'step 0'
                player.chooseToCompare(target);
                'step 1'
                if (result.tie) {
                  return;
                }
                if (!result.bool) {
                  event.finish();
                  return;
                }
                if (lib.filter.targetEnabled2({ name: 'guohe' }, player, target)) {
                  player.useCard({ name: 'guohe' }, target);
                }
                'step 2'
                if (!player.canCompare(target)) {
                  event.finish();
                  return;
                }
                player.chooseBool(`是否再次${get.translation(target)}对发动〖劫袭〗?`, Math.random() < 0.6 && get.attitude(player, target) < -0.2 && target.countCards('he') >= 2);
                'step 3'
                if (result.bool) {
                  event.goto(0);
                }
              },
              ai: {
                basic: {
                  order: 9,
                  useful: 1,
                  value: 5,
                },
                result: {
                  target: function (player, target) {
                    var att = get.attitude(player, target);
                    var nh = target.countCards('h');
                    if (att > 0) {
                      var js = target.getCards('j');
                      if (js.length) {
                        var jj = js[0].viewAs ? { name: js[0].viewAs } : js[0];
                        if (jj.name == 'guohe' || js.length > 1 || get.effect(target, jj, target, player) < 0) {
                          return 3;
                        }
                      }
                      if (target.getEquip('baiyin') && target.isDamaged() &&
                        get.recoverEffect(target, player, player) > 0) {
                        if (target.hp == 1 && !target.hujia) return 1.6;
                        if (target.hp == 2) return 0.01;
                        return 0;
                      }
                    }
                    var es = target.getCards('e');
                    var noe = (es.length == 0 || target.hasSkillTag('noe'));
                    var noe2 = (es.length == 1 && es[0].name == 'baiyin' && target.isDamaged());
                    var noh = (nh == 0 || target.hasSkillTag('noh'));
                    if (noh && (noe || noe2)) return 0;
                    if (att <= 0 && !target.countCards('he')) return 1.5;
                    return -1.5;
                  },
                },
                tag: {
                  loseCard: 1,
                  discard: 1,
                },
              },
            },
            jlsg_youxia: {
              audio: "ext:极略:2",
              srlose: true,
              enable: 'phaseUse',
              filterTarget: function (card, target, player) {
                return player != target && target.countCards('hej') > 0;
              },
              filter: function (event, player) {
                return !player.isTurnedOver();
              },
              selectTarget: [1, 2],
              multitarget: true,
              multiline: true,
              content: function () {
                player.turnOver();
                for (var i = 0; i < targets.length; i++) {
                  player.gainPlayerCard('hej', targets[i]);
                }
              },
              mod: {
                targetEnabled: function (card, player, target, now) {
                  if (target.isTurnedOver()) {
                    if (card.name == 'sha' || card.name == 'juedou') return false;
                  }
                }
              },
              ai: {
                order: 9,
                result: {
                  player: -2,
                  target: function (player, target) {
                    if (get.attitude(player, target) <= 0) return (target.num('he') > 0) ? -1.5 : 1.5;
                    return 0;
                  },
                }
              }
            },
            jlsg_huailing: {
              trigger: {
                global: "useCardToPlayered",
              },
              srlose: true,
              audio: "ext:极略:1",
              filter: function (event, player) {
                if (event.player == player) return false;
                if (event.getParent().triggeredTargets3.length > 1) return false;
                if (get.type(event.card) != 'trick') return false;
                if (get.info(event.card).multitarget) return false;
                if (event.targets.length < 2) return false;
                if (!player.isTurnedOver()) return false;
                return true;
              },
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt('jlsg_huailing'), function (card, player, target) {
                  var evt = _status.event.getTrigger().getParent();
                  return evt.targets.includes(target) && !evt.excluded.includes(target) && player != target;
                }).ai = function (target) {
                  return get.attitude(player, target) > 0;
                };
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_huailing', result.targets);
                  player.turnOver();
                  trigger.getParent().excluded.addArray(result.targets);
                  game.delay();
                }
              },
              mod: {
                targetEnabled: function (card, player, target, now) {
                  if (target.isTurnedOver()) {
                    if (card.name == 'juedou' || card.name == 'guohe') return false;
                  }
                }
              },
              ai: {
                threaten: 1.5,
              },
            },
            jlsg_dailao: {
              audio: "ext:极略:2",
              usable: 1,
              srlose: true,
              enable: 'phaseUse',
              filterTarget: function (cards, target, player) {
                return player != target;
              },
              content: function () {
                'step 0'
                player.turnOver();
                target.turnOver();
                if (target.ai.shown > player.ai.shown) {
                  player.addExpose(0.1);
                }
                'step 1'
                target.chooseToDiscard('he').set('prompt2', `或点「取消」，令你与${get.translation(player)}各摸一张牌`).set('ai',
                  function (card) {
                    var unusefulness = get.unuseful(card);
                    var att = get.attitude(target, player);
                    if (-2 < att && att < 2) return -1;
                    if (!player.hasSkill('jlsg_ruya')) {
                      if (att > 0) return unusefulness;
                      return unusefulness + get.effect(player, { name: 'guohe' }, player, target) / 2;
                    }
                    if (att < 0 || player.countDiscardableCards(player, 'h') != player.countCards('h')) return -1;
                    if (player.isTurnedOver() && player.countCards('h') == 1) {
                      unusefulness += 8;
                    }
                    return unusefulness;
                  });
                'step 2'
                if (result.bool) {
                  target.addExpose(0.1);
                  player.chooseToDiscard('he', true);
                } else {
                  game.asyncDraw([player, target]);
                }
              },
              ai: {
                order: 9,
                result: {
                  player: function (player) {
                    return player.isTurnedOver() ? 5 : -3.5;
                  },
                  target: function (player, target) {
                    if (target.hasSkillTag('noturn')) return 0;
                    return target.isTurnedOver() ? 5 : -3.5;
                  }
                }
              }
            },
            jlsg_old_dailao: {
              audio: "ext:极略:2",
              usable: 1,
              srlose: true,
              enable: 'phaseUse',
              filterTarget: function (cards, target, player) {
                return player != target;
              },
              filterCard: true,
              position: 'he',
              check: function (card) {
                return 6 - get.value(card);
              },
              selectCard: [0, 1],
              complexCard: true,
              content: function () {
                if (cards.length == 0) {
                  game.asyncDraw([player, target]);
                } else {
                  target.chooseToDiscard('he', true);
                }
                player.turnOver();
                target.turnOver();
              },
              ai: {
                order: 9,
                result: {
                  player: function (player) {
                    if (ui.selected.cards.length > 0) {
                      if (player.isTurnedOver()) return 3;
                      if (!player.isTurnedOver()) return -4
                    }
                    if (ui.selected.cards.length == 0) {
                      if (player.isTurnedOver()) return 4;
                      if (!player.isTurnedOver()) return -3;
                    }
                  },
                  target: function (target, player) {
                    if (ui.selected.cards.length > 0) {
                      if (target.isTurnedOver()) return 3;
                      if (!target.isTurnedOver()) return -4
                    }
                    if (ui.selected.cards.length == 0) {
                      if (target.isTurnedOver()) return 4;
                      if (!target.isTurnedOver()) return -3;
                    }
                  }
                }
              }
            },
            jlsg_old_youdi: {
              audio: "ext:极略:true",
              srlose: true,
              enable: ['chooseToRespond', 'chooseToUse'],
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return player.isTurnedOver();
              },
              prompt: '将你的武将牌翻面，视为打出一张闪',
              check: function () {
                return 1
              },
              onrespond: function (result, player) {
                player.turnOver();
              },
              ai: {
                skillTagFilter: function (player) {
                  return player.isTurnedOver();
                },
                respondShan: true,
              },
              group: 'jlsg_old_youdi2'
            },
            jlsg_old_youdi2: {
              trigger: { global: 'shaMiss' },
              filter: function (event, player) {
                return event.target == player;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseToDiscard(get.prompt('jlsg_old_youdi', trigger.player), [1, Infinity])
                next.ai = function (card) {
                  if (get.attitude(player, trigger.player) <= 0) return 4 - get.value(card);
                  return false;
                };
                next.logSkill = ['jlsg_old_youdi', trigger.player];
                'step 1'
                if (result.bool) {
                  trigger.player.chooseToDiscard(result.cards.length, 'he', true);
                }
              }
            },
            jlsg_old_ruya: {
              audio: "ext:极略:true",
              srlose: true,
              frequent: true,
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (player.countCards('h')) return false;
                var evt = event.getl(player);
                return evt && evt.hs && evt.hs.length;
              },
              content: function () {
                player.turnOver();
                player.drawTo(player.maxHp);
              },
              ai: {
                threaten: 1.5,
                effect: {
                  target: function (card, player, target) {
                    if (target.countCards('h') == 1 && (card.name == 'guohe' || card.name == 'liuxinghuoyu')) return 0.5;
                    if (target.isTurnedOver() && target.countCards('h') == 1 && (card.name == 'guohe' || card.name == 'shunshou')) return -10;
                  }
                },
                noh: true,
                skillTagFilter: function (player, tag) {
                  if (tag == 'noh') {
                    if (player.countCards('h') != 1) return false;
                  }
                }
              }
            },
            jlsg_youdi: {
              audio: "ext:极略:1",
              srlose: true,
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return player.isTurnedOver();
              },
              prompt: '可以将你的武将牌正面朝上，视为打出一张【闪】',
              check: function () {
                return true;
              },
              onuse: function (result, player) {
                player.turnOver(false);
              },
              onrespond: function (result, player) {
                player.turnOver(false);
              },
              ai: {
                skillTagFilter: function (player) {
                  return player.isTurnedOver();
                },
                respondShan: true,
              },
              group: 'jlsg_youdi2'
            },
            jlsg_youdi2: {
              trigger: { global: 'shaMiss' },
              filter: function (event, player) {
                return event.target == player;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseToDiscard('是否发动【诱敌】？', [1, trigger.player.countCards('he')], 'he').ai = function (card) {
                  if (get.attitude(player, trigger.player) <= 0) return 4 - get.value(card);
                  return false;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_youdi', trigger.player);
                  trigger.player.chooseToDiscard(result.cards.length, 'he', true);
                }
              }
            },
            jlsg_ruya: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'loseEnd' },
              frequent: true,
              filter: function (event, player) {
                if (player.countCards('h')) return false;
                for (var i = 0; i < event.cards.length; i++) {
                  if (event.cards[i].original == 'h') return true;
                }
                return false;
              },
              content: function () {
                player.turnOver();
                player.draw(player.maxHp - player.countCards('h'));
              },
              ai: {
                threaten: 0.8,
                effect: {
                  target: function (card, player, target) {
                    if (target.countCards('h') == 1 && card.name == 'guohe') return 0.5;
                    if (target.isTurnedOver() && target.countCards('h') == 1 && (card.name == 'guohe' || card.name == 'shunshou')) return -10;
                  }
                },
                noh: true,
              }
            },
            jlsg_quanheng: {
              srlose: true,
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              chooseButton: {
                dialog: function () {
                  var list = ['wuzhong', 'sha'];
                  list[0] = ['trick', '', list[0]];
                  list[1] = ['basic', '', list[1]];
                  return ui.create.dialog('权衡', [list, 'vcard']);
                },
                filter: function (button, player) {
                  return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                },
                check: function (button) {
                  var player = _status.event.player;
                  var shaTarget = false;
                  for (var i = 0; i < game.players.length; i++) {
                    if (player.canUse('sha', game.players[i]) && get.effect(game.players[i], { name: 'sha' }, player) > 0) {
                      shaTarget = true;
                    }
                  }
                  if (shaTarget && !player.countCards('h', 'sha')) return (button.link[2] == 'sha') ? 1 : -1;
                  var hs = player.get('h');
                  for (var i = 0; i < hs.length; i++) {
                    if (5 - get.value(hs[i])) {
                      return (button.link[2] == 'wuzhong') ? 1 : -1;
                    }
                  }
                  return 0;
                },
                backup: function (links, player) {
                  return {
                    filterCard: true,
                    selectCard: [1, Infinity],
                    audio: "ext:极略:1",
                    popname: true,
                    position: 'hs',
                    ai1: function (card) {
                      if (ui.selected.cards.length > 0) return -1;
                      return 5 - get.value(card);
                    },
                    viewAs: { name: links[0][2] },
                    onuse: function (result, player) {
                      player.logSkill('jlsg_quanheng');
                      if (this.viewAs.name == 'wuzhong') {
                        player.storage.jlsg_quanheng_wuzhong_takeEffect = false;
                        player.addSkill('jlsg_quanheng_wuxie');
                      }
                    }
                  }
                },
                prompt: function (links, player) {
                  return '至少一张手牌当' + get.translation(links[0][2]) + '使用';
                },
              },
              group: ['jlsg_quanheng_shaMiss'],
              subSkill: {
                shaMiss: {
                  trigger: { player: 'shaMiss' },
                  forced: true,
                  nopop: true,
                  filter: function (event, player) {
                    return event.skill == 'jlsg_quanheng_backup';
                  },
                  content: function () {
                    player.draw(trigger.cards.length);
                  }
                }
              },
              init: function (player) {
                player.storage.jlsg_quanheng_wuzhong_takeEffect = false;
              },
              ai: {
                order: 8,
                result: {
                  player: 1,
                }
              }
            },
            jlsg_quanheng_wuxie: {
              group: ['jlsg_quanheng_wuxie_switch', 'jlsg_quanheng_wuxie_state'],
              subSkill: {
                switch: {
                  trigger: { global: 'wuxieAfter' },
                  forced: true,
                  popup: false,
                  content: function () {
                    player.storage.jlsg_quanheng_wuzhong_takeEffect = !player.storage.jlsg_quanheng_wuzhong_takeEffect;
                  }
                },
                state: {
                  trigger: { player: 'useCardAfter' },
                  forced: true,
                  popup: false,
                  filter: function (event, player) {
                    return event.card.name == 'wuzhong';
                  },
                  content: function () {
                    'step 0'
                    if (player.storage.jlsg_quanheng_wuzhong_takeEffect) {
                      player.draw(trigger.cards.length);
                    }
                    'step 1'
                    player.removeSkill('jlsg_quanheng_wuxie');
                    player.storage.jlsg_quanheng_wuzhong_takeEffect = false;
                  }
                }
              }
            },
            jlsg_xionglve: {
              audio: "ext:极略:1",
              srlose: true,
              marktext: '略',
              trigger: { player: 'phaseDrawBegin' },
              check: function (event, player) {
                if (player.skipList.includes('phaseUse')) return 1;
                return player.getExpansions('jlsg_xionglve').length <= 3;
              },
              content: function () {
                'step 0'
                trigger.finish();
                trigger.untrigger();
                event.cards = get.cards(2);
                player.chooseCardButton("选择一张牌置入手牌", event.cards, true);
                'step 1'
                if (result.bool) {
                  player.gain(result.links[0]);
                  player.$gain2(result.links[0]);
                  event.cards.remove(result.links[0]);
                  if (event.cards.length) {
                    player.addToExpansion(event.cards).gaintag.add(event.name);
                  }
                }
              },
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              group: ['jlsg_xionglve2'],
            },
            jlsg_xionglve2: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.getExpansions('jlsg_xionglve').length > 0;
              },
              chooseButton: {
                dialog: function (event, player) {
                  return ui.create.dialog('雄略', player.getExpansions('jlsg_xionglve'), 'hidden');
                },
                check: function (button) {
                  var player = _status.event.player;
                  var type = get.type(button.link, 'trick');
                  var recover = 0, lose = 1;
                  for (var i = 0; i < game.players.length; i++) {
                    if (!game.players[i].isOut()) {
                      if (game.players[i].hp < game.players[i].maxHp) {
                        if (get.attitude(player, game.players[i]) > 0) {
                          if (game.players[i].hp < 2) {
                            lose--;
                            recover += 0.5;
                          }
                          lose--;
                          recover++;
                        } else if (get.attitude(player, game.players[i]) < 0) {
                          if (game.players[i].hp < 2) {
                            lose++;
                            recover -= 0.5;
                          }
                          lose++;
                          recover--;
                        }
                      } else {
                        if (get.attitude(player, game.players[i]) > 0) {
                          lose--;
                        } else if (get.attitude(player, game.players[i]) < 0) {
                          lose++;
                        }
                      }
                    }
                  }
                  var equipTarget = false;
                  var shaTarget = false;
                  var shunTarget = false;
                  var chaiTarget = false;
                  for (var i = 0; i < game.players.length; i++) {
                    if (get.attitude(player, game.players[i]) > 0) {
                      if (player != game.players[i] && !game.players[i].get('e', { subtype: get.subtype(button.link) })[0] && get.attitude(player, game.players[i]) > 0) {
                        equipTarget = true;
                      }
                    }
                    if (player.canUse('shunshou', game.players[i]) && get.effect(game.players[i], { name: 'shunshou' }, player)) {
                      shunTarget = true;
                    }
                    if (player.canUse('guohe', game.players[i]) && get.effect(game.players[i], { name: 'guohe' }, player) >= 0) {
                      chaiTarget = true;
                    }
                    if (player.canUse('sha', game.players[i]) && get.effect(game.players[i], { name: 'sha' }, player) > 0) {
                      shaTarget = true;
                    }
                  }
                  if (player.isDamaged()) return (type == 'basic') ? 2 : -1;
                  if (shaTarget && player.countCards('h', 'sha') && !player.countCards('h', 'jiu')) return (type == 'basic') ? 1 : -1;
                  if (lose > recover && lose > 0) return (type == 'trick') ? 1 : -1;
                  if (lose < recover && recover > 0) return (type == 'trick') ? 1 : -1;
                  if (equipTarget) return (type == 'equip') ? 1 : -1;
                  if (shunTarget || chaiTarget) return (type == 'trick') ? 1 : -1;
                  if (shaTarget && !player.countCards('h', 'sha')) return (type == 'basic') ? 1 : -1;
                  return 0;
                },
                backup: function (links, player) {
                  if (get.type(links[0], 'trick') == 'trick') {
                    return {
                      cards: links,
                      chooseButton: {
                        dialog: function () {
                          var list = [];
                          for (var i of lib.inpile) {
                            if (!lib.translate[i + '_info']) continue;
                            // if (lib.card[i].mode && lib.card[i].mode.includes(lib.config.mode) == false) continue;
                            if (lib.card[i].type == 'trick') list.push(['锦囊', '', i]);
                          }
                          return ui.create.dialog('雄略:请选择想要使用的锦囊牌', [list, 'vcard']);
                        },
                        filter: function (button, player) {
                          return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                        },
                        check: function (button) {
                          var player = _status.event.player;
                          var recover = 0, lose = 1;
                          for (var i = 0; i < game.players.length; i++) {
                            if (!game.players[i].isOut()) {
                              if (game.players[i].hp < game.players[i].maxHp) {
                                if (get.attitude(player, game.players[i]) > 0) {
                                  if (game.players[i].hp < 2) {
                                    lose--;
                                    recover += 0.5;
                                  }
                                  lose--;
                                  recover++;
                                } else if (get.attitude(player, game.players[i]) < 0) {
                                  if (game.players[i].hp < 2) {
                                    lose++;
                                    recover -= 0.5;
                                  }
                                  lose++;
                                  recover--;
                                }
                              } else {
                                if (get.attitude(player, game.players[i]) > 0) {
                                  lose--;
                                } else if (get.attitude(player, game.players[i]) < 0) {
                                  lose++;
                                }
                              }
                            }
                          }
                          var shunTarget = false;
                          var chaiTarget = false;
                          for (var i = 0; i < game.players.length; i++) {
                            if (player.canUse('shunshou', game.players[i]) && get.effect(game.players[i], { name: 'shunshou' }, player)) {
                              shunTarget = true;
                            }
                            if (player.canUse('guohe', game.players[i]) && get.effect(game.players[i], { name: 'guohe' }, player) >= 0) {
                              chaiTarget = true;
                            }
                          }
                          if (lose > recover && lose > 0) return (button.link[2] == 'nanman') ? 1 : -1;
                          if (lose < recover && recover > 0) return (button.link[2] == 'taoyuan') ? 1 : -1;
                          if (shunTarget) return (button.link[2] == 'shunshou') ? 1 : -1;
                          if (chaiTarget) return (button.link[2] == 'guohe') ? 1 : -1;
                          return (button.link[2] == 'wuzhong') ? 1 : -1;
                        },
                        backup: function (links, player) {
                          return {
                            filterCard: function () {
                              return false
                            },
                            selectCard: -1,
                            popname: true,
                            viewAs: { name: links[0][2] },
                            onuse: function (result, player) {
                              result.cards = lib.skill.jlsg_xionglve2_backup.cards;
                              var card = result.cards[0];
                              player.logSkill('jlsg_xionglve2', result.targets);
                            }
                          }
                        },
                        prompt: function (links, player) {
                          return '将一张雄略牌当' + get.translation(links[0][2]) + '使用';
                        }
                      }
                    }
                  } else if (get.type(links[0], 'trick') == 'basic') {
                    return {
                      cards: links,
                      chooseButton: {
                        dialog: function () {
                          var list = [];
                          for (var i of lib.inpile) {
                            if (!lib.translate[i + '_info']) continue;
                            // if (lib.card[i].mode && lib.card[i].mode.includes(lib.config.mode) == false) continue;
                            if (lib.card[i].type == 'basic') list.push(['basic', '', i]);
                          }
                          return ui.create.dialog('雄略:请选择想要使用的基本牌', [list, 'vcard']);
                        },
                        filter: function (button, player) {
                          return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                        },
                        check: function (button) {
                          var player = _status.event.player;
                          var shaTarget = false;
                          for (var i = 0; i < game.players.length; i++) {
                            if (player.canUse('sha', game.players[i]) && get.effect(game.players[i], { name: 'sha' }, player) > 0) {
                              shaTarget = true;
                            }
                          }
                          if (player.isDamaged()) return (button.link[2] == 'tao') ? 1 : -1;
                          if (shaTarget && player.countCards('h', 'sha') && !player.countCards('h', 'jiu')) return (button.link[2] == 'jiu') ? 1 : -1;
                          if (shaTarget && !player.countCards('h', 'sha')) return (button.link[2] == 'sha') ? 1 : -1;
                          return (button.link[2] == 'sha') ? 1 : -1;
                        },
                        backup: function (links, player) {
                          return {
                            filterCard: function () {
                              return false
                            },
                            selectCard: -1,
                            audio: "ext:极略:1",
                            popname: true,
                            viewAs: { name: links[0][2] },
                            onuse: function (result, player) {
                              result.cards = lib.skill.jlsg_xionglve2_backup.cards;
                              var card = result.cards[0];
                              player.logSkill('jlsg_xionglve2', result.targets);
                            }
                          }
                        },
                        prompt: function (links, player) {
                          return '将一张雄略牌当' + get.translation(links[0][2]) + '使用';
                        }
                      }
                    }
                  } else {
                    return {
                      direct: true,
                      cards: links,
                      filterTarget: function (card, player, target) {
                        var cards = lib.skill.jlsg_xionglve2_backup.cards;
                        return player != target && !target.get('e', get.subtype(cards[0])[5]);
                      },
                      filterCard: function () {
                        return false
                      },
                      selectCard: -1,
                      prepare: function (cards, player, targets) {
                        var cards = lib.skill.jlsg_xionglve2_backup.cards;
                        player.$give(cards[0], targets[0], false);
                      },
                      ai2: function (target) {
                        return get.attitude(_status.event.player, target) + 10;
                      },
                      content: function () {
                        event.cards = lib.skill.jlsg_xionglve2_backup.cards;
                        var card = event.cards[0];
                        player.logSkill('jlsg_xionglve2', target);
                        if (get.type(card) == 'equip') {
                          target.equip(card);
                        } else {
                          player.discard(card);
                          target.draw();
                        }
                      }
                    }
                  }
                }
              },
              ai: {
                order: 6,
                result: {
                  player: function (player) {
                    if (player.hp <= 2) return 3;
                    return player.getExpansions('jlsg_xionglve').length - 1;
                  },
                }
              }
            },
            jlsg_fuzheng: {
              audio: "ext:极略:1",
              unique: true,
              zhuSkill: true,
              group: ['jlsg_fuzheng2'],
            },
            jlsg_fuzheng2: {
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                if (!player.hasZhuSkill('jlsg_fuzheng')) return false;
                for (var i = 0; i < game.players.length; i++)
                  if (game.players[i] != player && game.players[i].group == 'wu') return true;
                return false;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget('是否发动【辅政】？', [1, 2], function (card, player, target) {
                  return player != target && target.group == 'wu';
                }).ai = function (target) {
                  var att = get.attitude(player, target);
                  if (target.countCards('h')) return att;
                  return att / 10;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_fuzheng', result.targets);
                  event.targets = result.targets;
                  event.targets.sort(lib.sort.seat);
                } else {
                  event.finish();
                }
                'step 2'
                if (event.targets.length) {
                  var target = event.targets.shift();
                  target.draw();
                  event.current = target;
                } else {
                  event.finish();
                }
                'step 3'
                if (event.current && event.current.num('h')) {
                  event.current.chooseCard('选择一张手牌置于牌堆顶', 'h', true);
                } else {
                  event.goto(2);
                }
                'step 4'
                if (result && result.cards) {
                  event.card = result.cards[0];
                  event.current.lose(result.cards, ui.special);
                  var cardx = ui.create.card();
                  cardx.classList.add('infohidden');
                  cardx.classList.add('infoflip');
                  event.current.$throw(cardx, 1000);
                } else {
                  event.card = null;
                }
                'step 5'
                if (event.current == game.me) game.delay(0.5);
                'step 6'
                if (event.card) {
                  event.card.fix();
                  ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                }
                event.goto(2);
              }
            },
            jlsg_jiuzhu: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: ['loseAfter', 'loseAsyncAfter', 'cardsDiscardAfter'] },
              filter: function (event, player) {
                var criterion0 = event.getd().some(card => card.name == 'shan' && get.position(card, true) == 'd');

                var criterion1 = player.countCards('he', card => card.name != "shan") != 0;
                // console.log(criterion0, criterion1, event.cards.map(card => card.name));
                return criterion0 && criterion1;
              },
              direct: true,
              content: function () {
                'step 0'
                event.cards = trigger.getd().filter(card => get.position(card) == 'd' && card.name == 'shan');
                // console.log(event.cards);
                // console.log(_status.currentPhase);
                'step 1'
                event.card = event.cards.shift();
                player.chooseToDiscard('是否发动【救主】替换弃牌堆中的' + get.translation(event.card) + '?', 'he',
                  card => card.name != 'shan')
                  .ai = function (card) {
                    if (player.num('h', { name: 'shan' }) >= 2) return false;
                    return 6 - ai.get.value(card);
                  }
                'step 2'
                if (result.bool) {
                  player.logSkill('jlsg_jiuzhu');
                  player.gain(event.card, 'gain2');
                  if (_status.currentPhase != player) {
                    player.chooseBool('是否对' + get.translation(_status.currentPhase) + '使用一张无视防具的杀？').ai = function () {
                      return get.attitude(player, _status.currentPhase) < 0;
                    }
                  } else {
                    event.finish();
                  }
                } else {
                  event.finish();
                }
                'step 3'
                if (result.bool) {
                  player.addTempSkill('unequip', 'shaAfter');
                  player.useCard({ name: 'sha' }, _status.currentPhase, false);
                }
                "step 4"
                if (event.cards.length) event.goto(1);
              }
            },
            jlsg_tuwei: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'cardsDiscardAfter' },
              filter: function (event, player) {
                var cards = event.getd().filterInD('d').filter(c => c.name == 'sha');
                if (!cards.length) {
                  return false;
                }
                var evt = event.getParent();
                if (evt.name != 'orderingDiscard' || !evt.relatedEvent) {
                  return false;
                }
                evt = evt.relatedEvent;
                if (evt.name != 'useCard') {
                  return false;
                }
                if (evt.player != player && !evt.targets.includes(player)) return false;
                var criterion0 = evt.card.name == "sha" && evt.card.isCard
                  && (evt.cards.length == 1 && evt.cards[0].name === 'sha')
                  && cards.includes(evt.cards[0]);
                var criterion1 = player.countCards('h', card => get.tag(card, 'damage')) != 0;
                return criterion0 && criterion1;
              },
              direct: true,
              content: function () {
                'step 0'
                let evt = trigger.getParent().relatedEvent;
                let targets = evt.targets.slice().add(evt.player);
                player.chooseCardTarget({
                  filterCard: function (card) {
                    return get.tag(card, 'damage');
                  },
                  filterTarget: function (card, player, target) {
                    return _status.event.targets.includes(target) && target.countDiscardableCards(player, 'he') != 0;
                  },
                  selectTarget: [1, 2],
                  ai1: function (card) {
                    return 6 - get.value(card);
                  },
                  ai2: function (target) {
                    return -get.attitude(_status.event.player, target);
                  },
                  prompt: get.prompt2('jlsg_tuwei'),
                }).set('targets', targets);
                'step 1'
                if (result.bool) {
                  player.discard(result.cards);
                  player.logSkill('jlsg_tuwei', result.targets);
                  event.targets = result.targets;
                  if (result.targets.length == 1) {
                    player.discardPlayerCard(event.targets[0], 'he', [1, 2], true);
                  } else {
                    player.discardPlayerCard(event.targets[0], 'he', true);
                  }
                } else {
                  event.finish();
                }
                'step 2'
                if (event.targets.length == 2) {
                  player.discardPlayerCard(targets[1], 'he', true);
                }
              },
              ai: {
                expose: 0.2
              }
            },
            // jlsg_xujin: {
            //     audio: "ext:极略:1",
            //     srlose: true,
            //     trigger: { player: 'phaseDrawBefore' },
            //     content: function () {
            //       "step 0"
            //       trigger.cancel();
            //       "step 1"
            //       event.cards = get.cards(5);
            //       if (event.isMine() == false) {
            //         event.dialog = ui.create.dialog('蓄劲', event.cards);
            //         game.delay(2);
            //       }
            //       if (event.cards.length > 0) {
            //         var obj = {};
            //         for (var i = 0; i < event.cards.length; i++) {
            //           var suit = get.suit(event.cards[i]);
            //           if (!obj[suit]) {
            //             obj[suit] = 0;
            //           }
            //           obj[suit] = obj[suit] + 1;
            //           if (event.cards[i].name == 'sha') obj[suit] = obj[suit] + 1;
            //         }
            //         var max = get.suit(event.cards.randomGet());
            //         ;
            //         for (var a in obj) {
            //           if (obj[a] > obj[max]) max = a;
            //         }
            //         event.suit = max;
            //       }
            //       "step 2"
            //       if (event.dialog) event.dialog.close();
            //       var dialog = ui.create.dialog('蓄劲', event.cards);
            //       player.chooseButton([1, 5], dialog, true).set("filterButton", function (button) {
            //         if (ui.selected.buttons.length == 0) return true;
            //         for (var i = 0; i < ui.selected.buttons.length; i++) {
            //           if (get.suit(button.link) == get.suit(ui.selected.buttons[i].link)) return true;
            //         }
            //         return false;
            //       }).set("ai", function (button) {
            //         return get.suit(button.link) == event.suit;
            //       });
            //       "step 3"
            //       player.storage.jlsg_xujin2 = result.buttons.length;
            //       player.addTempSkill('jlsg_xujin2', 'phaseAfter');
            //       event.cards2 = [];
            //       for (var i = 0; i < result.buttons.length; i++) {
            //         event.cards2.push(result.buttons[i].link);
            //         cards.remove(result.buttons[i].link);
            //       }
            //       player.chooseTarget('选择获得卡牌的目标', true).ai = function (target) {
            //         if (player == target) return 10;
            //         return get.attitude(player, target);
            //       }
            //       "step 4"
            //       if (event.cards2.length) {
            //         result.targets[0].gain(event.cards2, 'gain');
            //       }
            //       for (var i = 0; i < cards.length; i++) {
            //         ui.discardPile.appendChild(cards[i]);
            //       }
            //       game.delay(2);
            //     },
            //     ai: {
            //       threaten: 1.2
            //     }
            //   },
            jlsg_xujin: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: "phaseDrawBegin1", },
              forced: true,
              locked: false,
              content: function () {
                "step 0"
                event.cards = get.cards(5);
                game.cardsGotoOrdering(event.cards);
                player.showCards(event.cards, '蓄劲');
                "step 1"
                var split = { spade: [], heart: [], club: [], diamond: [] };
                for (const card of event.cards) { // split the four suits
                  let suit = get.suit(card);
                  split[suit].push(card);
                }
                var controlList = [];
                for (const suit in split) {
                  if (split[suit].length)
                    controlList.push(lib.translate[suit]);
                }
                var next = player.chooseControl([...controlList, "取消"])
                  .set('dialog', ['是否发动【蓄劲】？选择一种花色的牌交给一名角色。', event.cards])
                  .set('split', split)
                  .set('ai', function () {
                    var splitValue = {};
                    for (const suit in _status.event.split) {
                      splitValue[suit] = split[suit].reduce((v, b) => v + get.value(b, player), 0);
                    }
                    if (Object.keys(splitValue).some(suit => splitValue[suit] > 10)) {
                      let suit = Object.keys(splitValue).reduce((a, b) => splitValue[a] > splitValue[b] ? a : b);
                      return lib.translate[suit];
                    } else {
                      return "取消";
                    }
                  });
                event._split = split;
                "step 2"
                if (result.control == "取消") {
                  event.finish();
                } else {
                  trigger.changeToZero();
                  for (const suit in event._split) {
                    if (lib.translate[suit] == result.control)
                      event.cards = event._split[suit];
                  }
                  player.storage.jlsg_xujin2 = event.cards.length;
                  player.addTempSkill('jlsg_xujin2', 'phaseAfter');
                  player.chooseTarget('选择获得卡牌的目标', true).ai = function (target) {
                    if (player == target) return 10;
                    return get.attitude(player, target);
                  }
                }

                "step 3"
                if (event.cards.length) {
                  result.targets[0].gain(event.cards, 'gain');
                }
                // for (var i = 0; i < cards.length; i++) {
                //   ui.discardPile.appendChild(cards[i]);
                // }
                game.delay();
              },
              ai: {
                threaten: 1.2
              }
            },
            jlsg_xujin2: {
              mark: true,
              intro: {
                content: function (storage, player) {
                  return '出杀次数+' + storage + ',攻击距离为' + storage
                }
              },
              mod: {
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha') return num + player.storage.jlsg_xujin2 - 1;
                },
                attackRangeBase: function (player) {
                  return player.storage.jlsg_xujin2;
                },
              },
            },
            jlsg_paoxiao: {
              audio: "ext:极略:1",
              srlose: true,
              shaRelated: true,
              trigger: { source: 'damageAfter' },
              filter: function (event, player) {
                return event.card && event.card.name == 'sha';
              },
              check: function (event, player) {
                return get.attitude(player, event.player) <= 0 && event.notLink();
              },
              priority: 5,
              content: function () {
                'step 0'
                player.draw();
                player.chooseToUse({ name: 'sha' }, function (card, target, player) {
                  return player.canUse({ name: 'sha' }, target, false);
                });
                'step 1'
                if (!result.bool) {
                  trigger.player.discardPlayerCard(player, 'he', true);
                }
              },
            },
            jlsg_benxi: {
              shaRelated: true,
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'shaBegin' },
              forced: true,
              content: function () {
                "step 0"
                trigger.target.chooseToDiscard('请弃置一张装备牌，否则不能使用闪抵消此杀', 'he', function (card) {
                  return get.type(card) == 'equip';
                }).ai = function (card) {
                  var num = trigger.target.countCards('h', 'shan');
                  if (num == 0) return 0;
                  return 8 - get.value(card);
                }
                "step 1"
                if (!result.bool) {
                  trigger.directHit = true;
                }
              },
              mod: {
                globalFrom: function (from, to, distance) {
                  return distance - 1;
                }
              }
            },
            jlsg_yaozhan: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return player != target && target.countCards('h') > 0;
              },
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              content: function () {
                "step 0"
                player.chooseToCompare(target);
                "step 1"
                if (result.bool) {
                  player.draw('nodelay');
                  player.useCard({ name: 'sha' }, target, false);
                } else {
                  target.chooseToUse({ name: 'sha' }, player);
                }
              },
              ai: {
                order: function (name, player) {
                  var cards = player.get('h');
                  if (player.countCards('h', 'sha') == 0) {
                    return 1;
                  }
                  for (var i = 0; i < cards.length; i++) {
                    if (cards[i].name != 'sha' && cards[i].number > 11 && get.value(cards[i]) < 7) {
                      return 9;
                    }
                  }
                  return lib.card.sha.ai.order - 1;
                },
                result: {
                  player: function (player) {
                    if (player.countCards('h', 'sha') > 0) return 0.6;
                    var num = player.countCards('h');
                    if (num > player.hp) return 0;
                    if (num == 1) return -2;
                    if (num == 2) return -1;
                    return -0.7;
                  },
                  target: function (player, target) {
                    var num = target.countCards('h');
                    if (num == 1) return -1;
                    if (num == 2) return -0.7;
                    return -0.5
                  },
                },
                threaten: 1.3
              }
            },
            jlsg_wenjiu: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              marktext: '酒',
              filterCard: function (card) {
                return get.color(card) == 'black';
              },
              filter: function (event, player) {
                return player.countCards('h', { color: 'black' }) > 0;
              },
              check: function (card) {
                return 6 - get.value(card)
              },
              discard: false,
              prepare: function (cards, player) {
                player.$give(1, player);
              },
              content: function () {
                player.addToExpansion(cards).gaintag.add(event.name);
              },
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              onremove: function (player, skill) {
                var cards = player.getExpansions(skill);
                if (cards.length) player.loseToDiscardpile(cards);
              },
              group: 'jlsg_wenjiu2',
              ai: {
                order: 10,
                result: {
                  player: function (player) {
                    return 2 - player.getExpansions('jlsg_wenjiu').length;
                  }
                }
              }
            },
            jlsg_wenjiu2: {
              audio: "ext:极略:1",
              trigger: { player: 'shaBegin' },
              filter: function (event, player) {
                return player.getExpansions('jlsg_wenjiu').length;
              },
              check: function (event, player) {
                return get.attitude(player, event.target) < 0;
              },
              content: function () {
                'step 0'
                player.chooseCardButton('请弃置一张「酒」，该伤害+1点', true, player.getExpansions('jlsg_wenjiu')).ai = function (button) {
                  if (get.attitude(player, trigger.target) < 0) return 1;
                  return 0;
                }
                'step 1'
                if (result.bool) {
                  player.lose(result.links);
                  player.$throw(result.links);
                  player.addTempSkill('jlsg_wenjiu3', 'shaAfter');
                  player.addTempSkill('jlsg_wenjiu4', 'shaAfter');

                }
              }
            },
            jlsg_wenjiu3: {
              trigger: { source: 'damageBegin' },
              filter: function (event) {
                return event.card && event.card.name == 'sha' && event.notLink();
              },
              forced: true,
              popup: false,
              content: function () {
                trigger.num++;
              }
            },
            jlsg_wenjiu4: {
              trigger: { player: 'shaMiss' },
              priority: -1,
              forced: true,
              popup: false,
              content: function () {
                player.draw();
              }
            },
            jlsg_shuixi: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return player.countCards('h') > 0
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseCardTarget({
                  filterTarget: function (card, player, target) {
                    return target != player;
                  },
                  filterCard: true,
                  ai1: function (card) {
                    return get.value(card);
                  },
                  ai2: function (target) {
                    return -get.attitude(player, target);
                  },
                  prompt: '水袭：展示一张手牌并选择一名其他角色'
                });
                'step 1'
                if (result.bool) {
                  event.target = result.targets[0];
                  event.card = result.cards[0];
                  player.logSkill('jlsg_shuixi', event.target);
                  player.showCards(event.card);
                  event.target.chooseToDiscard({ suit: get.suit(event.card) }).ai = function (card) {
                    if (event.target.hasSkillTag('maihp') && (event.target.hp > 2 || event.target.hasCard('tao', 'h'))) return -1;
                    return 7.9 - get.value(card);
                  }
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  event.finish()
                } else {
                  event.target.loseHp();
                  player.addTempSkill('jlsg_shuixi2', 'phaseAfter');
                }
              },
              ai: {
                expose: 0.4
              }
            },
            jlsg_shuixi2: {
              mark: true,
              intro: {
                content: '水袭失败,不能使用【杀】'
              },
              mod: {
                cardEnabled: function (card) {
                  if (card.name == 'sha')
                    return false
                }
              }
            },
            jlsg_sanfen: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                // var num = 0;
                // for (var i = 0; i < game.players.length; i++) {
                //   if (game.players[i].sex == 'male' && game.players[i] != player) num++
                // }
                // return (num > 1);
                return game.players.length >= 3;
              },
              filterTarget: function (card, player, target) {
                return target != player && target.countCards('he');
              },
              targetprompt: ['先出杀', '对你出杀'],
              selectTarget: 2,
              multitarget: true,
              content: function () {
                'step 0'
                targets[0].chooseToUse({ name: 'sha' }, -1, targets[1]);
                'step 1'
                if (!result.bool) {
                  player.discardPlayerCard('he', targets[0]);
                }
                targets[1].chooseToUse({ name: 'sha' }, -1, player);
                'step 2'
                if (!result.bool) {
                  player.discardPlayerCard('he', targets[1]);
                }
              },
              ai: {
                order: 8,
                result: {
                  target: -3
                },
                expose: 0.4,
                threaten: 3,
              }
            },
            jlsg_guanxing: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
              frequent: true,
              content: function () {
                var num = Math.min(3, game.countPlayer());
                player.chooseToGuanxing(num);
              },
              ai: {
                threaten: 1.2
              }
            },
            jlsg_weiwo: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'damageBegin' },
              filter: function (event, player) {
                if (event.nature && player.countCards('h')) return true;
                if (!event.nature && !player.countCards('h')) return true;
                return false;
              },
              mark: true,
              forced: true,
              content: function () {
                trigger.cancel();

              },
              ai: {
                nofire: function (player) {
                  return player.countCards('h') > 0;
                },
                nothunder: function (player) {
                  return player.countCards('h') > 0;
                },
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'natureDamage') && target.countCards('h') > 0) return 0;
                    if (card.name == 'tiesuo' && target.countCards('h') > 0) return [0, 0];
                    if (!get.tag(card, 'natureDamage') && !target.countCards('h')) return [0, 0];
                  }
                },
              },
              intro: {
                content: function (storage, player) {
                  var str = '';
                  if (player.countCards('h')) {
                    str += '防止属性伤害';
                  } else {
                    str += '防止非属性伤害';
                  }
                  return str;
                }
              }
            },
            jlsg_shouji: {
              audio: "ext:极略:1",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.countCards('he');
              },
              check: function (card) {
                return 10 - get.value(card)
              },
              filterCard: true,
              position: 'he',
              getCardName(card) {
                switch (get.suit(card)) {
                  case 'heart':
                    return 'shunshou';
                    break;
                  case 'diamond':
                    return 'huogong';
                    break;
                  case 'club':
                    return 'jiedao';
                    break;
                  case 'spade':
                    return 'juedou';
                    break;
                }
              },
              filterTarget: function (card, player, target) {
                var cardName = lib.skill.jlsg_shouji.getCardName(card);
                if (ui.selected.targets.length == 2) {
                  return ui.selected.targets[1].canUse('sha', target, false);
                }
                if (ui.selected.targets.length == 1) {
                  // canUse is not compatible with modified select jiedao
                  if (cardName === 'jiedao') {
                    var targetEnabled = function (player, target) {
                      var card = { name: cardName, isCard: true };
                      var info = get.info(card);
                      var mod = game.checkMod(card, player, target, 'unchanged', 'playerEnabled', player);
                      if (mod == false) return false;
                      // should not check target enabled mod
                      return true;
                    }
                    if (!targetEnabled(ui.selected.targets[0], target)) return false;
                    return target.getEquip(1) &&
                      game.hasPlayer(shaTarget => target.canUse('sha', shaTarget, false));
                  }
                  return ui.selected.targets[0].canUse({ name: cardName }, target);
                }
                // return game.hasPlayer(p => target.canUse({ name: cardName }, p));
                return true;
              },
              targetprompt: ['发起者', '承受者', '出杀目标'],
              selectTarget: function () {
                if (!ui.selected.cards.length) return 2;
                return lib.skill.jlsg_shouji.getCardName(ui.selected.cards[0]) == 'jiedao' ? 3 : 2;
              },
              multitarget: true,
              content: function () {
                var cardName = lib.skill.jlsg_shouji.getCardName(cards[0]);
                if (cardName != 'jiedao') {
                  targets[0].useCard({ name: cardName }, targets[1], 'noai');
                } else {
                  targets[0].useCard({ name: cardName }, [targets[1], targets[2]], 'noai');
                }
                // var prompt = `###${get.translation(event.name)}###选择${get.name(targets[1])}出杀目标`;
                // player.chooseTarget(prompt,shaTarget => lib.filter.filterTarget({name:'sha'},target,shaTarget));
                // targets[0].useCard({ name: 'jiedao' }, [targets[1], result.targets[0]], 'noai');
              },
              ai: {
                order: 6,
                fireattack: true,
                result: {
                  target: function (player, target) {
                    if (ui.selected.targets.length == 0) {
                      return 3;
                    } else {
                      var card = ui.selected.cards[0];
                      var next = lib.skill.jlsg_shouji.getCardName(card);
                      if (next == 'jiedao') return -1.5;
                      return get.effect(target, { name: next }, ui.selected.targets[0], target);
                    }
                  }
                },
              }
            },
            jlsg_hemou: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'phaseUseBegin' },
              filter: function (event, player) {
                return event.player != player && player.countCards('h') > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseCard('是否对' + get.translation(trigger.player) + '发动【合谋】?').ai = function (card) {
                  if (get.attitude(player, trigger.player) > 0 && !trigger.player.countCards('j', 'lebu') && trigger.player.countCards('h') > 2) return 4 - get.value(card);
                  return false;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_hemou', trigger.player);
                  trigger.player.gain(result.cards, player, 'giveAuto');
                  switch (get.suit(result.cards[0])) {
                    case 'heart':
                      trigger.player.addTempSkill('jlsg_hemou_heart', 'phaseAfter');
                      break;
                    case 'diamond':
                      trigger.player.addTempSkill('jlsg_hemou_diamond', 'phaseAfter');
                      break;
                    case 'club':
                      trigger.player.addTempSkill('jlsg_hemou_club', 'phaseAfter');
                      break;
                    case 'spade':
                      trigger.player.addTempSkill('jlsg_hemou_spade', 'phaseAfter');
                      break;
                  }
                } else {
                  event.finish();
                }
              },
              ai: {
                expose: 0.1,
              },
              subSkill: {
                heart: {
                  enable: 'phaseUse',
                  usable: 1,
                  marktext: '♥︎',
                  mark: true,
                  viewAs: { name: 'shunshou' },
                  viewAsFilter: function (player) {
                    if (!player.countCards('hs', { suit: 'heart' })) return false;
                  },
                  prompt: '将一张♥︎手牌当顺手牵羊使用',
                  position: 'hs',
                  filterCard: function (card, player) {
                    return get.suit(card) == 'heart';
                  },
                  check: function (card) {
                    return 6 - get.value(card);
                  },
                  intro: {
                    name: '合谋·顺手',
                    content: '本回合内限一次,可将一张♥︎牌当顺手牵羊使用.'
                  }
                },
                diamond: {
                  enable: 'chooseToUse',
                  usable: 1,
                  marktext: '♦︎',
                  mark: true,
                  viewAs: { name: 'huogong', nature: 'fire' },
                  position: 'hs',
                  filterCard: function (card, player) {
                    return get.suit(card) == 'diamond';
                  },
                  viewAsFilter: function (player) {
                    if (!player.countCards('hs', { suit: 'diamond' })) return false;
                  },
                  prompt: '将一张♦︎手牌当火攻使用',
                  check: function (card) {
                    var player = _status.currentPhase;
                    if (player.countCards('h') > player.hp) {
                      return 6 - get.value(card);
                    }
                    return 4 - get.value(card)
                  },
                  ai: {
                    fireattack: true,
                  },
                  intro: {
                    name: '合谋·火攻',
                    content: '本回合内限一次,可将一张♦︎牌当火攻使用.'
                  }
                },
                club: {
                  enable: 'phaseUse',
                  usable: 1,
                  marktext: '♣︎',
                  mark: true,
                  viewAs: { name: 'jiedao' },
                  position: 'hs',
                  filterCard: function (card, player) {
                    return get.suit(card) == 'club';
                  },
                  viewAsFilter: function (player) {
                    if (!player.countCards('hs', { suit: 'club' })) return false;
                  },
                  prompt: '将一张♣︎手牌当借刀杀人使用',
                  check: function (card) {
                    return 6 - get.value(card);
                  },
                  intro: {
                    name: '合谋·借刀',
                    content: '本回合内限一次,可将一张♣︎牌当借刀杀人使用.'
                  }
                },
                spade: {
                  enable: 'phaseUse',
                  usable: 1,
                  marktext: '♠︎',
                  mark: true,
                  viewAs: { name: 'juedou' },
                  position: 'hs',
                  prompt: '将一张♠︎手牌当决斗使用',
                  filterCard: function (card, player) {
                    return get.suit(card) == 'spade';
                  },
                  viewAsFilter: function (player) {
                    if (!player.countCards('hs', { suit: 'spade' })) return false;
                  },
                  check: function (card) {
                    return 6 - get.value(card);
                  },
                  ai: {
                    order: 5
                  },
                  intro: {
                    name: '合谋·决斗',
                    content: '回合限一次,可将一张♠︎牌当决斗使用.'
                  }
                },
              }
            },
            jlsg_qicai: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { player: 'loseEnd' },
              frequent: true,
              filter: function (event, player) {
                for (var i = 0; i < event.cards.length; i++) {
                  if (event.cards[i].original == 'h') return true;
                }
                return false;
              },
              content: function () {
                'step 0'
                player.judge(function (card) {
                  if (get.color(card) == 'red') return 2;
                  return -2;
                }).judge2 = result => result.bool;
                'step 1'
                if (result.bool) {
                  player.draw();
                }
              },
              ai: {
                threaten: 4,
                order: 15,
                result: {
                  player: 1
                },
                effect: {
                  target: function (card) {
                    if (card.name == 'guohe' || card.name == 'liuxinghuoyu') return 0.3;
                  }
                }
              }
            },
            jlsg_rende: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'phaseJieshuEnd' },
              filter: function (event, player) {
                return player.countCards('h') != 0 && event.player.isAlive();
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseCard('是否对' + get.translation(trigger.player) + '发动【仁德】?', [1, player.countCards('h')]).ai = function (card) {
                  if (player == trigger.player) return 6;
                  if (get.attitude(player, trigger.player) > 1) {
                    if (trigger.player.countUsed('sha') > 0 && ['sha', 'jiu'].includes(card.name)) {
                      return 6.5 - get.value(card);
                    }
                    var skills = trigger.player.getSkills(false);
                    for (var i = 0; i < skills.length; i++) {
                      var info = get.info(skills[i]);
                      if (info && info.enable == 'phaseUse' && ui.selected.cards.length == 0) return 6.6 - get.value(card);
                    }
                    return 4 - get.value(card);
                  } else {
                    return get.value(card) < 0;
                  }
                  return false;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_rende', trigger.player);
                  trigger.player.gain(result.cards);
                  player.$give(result.cards.length, trigger.player);
                  game.delay();
                  // .player.getStat().card={};
                } else {
                  event.finish();
                }
                'step 2'
                trigger.player.stat.push({ card: {}, skill: {} });
                trigger.player.phaseUse();
              },
              ai: {
                expose: 0.2
              }
            },
            jlsg_chouxi: {
              audio: "ext:极略:2",
              usable: 1,
              srlose: true,
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              filterTarget: function (card, player, target) {
                return player != target;
              },
              check: function (card) {
                return 6 - get.value(card);
              },
              filterCard: true,
              content: function () {
                'step 0'
                event.cards1 = get.cards(2);
                player.showCards(event.cards1);
                event.types = [];
                for (var c of event.cards1) {
                  event.types.add(get.type(c, 'trick'));
                }
                event.types.sort();
                var prompt = '弃置一张与展示牌类别均不同的牌,然后让' + get.translation(player) + '获得' + get.translation(event.cards1) +
                  ',或受到来自' + get.translation(player) + '的1点伤害并获得其中一种类别的牌.';
                player.line(target);
                var cardDiff = 0; // value from card ownership
                for (var type of event.types) {
                  var newCardDiff = event.cards1
                    .filter(c => get.type(c) == type)
                    .reduce((a, b) => a - get.value(b, player) * Math.sign(get.attitude(target, player)) + get.value(b, target), 0);
                  if (newCardDiff > cardDiff) {
                    cardDiff = newCardDiff;
                  }
                }
                target.chooseToDiscard(function (card) {
                  let event = _status.event.getParent();
                  return !event.types.includes(get.type(card, 'trick'));
                }).set("dialog", [prompt, 'hidden', event.cards1]).set('ai', function (card, cards) {
                  if (card.name == 'tao') return -1;
                  return _status.event.diff - get.value(card);
                }).set('diff', 2.5 * get.damageEffect(target, player) - cardDiff);
                'step 1'
                if (result.bool) {
                  player.gain(event.cards1, 'gain2');
                  event.finish();
                } else {
                  target.damage();
                }
                'step 2'
                if (!target.isAlive()) {
                  event.finish();
                  return;
                }
                if (event.types.length == 1) {
                  return;
                }
                let values = {};
                for (var c of event.cards1) {
                  var type = get.type2(c);
                  values[type] = values[type] || 0;
                  values[type] += get.value(c, player) + (get.attitude(player, target) < -1 ? get.value(c, target) : 0);
                }
                if (values) {
                  event.choice = Object.keys(values)[0];
                  for (var type in values) {
                    if (values[type] > values[event.choice]) {
                      event.choice = type;
                    }
                  }
                }
                target.chooseControl(event.types)
                  .set("ai", function () {
                    return _status.event.choice;
                  })
                  .set("dialog", ['仇袭：选择一种类型的卡牌卡牌获得之', event.cards1])
                  .set("choice", event.choice);
                'step 3'
                var cards = [[], []];
                if (event.types.length == 1) {
                  event.type = event.types[0];
                } else {
                  event.type = result.control;
                }
                target.popup(event.type);
                for (var card of event.cards1) {
                  if (get.type(card, 'trick') == event.type) {
                    cards[0].push(card);
                  } else {
                    cards[1].push(card);
                  }
                }
                target.gain(cards[0], 'gain2');
                player.gain(cards[1], 'gain2');
              },
              ai: {
                order: 4,
                result: {
                  player: 0.5,
                  target: -1,
                }
              }
            },
            jlsg_yongbing: {
              unique: true,
              audio: 'ext:极略:true',
              zhuSkill: true,
              global: 'jlsg_yongbing2'
            },
            jlsg_yongbing2: {
              trigger: { source: 'damageEnd' },
              filter: function (event, player) {
                if (player.group != 'shu') return false;
                if (!event.card || event.card.name != 'sha') return false;
                return game.hasPlayer(function (target) {
                  return player != target && target.hasZhuSkill('jlsg_yongbing', player);
                });
              },
              direct: true,
              content: function () {
                'step 0'
                var list = [];
                for (var i = 0; i < game.players.length; i++) {
                  if (game.players[i] != player && game.players[i].hasZhuSkill('jlsg_yongbing', player)) {
                    list.push(game.players[i]);
                  }
                }
                event.list = list;
                'step 1'
                if (event.list.length) {
                  var current = event.list.shift();
                  event.current = current;
                  player.chooseBool('是否对' + get.translation(current) + '发动【拥兵】？').set('choice', get.attitude(player, current) > 0);
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  player.logSkill('jlsg_yongbing', event.current);
                  event.current.draw();
                }
                event.goto(1);
              },
              ai: {
                expose: 0.2,
              }
            },
            jlsg_zhaoxiang: {
              audio: "ext:极略:1",
              srlose: true,
              trigger: { global: 'shaBegin' },
              filter: function (event, player) {
                return event.player != player;
              },
              direct: true,
              content: function () {
                'step 0'
                if (!trigger.player.inRangeOf(player) && (trigger.target != player && !trigger.target.inRangeOf(player))) {
                  var next = player.chooseBool(get.prompt('jlsg_zhaoxiang', trigger.player));
                  next.ai = function () {
                    return get.effect(trigger.target, trigger.card, trigger.player, player) < 0;
                  };
                } else {
                  if (!player.countDiscardableCards(player, 'h')) {
                    event.finish();
                    return;
                  }
                  var next = player.chooseToDiscard(get.prompt('jlsg_zhaoxiang', trigger.player));
                  next.ai = function (card) {
                    var income = Math.min(-get.effect(trigger.target, trigger.card, trigger.player, player) * 1.5,
                      get.effect(trigger.player, { name: 'shunshou' }, player, player) / 1.5
                    );
                    return income - get.value(card);
                  };
                  next.logSkill = ['jlsg_zhaoxiang', trigger.player];
                }
                'step 1'
                if (result.bool) {
                  if (!result.cards) {
                    player.logSkill('jlsg_zhaoxiang', trigger.player);
                  }
                  if (trigger.player.countCards('h')) {
                    trigger.player.chooseCard('交给' + get.translation(player) + '一张牌或令打出的杀无效').set('ai', function (card) {
                      if (get.effect(player, trigger.card, trigger.player, trigger.player) < 0) {
                        return -1;
                      }
                      if (_status.event.getParent().player.hasSkill('jiu')) {
                        return 7 - get.value(card);
                      } else {
                        return 6 - get.value(card);
                      }
                    });
                  } else {
                    trigger.untrigger();
                    trigger.finish();
                    event.finish();
                  }
                } else {
                  event.finish();
                }
                'step 2'
                if (!result.bool) {
                  trigger.untrigger();
                  trigger.finish();
                } else {
                  player.gain(result.cards, trigger.player, 'giveAuto');
                }
              },
              ai: {
                expose: 0.5,
              }
            },
            jlsg_zhishi: {
              audio: "ext:极略:2",
              srlose: true,
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                'step 0'
                if (!target.countDiscardableCards(target, 'h')) {
                  target.damage(player);
                  target.recover();
                  event.finish();
                  return;
                }
                target.chooseToDiscard('弃置一张基本牌，并回复一点体力。或受到一点伤害并回复一点体力。', { type: 'basic' }).ai = function (card) {
                  if (target.hasSkillTag('maixie') && target.hp > 1) return 0;
                  if (get.recoverEffect(target, target, target) > 0) return 7.5 - get.value(card);
                  return -1;
                }
                'step 1'
                if (result.bool) {
                  target.recover();
                } else {
                  target.damage(player);
                  target.recover();
                }
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    var result = 0;
                    if (target.hasSkillTag('maixie_hp') || target.hasSkillTag('maixie')) result += 0.5;
                    if (target.hp == 1 && (target.countCards('h') <= 1 || target.maxHp == 1)) result -= 2;
                    if (target.hp < target.maxHp) {
                      result += Math.min(0.4, target.countCards('h') * 0.1);
                    }
                    // if (!target.isHealthy() && target.hasCard(function (card) {
                    //   return get.type(card) == 'basic';
                    // }, 'h')) return 0.6;
                    // if (target.hp > 1) return 0.4;

                    return result;
                  }
                }
              }
            },
            jlsg_jianxiong: {
              unique: true,
              audio: 'ext:极略:true',
              global: 'jlsg_jianxiong2',
              zhuSkill: true,
            },
            jlsg_jianxiong2: {
              trigger: { player: 'damageEnd' },
              filter: function (event, player) {
                if (player.group != 'wei') return false;
                return game.hasPlayer(function (target) {
                  return event.source != target && target != player && target.hasZhuSkill('jlsg_jianxiong', player) && event.source != target;
                }) && get.itemtype(event.cards) == 'cards' && get.position(event.cards[0]) == 'd' && player.countCards('h') > 0;
              },
              direct: true,
              content: function () {
                'step 0'
                var list = [];
                for (var i = 0; i < game.players.length; i++) {
                  if (game.players[i] != player && game.players[i].hasZhuSkill('jlsg_jianxiong', player)) {
                    list.push(game.players[i]);
                  }
                }
                event.list = list;
                'step 1'
                if (event.list.length) {
                  var current = event.list.shift();
                  event.current = current;
                  player.chooseToDiscard(get.prompt2('jlsg_jianxiong', current)).set('ai', function (card) {
                    if (get.attitude(_status.event.player, _status.event.current) > 0) {
                      return 6 - get.value(card);
                    }
                    return 0;
                  }).set('logSkill', ['jlsg_jianxiong', event.current]);
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  event.current.gain(trigger.cards, 'gain2');
                  game.log(event.current, '获得了', trigger.cards);
                }
                event.goto(1);
              },
              ai: {
                expose: 0.1,
              }
            },

            jlsg_zhonghou: {
              unique: true,
              audio: "ext:极略:1",
              srlose: true,
              trigger: {
                global: ['useCardBefore', 'respondBefore'],
              },
              // silent:true,
              forced: true,
              popup: false,
              firstDo: true,
              filter: function (event, player) {
                return event.skill && event.skill.startsWith('jlsg_zhonghou_');
              },
              content: function () {
                'step 0'
                if (trigger.player == player) {
                  if (player.isPhaseUsing()) {
                    player.addTempSkill('jlsg_zhonghou_phase');
                  }
                  event.goto(2);
                } else {
                  var prompt = `是否失去1点体力视为${get.translation(trigger.player)}使用一张${get.translation(trigger.card)}？`;
                  player.chooseBool(prompt, get.attitude(player, trigger.player) >= 6);
                }
                'step 1'
                if (!result.bool) {
                  trigger.player.addTempSkill('jlsg_zhonghou_phase');
                  game.log(player, Math.random() < 0.5 ? '丑拒了' : '蠢拒了', trigger.player);
                  player.chat('拒绝');
                  trigger.cancel();
                  trigger.getParent().goto(0);
                  event.finish();
                  game.delayx();
                }
                'step 2'
                player.loseHp();
              },
              global: ['jlsg_zhonghou_shan', 'jlsg_zhonghou_global'],
            },
            jlsg_zhonghou_phase: {

            },
            jlsg_zhonghou_global: {
              enable: ["chooseToUse", "chooseToRespond"],
              audio: 'jlsg_zhonghou',
              hiddenCard: function (player, name) {
                return get.type(name) == 'basic' && name != 'shan';
              },
              filter: function (event, player) {
                if (player.hasSkill('jlsg_zhonghou_phase')) return false;
                var criterion0 = game.hasPlayer(function (target) {
                  return (player == target && (target.hasSkill('jlsg_zhonghou') || target.hiddenSkills.includes('jlsg_zhonghou')) ||
                    player.inRangeOf(target) && target.hasSkill('jlsg_zhonghou')) && !target.isDying();
                });
                if (!criterion0) return false;
                for (var i of lib.inpile) {
                  if (get.type(i) != 'basic' || i == 'shan') continue;
                  if (event.filterCard({ name: i }, player, event)) return true;
                  if (i == 'sha' && lib.inpile_nature.some(nat => event.filterCard({ name: i, nature: nat }, player, event))) {
                    return true;
                  }
                }
                return false;
              },
              chooseButton: {
                dialog: function () {
                  var list = [];
                  for (var i of lib.inpile) {
                    if (i == 'shan') continue;
                    var type = get.type(i);
                    if (type != 'basic') continue;
                    list.push([type, '', i]);
                    if (i == 'sha') {
                      for (var j of lib.inpile_nature) list.push([type, '', i, j]);
                    }
                  }
                  return ui.create.dialog('忠候', [list, 'vcard']);
                },
                filter: function (button, player) {
                  var evt = _status.event.getParent();
                  return evt.filterCard({ name: button.link[2], nature: button.link[3] }, player, evt);
                },
                check: function (button) {
                  var player = _status.event.player;
                  var card = { name: button.link[2], nature: button.link[3] };
                  var val = _status.event.getParent().type == 'phase' ? player.getUseValue(card) : 1;
                  if (val <= 0) return 0;
                  return val;
                },
                backup: function (links, player) {
                  return {
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                    },
                    filterCard: function () {
                      return false;
                    },
                    selectCard: -1,
                    onuse: function (event, player) {
                      player.logSkill('jlsg_zhonghou');
                    },
                    onrespond: function (event, player) {
                      player.logSkill('jlsg_zhonghou');
                    },
                    // ai1:function(card){
                    //   var player=_status.event.player;
                    //   var hasEnemy=game.hasPlayer(function(current){
                    //     return current!=player&&!current.hasSkill('rechanyuan')&&(get.realAttitude||get.attitude)(current,player)<0;
                    //   });
                    //   var cardx=lib.skill.reguhuo_backup.viewAs;
                    //   if(hasEnemy){
                    //     if(card.name==cardx.name&&(card.name!='sha'||card.nature==cardx.nature)) return 10;
                    //     return 0;
                    //   }
                    //   return 6-get.value(card);
                    // },
                  }
                },
              },
              ai: {
                fireAttack: true,
                respondSha: true,
                skillTagFilter: function (player, tag) {
                  if (player.hasSkill('jlsg_zhonghou_phase')) return false;
                  return game.hasPlayer(function (target) {
                    return (player == target && (target.hasSkill('jlsg_zhonghou') || target.hiddenSkills.includes('jlsg_zhonghou')) ||
                      player.inRangeOf(target) && target.hasSkill('jlsg_zhonghou')) && !target.isDying();
                  });
                },
              },
            },
            jlsg_zhonghou_shan: {
              audio: 'jlsg_zhonghou',
              enable: ['chooseToUse', 'chooseToRespond'],
              filter: function (event, player) {
                if (player.hasSkill('jlsg_zhonghou_phase')) return false;
                return game.hasPlayer(function (target) {
                  return (player == target && (target.hasSkill('jlsg_zhonghou') || target.hiddenSkills.includes('jlsg_zhonghou')) ||
                    player.inRangeOf(target) && target.hasSkill('jlsg_zhonghou')) && !target.isDying();
                });
              },
              filterCard: function () {
                return false;
              },
              check: function (event, player) {
                return !player.hasShan();
              },
              selectCard: -1,
              viewAs: {
                name: "shan",
              },
              onuse: function (event, player) {
                player.logSkill('jlsg_zhonghou');
              },
              onrespond: function (event, player) {
                player.logSkill('jlsg_zhonghou');
              },
              ai: {
                respondShan: true,
              }
            },
            jlsg_ganglie: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseUseBegin' },
              srlose: true,
              check: function (event, player) {
                if (player.countCards('h') < 3 && player.hp < 2) return false;
                return game.hasPlayer(function (current) {
                  return get.tag(event.card, 'damage') && get.attitude(player, current) < 0;
                });
              },
              content: function () {
                player.loseHp();
                player.addTempSkill('jlsg_ganglie_damage', 'phaseAfter');
                player.addTempSkill('jlsg_ganglie_phaseEnd', 'phaseAfter');
              },
              subSkill: {
                damage: {
                  trigger: { source: 'damageBegin' },
                  forced: true,
                  filter: function (event) {
                    return event.num > 0;
                  },
                  content: function () {
                    trigger.num++;
                    player.removeSkill('jlsg_ganglie_damage');
                  }
                },
                phaseEnd: {
                  audio: "ext:极略:2",
                  trigger: { player: 'phaseEnd' },
                  forced: true,
                  filter: function (event, player) {
                    return player.getStat('damage') > 0;
                  },
                  content: function () {
                    player.draw(player.getStat('damage'));
                  }
                }
              }
            },
          },
          translate: {
            jlsg_sr: "SR武将",
            jlsgsr_choice: '抉择',
            jlsgsr_zhangliao: 'SR张辽',
            jlsgsr_xiahoudun: 'SR夏侯惇',
            jlsgsr_zhenji: 'SR甄姬',
            jlsgsr_xuzhu: 'SR许褚',
            jlsgsr_simayi: 'SR司马懿',
            jlsgsr_guojia: 'SR郭嘉',
            jlsgsr_caocao: 'SR曹操',
            jlsgsr_zhaoyun: 'SR赵云',
            jlsgsr_zhangfei: 'SR张飞',
            jlsgsr_machao: 'SR马超',
            jlsgsr_guanyu: 'SR关羽',
            jlsgsr_zhugeliang: 'SR诸葛亮',
            jlsgsr_huangyueying: 'SR黄月英',
            jlsgsr_liubei: 'SR刘备',
            jlsgsr_sunshangxiang: 'SR孙尚香',
            jlsgsr_daqiao: 'SR大乔',
            jlsgsr_huanggai: 'SR黄盖',
            jlsgsr_lvmeng: 'SR吕蒙',
            jlsgsr_zhouyu: 'SR周瑜',
            jlsgsr_ganning: 'SR甘宁',
            jlsgsr_luxun: 'SR陆逊',
            jlsgsr_sunquan: 'SR孙权',
            jlsgsr_lvbu: 'SR吕布',
            jlsgsr_huatuo: 'SR华佗',
            jlsgsr_diaochan: 'SR貂蝉',
            jlsgsr_shuangxiong: 'SR颜良文丑',
            jlsg_wuwei: '无畏',
            jlsg_yansha: '掩杀',
            jlsg_yansha2: '掩杀',
            jlsg_yansha3: '掩杀',
            zh_mark: '忠候',
            jlsg_zhonghou: '忠侯',
            jlsg_zhonghou_global: '忠侯',
            jlsg_zhonghou_shan: '忠侯',
            jlsg_ganglie: '刚烈',
            jlsg_liuyun: '流云',
            jlsg_lingbo: '凌波',
            jlsg_lingbo1: "凌波·送牌",
            jlsg_lingbo2: "凌波·弃牌",
            jlsg_aozhan: '鏖战',
            jlsg_aozhan2: '鏖战',
            jlsg_huxiao: '虎啸',
            jlsg_huxiao2: '虎啸',
            // jlsg_qingcheng_zhu: '倾城',
            // jlsg_qingcheng_yin: "倾城",
            // jlsg_qingcheng_yang: "倾城",
            // jlsg_qingcheng_yin1: '倾城·杀',
            // jlsg_qingcheng_yin2: "倾城·闪",
            // jlsg_qingcheng_yang1: '倾城·杀',
            // jlsg_qingcheng_yang2: '倾城·闪',
            jlsg_qingcheng: '倾城',
            jlsg_qingcheng2: '倾城',
            jlsg_guicai: '鬼才',
            jlsg_langgu: '狼顾',
            jlsg_langgu2: '狼顾',
            jlsg_zhuizun: '追尊',
            jlsg_zhuizun2: '追尊',
            jlsg_tianshang: '天殇',
            jlsg_yiji: '遗计',
            jlsg_huiqu: '慧觑',
            jlsg_zhaoxiang: '招降',
            jlsg_zhishi: '治世',
            jlsg_jianxiong: '奸雄',
            jlsg_jianxiong2: '奸雄',
            jlsg_jiuzhu: '救主',
            jlsg_jiuzhu2: '救主',
            jlsg_tuwei: '突围',
            jlsg_xujin: '蓄劲',
            jlsg_xujin2: '蓄劲',
            jlsg_paoxiao: '咆哮',
            jlsg_benxi: '奔袭',
            jlsg_yaozhan: '邀战',
            jlsg_wenjiu: '温酒',
            jlsg_wenjiu2: '温酒',
            jlsg_wenjiu3: '温酒',
            jlsg_wenjiu4: '温酒',
            jlsg_shuixi: '水袭',
            jlsg_shuixi2: '水袭',
            jlsg_sanfen: '三分',
            jlsg_guanxing: '观星',
            jlsg_weiwo: '帷幄',
            jlsg_shouji: '授计',
            jlsg_hemou: '合谋',
            jlsg_qicai: '奇才',
            jlsg_rende: '仁德',
            jlsg_chouxi: '仇袭',
            jlsg_yongbing: '拥兵',
            jlsg_yongbing2: '拥兵',
            jlsg_yinmeng: '姻盟',
            jlsg_xianger: '香饵',
            jlsg_xianger2: "香饵·标记",
            jlsg_juelie: '决裂',
            jlsg_fangxin: '芳馨',
            jlsg_xiyu: '细语',
            jlsg_wanrou: '婉柔',
            jlsg_wanrou2: '婉柔',
            jlsg_zhouyan: '舟焰',
            jlsg_zhaxiang: '诈降',
            jlsg_shixue: '誓学',
            jlsg_guoshi: '国士',
            jlsg_guoshi2: '国士',
            jlsg_yingcai: '英才',
            jlsg_weibao: '伪报',
            jlsg_choulve: '筹略',
            jlsg_jiexi: '劫袭',
            jlsg_youxia: '游侠',
            jlsg_huailing: '怀铃',
            jlsg_dailao: '待劳',
            jlsg_youdi: '诱敌',
            jlsg_youdi2: '诱敌',
            jlsg_ruya: '儒雅',
            jlsg_quanheng: '权衡',
            jlsg_xionglve: '雄略',
            jlsg_xionglve2: '雄略',
            jlsg_xionglve2_backup: '雄略',
            jlsg_fuzheng: '辅政',
            jlsg_jiwu: '极武',
            jlsg_jiwu2: '极武',
            jlsg_jiwu3: '极武',
            jlsg_jiwu4: '极武',
            jlsg_sheji: '射戟',
            jlsg_sheji2: '射戟',
            jlsg_xingyi: '行医',
            jlsg_guagu: '刮骨',
            jlsg_wuqin: '五禽',
            jlsg_lijian: '离间',
            jlsg_manwu: '曼舞',
            jlsg_baiyue: '拜月',
            jlsg_old_zhishi: '治世',
            jlsg_old_youxia: '游侠',
            jlsg_old_jiexi: '劫袭',
            jlsg_xiwu: '习武',
            jlsg_old_yingcai: '英才',
            jlsg_old_yiji: '遗计',
            jlsg_old_zhaxiang: '诈降',
            jlsg_old_huxiao: '虎啸',
            jlsg_old_dailao: '待劳',
            jlsg_old_youdi: '诱敌',
            jlsg_old_youdi2: '诱敌',
            jlsg_old_ruya: '儒雅',

            jlsg_old_dailao_info: '出牌阶段限一次，你可以令一名其他角色与你各摸一张牌或各弃置一张牌，然后你与其依次将武将牌翻面。',
            jlsg_old_youdi_info: '若你的武将牌背面朝上，你可以将其翻面来视为你使用一张【闪】。每当你使用【闪】响应一名角色使用的【杀】时，你可以额外弃置任意数量的手牌，然后该角色弃置等量的牌。',
            jlsg_old_ruya_info: '当你失去最后的手牌时，你可以翻面并将手牌补至你体力上限的张数。',
            jlsg_wuwei_info: '摸牌阶段，你可以放弃摸牌，改为亮出牌堆顶的3张牌，其中每有一张基本牌，你便可视为对一名其他角色使用一张【杀】(每阶段对每名角色限一次)。然后将这些基本牌置入弃牌堆，其余收入手牌。',
            jlsg_yansha_info: '摸牌阶段，你可以少摸一张牌。若如此做，本回合弃牌阶段开始时，你可以将一张手牌置于武将牌上，称为「掩」。当一名其他角色使用【杀】选择目标后，你可以将一张「掩」置入弃牌堆，然后获得其两张牌。',
            jlsg_yansha2_info: '一名其他角色使用【杀】选择目标后，你可以将一张「掩」置入弃牌堆，然后获得其两张牌。',
            jlsg_zhonghou_info: '当你攻击范围内的一名角色需要使用或打出一张基本牌时，该角色可以向你请求之，你可以失去1点体力，视为该角色使用此牌；若你拒绝，则取消此次响应。（你的濒死阶段除外）',
            jlsg_zhonghou_append: '<span style="font-family: yuanli">一名其他角色被你拒绝后，其本回合内不能再次发动忠候。你不能拒绝自己请求的忠候。</span>',
            jlsg_liuyun_info: '出牌阶段限一次，你可以横置你的武将牌并弃置一张黑色牌，然后令一名角色选择一项：回复1点体力，或摸两张牌。',
            // jlsg_lingbo_info: '当一名其他角色回合结束时，若你的武将牌横置时，你可以将一张自己装备区的牌移至该角色的合理区域；当一名其他角色回合开始时，若你的武将牌重置时，你可以选择该角色一张除手牌的牌，将此牌置入牌顶。',
            jlsg_lingbo_info: '一名角色的回合开始阶段，你可以重置你的武将牌，然后将场上的一张牌置于牌堆顶。',
            // jlsg_qingcheng_zhu_info: '游戏开始时，若你拥有技能［流云］：你可以重置你的武将牌，视为你使用或打出一张【杀】；你可以横置你的武将牌，视为你使用或打出一张【闪】；否则技能效果反之。',
            // jlsg_qingcheng_yin_info: '你可以重置你的武将牌，视为你使用或打出一张【杀】；你可以横置你的武将牌，视为你使用或打出一张【闪】。',
            // jlsg_qingcheng_yang_info: '你可以横置你的武将牌，视为你使用或打出一张【杀】；你可以重置你的武将牌，视为你使用或打出一张【闪】。',
            jlsg_qingcheng_info: '你可以横置你的武将牌，视为你使用或打出一张【杀】；你可以重置你的武将牌，视为你使用或打出一张【闪】。',
            jlsg_aozhan_info: '每当你因【杀】或【决斗】造成或受到1点伤害后，你可将牌堆顶的一张牌置于你的武将牌上，称为「战」。出牌阶段限一次，你可以选择一项：1、将所有「战」收入手牌。2、弃置所有「战」，然后摸等量的牌。',
            jlsg_huxiao_info: '出牌阶段，当你使用【杀】造成伤害时，若你的武将牌正面向上，你可以令此伤害+1并摸一张牌。若如此做，则此【杀】结算完毕后，将你的武将牌翻面并结束当前回合。',
            jlsg_old_huxiao_info: '出牌阶段，当你使用【杀】造成伤害时，若你的武将牌正面向上，你可以令此伤害+1并摸一张牌。若如此做，则此【杀】结算完毕后，将你的武将牌翻面并结束当前回合。',
            jlsg_guicai_info: '在任意角色的判定牌生效前，你可以选择一项：1、打出一张手牌代替之。2、亮出牌堆顶的一张牌代替之。',
            jlsg_langgu_info: '每当你造成或受到一次伤害后，你可以进行一次判定，若为黑色，你获得对方一张牌。',
            jlsg_zhuizun_info: '限定技，当你进入濒死状态时，你可以恢复体力至1点，令所有其他角色依次交给你一张手牌。然后当前回合结束后，你进行1个额外的回合。',
            jlsg_tianshang_info: '限定技，你死亡时，可令一名其他角色获得你此武将牌上拥有的其他技能，然后其增加1点体力上限并恢复1点体力。',
            jlsg_yiji_info: '每当你受到一点伤害，可以观看牌堆顶的两张牌，并将其交给任意1~2名角色。',
            jlsg_old_yiji_info: '当你受到一次伤害，可以观看牌堆顶的两张牌，并将其交给任意名角色，若你将所有的牌交给了同一名角色，你进行一次判定：判定牌为红桃，恢复1点体力。',
            jlsg_huiqu_info: '回合开始阶段，你可以弃置一张手牌进行一次判定，若结果为红色，你将场上的一张牌移动到一个合理的位置；若结果为黑色，你对一名角色造成1点伤害，然后你摸一张牌。',
            jlsg_zhaoxiang_info: '当一名其他角色使用【杀】指定目标后，你可以令其选择一项：1、交给你一张牌。2、令此【杀】对该目标无效；若其或【杀】的目标在你的攻击范围内，你须先弃置一张手牌。',
            jlsg_zhishi_info: '出牌阶段限一次，你可以令一名其他角色选择一项：1、弃置一张基本牌，然后回复一点。2、受到你造成的一点伤害，然后回复一点体力。',
            jlsg_old_zhishi_info: '出牌阶段限一次，你可以指定一名有手牌的其他角色，你选择其中一项执行：1.你展示一张【杀】令其弃置一张【杀】，若其执行，你与其恢复1点体力，否则你对其造成1点伤害；2.你展示一张【闪】令其弃置一张【闪】，若其执行，你与其恢复1点体力，否则你对其造成1点伤害。',
            jlsg_jianxiong_info: '主公技。每当其他魏势力受到不为你的一次伤害后，该角色可以弃置一张手牌，然后令你获得对其造成伤害的牌。',
            jlsg_jiuzhu_info: '每当一张非转化的【闪】进入弃牌堆时，你可以用一张不为【闪】的牌替换之。若此时不是你的回合，你可以视为对当前回合角色使用一张无视防具的【杀】。',
            jlsg_tuwei_info: '每当一张非转化的【杀】进入弃牌堆时，若你是此【杀】的目标或使用者，你可以弃置一张能造成伤害的牌，然后弃置此牌目标或使用者的共计两张牌。',
            // jlsg_xujin_info: '摸牌阶段，你可以放弃摸牌，改为展示牌堆顶的5张牌，并令一名角色获得其中1种花色的所有牌，再将其余的牌置入弃牌堆。若如此做，你本回合的攻击范围和可以使用的【杀】数量与以此法被获得的牌的数量相同。',
            jlsg_xujin_info: '摸牌阶段开始时，你展示牌堆顶的五张牌，然后，你可以放弃摸牌并将其中一种花色的牌交给一名角色，令你本回合的攻击范围和可以使用的【杀】数量与以此法被获得的牌的数量相同。否则你将展示的牌置入弃牌堆。',
            jlsg_paoxiao_info: '出牌阶段，当你使用【杀】对目标角色造成一次伤害并结算完毕后，你可以摸一张牌，然后选择一项：使用一张无视距离的【杀】，或令该角色弃置你的一张牌。',
            jlsg_benxi_info: '锁定技，你计算与其他角色的距离时始终-1.你使用【杀】指定目标后，目标角色须弃置一张装备牌，否则此【杀】不可被【闪】响应。',
            jlsg_yaozhan_info: '出牌阶段限一次，你可以与一名其他角色拼点：若你赢，你摸一张牌并视为对其使用一张【杀】（此【杀】不计入每回合的使用限制）；若你没赢，该角色可以对你使用一张【杀】。',
            jlsg_wenjiu_info: '出牌阶段限一次，你可以将一张黑色手牌置于你的武将牌上，称为「酒」。当你使用【杀】选择目标后，你可以将一张「酒」置入弃牌堆，然后当此【杀】造成伤害时，该伤害+1；当此【杀】被【闪】响应后，你摸一张牌。',
            jlsg_shuixi_info: '回合开始阶段开始时，你可以展示一张手牌并选择一名其他角色，令其选择一项：弃置一张与之相同花色的手牌，或失去1点体力。若该角色因此法失去体力，则此回合的出牌阶段，你不能使用【杀】。',
            jlsg_sanfen_info: '出牌阶段限一次，你可以选择两名其他角色，其中一名你选择的角色须对另一名角色使用一张【杀】，然后另一名角色须对你使用一张【杀】，你弃置不如此做者一张牌。（有距离限制）',
            jlsg_guanxing_info: '回合开始/结束阶段开始时，你可以观看牌堆顶的X张牌（X为存活角色的数量，且最多为3），将其中任意数量的牌以任意顺序置于牌堆顶，其余以任意顺序置于牌堆底。',
            jlsg_weiwo_info: '锁定技，当你有手牌时，你防止受到的属性伤害；当你没有手牌时，你防止受到的非属性伤害。',
            jlsg_shouji_info: '出牌阶段限一次，你可以弃置一张牌并选择两名角色，然后根据你弃置牌的花色，视为其中一名角色对另一名角色使用一张牌：黑桃【决斗】，梅花【借刀杀人】，红桃【顺手牵羊】，方片【火攻】。',
            jlsg_hemou_info: '其他角色的出牌阶段开始时，你可以将一张手牌正面朝上交给该角色，该角色本阶段限一次，可将一张与之相同花色的手牌按下列规则使用：黑桃【决斗】，梅花【借刀杀人】，红桃【顺手牵羊】，方片【火攻】。',
            jlsg_qicai_info: '每当你失去一次手牌时，你可以进行判定，若结果为红色，你摸一张牌。',
            jlsg_rende_info: '任一角色的回合结束阶段结束时，你可以将任意数量的手牌交给该角色，然后该角色进行1个额外的出牌阶段。',
            jlsg_chouxi_info: '出牌阶段限一次，你可以弃置一张手牌并展示牌堆顶的两张牌，然后令一名其他角色选择一项：1. 弃置一张与展示牌类别均不同的牌，然后令你获得展示的牌；2. 受到你造成的1点伤害并获得其中一种类别的牌，然后你获得其余的牌。',
            jlsg_yongbing_info: '主公技，当一名其他蜀势力角色使用【杀】造成一次伤害后，该角色可令你摸一张牌。',
            jlsg_yinmeng_info: '出牌阶段限X次，若你有手牌，你可以展示一名其他男性角色的一张手牌，然后展示你的一张手牌，若两张牌类型相同，你与其各摸一张牌；若不同，你弃置其展示的牌，X为你所损失的体力且至少为1',
            jlsg_xiwu_info: '当你使用的【杀】被目标角色的【闪】响应后，你可以摸一张牌，然后弃置其一张手牌。',
            jlsg_juelie_info: '出牌阶段限一次，你可以令一名手牌数与你不同的其他角色选择一项：将手牌数调整至与你相等；或视为你对其使用一张【杀】（不计入出牌阶段的使用限制）。',
            jlsg_xianger_info: "一名其他男性角色的回合开始时，你可以交给其两张基本牌。若如此做，该角色跳过出牌阶段，然后可以视为对你使用一张【杀】，否则下回合的出牌阶段受到你的1点伤害；若其在此阶段未造成伤害，则跳过弃牌阶段，且你摸一张牌。",
            jlsg_fangxin_info: '当你需要使用一张【桃】时，你可以将一张梅花牌当【兵粮寸断】或将一张方片牌当【乐不思蜀】对自己使用，若如此做，视为你使用了一张【桃】。',
            jlsg_xiyu_info: '你的回合开始时，你可以弃置一名角色的一张牌，然后该角色进行一个额外的出牌阶段。',
            jlsg_wanrou_info: '你的方片牌或你判定区的牌进入弃牌堆时，你可以令一名角色摸一张牌。',
            jlsg_zhouyan_info: '出牌阶段，你可以令一名角色摸一张牌，若如此做，视为你对其使用一张【火攻】，你可以重复此流程直到你以此法未造成伤害。每当你使用【火攻】造成一次伤害后，你可以摸一张牌。',
            jlsg_zhaxiang_info: '出牌阶段，你可以将一张手牌扣置，然后令一名其它角色选择一项：交给你一张牌并弃置你扣置的牌；或展示你扣置的牌并获得之。若你扣置的牌为【杀】，则视为你对其使用一张火属性的【杀】（不计入出牌阶段的使用限制且不可被响应）。',
            jlsg_old_zhaxiang_info: '出牌阶段限一次，你可以指定一名其它角色，视为该角色对你使用一张【杀】，然后你摸两张牌并视为对其使用一张【杀】（你的此【杀】无视防具）。',
            jlsg_shixue_info: '当你使用【杀】指定目标后，你可以摸两张牌；若如此做，当此【杀】被【闪】响应后，你须弃置两张牌。',
            jlsg_guoshi_info: '任一角色的回合开始阶段开始时，你可以观看牌堆顶的两张牌，然后可将其中任意张牌置于牌堆底。一名角色的回合结束阶段开始时，你可以令其获得本回合因弃置或判定进入弃牌堆的一张牌。',
            jlsg_yingcai_info: '摸牌阶段，你可以放弃摸牌，改为展示牌堆顶的一张牌，你重复此流程直到你展示出第3种花色的牌时，将这张牌置入弃牌堆，然后获得其余的牌。',
            jlsg_old_yingcai_info: '摸牌阶段，你可以放弃摸牌，改为展示牌堆顶的一张牌，你重复此流程直到你展示出第三种花色的牌时，将这张牌置入弃牌堆，然后获得其余的牌。',
            jlsg_weibao_info: '出牌阶段限一次，你可以将一张手牌置于牌堆顶，然后令一名其他角色选择一种花色后摸一张牌并展示之，若此牌与所选花色不同，你对其造成一点伤害。',
            jlsg_choulve_info: '出牌阶段限一次，你可以交给两名其他角色各一张手牌，然后依次展示之，点数较大的一方视为对另一方使用一张【杀】。该【杀】造成伤害后，你摸一张牌。',
            jlsg_jiexi_info: '出牌阶段，你可以与一名其他角色拼点，若你赢，视为对其使用一张【过河拆桥】。你可重复此流程直到你以此法拼点没赢。',
            jlsg_old_jiexi_info: '若你的武将牌正面朝上，你可以指定一名有手牌的角色进行拼点：若你赢，你视为对其使用一张【过河拆桥】，否则本回合不可发动此技能；锁定技，若你的武将牌正面朝上并触发技能〈劫袭〉后，且你的手牌数小于4时，你将武将牌背面朝上并摸一张牌；若你的武将牌背面朝上，你不能成为【南蛮入侵】和【闪电】的目标。',
            jlsg_youxia_info: '出牌阶段，若你的武将牌正面朝上，你可以将你的武将牌翻面，然后从一至两名其他角色处各获得一张牌；锁定技，若你的武将牌背面朝上，你不能成为【杀】和【决斗】的目标。',
            jlsg_old_youxia_info: '出牌阶段限一次，你可以将你的武将牌翻面，然后从1至2名其他角色的区域各弃置一张牌；锁定技，若你的武将牌背面朝上，你不能成为【杀】和【兵粮寸断】的目标。',

            jlsg_huailing_info: '若你的武将牌背面朝上，其他角色使用一张锦囊牌指定大于一个目标时，你可以令一名其他角色不受到该牌的效果，然后你将武将牌正面朝上；锁定技，若你的武将牌背面朝上，你不能成为【决斗】和【过河拆桥】的目标。',
            jlsg_dailao_info: '出牌阶段限一次，你可以令一名其他角色与你将武将牌翻面，然后其选择一项：与你各摸一张牌；或与你各弃置一张牌。',
            jlsg_youdi_info: '若你的武将牌背面朝上，你可以将其翻面来视为你使用一张【闪】。每当你使用【闪】响应一名角色使用的【杀】时，你可以弃置至多X张牌，然后该角色弃置等量的牌（X为该角色的牌数）。',
            jlsg_ruya_info: '当你失去最后的手牌时，你可以翻面并将手牌补至你体力上限的张数。',
            jlsg_quanheng_info: '出牌阶段限一次，你可以将至少一张手牌当【无中生有】或【杀】使用，若你以此法使用的牌被【无懈可击】或【闪】响应时，你摸等量的牌。',
            jlsg_xionglve_info: '摸牌阶段，你可以放弃摸牌，改为展示牌堆顶的两张牌，你获得其中一张牌，然后将另一张牌置于你的武将牌上，称为「略」。出牌阶段，你可以将一张基本牌或锦囊牌的「略」当与之同类别的任意一张牌（延时类锦囊牌除外）使用，将一张装备牌的「略」置于一名其他角色装备区内的相应位置。',
            jlsg_fuzheng_info: '主公技，回合开始阶段开始时，你可以令至多两名其他吴势力角色各摸一张牌，然后这些角色依次将一张手牌置于牌堆顶。',
            jlsg_jiwu_info: '出牌阶段限一次，你可以将你的手牌调整至一张，若如此做，本回合你的攻击范围无限，且你下一次使用的【杀】造成的伤害+1。锁定技，若你的装备区没有牌，你使用【杀】可以额外指定至多两名目标。',
            jlsg_old_jiwu_info: '出牌阶段限一次，若你的手牌数大于一，若如此做，本回合你的攻击范围无限，且你下一次使用的【杀】造成的伤害+1。锁定技，若你的装备区没有牌，你使用【杀】可以至多额外指定任意两名其他角色为目标。',

            jlsg_sheji_info: '当一名装备区有武器牌的其他角色对另一名角色造成伤害后，你可以弃置一张牌，然后获得该角色的武器牌。你可以将装备牌当无距离限制的【杀】使用或打出，你以此法使用的【杀】须连续使用两张【闪】才能抵消。',
            jlsg_xingyi_info: '出牌阶段限一次，你可以获得一名有手牌的其他角色一张手牌，然后令其恢复1点体力。',
            jlsg_guagu_info: '当一名角色进入濒死状态时，你可以弃置其所有手牌（至少一张），然后该角色恢复1点体力。若你以此法弃置其两张或更多的手牌，该角色摸一张牌。',
            jlsg_wuqin_info: '回合结束阶段结束时，你可以弃置一张基本牌，然后摸两张牌并进行一个额外的出牌阶段。',
            jlsg_lijian_info: '出牌阶段限一次，你可以弃一张牌并选择两名其他男性角色。若如此做，视为其中一名男性角色对另一名男性角色使用一张【决斗】(该【决斗】不可被【无懈可击】响应)。',
            jlsg_manwu_info: '出牌阶段限一次，你可以展示一名男性角色的一张手牌，若此牌为方片，将之置于该角色的判定区内，视为【乐不思蜀】；若不为方片，你获得之。',
            jlsg_baiyue_info: '回合结束阶段开始时，你可以获得本回合其他角色进入弃牌堆的一张牌。',
            jlsg_ganglie_info: '出牌阶段开始时，你可以失去1点体力，若如此做，你本回合下一次造成的伤害+1。且本回合你每造成1点伤害，回合结束时你便摸一张牌',
          },
        };
        if (false && config.oldCharacterReplace) {
          for (var i in jlsg_sr.character) {
            if (i == 'jlsgsr_sunshangxiang') {
              jlsg_sr.character[i][3] = ['jlsg_yinmeng', 'jlsg_xianger', 'jlsg_juelie'];
              jlsg_sr.translate[i] = 'SR旧孙尚香';
            } else if (i == 'jlsgsr_guojia') {
              jlsg_sr.character[i][3] = ['jlsg_tianshang', 'jlsg_old_yiji', 'jlsg_huiqu'];
              jlsg_sr.translate[i] = 'SR旧郭嘉';
            } else if (i == 'jlsgsr_luxun') {
              jlsg_sr.character[i][3] = ['jlsg_old_dailao', 'jlsg_old_youdi', 'jlsg_old_ruya'];
              jlsg_sr.translate[i] = 'SR旧陆逊';
            } else if (i == 'jlsgsr_caocao') {
              jlsg_sr.character[i][3] = ['jlsg_zhaoxiang', 'jlsg_old_zhishi', 'jlsg_jianxiong'];
              jlsg_sr.translate[i] = 'SR旧曹操';
            } else if (i == 'jlsgsr_xuzhu') {
              jlsg_sr.character[i][3] = ['jlsg_aozhan', 'jlsg_old_huxiao'];
              jlsg_sr.translate[i] = 'SR旧许褚';
            } else if (i == 'jlsgsr_ganning') {
              jlsg_sr.character[i][3] = ['jlsg_old_jiexi', 'jlsg_old_youxia', 'jlsg_huailing'];
              jlsg_sr.translate[i] = 'SR旧甘宁';
            } else if (i == 'jlsgsr_huanggai') {
              jlsg_sr.character[i][3] = ['jlsg_zhouyan', 'jlsg_old_zhaxiang'];
              jlsg_sr.translate[i] = 'SR旧黄盖';
            } else if (i == 'jlsgsr_zhouyu') {
              jlsg_sr.character[i][3] = ['jlsg_old_yingcai', 'jlsg_weibao', 'jlsg_choulve'];
              jlsg_sr.translate[i] = 'SR旧周瑜';
            }
          }
        }
        postProcessPack(jlsg_sr);
        return jlsg_sr;
      });
      game.import('character', function () { // Soul
        var jlsg_soul = {
          name: 'jlsg_soul',
          connect: true,
          character: {
            jlsgsoul_caocao: ['male', 'shen', 3, ['jlsg_guixin', 'jlsg_feiying'], ['wei']],
            jlsgsoul_sunquan: ['male', 'shen', 4, ['jlsg_huju'], ['wu']],
            jlsgsoul_jiaxu: ['male', 'shen', 3, ['jlsg_yanmie', 'jlsg_shunshi'], ['wei']],
            jlsgsoul_liubei: ['male', 'shen', 4, ['jlsg_junwang', 'jlsg_jizhao'], ['shu']],
            jlsgsoul_zhugeliang: ['male', 'shen', 3, ['jlsg_qixing', 'jlsg_kuangfeng', 'jlsg_dawu'], ['shu', 'name:诸葛|亮']],
            jlsgsoul_sp_zhugeliang: ['male', 'shen', 7, ['jlsg_yaozhi', 'jlsg_xingyun'], ['shu', 'name:诸葛|亮']],
            jlsgsoul_simayi: ['male', 'shen', 3, ['jlsg_jilve', 'jlsg_tongtian'], ['wei', 'name:司马|懿']],
            jlsgsoul_sp_simayi: ['male', 'shen', 3, ['jlsg_yingshi', 'jlsg_langxi', 'jlsg_shenyin'], ['wei']],
            jlsgsoul_luxun: ['male', 'shen', 3, ['jlsg_jieyan', 'jlsg_fenying'], ['wu']],
            jlsgsoul_lvbu: ['male', 'shen', 5, ['jlsg_kuangbao', 'jlsg_wumou', 'jlsg_wuqian', 'jlsg_shenfen'], ['qun']],
            jlsgsoul_sp_lvbu: ['male', 'shen', 2, ['jlsg_luocha', 'jlsg_shajue', 'jlsg_guiqu'], ['qun', 'fan']],
            jlsgsoul_guanyu: ['male', 'shen', 5, ['jlsg_wushen', 'jlsg_suohun'], ['shu']],
            jlsgsoul_zhaoyun: ['male', 'shen', 4, ['jlsg_juejing', 'jlsg_longhun'], ['shu']],
            jlsgsoul_zhangliao: ['male', 'shen', 4, ['jlsg_nizhan', 'jlsg_cuifeng', 'jlsg_weizhen'], ['wei']],
            jlsgsoul_sp_zhangliao: ['male', 'shen', 4, ['jlsg_fengying', 'jlsg_zhiti'], ['wei']],
            jlsgsoul_huangyueying: ['female', 'shen', 3, ['jlsg_zhiming', 'jlsg_suyin'], ['shu']],
            jlsgsoul_sp_huangyueying: ['female', 'shen', 3, ['jlsg_tiangong', 'jlsg_linglong'], ['shu']],
            jlsgsoul_zhangjiao: ['male', 'shen', 3, ['jlsg_dianjie', 'jlsg_shendao', 'jlsg_leihun'], ['qun', 'fan']],
            jlsgsoul_sp_zhangjiao: ['male', 'shen', 3, ['jlsg_yinyang_s', 'jlsg_dingming'], ['qun', 'fan']],
            jlsgsoul_lvmeng: ['male', 'shen', 3, ['jlsg_shelie', 'jlsg_gongxin'], ['wu']],
            jlsgsoul_guojia: ['male', 'shen', 3, ['jlsg_tianqi', 'jlsg_tianji'], ['wei']],
            jlsgsoul_diaochan: ['female', 'shen', 3, ['jlsg_tianzi', 'jlsg_meixin'], ['qun', 'name:null|null']],
            jlsgsoul_sp_diaochan: ['female', 'shen', 1, ['jlsg_lihun', 'jlsg_jueshi'], ['qun', 'name:null|null']],
            jlsgsoul_zhangfei: ['male', 'shen', 4, ['jlsg_shayi', 'jlsg_zhenhun'], ['shu']],
            jlsgsoul_simahui: ['male', 'shen', 3, ['jlsg_zhitian', 'jlsg_yinshi'], ['qun', 'name:司马|徽']],
            jlsgsoul_sunshangxiang: ['female', 'shen', 3, ['jlsg_xianzhu', 'jlsg_liangyuan'], ['shu']],
            jlsgsoul_ganning: ['male', 'shen', 4, ['jlsg_lvezhen', 'jlsg_youlong'], ['wu']],
            jlsgsoul_sp_ganning: ['male', 'shen', 4, ['jlsg_jieying', 'jlsg_jinlong'], ['wu']],
            jlsgsoul_xiahoudun: ['male', 'shen', 5, ['jlsg_danjing', 'jlsg_zhonghun'], ['wei', 'name:夏侯|惇']],
            jlsgsoul_dianwei: ['male', 'shen', 6, ['jlsg_zhiji'], ['wei']],
            jlsgsoul_huatuo: ['male', 'shen', 3, ['jlsg_yuanhua', 'jlsg_guiyuan', 'jlsg_chongsheng'], ['qun']],
            jlsgsoul_zhouyu: ['male', 'shen', 4, ['jlsg_qinyin', 'jlsg_yeyan'], ['wu']],
            jlsgsoul_machao: ['male', 'shen', 4, ['jlsg_qianqi', 'jlsg_juechen'], ['shu']],
            jlsgsoul_zhenji: ['female', 'shen', 3, ['jlsg_shenfu'], ['wei']],
            jlsgsoul_huanggai: ['male', 'shen', 6, ['jlsg_lianti', 'jlsg_yanlie'], ['wu']],
            jlsgsoul_xuzhu: ['male', 'shen', 5, ['jlsg_huchi', 'jlsg_xiejia'], ['wei']],
            jlsgsoul_daqiao: ['female', 'shen', 3, ['jlsg_wangyue', 'jlsg_luoyan'], ['wu', 'name:桥|null']],
            jlsgsoul_huangzhong: ['male', 'shen', 4, ['jlsg_liegong'], ['shu']],
            jlsgsoul_xiaoqiao: ['female', 'shen', 3, ['jlsg_xingwu', 'jlsg_chenyu'], ['wu', 'name:桥|null']],
            jlsgsoul_caoren: ['male', 'shen', 8, ['jlsg_bamen', 'jlsg_gucheng'], ['wei']],
            jlsgsoul_caopi: ['male', 'shen', 3, ['jlsg_chuyuan', 'jlsg_dengji'], ['wei']],

            jlsgsoul_pangtong: ["male", "shen", 3, ["jlsg_qifeng", "jlsg_lunce"], ["name:庞|统"]],
            jlsgsoul_sp_zhaoyun: ["male", "shen", 1, ["jlsg_qianyuan", "jlsg_hualong"], ["shu", "name:赵|云"]],
            jlsgsoul_sp_sunshangxiang: ["female", "shen", 3, ["jlsg_zhuxing", "jlsg_lingze"], ["wu", "name:孙|尚香"]],
            jlsgsoul_caiwenji: ["female", "shen", 3, ["jlsg_hanshuang", "jlsg_liluan"], ["qun", "name:蔡|琰"]],

          },
          characterIntro: {},
          skill: {
            jlsg_guixin: {
              audio: "ext:极略:1",
              trigger: { player: 'damageEnd' },
              check: function (event, player) {
                if (player.isTurnedOver()) return true;
                if (game.dead.length >= 2) return true;
                var num = game.countPlayer(function (current) {
                  if (current.countCards('he') && current != player && get.attitude(player, current) <= 0) {
                    return true;
                  }
                  if (current.countCards('j') && current != player && get.attitude(player, current) > 0) {
                    return true;
                  }
                });
                return num >= 2;
              },
              content: function () {
                "step 0"
                event.num2 = trigger.num;
                "step 1"
                var targets = game.filterPlayer();
                targets.remove(player);
                targets.sort(lib.sort.seat);
                event.targets = targets;
                event.num = 0;
                player.line(targets, 'green');
                "step 2"
                if (num < event.targets.length) {
                  var hej = event.targets[num].getCards('hej')
                  if (hej.length) {
                    //				var card='hej';
                    player.gainPlayerCard('hej', event.targets[num], true);
                    //					if(get.position(card)=='h'){
                    //event.targets[num].$giveAuto(card,player);
                    //				}
                    //				else{
                    //				event.targets[num].$give(card,player);
                    //						}
                  }
                  event.num++;
                  event.redo();
                }
                "step 3"
                player.draw(game.dead.length);
                player.turnOver();
                "step 4"
                event.num2--;
                if (event.num2 > 0) {
                  player.chooseBool(get.prompt2("jlsg_guixin"));
                }
                else {
                  event.finish();
                }
                "step 5"
                if (result.bool) {
                  player.logSkill('jlsg_guixin');
                  event.goto(1);
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                threaten: function (player, target) {
                  if (target.hp == 1) return 3;
                  return 1;
                },
                effect: {
                  target: function (card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                      if (target.hp == 1) return 0.8;
                      if (target.isTurnedOver()) return [0, 3];
                      var num = game.countPlayer(function (current) {
                        if (current.countCards('he') && current != player && get.attitude(player, current) <= 0) {
                          return true;
                        }
                        if (current.countCards('j') && current != player && get.attitude(player, current) > 0) {
                          return true;
                        }
                      });
                      if (num > 2) return [0, 1];
                      if (num == 2) return [0.5, 1];
                    }
                  }
                }
              }
            },
            jlsg_feiying: {
              mod: {
                targetInRange: function (card, player, target, now) {
                  if (!player.isTurnedOver() && card.name == 'sha')
                    return true;
                },
                targetEnabled: function (card, player, target, now) {
                  if (target.isTurnedOver() && card.name == 'sha')
                    return false;
                },

              },
            },
            jlsg_huju: {
              audio: "ext:极略:true",
              trigger: { global: 'phaseBegin' },
              derivation: ['zhiheng', 'jlsg_hufu'],
              filter: function (event, player) {
                return event.player != player;
              },
              forced: true,
              content: function () {
                player.draw();
              },
              group: ['jlsg_huju2'],
            },
            jlsg_huju2: {
              // audio: "ext:极略:true",
              trigger: { player: 'phaseBegin' },
              filter: function (event, player) {
                var num = player.countCards('h');
                for (var i = 0; i < game.players.length; i++) {
                  if (game.players[i].num('h') > num)
                    return false;
                }
                return true;
              },
              forced: true,
              content: function () {
                "step 0"
                player.chooseControl('选项一', '选项二', function () {
                  if (player.hp <= 2 && !player.countCards('h', function (card) {
                    return get.tag(card, 'recover');
                  })) return '选项二';
                  return '选项一';
                }).set('prompt', '虎踞<br><br><div class="text">1：失去1点体力</div><br><div class="text">2：减1点体力上限，失去【虎踞】，获得【制衡】和【虎缚】</div></br>');
                "step 1"
                if (result.control == '选项一') {
                  game.trySkillAudio('jlsg_hujuStill');
                  player.loseHp();
                } else {
                  player.logSkill('jlsg_hujuWake');
                  player.loseMaxHp();
                  player.changeSkills(['zhiheng', 'jlsg_hufu'], ['jlsg_huju']);
                }
              },
            },
            jlsg_hujuStill: {
              audio: "ext:极略:true",
              unique: true,
            },
            jlsg_hujuWake: {
              skillAnimation: true,
              audio: "ext:极略:true",
              inherit: 'jlsg_huju2',
              unique: true,
            },
            jlsg_hufu: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return player != target && target.countCards('e');
              },
              content: function () {
                target.chooseToDiscard(target.countCards('e'), true, 'he');
              },
              ai: {
                expose: 0.3,
                order: 10,
                result: {
                  target: function (player, target) {
                    return -target.countCards('e');
                  }
                }
              }
            },
            jlsg_yanmie: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('he', { suit: 'spade' }) > 0;
              },
              check: function (card) {
                return 7 - get.value(card)
              },
              filterCard: function (card) {
                return get.suit(card) == 'spade';
              },
              position: 'he',
              filterTarget: function (card, player, target) {
                return player != target && target.countCards('h');
              },
              content: function () {
                "step 0"
                var num = target.countCards('h');
                target.discard(target.get('h'));
                target.draw(num);
                target.showHandcards();
                "step 1"
                var cards = target.getCards('h', function (card) {
                  return get.type(card) != 'basic';
                });
                // var num = target.countCards('h', function (card) {
                //   return get.type(card) != 'basic';
                // });
                // target.discard(target.get('h', function (card) {
                //   return get.type(card) != 'basic';
                // }));
                if (cards.length) {
                  target.discard(cards, player);
                  target.damage(cards.length);
                }
              },
              ai: {
                order: 8,
                expose: 0.3,
                threaten: 1.8,
                result: {
                  target: function (player, target) {
                    return -target.countCards('h') - 1;
                  }
                }
              }
            },
            jlsg_shunshi: {
              audio: "ext:极略:2",
              trigger: { target: 'useCardToBegin' },
              filter: function (event, player) {
                return event.player != player && get.type(event.card) == 'basic'
                  && game.hasPlayer(p => p != player && p != event.player);
              },
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget('是否发动【顺世】?', [1, 3], function (card, player, target) {
                  return player != target && trigger.player != target;
                }).ai = function (target) {
                  // if (trigger.card.name == 'sha') {
                  //   if (target.countCards('e', '2') && target.get('e') != 'baiyin') return 0;
                  //   return -get.attitude(player, target);
                  // }
                  // if (trigger.card.name == 'tao') {
                  //   if (!target.isDamaged()) return 0;
                  //   return get.attitude(player, target);
                  // }
                  return get.effect(target, { name: trigger.card.name }, player);
                }
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_shunshi', result.targets);
                  player.draw();
                  game.asyncDraw(result.targets);
                  for (var i = 0; i < result.targets.length; i++) {
                    trigger.targets.push(result.targets[i]);
                    game.log(result.targets[i], '成为了额外目标');
                  }
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target) {
                    if (player == target) return;
                    if (card.name == 'tao') {
                      return [1, 2];
                    }
                    if (card.name == 'sha') {
                      return [1, 0.74];
                    }
                  },
                }
              }
            },
            jlsg_junwang: {
              audio: "ext:极略:2",
              trigger: { global: ['phaseUseBegin', 'phaseUseEnd'] },
              forced: true,
              filter: function (event, player) {
                return event.player != player && event.player.countCards('h') >= player.countCards('h');
              },
              content: function () {
                "step 0"
                trigger.player.chooseCard('交给' + get.translation(player) + '一张手牌', true).ai = function (card) {
                  if (get.attitude(trigger.player, player) > 0) {
                    return get.value(card);
                  } else {
                    return -get.value(card);
                  }
                }
                "step 1"
                if (result.bool) {
                  player.gain(result.cards[0]);
                  trigger.player.$give(1, player);
                }
              }
            },
            jlsg_jizhao: {
              audio: "ext:极略:2",
              enable: "phaseUse",
              filterCard: true,
              selectCard: [1, Infinity],
              filter: function () {
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_jizhao1)
                    return true;
                }
                return false;
              },
              discard: false,
              // prepare: "give2",
              check: function (card) {
                if (ui.selected.cards.length > 1) return 0;
                if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') return 0;
                if (ui.selected.cards.length && ui.selected.cards[0].name == 'shandian') return 0;
                if (!ui.selected.cards.length && card.name == 'du') return 20;
                if (!ui.selected.cards.length && card.name == 'shandian') return 18;
                if (!ui.selected.cards.length && card.name == 'shan') return 14;
                if (!ui.selected.cards.length && card.name == 'jiedao') return 16;
                return 0;
              },
              filterTarget: function (card, player, target) {
                return !target.storage.jlsg_jizhao1 && player != target;
              },
              content: function () {
                target.gain(cards, player, 'giveAuto');
                // player.$give(cards, target);
                target.addTempSkill('jlsg_jizhao_zhao', { player: 'dieAfter' });
                target.storage.jlsg_jizhao1 = true;
                target.storage.jlsg_jizhao2 = player;
              },
              ai: {
                order: 4,
                result: {
                  target: function (card, player, target) {
                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                      return -10;
                    }
                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'shandian') {
                      return -10;
                    }
                    return -1;
                  },
                  result: {
                    target: -1,
                  },
                },
              },
            },
            jlsg_jizhao_zhao: {
              audio: "ext:极略:1",
              trigger: {
                player: "phaseEnd",
              },
              mark: true,
              marktext: "<font color=red>诏</font>",
              direct: true,
              content: function () {
                if (!player.getStat('damage')) {
                  player.storage.jlsg_jizhao2.logSkill('jlsg_jizhao', player);
                  player.storage.jlsg_jizhao1 = false;
                  player.damage(player.storage.jlsg_jizhao2);
                  player.removeSkill("jlsg_jizhao_zhao");
                  delete player.storage.jlsg_jizhao2;
                }
              },
              intro: {
                content: "该角色的回合未造成伤害，回合结束将受到你的1点伤害并弃置该标记",
              },
            },
            jlsg_qixing: {
              audio: "ext:极略:1",
              trigger: {
                global: 'phaseBefore',
                player: 'enterGame'
              },
              forced: true,
              marktext: '星',
              filter: function (event, player) {
                return event.name != 'phase' || game.phaseNumber == 0;
              },
              content: function () {
                "step 0"
                player.gain(get.cards(7))._triggered = null;
                "step 1"
                if (player == game.me) {
                  game.addVideo('delay', null);
                }
                player.chooseCard('选择七张牌作为「星」', 7, true).ai = function (card) {
                  return get.value(card);
                };
                "step 2"
                player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add(event.name);
              },
              mark: true,
              intro: {
                mark: function (dialog, content, player) {
                  var content = player.getExpansions('jlsg_qixing');
                  if (content && content.length) {
                    if (player == game.me || player.isUnderControl()) {
                      dialog.add(content);
                    } else {
                      return '共有' + get.cnNumber(content.length) + '张「星」';
                    }
                  }
                },
                content: function (content, player) {
                  var content = player.getExpansions('jlsg_qixing');
                  if (content && content.length) {
                    if (player == game.me || player.isUnderControl()) {
                      return get.translation(content);
                    }
                    return '共有' + get.cnNumber(content.length) + '张「星」';
                  }
                }
              },
              group: ['jlsg_qixing2'],
            },
            jlsg_qixing2: {
              trigger: { player: 'phaseDrawAfter' },
              audio: "ext:极略:true",
              direct: true,
              filter: function (event, player) {
                return player.getExpansions('jlsg_qixing').length;
              },
              content: function () {
                "step 0"
                player.chooseCard(get.prompt('jlsg_qixing'), [1, 3]).ai = function (card) {
                  return 1;
                };
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_qixing');
                  player.addToExpansion(result.cards, player, 'giveAuto').gaintag.add('jlsg_qixing');
                  event.num = result.cards.length;
                } else {
                  event.finish();
                }
                "step 2"
                player.chooseCardButton(player.getExpansions('jlsg_qixing'), '选择1-2张牌作为手牌', [1, 2], true).ai = function (button) {
                  if (player.skipList.includes('phaseUse') && button.link != 'du') {
                    return -get.value(button.link);
                  }
                  return get.value(button.link);
                }
                if (player == game.me && _status.auto) {
                  game.delay(0.5);
                }
                "step 3"
                //  player.gain(result.links)._triggered=null;
                player.gain(result.links)._triggered = null;
                player.syncStorage('jlsg_qixing');
                if (player == game.me && _status.auto) {
                  game.delay(0.5);
                }
              }
            },
            jlsg_kuangfeng: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseZhunbeiBegin' },
              direct: true,
              filter: function (event, player) {
                return player.getExpansions('jlsg_qixing').length;
              },
              content: function () {
                "step 0"
                var clearKuangfeng = jlsg.findPlayerBySkillName('jlsg_kuangfeng2');
                if (clearKuangfeng) {
                  clearKuangfeng.removeSkill('jlsg_kuangfeng2');
                  clearKuangfeng.popup('jlsg_kuangfeng2');
                }
                player.chooseTarget('选择一名角色获得狂风标记').ai = function (target) {
                  if (player.getExpansions('jlsg_qixing').length > 3) return jlsg.isWeak(target) && jlsg.isEnemy(player, target);
                  return -1;
                }
                "step 1"
                if (result.bool) {
                  result.targets[0].addSkill('jlsg_kuangfeng2');
                  result.targets[0].popup('jlsg_kuangfeng');
                  player.logSkill('jlsg_kuangfeng', result.targets, 'fire');
                  player.chooseCardButton('弃置1枚「星」', player.getExpansions('jlsg_qixing'), true);
                } else {
                  event.finish();
                }
                "step 2"
                player.discard(result.links);
              },
            },
            jlsg_kuangfeng2: {
              unique: true,
              trigger: { player: 'damageBegin' },
              mark: true,
              marktext: '风',
              intro: {
                content: '已获得「风」标记'
              },
              forced: true,
              content: function () {
                var jlsg_zhugeliang = jlsg.findPlayerBySkillName('jlsg_kuangfeng');
                if (jlsg_zhugeliang) {
                  if (trigger.nature) {
                    if (trigger.nature == 'fire') {
                      jlsg_zhugeliang.line(player, 'fire');
                      trigger.num++;
                    }
                    if (trigger.nature == 'thunder') {
                      jlsg_zhugeliang.line(player, 'thunder');
                      player.chooseToDiscard(2, true);
                    }
                  } else {
                    if (jlsg_zhugeliang && jlsg_zhugeliang.getExpansions('jlsg_qixing')) {
                      jlsg_zhugeliang.line(player, 'water');
                      var card = get.cards();
                      jlsg_zhugeliang.addToExpansion(card, jlsg_zhugeliang, 'draw').gaintag.add('jlsg_qixing');
                      game.log(jlsg_zhugeliang, '将牌堆顶的一张牌置入「星」');
                    }
                  }
                }
              },
              ai: {
                threaten: 3,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'fireDamage')) return 1.5;
                    if (get.tag(card, 'thunderDamage')) return 1.5;
                  }
                }
              }
            },
            jlsg_dawu: {
              trigger: { player: 'phaseJieshuBegin' },
              priority: 1,
              direct: true,
              filter: function (event, player) {
                return player.getExpansions('jlsg_qixing').length;
              },
              audio: "ext:极略:2",
              content: function () {
                "step 0"
                player.chooseTarget('选择角色获得大雾标记',
                  [1, Math.min(game.players.length, player.getExpansions('jlsg_qixing').length)]).ai = function (target) {
                    if (target.isMin()) return 0;
                    if (target.hasSkill('biantian2')) return 0;
                    var att = get.attitude(player, target);
                    if (att >= 4) {
                      if (target.hp == 1 && target.maxHp > 2) return att;
                      if (target.hp == 2 && target.maxHp > 3 && target.countCards('he') == 0) return att * 0.7;
                      if (jlsg.isWeak(target)) return att * 1.1;
                      return 0;
                    }
                    return -1;
                  }
                "step 1"
                if (result.bool) {
                  var length = result.targets.length;
                  for (var i = 0; i < length; i++) {
                    result.targets[i].addSkill('jlsg_dawu2');
                    result.targets[i].popup('jlsg_dawu');
                  }
                  player.logSkill('jlsg_dawu', result.targets, 'thunder');
                  player.chooseCardButton('弃置' + get.cnNumber(length) + '枚「星」', length, player.getExpansions('jlsg_qixing'), true);
                } else {
                  event.finish();
                }
                "step 2"
                player.discard(result.links);
              },
              group: ['jlsg_dawu_remove'],
              subSkill: {
                remove: {
                  trigger: { player: ['phaseBegin', 'dieBegin'] },
                  forced: true,
                  unique: true,
                  popup: false,
                  silent: true,
                  content: function () {
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i].hasSkill('jlsg_dawu2')) {
                        game.players[i].removeSkill('jlsg_dawu2');
                        game.players[i].popup('jlsg_dawu');
                      }
                      if (game.players[i].hasSkill('jlsg_kuangfeng2')) {
                        game.players[i].removeSkill('jlsg_kuangfeng2');
                        game.players[i].popup('jlsg_kuangfeng2');
                      }
                    }
                  }
                }
              }
            },
            jlsg_dawu2: {
              trigger: { player: 'damageBefore' },
              filter: function (event) {
                if (event.nature != 'thunder') return true;
                return false;
              },
              marktext: '雾',
              mark: true,
              unique: true,
              forced: true,
              content: function () {
                trigger.cancel();

              },
              ai: {
                nofire: true,
                nodamage: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'damage') && !get.tag(card, 'thunderDamage')) return [0, 0];
                  }
                },
              },
              intro: {
                content: '已获得大雾标记'
              }
            },
            jlsg_yaozhi: {
              audio: "ext:极略:2",
              trigger: {
                player: ['phaseBegin', 'damageEnd', 'phaseJieshuBegin'],
              },
              frequent: true,
              content: function () {
                'step 0'
                if (!player.storage.jlsg_yaozhi) player.storage.jlsg_yaozhi = [];
                player.draw();
                'step 1'
                if (!_status.characterlist) {
                  lib.skill.pingjian.initList();
                }
                var list = [];
                var skills = [];
                _status.characterlist.randomSort();
                var name2 = [];
                if (event.triggername == 'phaseBegin') {
                  name2.push('phaseZhunbeiBegin');
                  name2.push(event.triggername);
                } else { name2.push(event.triggername); }
                for (var i = 0; i < _status.characterlist.length; i++) {
                  var name = _status.characterlist[i];
                  if (name.indexOf('zuoci') != -1 || name.indexOf('xushao') != -1 || name == 'jlsgsoul_sp_xushao') continue;
                  if (!get.character(name)) continue;
                  var skills2 = get.character(name)[3];
                  for (var j = 0; j < skills2.length; j++) {
                    if (player.hasSkill(skills2[j])) continue;
                    if (skills.includes(skills2[j])) continue;
                    if (player.storage.jlsg_yaozhi.includes(skills2[j])) continue;
                    var list2 = [skills2[j]];
                    game.expandSkills(list2);
                    for (var k = 0; k < list2.length; k++) {
                      var info = lib.skill[list2[k]];
                      if (!info || !info.trigger || !info.trigger.player || info.silent || info.limited || info.juexingji || info.zhuanhuanji || info.hiddenSkill || info.dutySkill) continue;
                      for (var y = 0; y < name2.length; y++) {
                        if (info.trigger.player == name2[y] || Array.isArray(info.trigger.player) && info.trigger.player.includes(name2[y])) {
                          if (info.init || info.ai && (info.ai.combo || info.ai.notemp || info.ai.neg)) continue;
                          if (info.filter) {
                            try {
                              var bool = info.filter(trigger, player, name2[y]);
                              if (!bool) continue;
                            }
                            catch (e) {
                              continue;
                            }
                          }
                          list.add(name);
                          skills.add(skills2[j]);
                          break;
                        }
                      }
                    }
                    if (skills.includes(skills2[j])) {
                      break;
                    }
                  }
                  if (skills.length > 2) break;
                }
                player.chooseControl(skills).set('dialog', ['请选择要发动的技能', [list, 'character']]).set('ai', function () { return 0 });
                'step 2'
                player.storage.jlsg_yaozhi.add(result.control);
                var removeT = 'damageAfter';
                if (event.triggername == 'phaseJieshuBegin') {
                  removeT = 'phaseJieshuEnd';
                }
                else if (event.triggername == 'phaseBegin') {
                  removeT = 'phaseZhunbeiEnd';
                }
                player.addTempSkill(result.control, removeT);
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                effect: {
                  target(card, player, target) {
                    if (get.tag(card, 'damage')) {
                      if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                      if (!target.hasFriend()) return;
                      let num = 1;
                      if (get.attitude(player, target) > 0) {
                        if (player.needsToDiscard()) num = 0.7;
                        else num = 0.5;
                      }
                      if (target.hp >= 4) return [1, num * 2];
                      if (target.hp == 3) return [1, num * 1.5];
                      if (target.hp == 2) return [1, num * 0.5];
                    }
                  }
                }
              },
              group: 'jlsg_yaozhi_use',
            },
            jlsg_yaozhi_use: {
              sourceSkill: "jlsg_yaozhi",
              audio: 'jlsg_yaozhi',
              enable: 'phaseUse',
              usable: 1,
              content: function () {
                'step 0'
                if (!player.storage.jlsg_yaozhi) player.storage.jlsg_yaozhi = [];
                player.draw();
                'step 1'
                var list = [];
                var skills = [];
                if (!_status.characterlist) {
                  lib.skill.pingjian.initList();
                }
                _status.characterlist.randomSort();
                for (var i = 0; i < _status.characterlist.length; i++) {
                  var name = _status.characterlist[i];
                  if (name.indexOf('zuoci') != -1 || name.indexOf('xushao') != -1 || name == 'jlsgsoul_sp_xushao') continue;
                  var skills2 = get.character(name)[3];
                  for (var j = 0; j < skills2.length; j++) {
                    if (skills.includes(skills2[j])) continue;
                    if (player.hasSkill(skills2[j])) continue;
                    if (player.storage.jlsg_yaozhi.includes(skills2[j])) continue;
                    if (lib.skill.pingjian.phaseUse_special.includes(skills2[j])) {
                      list.add(name);
                      skills.add(skills2[j]);
                      continue;
                    }
                    var list2 = [skills2[j]];
                    game.expandSkills(list2);
                    for (var k = 0; k < list2.length; k++) {
                      var info = lib.skill[list2[k]];
                      if (!info || !info.enable || info.viewAs || info.limited || info.juexingji || info.zhuanhuanji || info.hiddenSkill || info.dutySkill) continue;
                      if (info.enable == 'phaseUse' || Array.isArray(info.enable) && info.enable.includes('phaseUse')) {
                        if (info.init || info.onChooseToUse || info.ai && (info.ai.combo || info.ai.notemp || info.ai.neg)) continue;
                        if (info.filter) {
                          try {
                            var bool = info.filter(event.getParent(2), player);
                            if (!bool) continue;
                          }
                          catch (e) {
                            continue;
                          }
                        }
                        list.add(name);
                        skills.add(skills2[j]);
                        break;
                      }
                    }
                    if (skills.includes(skills2[j])) break;
                  }
                  if (skills.length > 2) break;
                }
                player.chooseControl(skills).set('dialog', ['请选择要发动的技能', [list, 'character']]).set('ai', function () { return 0 });
                'step 2'
                if (result.control == '摸一张牌') {
                  player.draw();
                  return;
                }
                player.storage.jlsg_yaozhi.add(result.control);
                player.addTempSkill(result.control, 'phaseUseEnd');
                player.addTempSkill('jlsg_yaozhi_temp', 'phaseUseEnd');
                player.storage.jlsg_yaozhi_temp = result.control;
                //event.getParent(2).goto(0);
              },
              ai: { order: 10, result: { player: 1 } },
            },
            jlsg_yaozhi_temp: {
              onremove: true,
              trigger: { player: ['useSkillBegin', 'useCard1'] },
              silent: true,
              firstDo: true,
              filter: function (event, player) {
                var info = lib.skill[event.skill];
                if (!info) return false;
                if (event.skill == player.storage.jlsg_yaozhi_temp) return true;
                if (info.sourceSkill == player.storage.jlsg_yaozhi_temp || info.group == player.storage.jlsg_yaozhi_temp) return true;
                if (Array.isArray(info.group) && info.group.includes(player.storage.jlsg_yaozhi_temp)) return true;
                return false;
              },
              content: function () {
                player.removeSkill(player.storage.jlsg_yaozhi_temp);
                player.removeSkill('jlsg_yaozhi_temp');
              },
            },
            jlsg_xingyun: {
              audio: "ext:极略:2",
              forced: true,
              trigger: { player: 'phaseEnd' },
              unique: true,
              content: function () {
                'step 0'
                player.loseMaxHp();
                'step 1'
                if (!player.storage.jlsg_yaozhi || !player.storage.jlsg_yaozhi.length) {
                  event.finish();
                  return;
                }
                var characters = [];
                var leftSkills = player.storage.jlsg_yaozhi.randomGets(16);
                var skills = [];
                for (let pack in lib.characterPack) {
                  for (let c in lib.characterPack[pack]) {
                    var info = lib.characterPack[pack][c]
                    if (info[3].some(s => leftSkills.includes(s))) {
                      characters.push(c);
                      skills.push(...leftSkills.filter(s => info[3].includes(s)));
                      leftSkills.remove(info[3]);
                      if (!leftSkills.length) break;
                    }
                  };
                };
                var list = characters;
                if (player.isUnderControl()) {
                  game.swapPlayerAuto(player);
                }
                var switchToAuto = function () {
                  _status.imchoosing = false;
                  event._result = {
                    bool: true,
                    skills: skills.randomGets(1),
                  };
                  if (event.dialog) event.dialog.close();
                  if (event.control) event.control.close();
                };
                var chooseButton = function (list, skills) {
                  var event = _status.event;
                  if (!event._result) event._result = {};
                  event._result.skills = [];
                  var rSkill = event._result.skills;
                  var dialog = ui.create.dialog('请选择获得的技能', [list, 'character'], 'hidden');
                  event.dialog = dialog;
                  var table = document.createElement('div');
                  table.classList.add('add-setting');
                  table.style.margin = '0';
                  table.style.width = '100%';
                  table.style.position = 'relative';
                  for (var i = 0; i < skills.length; i++) {
                    var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                    td.link = skills[i];
                    table.appendChild(td);
                    td.innerHTML = '<span>' + get.translation(skills[i]) + '</span>';
                    td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                      if (_status.dragged) return;
                      if (_status.justdragged) return;
                      _status.tempNoButton = true;
                      setTimeout(function () {
                        _status.tempNoButton = false;
                      }, 500);
                      var link = this.link;
                      if (!this.classList.contains('bluebg')) {
                        if (rSkill.length >= 1) return;
                        rSkill.add(link);
                        this.classList.add('bluebg');
                      }
                      else {
                        this.classList.remove('bluebg');
                        rSkill.remove(link);
                      }
                    });
                  }
                  dialog.content.appendChild(table);
                  dialog.add('　　');
                  dialog.open();

                  event.switchToAuto = function () {
                    event.dialog.close();
                    event.control.close();
                    game.resume();
                    _status.imchoosing = false;
                  };
                  event.control = ui.create.control('ok', function (link) {
                    event.dialog.close();
                    event.control.close();
                    game.resume();
                    _status.imchoosing = false;
                  });
                  for (var i = 0; i < event.dialog.buttons.length; i++) {
                    event.dialog.buttons[i].classList.add('selectable');
                  }
                  game.pause();
                  game.countChoose();
                };
                if (event.isMine()) {
                  chooseButton(list, skills);
                }
                else if (event.isOnline()) {
                  event.player.send(chooseButton, list, skills);
                  event.player.wait();
                  game.pause();
                }
                else {
                  switchToAuto();
                }
                'step 2'
                var map = event.result || result;
                if (map && map.skills && map.skills.length) {
                  player.addSkills(map.skills);
                  player.storage.jlsg_yaozhi.removeArray(map.skills);
                }
                game.broadcastAll(function (list) {
                  game.expandSkills(list);
                  for (var i of list) {
                    var info = lib.skill[i];
                    if (!info) continue;
                    if (!info.audioname2) info.audioname2 = {};
                    info.audioname2.old_yuanshu = 'weidi';
                  }
                }, map.skills);
              },
              ai: {
                halfneg: true,
                combo: 'jlsg_yaozhi',
              }
            },
            jlsg_jilve: {
              audio: "ext:极略:3",
              enable: 'phaseUse',
              filter: function (event, player) {
                return !player.hasSkill('jlsg_jilve2');
              },
              content: function () {
                "step 0"
                player.draw('nodelay');
                player.chooseToUse().filterCard = function (card, player) {
                  return (lib.filter.cardEnabled(card, player, event.parent.parent) && lib.filter.cardUsable(card, player, event.parent.parent));
                }
                "step 1"
                if (!result.bool) {
                  player.chooseToDiscard('he', true);
                  player.addTempSkill('jlsg_jilve2', 'phaseAfter');
                }
              },
              ai: {
                threaten: 4,
                order: 15,
                result: {
                  player: 1
                },
                effect: {
                  player: function (card, player) {
                    if (get.type(card) != 'basic') return [1, 3];
                  }
                },
              }
            },
            jlsg_jilve2: {},
            jlsg_tongtian: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              unique: true,
              skillAnimation: true,
              limited: true,
              position: 'he',
              mark: true,
              marktext: "通",
              //filter:function(event,player){
              //    return !player.storage.jlsg_tongtian;
              //  },
              intro: {
                content: true,
              },
              filterCard: function (card) {
                var suit = get.suit(card);
                return !ui.selected.cards.map(card => get.suit(card)).includes(suit);
              },
              complexCard: true,
              selectCard: [1, 4],
              prompt: "选择不同花色的牌，获得各花色的技能。",
              check: function (card) {
                return 8 - get.value(card);
              },
              derivation: ['jlsg_tongtian_wu', 'jlsg_tongtian_shu', 'jlsg_tongtian_wei', 'jlsg_tongtian_qun'],
              content: function () {
                "step 0"
                var suits = cards.map(card => get.suit(card));
                let skills = [];
                if (suits.includes('spade')) {
                  skills.push('jlsg_tongtian_wei');
                }
                if (suits.includes('heart')) {
                  skills.push('jlsg_tongtian_shu');
                }
                if (suits.includes('diamond')) {
                  skills.push('jlsg_tongtian_wu');
                }
                if (suits.includes('club')) {
                  skills.push('jlsg_tongtian_qun');
                }
                player.addSkills(skills);
                "step 1"
                player.awakenSkill('jlsg_tongtian');

              },
              ai: {
                order: 6,
                result: {
                  player: function (player) {
                    var cards = player.get('he');
                    var suits = [];
                    for (var i = 0; i < cards.length; i++) {
                      if (!suits.includes(get.suit(cards[i]))) {
                        suits.push(get.suit(cards[i]));
                      }
                    }
                    if (suits.length < 3) return -1;
                    return suits.length;
                  }
                }
              },

            },
            jlsg_tongtian_wei: {
              audio: "ext:极略:1",
              mark: true,
              marktext: "魏",
              unique: true,
              intro: {
                content: get.skillInfoTranslation('fankui'),
              },
              inherit: 'fankui',
              content: function () {
                player.gainPlayerCard(get.prompt('fankui', trigger.source), trigger.source, get.buttonValue, 'he').set('logSkill', ['jlsg_tongtian_wei', trigger.source]);
              },
            },
            jlsg_tongtian_wu: {
              unique: true,
              audio: "ext:极略:1",
              mark: true,
              marktext: "吴",
              intro: {
                content: get.skillInfoTranslation('zhiheng'),
              },
              inherit: 'zhiheng',
            },
            jlsg_tongtian_shu: {
              audio: "ext:极略:1",
              mark: true,
              unique: true,
              marktext: "蜀",
              intro: {
                content: get.skillInfoTranslation('guanxing'),
              },
              inherit: "guanxing",
            },
            jlsg_tongtian_qun: {
              inherit: "wansha",
              audio: "ext:极略:1",
              mark: true,
              unique: true,
              marktext: "群",
              intro: {
                content: get.skillInfoTranslation('wansha'),
              },
              locked: true,
              trigger: { global: 'dying' },
              global: 'jlsg_tongtian_qun2',
              priority: 15,
              forced: true,
              filter: function (event, player, name) {
                return _status.currentPhase == player && event.player != player;
              },
              content: function () { }
            },
            jlsg_tongtian_qun2: {
              mod: {
                cardSavable: function (card, player) {
                  if (!_status.currentPhase) return;
                  if (_status.currentPhase.isAlive() && _status.currentPhase.hasSkill('jlsg_tongtian_qun') && _status.currentPhase != player) {
                    if (card.name == 'tao' && !player.isDying()) return false;
                  }
                },
                cardEnabled: function (card, player) {
                  if (!_status.currentPhase) return;
                  if (_status.currentPhase.isAlive() && _status.currentPhase.hasSkill('jlsg_tongtian_qun') && _status.currentPhase != player) {
                    if (card.name == 'tao' && !player.isDying()) return false;
                  }
                }
              }
            },
            jlsg_jieyan: {
              audio: "ext:极略:1",
              trigger: { global: 'useCardToBefore' },
              direct: true,
              filter: function (event, player) {
                return player.countCards('h') > 0 && (get.type(event.card) == 'trick' || event.card.name == 'sha') && get.color(event.card) == 'red' && event.targets.length == 1;
              },
              content: function () {
                "step 0"
                var next = player.chooseToDiscard('是否对' + get.translation(trigger.target) + '发动【劫焰】？', 'h')
                next.ai = function (card) {
                  if (get.attitude(player, trigger.target) < 0) {
                    if (get.damageEffect(trigger.target, player, player, 'fire') >= 0) {
                      return get.value(trigger.card) - get.value(card);
                    }
                    return 7 - get.value(card);
                  }
                  //if(trigger.target==player) return 10;
                  return 0;
                };
                next.logSkill = ['jlsg_jieyan', trigger.target];
                "step 1"
                if (result.bool) {
                  //player.logSkill('jlsg_jieyan',trigger.target);
                  trigger.cancel();
                  trigger.target.damage('fire', player);
                }
              },
              ai: {
                expose: 0.2,
                fireattack: true,
              }
            },
            jlsg_jieyan_buff: {
              audio: "ext:极略:true",
              trigger: { player: 'damageBegin' },
              forced: true,
              filter: function (event) {
                if (event.nature == 'fire') return true;
              },
              content: function () {
                trigger.cancel();
                player.draw(trigger.num);
              },
              ai: {
                nofire: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'fireDamage')) {
                      if (target.hp == target.maxHp) return 0;
                      return [0, 2];
                    }
                  }
                }
              },
            },
            jlsg_fenying: {
              audio: "ext:极略:1",
              trigger: { global: "damageAfter" },
              frequent: true,
              filter: function (event, player) {
                return event.nature == 'fire';
              },
              content: function () {
                "step 0"
                player.draw();
                "step 1"
                let cnt = player.getHistory('useSkill', e => e.skill == event.name).length;
                player.chooseCardTarget({
                  filterCard: function (card) {
                    return true;
                  },
                  selectCard: cnt,
                  filterTarget: function (card, player, target) {
                    let dis = get.distance(trigger.player, target);
                    return trigger.player == target || game.filterPlayer(p => p != trigger.player).every(p => get.distance(trigger.player, p) >= dis);
                  },
                  ai1: function (card) {
                    return 7 - get.value(card);
                  },
                  ai2: function (target) {
                    return get.damageEffect(target, player, player, 'fire');
                  },
                  position: 'he',
                  prompt: get.prompt(event.name),
                  prompt2: `弃置${get.cnNumber(cnt)}张牌并造成${get.cnNumber(trigger.num)}点火焰伤害`,
                });
                "step 2"
                if (result.bool) {
                  player.discard(result.cards);
                  player.line(result.targets[0], 'red');
                  result.targets[0].damage('fire', trigger.num, player);
                }
              }
            },
            jlsg_kuangbao: {
              group: ['jlsg_kuangbao1'],
              audio: "ext:极略:1",
              trigger: {
                global: 'phaseBefore',
                player: 'enterGame',
              },
              forced: true,
              filter: function (event, player) {
                return (event.name != 'phase' || game.phaseNumber == 0);
              },
              content: function () {
                player.addMark(event.name, 2);
              },
              marktext: "暴",
              intro: {
                content: "共有#个标记",
              },
            },
            jlsg_kuangbao1: {
              trigger: { source: 'damageEnd', player: 'damageEnd' },
              forced: true,
              audio: "ext:极略:true",
              filter: function (event) {
                return event.num != 0;
              },
              content: function () {
                player.addMark('jlsg_kuangbao', trigger.num);
                if (trigger.source == this.trigger.player) {
                  player.addMark('jlsg_kuangbao', trigger.num);
                }
              },
            },
            jlsg_wumou: {
              audio: "ext:极略:1",
              trigger: { player: 'useCard' },
              forced: true,
              filter: function (event) {
                return get.type(event.card) == 'trick';
              },
              content: function () {
                'step 0'
                if (player.storage.jlsg_kuangbao > 0) {
                  player.chooseControl('选项一', '选项二').set('prompt', '无谋<br><br><div class="text">1:弃置1枚「暴」标记</div><br><div class="text">2:受到1点伤害</div></br>').ai = function () {
                    if (player.storage.jlsg_kuangbao > 6) return '选项一';
                    if (player.hp >= 4 && player.countCards('h', 'tao') >= 1) return '选项二';
                    return Math.random() < 0.5 && '选项一';
                  };
                } else {
                  player.damage('nosource');
                  event.finish();
                }
                'step 1'
                if (result.control == '选项一') {
                  player.storage.jlsg_kuangbao--;
                  player.syncStorage('jlsg_kuangbao');
                } else {
                  player.damage('nosource');
                }
              },
              ai: {
                neg: true,
              },
            },
            jlsg_wuqian: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.storage.jlsg_kuangbao > 1;
              },
              content: function () {
                'step 0'
                player.removeMark('jlsg_kuangbao', 2);
                'step 1'
                player.addTempSkill('wushuang', 'phaseAfter');
                player.addTempSkill('jlsg_wuqian_buff', 'phaseAfter');
              },
              subSkill: {
                buff: {
                  trigger: { source: 'damageEnd' },
                  forced: true,
                  popup: false,
                  audio: false,
                  filter: function (event) {
                    return event.num != 0;
                  },
                  content: function () {
                    player.addMark('jlsg_kuangbao');
                  }
                }
              },
              ai: {
                order: 10,
                result: {
                  player: function (player) {
                    if (player.countCards('h', 'juedou') > 0) {
                      return 2;
                    }
                    var ph = player.get('h');
                    var num = 0;
                    for (var i = 0; i < ph.length; i++) {
                      if (get.tag(ph[i], 'damage')) num++;
                    }
                    if (num > 1) return num;
                    return 0;
                  }
                }
              }
            },
            jlsg_shenfen: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filter: function (event, player) {
                return player.storage.jlsg_kuangbao >= 6;
              },
              skillAnimation: true,
              animationColor: 'metal',
              mark: true,
              content: function () {
                "step 0"
                player.storage.jlsg_kuangbao -= 6;
                player.syncStorage('jlsg_kuangbao');
                event.targets = game.players.slice(0);
                event.targets.remove(player);
                event.targets.sort(lib.sort.seat);
                event.targets2 = event.targets.slice(0);
                "step 1"
                if (event.targets.length) {
                  event.targets.shift().damage();
                  event.redo();
                }
                "step 2"
                if (event.targets2.length) {
                  var cur = event.targets2.shift();
                  if (cur && cur.num('he')) {
                    if (cur.num('e')) {
                      cur.discard(cur.get('e'));
                    }
                    cur.chooseToDiscard('h', true, 4);
                  }
                  event.redo();
                }
                "step 3"
                player.turnOver();
              },
              ai: {
                order: 9,
                result: {
                  player: function (player) {
                    var num = 0;
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i] != player) {
                        if (game.players[i].ai.shown == 0) return 0;
                        num += get.damageEffect(game.players[i], player, player) > 0 ? 1 : -1;
                      }
                    }
                    return num;
                  }
                }
              }
            },
            jlsg_wushen: {
              mod: {
                cardname: function (card, player, name) {
                  if (['sha', 'tao'].includes(card.name)) return 'juedou';
                },
              },
              audio: "ext:极略:1",
              trigger: { player: 'useCard' },
              forced: true,
              filter: function (event, player) {
                return event.card.name == 'juedou'
                  && event.cards && event.cards.length == 1 && ['sha', 'tao'].includes(event.cards[0].name);
              },
              content: function () { },
              group: ['jlsg_wushen2'],
              ai: {
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'respondSha') && current < 0) return 1.5;
                  }
                },
                order: 4,
                useful: -1,
                value: -1
              }
            },
            jlsg_wushen2: {
              audio: 'jlsg_wushen',
              forced: true,
              trigger: { source: 'damageBegin1' },
              filter: function (event) {
                return event.player.group === 'shen';
              },
              content: function () {
                trigger.num++;
              },
              ai: {
                effect: {
                  player: function (card, player, target, current, isLink) {
                    if (get.tag(card, 'damage') && target.group === 'shen') return [1, 0, 1, -3];
                  }
                }
              }
            },
            jlsg_suohun: {
              audio: "ext:极略:1",
              trigger: {
                player: 'damageEnd',
                source: 'damageSource',
              },
              filter: function (event, player, name) {
                if (name == "damageEnd") return event.source && event.source != player;
                return event.player != player && event.player?.isIn();
              },
              forced: true,
              init: function (player) {
                for (var i = 0; i < game.players.length; i++) {
                  game.players[i].storage.jlsg_suohun_mark = 0;
                }
              },
              content: function () {
                var target = trigger.source, cnt = trigger.num;
                if (trigger.source == player) {
                  target = trigger.player;
                  cnt = 1;
                }
                if (!target.storage.jlsg_suohun_mark) {
                  target.storage.jlsg_suohun_mark = 0;
                }
                target.storage.jlsg_suohun_mark += cnt;
                target.syncStorage('jlsg_suohun_mark');
                target.markSkill('jlsg_suohun_mark');
              },
              global: ['jlsg_suohun_mark'],
              subSkill: {
                mark: {
                  forced: true,
                  charlotte: true,
                  mark: true,
                  onremove: true,
                  marktext: '魂',
                  intro: {
                    content: '共有#个标记'
                  }
                }
              },
              group: ['jlsg_suohun2'],
              ai: {
                maixie_defend: true,
              }
            },
            jlsg_suohun2: {
              skillAnimation: true,
              audio: "jlsg_suohun",
              trigger: { player: 'dyingBegin' },
              priority: 10,
              forced: true,
              filter: function (event, player) {
                return player.hp <= 0;
              },
              content: function () {
                "step 0"
                if (player.maxHp > 1) {
                  player.maxHp = Math.floor(player.maxHp / 2);
                  player.recover(player.maxHp - player.hp);
                  player.update();
                } else {
                  player.loseMaxHp();
                  player.update();
                }
                "step 1"
                for (var i = 0; i < game.players.length; i++) {
                  if (game.players[i].storage.jlsg_suohun_mark) {
                    player.line(game.players[i], 'fire');
                    game.delay(1.5);
                    game.players[i].damage(game.players[i].storage.jlsg_suohun_mark, player);
                    game.players[i].storage.jlsg_suohun_mark = 0;
                    game.players[i].unmarkSkill('jlsg_suohun_mark');
                  }
                }
              },
              ai: {
                threaten: 0.9,
                effect: {
                  target: function (card, player, target) {
                    if (target.maxHp == 1) return;
                    var num = 0;
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i].storage.jlsg_suohun_mark && get.attitude(target, game.players[i]) <= -2) num += game.players[i].storage.jlsg_suohun_mark;
                    }
                    if (get.tag(card, 'damage')) {
                      if (target.hp == 1) return [0, 2 * num];
                      return [1, 0.5];
                    }
                  }
                }
              }
            },
            jlsg_juejing: {
              audio: "ext:极略:1",
              forced: true,
              charlotte: true,
              unique: true,
              trigger: { player: 'showCharacterEnd' },
              delay: false,
              init: function (player) {
                if (player.hasSkill('jlsg_juejing') && player.hp > 1) {
                  player.useSkill('jlsg_juejing');
                };
              },
              filter: function (event, player) {
                return player.hp > 1;
              },
              check: () => false,
              content: function () {
                if (game.phaseNumber > 0) {
                  game.log(player, '的体力置为1');
                }
                player.hp = 1;
                player.update();
              },
              mod: {
                maxHandcardBase: function (player, num) {
                  return player.maxHp;
                },
                targetEnabled: function (card, player, target) {
                  if (['tao', 'mei'].includes(card.name) && target.hp == 1) {
                    return false;
                  }
                },
              },
              group: ['jlsg_juejing2', 'jlsg_juejing_guard'],
              subSkill: {
                guard: {
                  silent: true,
                  charlotte: true,
                  trigger: { player: 'changeHp' },
                  firstDo: true,
                  filter: function (event, player) {
                    return player.hp > 1 && player.hasSkill('jlsg_juejing');
                  },
                  content: function () {
                    player.useSkill('jlsg_juejing');
                  },
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target, effect) {
                    if (card.name == 'recover') {
                      return 'zeroplayertarget';
                    }
                  }
                }
              },
            },
            jlsg_juejing2: {
              audio: 'jlsg_juejing',
              trigger: { player: ['dying', 'dyingAfter'] },
              forced: true,
              content() {
                player.draw(2);
              }
            },
            jlsg_longhun: {
              audio: "ext:极略:4",
              group: ["jlsg_longhun1", "jlsg_longhun2", "jlsg_longhun3", "jlsg_longhun4", "jlsg_longhun_sp"],
              subSkill: {
                sp: {
                  trigger: { player: 'useCard' },
                  forced: true,
                  popup: false,
                  filter(event) {
                    return event.skill && event.skill.startsWith('jlsg_longhun') && event.cards && event.cards.length == 2;
                  },
                  content() {
                    switch (trigger.card.name) {
                      case 'tao':
                        trigger.targets.forEach(p => p.gainMaxHp());
                        break;
                      case 'sha':
                        trigger.effectCount += 2;
                        break;
                      case 'shan':
                        if (trigger.respondTo) {
                          trigger.respondTo[0].randomDiscard(2);
                        }
                        break;
                      case 'wuxie':
                        trigger.directHit.addArray(game.players);
                        const cardx = trigger.respondTo;
                        if (cardx && cardx[1] && cardx[1].cards && cardx[1].cards.filterInD('od').length) player.gain(cardx[1].cards.filterInD('od'), 'gain2');
                        break;
                    }
                  }
                },
              },
              ai: {
                skillTagFilter: function (player, tag) {
                  switch (tag) {
                    case 'respondSha': {
                      if (player.countCards('he', { suit: 'diamond' }) < Math.max(1, player.hp)) return false;
                      break;
                    }
                    case 'respondShan': {
                      if (player.countCards('he', { suit: 'club' }) < Math.max(1, player.hp)) return false;
                      break;
                    }
                    case 'save': {
                      if (player.countCards('he', { suit: 'heart' }) < Math.max(1, player.hp)) return false;
                      break;
                    }
                  }
                },
                save: true,
                respondSha: true,
                respondShan: true,
                effect: {
                  target: function (card, player, target) {
                    //if(get.tag(card,'recover')&&target.hp>=2) return [0,0];
                    if (!target.hasFriend()) return;
                    if ((get.tag(card, 'damage') == 1 || get.tag(card, 'loseHp')) && target.hp > 1) return [0, 1];
                  }
                },
                threaten: function (player, target) {
                  if (target.hp == 1) return 2;
                  return 0.5;
                },
              }
            },
            jlsg_longhun1: {
              audio: "ext:极略:true",
              enable: ['chooseToUse'],
              prompt: function () {
                return '将' + get.cnNumber(Math.max(1, _status.event.player.hp)) + '张红桃牌当作桃使用';
              },
              position: 'he',
              check: function (card, event) {
                let player = _status.event.player;
                if (ui.selected.cards.length) {
                  if (!player.countCards('hes', c => c != card && (get.info(c).savable || get.suit(c) == 'heart'))) {
                    return 0;
                  }
                  let maxHp = (_status.event.dying || player).maxHp;
                  return 10 - maxHp - get.value(card);
                }
                return 10 - get.value(card);
              },
              selectCard: [1, 2],
              viewAs: { name: 'tao' },
              viewAsFilter: function (player) {
                return player.countCards('hes', { suit: 'heart' }) != 0;
              },
              filterCard: function (card) {
                return get.suit(card) == 'heart';
              }
            },
            jlsg_longhun2: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              prompt: function () {
                return '将' + get.cnNumber(Math.max(1, _status.event.player.hp)) + '张方片当作杀使用或打出';
              },
              position: 'hes',
              check: function (card) {
                let player = _status.event.player;
                if (ui.selected.cards.length) {
                  let targets = game.filterPlayer(target => {
                    const filter = _status.event?.filterTarget;
                    if (typeof filter == "function") return filter({ name: 'sha', nature: 'fire' }, player, target);
                    else if (typeof filter == "boolean") return filter;
                    return false;
                  });
                  let effect = targets.map(t => get.effect(t, { name: 'sha', nature: 'fire' }, player, player))
                    .reduce((a, b) => Math.max(a, b));
                  if (effect > 0) {
                    effect *= 6;
                  } else {
                    effect = 0;
                  }
                  return effect - get.value(card);
                }
                return 10 - get.value(card);
              },
              selectCard: [1, 2],
              viewAs: { name: 'sha', nature: 'fire' },
              viewAsFilter: function (player) {
                return player.countCards('hes', { suit: 'diamond' }) != 0;
              },
              filterCard: function (card) {
                return get.suit(card) == 'diamond';
              },
            },
            jlsg_longhun3: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              prompt: function () {
                return '将' + get.cnNumber(Math.max(1, _status.event.player.hp)) + '张黑桃牌当作无懈可击使用';
              },
              position: 'hes',
              check: function (card, event) {
                if (ui.selected.cards.length) {
                  return 0;
                }
                return 7 - get.value(card);
              },
              selectCard: [1, 2],
              viewAs: { name: 'wuxie' },
              viewAsFilter: function (player) {
                return player.countCards('hes', { suit: 'spade' }) != 0;
              },
              filterCard: function (card) {
                return get.suit(card) == 'spade';
              }
            },
            jlsg_longhun4: {
              audio: "ext:极略:true",
              enable: ['chooseToUse', 'chooseToRespond'],
              prompt: function () {
                return '将' + get.cnNumber(Math.max(1, _status.event.player.hp)) + '张梅花牌当作闪使用或打出';
              },
              position: 'hes',
              check: function (card, event) {
                let player = _status.event.player;
                if (ui.selected.cards.length) {
                  if (!_status.event.respondTo) { return 0; }
                  let target = _status.event.respondTo[0];
                  let effect = get.attitude(player, target) * Math.min(target.countCards('he'), 2);

                  return effect - get.value(card);
                }
                return 10 - get.value(card);
              },
              selectCard: [1, 2],
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return player.countCards('hes', { suit: 'club' }) != 0;
              },
              filterCard: function (card) {
                return get.suit(card) == 'club';
              }
            },
            jlsg_old_nizhan: {
              // audio: "ext:极略:1",
              audio: "jlsg_nizhan",
              trigger: { global: 'damageBegin2' },
              filter: function (event) {
                return event.card && (event.card.name == 'sha' || event.card.name == 'juedou') && event.notLink();
              },
              init: function (player) {
                for (var i = 0; i < game.players.length; i++) {
                  game.players[i].storage.jlsg_old_nizhan_mark = 0;
                }
              },
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt('jlsg_old_nizhan'), function (card, player, target) {
                  return (trigger.source == target || trigger.player == target) && player != target;
                }).ai = function (target) {
                  return -get.attitude(player, target);
                }
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_old_nizhan', result.targets[0]);
                  if (!result.targets[0].storage.jlsg_old_nizhan_mark) {
                    result.targets[0].storage.jlsg_old_nizhan_mark = 0;
                  }
                  result.targets[0].storage.jlsg_old_nizhan_mark += 1;
                  result.targets[0].markSkill('jlsg_old_nizhan_mark');
                  result.targets[0].syncStorage('jlsg_old_nizhan_mark');
                }
              },
              subSkill: {
                mark: {
                  forced: true,
                  unique: true,
                  mark: true,
                  marktext: '袭',
                  intro: {
                    content: '共有#个标记'
                  }
                }
              },
              ai: {
                threaten: function (player) {
                  if (player.hasSkill('jlsg_old_cuifeng')) return 4.5;
                  return 0;
                }
              }
            },
            jlsg_old_cuifeng: {
              // audio: "ext:极略:1",
              audio: "jlsg_cuifeng",
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              filter: function (player) {
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_old_nizhan_mark)
                    continue;
                  num += game.players[i].storage.jlsg_old_nizhan_mark;
                }
                if (num >= 4) return true;
                return false;
              },
              content: function () {
                'step 0'
                for (var i = 0; i < game.players.length; i++) {
                  if (game.players[i].storage.jlsg_old_nizhan_mark) {
                    player.line(game.players[i], 'fire');
                    if (game.players[i].num('h') >= game.players[i].storage.jlsg_old_nizhan_mark) {
                      player.gainPlayerCard(game.players[i].storage.jlsg_old_nizhan_mark, game.players[i], 'h', true);
                    } else {
                      player.gain(game.players[i].get('h'));
                      game.players[i].$give(game.players[i].num('h'), player);
                      game.players[i].damage();
                    }
                    game.delay(1);
                  }
                }
                'step 1'
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_old_nizhan_mark)
                    continue;
                  game.players[i].storage.jlsg_old_nizhan_mark = 0;
                  game.players[i].unmarkSkill('jlsg_old_nizhan_mark');
                }
              }
            },
            jlsg_old_weizhen: {
              // audio: "ext:极略:1",
              audio: "jlsg_weizhen",
              trigger: { player: 'phaseBegin' },
              filter: function (event, player) {
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_old_nizhan_mark) continue;
                  num += game.players[i].storage.jlsg_old_nizhan_mark;
                }
                if (num > 0) return true;
                return false;
              },
              prompt: function (event, player) {
                var str = '';
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_old_nizhan_mark) continue;
                  num += game.players[i].storage.jlsg_old_nizhan_mark;
                }
                str += '移除场上全部的【袭】标记，然后摸' + num + '张牌。';
                return str;
              },
              check: function (event, player) {
                if (player.countCards('h') == 0 || player.hp == 1) return 1;
                return 0;
              },
              content: function () {
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  if (!game.players[i].storage.jlsg_old_nizhan_mark) continue;
                  if (game.players[i].storage.jlsg_old_nizhan_mark) {
                    player.line(game.players[i], 'water');
                  }
                  num += game.players[i].storage.jlsg_old_nizhan_mark;
                  game.players[i].storage.jlsg_old_nizhan_mark = 0;
                  game.players[i].unmarkSkill('jlsg_old_nizhan_mark');
                }
                game.delay();
                player.draw(num);
              }
            },
            jlsg_nizhan: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseZhunbeiBegin' },
              forced: true,
              filter: function (event, player) {
                return event.player.isDamaged() || event.player.countMark('jlsg_nizhan');
              },
              marktext: '逆',
              intro: {
                content: 'mark',
              },
              content: function () {
                if (trigger.player.isDamaged()) {
                  trigger.player.addMark(event.name);
                } else {
                  trigger.player.removeMark(event.name);
                }
              },
            },
            jlsg_cuifeng: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              selectTarget: 2,
              filter: function (event, player) {
                return game.countPlayer(p => p.countMark('jlsg_nizhan'));
              },
              filterTarget: function (card, player, target) {
                if (ui.selected.targets.length) {
                  return true;
                }
                return target.countMark('jlsg_nizhan');
              },
              targetprompt: ['失去标记', '获得标记'],
              multitarget: true,
              content: function () {
                'step 0'
                targets[0].removeMark('jlsg_nizhan');
                targets[1].addMark('jlsg_nizhan');
                'step 1'
                targets[0].useCard({ name: 'sha', isCard: true }, targets[1], 'noai', false).animate = false;
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    if (ui.selected.targets.length == 0) {
                      return 1;
                    }
                    else {
                      return get.effect(target, { name: 'sha' }, ui.selected.targets[0], target) - 3;
                    }
                  }
                },
                expose: 0.3,
              }
            },
            jlsg_weizhen: {
              audio: "ext:极略:1",
              unique: true,
              trigger: { global: 'phaseDrawBegin2' },
              forced: true,
              filter: function (event, player) {
                if (event.numFixed) return false;
                if (event.player == player) {
                  return game.countPlayer(p => p.countMark('jlsg_nizhan'))
                }
                return event.player.countMark('jlsg_nizhan') >= 2;
              },
              content: function () {
                if (player == trigger.player) {
                  trigger.num += game.countPlayer(p => p.hasMark('jlsg_nizhan'));
                }
                if (trigger.player.countMark('jlsg_nizhan') >= 2) {
                  --trigger.num;
                }
              },
              group: 'jlsg_weizhen2',
              // get global() {
              //   debugger;
              //   return 'jlsg_weizhen3';
              // }
              global: 'jlsg_weizhen3',
              init: function (player, skill) { // global skill will not run init, so we'll move here
                for (var p of game.players) {
                  p.addSkillBlocker('jlsg_weizhen3');
                }
              },
              onremove: function (player, skill) {
                for (var p of game.players) {
                  p.removeSkillBlocker('jlsg_weizhen3');
                }
              },
            },
            jlsg_weizhen2: {
              audio: 'jlsg_weizhen',
              trigger: { source: 'damageBegin1' },
              filter: function (event, player) {
                return event.player.countMark('jlsg_nizhan') >= 3;
              },
              forced: true,
              content: function () {
                trigger.num++;
              },
            },
            jlsg_weizhen3: {
              audio: 'jlsg_weizhen',
              // init: function (player, skill) {
              //   player.addSkillBlocker(skill);
              // },
              // onremove: function (player, skill) {
              //   player.removeSkillBlocker(skill);
              // },
              charlotte: true,
              skillBlocker: function (skill, player) {
                return !lib.skill[skill].charlotte && !get.is.locked(skill, player) && player.countMark('jlsg_nizhan') >= 4;
              },
            },
            jlsg_old_zhiming: {
              audio: "jlsg_zhiming",
              trigger: { global: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return event.player != player && event.player.countCards('h') && player.countCards('h');
              },
              direct: true,
              content: function () {
                "step 0"
                player.chooseToDiscard('h', get.prompt2(event.name, trigger.player)).ai = function (card) {
                  if (get.attitude(player, trigger.player) < 0)
                    return 10 - get.value(card);
                  return 0;
                }
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_old_zhiming', trigger.player);
                  event.color = get.color(result.cards[0]);
                  event.card = trigger.player.get('h').randomGet();
                  trigger.player.discard(event.card);
                } else {
                  event.finish();
                }
                'step 2'
                if (event.color == get.color(event.card)) {
                  player.chooseControl('跳过摸牌', '跳过出牌').ai = function () {
                    if (trigger.player.countCards('h') > trigger.player.hp) return '跳过出牌';
                    return '跳过摸牌';
                  }
                } else {
                  event.finish();
                }
                "step 3"
                if (result.control == '跳过摸牌') {
                  trigger.player.skip('phaseDraw');
                  game.log(trigger.player, '跳过了摸牌阶段');
                }
                if (result.control == '跳过出牌') {
                  trigger.player.skip('phaseUse');
                  game.log(trigger.player, '跳过了出牌阶段');
                }
              },
              ai: {
                expose: 0.4
              }
            },
            jlsg_old_suyin: {
              audio: "ext:极略:1",
              trigger: { player: 'loseEnd' },
              direct: true,
              filter: function (event, player) {
                if (player.countCards('h')) return false;
                for (var i = 0; i < event.cards.length; i++) {
                  if (event.cards[i].original == 'h') return _status.currentPhase != player;
                }
                return false;
              },
              content: function () {
                "step 0"
                player.chooseTarget('【夙隐】：选择一名角色将其翻面', function (card, player, target) {
                  return player != target;
                }).ai = function (target) {
                  //if(target.isTurnedOver()&&get.attitude(player,target)>0) return 10;
                  if (!target.isTurnedOver() && get.attitude(player, target) < 0) return target.countCards('h');
                  return 0;
                }
                "step 1"
                if (result.bool) {
                  player.logSkill('jlsg_old_suyin', result.targets);
                  result.targets[0].turnOver();
                }
              },
              ai: {
                expose: 0.3
              }
            },
            jlsg_zhiming: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: lib.filter.notMe,
              selectTarget() {
                return [1, _status.event.player.hp];
              },
              multitarget: true,
              multiline: true,
              content: function () {
                "step 0"
                targets.sortBySeat();
                if (player.storage['jlsg_zhiming1']) {
                  player.storage['jlsg_zhiming1'] = false;
                  event.goto(2);
                } else {
                  player.chooseBool(`###是否失去1点体力？###令${get.translation(targets)}失去1点体力`, true);
                }
                "step 1"
                player.storage['jlsg_zhiming1'] = result.bool;
                if (result.bool) {
                  player.loseHp();
                  targets.forEach(p => p.loseHp());
                }
                "step 2"
                if (!player.isIn()) {
                  event.finish();
                  return;
                }
                if (player.storage['jlsg_zhiming2']) {
                  player.storage['jlsg_zhiming2'] = false;
                  event.goto(4);
                } else {
                  player.chooseBool(`###是否翻面？###令${get.translation(targets)}翻面`, true);
                }
                "step 3"
                player.storage['jlsg_zhiming2'] = result.bool;
                if (result.bool) {
                  player.turnOver();
                  targets.filter(p => p.isIn()).forEach(p => p.turnOver());
                }
                "step 4"
                if (!player.isIn()) {
                  event.finish();
                  return;
                }
                if (player.storage['jlsg_zhiming3']) {
                  player.storage['jlsg_zhiming3'] = false;
                  event.finish();
                } else {
                  let targetMax = Math.max(...targets.map(p => p.countCards('he')));
                  let cards;
                  if (targetMax + 3 >= player.countCards('h')) {
                    cards = player.getCards('h');
                  } else {
                    cards = player.getCards('h').sort((a, b) => get.value(b) - get.value(a));
                    if (cards.length > targetMax) {
                      cards.length = targetMax;
                    }
                  }
                  player.chooseToDiscard([1, Infinity], 'he')
                    .set("prompt2", `令${get.translation(targets)}弃置等量的牌`)
                    .set("ai", c => _status.event.cards.includes(c))
                    .set("cards", cards);
                }
                "step 5"
                player.storage['jlsg_zhiming3'] = result.bool;
                if (result.bool) {
                  targets.filter(p => p.isIn()).forEach(p => p.chooseToDiscard(result.cards.length, "he", true));
                }
              },
              ai: {
                expose: 0.4,
                order: 5,
                result: {
                  target: -2,
                }
              }
            },
            jlsg_suyin: {
              audio: "ext:极略:1",
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              direct: true,
              filter: function (event, player) {
                if (player.countCards('h')) return false;
                var evt = event.getl(player);
                return evt && evt.player == player && evt.hs && evt.hs.length > 0;
              },
              content: function () {
                "step 0"
                player.chooseTarget(`###${get.prompt(event.name)}###令一名角色翻面`).ai = function (target) {
                  //if(target.isTurnedOver()&&get.attitude(player,target)>0) return 10;
                  if (!target.isTurnedOver() && get.attitude(player, target) < 0) return target.countCards('h');
                  return (get.attitude(_status.event.player, target) - 1)
                    * (target.isTurnedOver() ? (4 + 2 * (target.maxHp - target.hp)) : (-4));
                }
                "step 1"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let target = result.targets[0];
                event.target = target;
                player.logSkill(event.name, target);
                target.turnOver();
                if (!target.isTurnedOver()) {
                  event.finish();
                }
                "step 2"
                if (event.target.isDamaged()) {
                  event.target.recover(event.target.maxHp - event.target.hp);
                }
              },
              ai: {
                expose: 0.3
              }
            },
            jlsg_dianjie: {
              audio: "ext:极略:2",
              trigger: { player: ['phaseDrawBefore', 'phaseUseBefore'] },
              prompt: function (event, player) {
                if (event.name == 'phaseDraw') {
                  return '是否发动【电界】跳过摸牌阶段？';
                }
                return '是否发动【电界】跳过出牌阶段？';
              },
              check: function (event, player) {
                if (event.name == 'phaseDraw') {
                  if (player.countCards('h') <= 1 || player.hp == 1) return -1;
                } else {
                  if (player.countCards('h', function (card) {
                    return get.value(card) > 7;
                  })) return -1;
                  if (player.countCards('h') - player.hp >= 3) return -1;
                }
                return 1;
              },
              content: function () {
                "step 0"
                trigger.finish();
                trigger.untrigger();
                player.judge(function (card) {
                  return get.color(card) == 'black' ? 1.5 : -1;
                })
                "step 1"
                if (result.bool) {
                  player.chooseTarget('选择一个目标对其造成2点雷电伤害').ai = function (target) {
                    // if (player.hp == 1) return target == player ? 1 : -1;
                    return get.damageEffect(target, player, player, 'thunder');
                  }
                } else {
                  player.chooseTarget('选择一至两个目标将其横置', [1, 2], function (card, player, target) {
                    return !target.isLinked();
                  }).ai = function (target) {
                    return -get.attitude(player, target);
                  }
                  event.goto(3);
                }
                'step 2'
                if (result.bool) {
                  player.line(result.targets[0], 'thunder');
                  result.targets[0].damage('thunder', 2);
                }
                event.finish();
                'step 3'
                if (result.bool) {
                  player.line(result.targets, 'thunder');
                  for (var i = 0; i < result.targets.length; i++) {
                    result.targets[i].link();
                  }
                }
              }
            },
            jlsg_shendao: {
              audio: "ext:极略:true",
              trigger: { global: 'judge' },
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.translation(trigger.player) + '的' + (trigger.judgestr || '') + '判定为' +
                  get.translation(trigger.player.judging[0]) + '，是否发动【神道】？', function (card, player, target) {
                    if (target == player) return target.countCards('hej');
                    return target.countCards('ej');
                  }).ai = function (target) {
                    return player == target;
                  }
                "step 1"
                if (result.bool) {
                  event.target = result.targets[0];
                  if (result.targets[0] == player) {
                    player.chooseCard('请选择改判牌', 'hej').set('ai', function (card) {
                      var trigger = _status.event.getTrigger();
                      var player = _status.event.player;
                      var judging = _status.event.judging;
                      var result = trigger.judge(card) - trigger.judge(judging);
                      var attitude = get.attitude(player, trigger.player);
                      if (attitude == 0 || result == 0) return 0;
                      if (attitude > 0) {
                        return result - get.value(card) / 2;
                      } else {
                        return -result - get.value(card) / 2;
                      }
                    }).set('judging', trigger.player.judging[0]);
                  } else {
                    player.choosePlayerCard('请选择改判牌', result.targets[0], 'ej').set('ai', function (button) {
                      var trigger = _status.event.getTrigger();
                      var player = _status.event.player;
                      var judging = _status.event.judging;
                      var result = trigger.judge(button) - trigger.judge(judging);
                      var attitude = get.attitude(player, trigger.player);
                      if (attitude == 0 || result == 0) return 0;
                      if (attitude > 0) {
                        return result - get.value(button) / 2;
                      } else {
                        return -result - get.value(button) / 2;
                      }
                    }).set('judging', trigger.player.judging[0]);
                  }
                }
                "step 2"
                if (result.bool) {
                  event.cardx = result.cards[0] || result.links[0];
                  if (event.target != player) {
                    event.target.$throw(event.cardx);
                    event.target.lose(event.cardx, ui.ordering, 'visible').relatedEvent = trigger;
                    game.broadcastAll(function (card) {
                      if (card.clone) {
                        card.clone.classList.add('thrownhighlight');
                      }
                    }, event.cardx);
                  } else {
                    player.respond(event.cardx, 'highlight', 'noOrdering');
                  }
                } else {
                  event.finish();
                }
                "step 3"
                player.logSkill(event.name, event.target);
                player.gain(trigger.player.judging[0], 'gain2');
                trigger.player.judging[0] = event.cardx;
                trigger.orderingCards.add(event.cardx);
                game.log(trigger.player, '的判定牌改为', event.cardx);
                "step 4"
                game.delayx();
              },
              ai: {
                tag: {
                  rejudge: 1,
                }
              }
            },
            jlsg_leihun: {
              audio: "ext:极略:1",
              trigger: {
                player: "damageBegin4",
              },
              forced: true,
              filter: function (event) {
                return event.nature == 'thunder';
              },
              content: function () {
                trigger.cancel();
                player.recover(trigger.num);
              },
              ai: {
                nothunder: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'thunderDamage')) {
                      if (target.isHealthy()) return 'zerotarget';
                      if (target.hp == 1) return [0, 2];
                      return [0, 1];
                    }
                  },
                },
              },
            },
            jlsg_old_shelie: {
              audio: "jlsg_shelie",
              trigger: { player: 'phaseDrawBegin1' },
              forced: true,
              content: function () {
                'step 0'
                trigger.cancel(null, null, 'notrigger');
                event.cards = [];
                event.num = 1;
                event.getResultString = function (str) {
                  switch (str) {
                    case '基本牌':
                      return 'basic';
                    case '锦囊牌':
                      return 'trick';
                    case '装备牌':
                      return 'equip';
                  }
                  return str;
                };
                'step 1'
                player.chooseControl('基本牌', '锦囊牌', '装备牌', function () {
                  var randomResult = Math.random();
                  if (randomResult < 0.4) return '锦囊牌';
                  if (randomResult < 0.8) return '基本牌';
                  return '装备牌';
                }).set('prompt', '请选择想要获得的第' + get.cnNumber(event.num, true) + '张牌的类型');
                'step 2'
                event.control = event.getResultString(result.control);
                var card = get.cardPile2(function (card) {
                  return get.type(card, 'trick') == event.control && !event.cards.includes(card);
                });
                if (card) {
                  event.cards.push(card);
                } else {
                  player.chat('无牌可得了吗');
                  game.log(`但是牌堆里面已经没有${result.control}了！`);
                }
                if (event.num < 4) {
                  event.num++;
                  event.goto(1);
                } else {
                  if (event.cards.length) {
                    player.gain(event.cards, 'gain2');
                  }
                }
              }
            },
            jlsg_old_gongxin: {
              audio: "jlsg_gongxin",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return target != player && target.countCards('h');
              },
              content: function () {
                'step 0'
                player.viewCards('攻心', target.get('h'));
                event.cards = target.get('h', function (card) {
                  return get.suit(card) == 'heart';
                });
                if (!event.cards.length) {
                  event.finish();
                  return;
                }
                "step 1"
                if (event.cards.length > 1) {
                  event.videoId = lib.status.videoId++;
                  game.broadcastAll(function (player, id, cards) {
                    var str;
                    if (player == game.me && !_status.auto) {
                      str = '攻心：选择获得其中的一张牌';
                    } else {
                      str = '攻心';
                    }
                    var dialog = ui.create.dialog(str, cards);
                    dialog.videoId = id;
                  }, player, event.videoId, event.cards);
                  event.time = get.utc();
                  game.addVideo('showCards', player, ['攻心', get.cardsInfo(event.cards)]);
                  game.addVideo('delay', null, 2);
                } else {
                  player.showCards(event.cards, get.translation(target.name) + '的红桃手牌');
                }
                "step 2"
                if (event.cards.length == 1) {
                  target.discard(event.cards);
                  target.damage();
                  event.finish();
                  return;
                }
                "step 3"
                var next = player.chooseButton();
                next.set('dialog', event.videoId);
                next.set('filterButton', function (button) {
                  return true;
                });
                next.set('ai', function (button) {
                  return get.value(button.link, _status.event.player);
                });
                "step 4"
                if (result.bool && result.links) {
                  event.cards2 = result.links;
                }
                var time = 1000 - (get.utc() - event.time);
                if (time > 0) {
                  game.delay(0, time);
                }
                "step 5"
                game.broadcastAll('closeDialog', event.videoId);
                if (event.cards2) {
                  player.gain(event.cards2, 'log', 'gain2');
                }
              },
              ai: {
                threaten: 1.5,
                result: {
                  target: function (player, target) {
                    return -target.countCards('h');
                  }
                },
                order: 10,
                expose: 0.4,
              }
            },
            jlsg_shelie: {
              audio: "ext:极略:1",
              trigger: {
                player: "useCard",
              },
              filter(event, player) {
                return !player.hasHistory("useSkill", evt => {
                  return evt.skill == "jlsg_shelie" && evt.event.type0 == get.type2(event.card);
                });
              },
              frequent: true,
              popup: false,
              content() {
                let type0 = get.type2(trigger.card);
                event.type0 = type0;
                const cards = [get.cardPile2(c => get.type2(c) != type0)];
                if (!cards[0]) return;
                let type1 = get.type2(cards[0]);
                let card2 = get.cardPile2(c => get.type2(c) != type0 && get.type2(c) != type1);
                if (card2) cards.push(card2);
                player.logSkill("jlsg_shelie");
                player.gain(cards, 'gain2');
              },
            },
            jlsg_gongxin: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return target != player && target.countCards('h');
              },
              async content(event, trigger, player) {
                const target = event.target;
                game.log(player, '观看了', target, '的手牌');
                const { result: result1 } = await player.gainPlayerCard(target, 'h', 'visible', 'visibleMove');
                if (!result1.bool) return;
                if (!target.countCards("h")) return;
                const card = result1.cards[0];
                let prompt = `###是否弃置${get.translation(target)}一张牌？###令${get.translation(target)}不能使用或打出其余花色的牌`;
                const { result: result2 } = await player.discardPlayerCard(prompt, target, 'h', 'visible')
                  .set('target', target)
                  .set('suit', get.suit(card, target))
                  .set("filterButton", button => get.suit(button.link, get.event("target")) != get.event("suit"))
                  .set('ai', button => get.value(button.link, get.event("target")))
                if (!result2.bool) return;
                const suits = [
                  get.suit(card, target),
                  get.suit(result2.cards[0], target),
                ];
                target.storage.jlsg_gongxin2 = target
                  .getStorage('jlsg_gongxin2')
                  .addArray(lib.suit.filter(s => !suits.includes(s)));
                target.addTempSkill('jlsg_gongxin2');
              },
              ai: {
                result: {
                  target: function (player, target) {
                    return -target.countCards('h');
                  }
                },
                order: 10,
              }
            },
            jlsg_gongxin2: {
              mark: true,
              marktext: '攻',
              charlotte: true,
              intro: {
                name: '攻心',
                content: '本回合不能使用或打出$',
              },
              mod: {
                cardEnabled: function (card, player) {
                  if (player.getStorage('jlsg_gongxin2').includes(get.suit(card))) return false;
                },
                cardRespondable: function (card, player) {
                  if (player.getStorage('jlsg_gongxin2').includes(get.suit(card))) return false;
                },
                cardSavable: function (card, player) {
                  if (player.getStorage('jlsg_gongxin2').includes(get.suit(card))) return false;
                },
              },
              onremove(player) {
                player.storage.jlsg_gongxin2 = [];
              }
            },
            jlsg_tianqi_phase: {
            },
            jlsg_tianqi: {
              // TODO: delete excessive audio clips
              // usable: 1,
              audio: "ext:极略:2",
              enable: ['chooseToUse', 'chooseToRespond'],
              hiddenCard: function (player, name) {
                return lib.inpile.includes(name) && !player.isDying() && !player.hasSkill('jlsg_tianqi_phase');
              },
              filter: function (event, player) {
                if (player.isDying() || player.hasSkill('jlsg_tianqi_phase')) return false;
                for (var i of lib.inpile) {
                  if (i == 'shan' || i == 'wuxie') continue;
                  var type = get.type(i);
                  if ((type == 'basic' || type == 'trick') && event.filterCard({ name: i }, player, event)) return true;
                  if (i == 'sha') {
                    for (var j of lib.inpile_nature) {
                      if (event.filterCard({ name: i, nature: j }, player, event)) return true;
                    }
                  }
                }
                return false;
              },
              chooseButton: {
                dialog: function (event, player) {
                  var list1 = [], list1Tag;
                  var list2 = [], list2Tag;
                  for (var i of lib.inpile) {
                    if (!lib.translate[i + '_info']) continue;
                    if (i == 'shan' || i == 'wuxie') continue;
                    var type = get.type(i);
                    if (type == 'basic') {
                      list1.push([type, '', i]);
                      if (event.filterCard({ name: i }, player, event)) list1Tag = true;
                      if (i == 'sha') {
                        for (var j of lib.inpile_nature) list1.push([type, '', i, j]);
                      }
                    }
                    if (type == 'trick') {
                      list2.push([type, '', i]);
                      if (event.filterCard({ name: i }, player, event)) list2Tag = true;
                    }
                  }
                  var dialog = ui.create.dialog();
                  if (list1Tag) {
                    dialog.add('基本牌');
                    dialog.add([list1, 'vcard']);
                  }
                  if (list2Tag) {
                    dialog.add('锦囊牌');
                    dialog.add([list2, 'vcard']);
                  }
                  return dialog;
                },
                filter: function (button, player) {
                  var evt = _status.event.getParent();
                  return evt.filterCard({ name: button.link[2], nature: button.link[3] }, player, evt);
                },
                check: function (button, buttons) {
                  // TODO: optimize
                  var player = _status.event.player;
                  var card = { name: button.link[2], nature: button.link[3] };
                  //if(player.storage.jlsg_tianqi!=get.type(ui.cardPile.firstChild)) delete player.storage.jlsg_tianqi;
                  // if (player.storage.jlsg_tianji_top != get.type(button.link[2], "trick")) return -1;
                  var knowHead = player.getStorage('jlsg_tianji_top')[0] === ui.cardPile.firstChild;
                  var event = _status.event.getParent();
                  var val = event.type == 'phase' ? player.getUseValue(card) / 10 : 3;
                  if (val > 0 && event.type != 'phase' && (get.tag(event.getParent(), 'damage') && event.getParent().name != 'juedou') && !player.countCards('h', { name: button.link[2] })
                    && (!knowHead || get.type(ui.cardPile.firstChild, 'trick') == get.type(button.link[2], "trick") || event.getParent().baseDamage > 1)) {
                    return val;
                  }
                  // calculating lose hp effect
                  var loseHpEffect = lib.jlsg.getLoseHpEffect(player);
                  if (!knowHead) {
                    loseHpEffect /= 2;
                  } else {
                    if (get.type(ui.cardPile.firstChild, 'trick') == get.type(button.link[2], "trick")) {
                      loseHpEffect = 0;
                    }
                  }
                  return val + loseHpEffect;
                  var recover = 0, lose = 1;
                  for (var i = 0; i < game.players.length; i++) {
                    if (!game.players[i].isOut()) {
                      if (game.players[i].hp < game.players[i].maxHp) {
                        if (get.attitude(player, game.players[i]) > 0) {
                          if (game.players[i].hp < 2) {
                            lose--;
                            recover += 0.5;
                          }
                          lose--;
                          recover++;
                        } else if (get.attitude(player, game.players[i]) < 0) {
                          if (game.players[i].hp < 2) {
                            lose++;
                            recover -= 0.5;
                          }
                          lose++;
                          recover--;
                        }
                      } else {
                        if (get.attitude(player, game.players[i]) > 0) {
                          lose--;
                        } else if (get.attitude(player, game.players[i]) < 0) {
                          lose++;
                        }
                      }
                    }
                  }
                  if (lose > recover && lose > 0 && player.storage.jlsg_tianji_top == 'trick') return (button.link[2] == 'wanjian') ? 1 : -1;
                  if (lose < recover && recover > 0 && player.storage.jlsg_tianji_top == 'trick') return (button.link[2] == 'taoyuan') ? 1 : -1;
                  if (player.storage.jlsg_tianji_top == 'basic' && player.isDamaged()) return (button.link[2] == 'tao') ? 1 : -1;
                  if (player.storage.jlsg_tianji_top == 'basic' && player.countCards('h', 'sha')) return (button.link[2] == 'jiu') ? 1 : -1;
                  if (player.storage.jlsg_tianji_top == 'basic' && !player.countCards('h', 'sha')) return (button.link[2] == 'sha') ? 1 : -1;
                  if (player.storage.jlsg_tianji_top == 'trick') return (button.link[2] == 'wuzhong') ? 1 : -1;
                  if (game.players.length < 4 && player.storage.jlsg_tianji_top == 'trick') return (button.link[2] == 'shunshou') ? 1 : -1;
                  return (button.link[2] == 'guohe') ? 1 : -1;
                },
                backup: function (links, player) {
                  var tianqiOnUse = function (result, player) {
                    if (player.isPhaseUsing()) {
                      player.addTempSkill('jlsg_tianqi_phase', 'phaseUseAfter');
                    }
                    player.logSkill('jlsg_tianqi');
                    game.log(player, '声明了' + get.translation(links[0][0]) + '牌');
                    var cards = get.cards();
                    player.showCards(cards);
                    result.cards = cards;
                    if (get.type(cards[0], 'trick') != links[0][0]) {
                      player.loseHp();
                    }
                    delete player.storage.jlsg_tianji_top;
                  };
                  return {
                    filterCard: function () {
                      return false
                    },
                    selectCard: -1,
                    popname: true,
                    viewAs: {
                      name: links[0][2],
                      nature: links[0][3],
                    },
                    onuse: tianqiOnUse,
                    onrespond: tianqiOnUse
                  }
                },
                prompt: function (links, player) {
                  return '亮出牌堆顶的一张牌，并将此牌当' + get.translation(links[0][2]) + '使用或打出。若亮出的牌不为' + get.translation(links[0][0]) + '牌，你须先失去1点体力。(你的出牌阶段限一次。)';
                }
              },
              group: ['jlsg_tianqi_shan', 'jlsg_tianqi_wuxie'],
              ai: {
                order: 10,
                fireAttack: true,
                respondShan: true,
                respondSha: true,
                skillTagFilter: function (player, tag, arg) {
                  if (player.isDying() || player.hasSkill('jlsg_tianqi_phase')) return false;
                },
                result: {
                  player: function (player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    if (player.storage.jlsg_tianji_top != undefined) return 1;
                    if (player.hp <= 1 && player.storage.jlsg_tianji_top == undefined) return -10;
                    if (Math.random() < 0.67) return 0.5;
                    return -1;
                  },
                },
                threaten: 4,
              }
            },
            jlsg_tianqi_wuxie: {
              enable: ["chooseToUse"],
              audio: "jlsg_tianqi",
              // filter: function (event, player) {
              //   return !player.isDying() && lib.inpile.includes('wuxie');
              // },
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              viewAs: { name: 'wuxie' },
              viewAsFilter: function (player) {
                return !player.isDying() && !player.hasSkill('jlsg_tianqi_phase');
              },
              onuse: function (result, player) {
                if (player.isPhaseUsing()) {
                  player.addTempSkill('jlsg_tianqi_phase', 'phaseUseAfter');
                }
                var cards = get.cards();
                player.showCards(cards);
                result.cards = cards;
                if (get.type(cards[0], 'trick') != 'trick') {
                  player.loseHp();
                }
                delete player.storage.jlsg_tianji_top;
              },
              ai: {
                effect: {
                  player: function (card, player, target) {
                    if (card.name == 'wuxie' && _status.event.skill == 'jlsg_tianqi_wuxie') {
                      var knowHead = player.getStorage('jlsg_tianji_top')[0] === ui.cardPile.firstChild;
                      // calculating lose hp effect
                      var loseHpEffect = lib.jlsg.getLoseHpEffect(player);
                      if (!knowHead) {
                        loseHpEffect /= 2;
                      } else {
                        if (get.type(ui.cardPile.firstChild, 'trick') == 'trick') {
                          loseHpEffect = 0;
                        }
                      }
                      return [1, loseHpEffect];
                    }
                  }
                },
                // skillTagFilter: function (player) {
                //   return !player.isDying();
                // },
                // basic: {
                //   useful: [6, 4],
                //   value: [6, 4],
                // },
              },
            },
            jlsg_tianqi_shan: {
              enable: ['chooseToRespond', 'chooseToUse'],
              audio: "jlsg_tianqi",
              // filter: function (event, player) {
              //   return !player.isDying() && event.parent.name != 'phaseUse';
              // },
              filterCard: function () {
                return false;
              },
              selectCard: -1,
              order: function (card, event, player) {
                var player = _status.event.player;
                var cards = get.cards();
                if (player.hp > 2 && get.type(cards[0]) == 'basic') {
                  return 1;
                }
                if (player.hp <= 2 && player.countCards('h', 'shan') && player.storage.jlsg_tianji_top != 'basic') return 0;
                return 1;
              },
              viewAs: { name: 'shan' },
              viewAsFilter: function (player) {
                return !player.isDying() && !player.hasSkill('jlsg_tianqi_phase');
              },
              onuse: function (result, player) {
                if (player.isPhaseUsing()) {
                  player.addTempSkill('jlsg_tianqi_phase', 'phaseUseAfter');
                }
                var cards = get.cards();
                player.showCards(cards);

                result.cards = cards;
                if (get.type(cards[0], 'basic') != 'basic') {
                  player.loseHp();
                }
                delete player.storage.jlsg_tianji_top;
              },
              onrespond: function (result, player) {
                if (player.isPhaseUsing()) {
                  player.addTempSkill('jlsg_tianqi_phase', 'phaseUseAfter');
                }
                var cards = get.cards();
                player.showCards(cards);

                result.cards = cards;
                if (get.type(cards[0], 'basic') != 'basic') {
                  player.loseHp();
                }
                delete player.storage.jlsg_tianji_top;
              },
              ai: {
                effect: {
                  player: function (card, player, target) {
                    if (card.name == 'shan' && _status.event.skill == 'jlsg_tianqi_shan') {
                      var knowHead = player.getStorage('jlsg_tianji_top')[0] === ui.cardPile.firstChild;
                      // calculating lose hp effect
                      var loseHpEffect = -1;
                      if (!knowHead) {
                        loseHpEffect /= 2;
                      } else {
                        if (get.type(ui.cardPile.firstChild, 'trick') == get.type(button.link[2], "trick")) {
                          loseHpEffect = 0;
                        }
                      }
                      return [1, loseHpEffect];
                    }
                  }
                },
                // basic: {
                //   useful: [7, 2],
                //   value: [7, 2],
                // },
              },
            },
            jlsg_tianji: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseUseBegin' },
              frequent: true,
              filter: function (event, player) {
                if (ui.cardPile.hasChildNodes() == false) return false;
                return true;
              },
              content: function () {
                'step 0'
                event.top = [ui.cardPile.firstChild];
                player.storage.jlsg_tianji_top = [ui.cardPile.firstChild];
                event.dialog = ui.create.dialog('天机', event.top, true);
                var controls = [];
                if (game.hasPlayer(function (target) {
                  return player.countCards('h') <= target.countCards('h') && target != player;
                })) {
                  controls.push('获得');
                }
                controls.push('替换');
                player.chooseControl(controls, 'cancel', event.dialog).ai = function () {
                  if (event.top[0].name == 'du') return 'cancel';
                  return 0;
                };
                'step 1'
                if (result.control == '获得') {
                  player.draw();
                  event.finish();
                } else if (result.control == '替换') {
                  player.chooseCard('选择一张牌置于牌堆顶', 'h', true).ai = function (card) {
                    if (_status.currentPhase == player) {
                      if (player.hp <= player.maxHp / 2 && player.countCards('h', { type: 'basic' })) {
                        return get.type(card) == 'basic';
                      }
                      if (player.hp > player.maxHp / 2 && player.countCards('h', { type: 'trick' })) {
                        return get.type(card) == 'trick';
                      }
                    } else {
                      return 15 - get.value(card);
                    }
                  }
                } else {
                  event.finish();
                }
                'step 2'
                event.card = result.cards[0];
                if (!event.card) {
                  event.finish();
                  return;
                }
                // player.lose(event.card, ui.special);
                player.draw();
                'step 3'
                player.$throw(1, 1000);
                player.storage.jlsg_tianji_top = [event.card];
                player.lose(event.card, ui.cardPile, 'insert');
                game.log(player, '将一张牌置于牌堆顶');
              },
            },
            jlsg_tianji_old: {
              audio: "jlsg_tianji",
              trigger: { global: 'phaseUseBegin' },
              direct: true,
              init: function (player) {
                player.storage.pd = undefined;
              },
              content: function () {
                'step 0'
                var nh = player.countCards('h');
                var num = 0;
                for (var i = 0; i < game.players.length; i++) {
                  var np = game.players[i].num('h');
                  if (np > nh) num++;
                }
                var cards = [];
                cards.push(ui.cardPile.firstChild);
                event.cards = cards;
                if (num) {
                  player.chooseControl('获得', '替换', 'cancel')
                    .set("dialog", ['天机', event.cards, 'hidden'])
                    .set("ai", function () {
                      return '获得';
                    })
                } else {
                  player.chooseControl('替换', 'cancel')
                    .set("dialog", ['天机', event.cards, 'hidden'])
                    .set("ai", function () {
                      if (_status.currentPhase !== player) {
                        if (get.type(cards[0]) == 'basic' && (player.countCards('h', { type: 'basic' }) < player.countCards('h') / 2)) return '替换';
                        if (get.type(cards[0]) != 'basic') return '替换';
                      }
                      if (_status.currentPhase == player) {
                        if (get.type(cards[0]) == 'trick' && player.hp <= player.maxHp / 2) return '替换';
                        if (get.type(cards[0]) == 'basic' && player.hp > player.maxHp / 2 && player.countCards('h', { type: 'trick' })) return '替换';
                        if (get.type(cards[0]) == 'equip' && player.countCards('e') < 4) return '替换';
                      }
                      if (get.type(cards[0]) == 'basic') player.storage.pd = 'basic';
                      else player.storage.pd = 'trick';
                      return 'cancel';
                    })
                }
                "step 1"
                if (result.control == '获得') {
                  player.logSkill('jlsg_tianji');
                  player.gain(event.cards, 'draw');
                  event.finish();
                } else if (result.control == '替换') {
                  player.logSkill('jlsg_tianji');
                  player.chooseCard('选择一张牌置于牌堆顶', 'h', true).ai = function (card) {
                    if (_status.currentPhase == player) {
                      if (player.hp <= player.maxHp / 2 && player.countCards('h', { type: 'basic' })) {
                        return get.type(card) == 'basic';
                      }
                      if (player.hp > player.maxHp / 2 && player.countCards('h', { type: 'trick' })) {
                        return get.type(card) == 'trick';
                      }
                    } else {
                      return 15 - get.value(card);
                    }
                  }
                } else {
                  event.finish();
                }
                'step 2'
                event.card = result.cards[0];
                if (get.type(result.cards[0]) == 'basic') {
                  player.storage.pd = 'basic';
                } else {
                  player.storage.pd = 'trick';
                }
                player.lose(result.cards, ui.special);
                var cardx = ui.create.card();
                cardx.classList.add('infohidden');
                cardx.classList.add('infoflip');
                player.$throw(cardx, 1000);
                'step 3'
                game.delay(0.5);
                'step 4'
                if (event.card) {
                  event.card.fix();
                  ui.cardPile.insertBefore(event.card, ui.cardPile.firstChild);
                  player.gain(event.cards, 'draw');
                }
              }
            },
            jlsg_xianzhu: {
              audio: "ext:极略:2",
              trigger: { global: 'recoverAfter' },
              check: function (event, player) {
                return get.attitude(player, event.player) > 0;
              },
              logTarget: 'player',
              content: function () {
                trigger.player.draw(2);
              },
              group: 'jlsg_xianzhu2'
            },
            jlsg_xianzhu2: {
              audio: "jlsg_xianzhu",
              check: function (event, player) {
                return get.attitude(player, event.player) > 0;
              },
              trigger: {
                global: ['loseAfter', 'equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              direct: true,
              filter: function (event, player) {
                // var evt=event.getl(player);
                // return evt&&evt.es&&evt.es.length>0;
                return game.hasPlayer(p => {
                  var evt = event.getl(p);
                  return evt && evt.es && evt.es.length > 0;
                }
                );
              },
              content: function () {
                'step 0'
                event.players = game.filterPlayer(p => {
                  var evt = trigger.getl(p);
                  return evt && evt.es && evt.es.length > 0;
                });
                'step 1'
                event.target = event.players.shift();
                if (!event.target) {
                  event.finish();
                  return;
                }
                var evt = trigger.getl(event.target);
                event.num = evt && evt.es && evt.es.length;
                'step 2'
                if (!event.num) { // next target
                  event.goto(1);
                  return;
                }
                --event.num;
                player.chooseBool(get.prompt2('jlsg_xianzhu', (player != event.target) ? event.target : undefined))
                  .set('choice', get.attitude(player, event.target) > 0);
                'step 3'
                if (result.bool) {
                  player.logSkill('jlsg_xianzhu2', event.target);
                  event.target.draw(2);
                  event.goto(2);
                } else {
                  event.goto(1);
                }
              },
              ai: {
                noe: true,
                reverseEquip: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.type(card) == 'equip' && !get.cardtag(card, 'gifts')) return [1, 3];
                  }
                }
              }
            },
            // jlsg_xianzhu2: {
            //   audio: "jlsg_xianzhu",
            //   trigger: { global: 'loseEnd' },
            //   check: function (event, player) {
            //     return get.attitude(player, event.player) > 0;
            //   },
            //   filter: function (event, player) {
            //     for (var i = 0; i < event.cards.length; i++) {
            //       if (event.cards[i].original == 'e') return true;
            //     }
            //     return false;
            //   },
            //   logTarget: 'player',
            //   content: function () {
            //     var num = 0;
            //     for (var i = 0; i < trigger.cards.length; i++) {
            //       if (trigger.cards[i].original == 'e') num += 2;
            //     }
            //     trigger.player.draw(num);
            //   },
            //   ai:{
            //     noe:true,
            //     reverseEquip:true,
            //     effect:{
            //       target:function(card,player,target,current){
            //         if(get.type(card)=='equip'&&!get.cardtag(card,'gifts')) return [1,3];
            //       }
            //     }
            //   }
            // },
            jlsg_liangyuan: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              skillAnimation: true,
              unique: true,
              limited: true,
              animationColor: 'fire',
              init: function (player) {
                player.storage.jlsg_liangyuan = false;
              },
              filter: function (event, player) {
                return !player.storage.jlsg_liangyuan;
              },
              filterTarget: function (card, player, target) {
                return player != target && target.hasSex('male');
              },
              content: function () {
                player.storage.jlsg_liangyuan = true;
                target.addSkill('jlsg_liangyuan2');
              },
              ai: {
                order: 6,
                result: {
                  target: 3,
                },
                threaten: function (player, target) {
                  if (game.hasPlayer(function (target1) {
                    return target.hasSkill('jlsg_liangyuan2');
                  })) return 3;
                }
              }
            },
            jlsg_liangyuan2: {
              mark: true,
              intro: {
                content: 'mark'
              },
              marktext: '缘',
              trigger: { global: 'phaseEnd' },
              filter: function (event, player) {
                return event.player.hasSkill('jlsg_liangyuan') && event.getParent().name == "phaseLoop";
              },
              forced: true,
              content: function () {
                player.insertPhase();
              }
            },
            jlsg_tianzi: {
              srlose: true,
              audio: "ext:极略:1",
              trigger: { player: 'phaseDrawBefore' },
              filter: function (event, player) {
                return !event.numFixed;
              },
              check: function (event, player) {
                return game.countPlayer() - event.num > 1;
              },
              content: function () {
                "step 0"
                trigger.changeToZero();
                event.current = player.next;
                "step 1"
                event.current.chooseCard('交给' + get.translation(player) + '一张手牌或令其摸一张牌').ai = function (card) {
                  if (ai.get.attitude(event.current, player) > 0) {
                    return -1;
                  }
                  else {
                    return 3 - ai.get.value(card);
                  }
                }
                "step 2"
                if (result.bool == false) {
                  event.current.line(player, 'green');
                  game.log(get.translation(event.current) + '让' + get.translation(player) + '摸了一张牌');
                  player.draw();
                }
                else {
                  player.gain(result.cards[0]);
                  event.current.$give(1, player);
                }
                if (event.current.next != player) {
                  event.current = event.current.next;
                  game.delay(0.5);
                  event.goto(1);
                }
              }
            },
            jlsg_meixin: {
              audio: "ext:极略:4",
              enable: 'phaseUse',
              usable: 1,
              filterCard: true,
              position: 'he',
              filterTarget: function (card, player, target) {
                if (player == target) return false;
                return target.hasSex('male');
              },
              check: function (card) {
                return 6 - get.value(card);
              },
              content: function () {
                target.markSkillCharacter('jlsg_meixin', player, '魅心', '本阶段当你使用一张基本牌后，该目标弃置一张牌；当你使用一张锦囊牌后，你获得该目标一张牌；当你使用一张装备牌后，你对该目标造成1点伤害。');
                player.storage.jlsg_meixin = target;
                player.addTempSkill('jlsg_meixin2', 'phaseAfter');
                player.addTempSkill('jlsg_meixin3', 'phaseAfter');
              },
              ai: {
                threaten: 3,
                order: 15,
                expose: 0.3,
                result: {
                  target: function (player, target) {
                    return -target.countCards('h') - 1;
                  }
                }
              }
            },
            jlsg_meixin2: {
              trigger: { player: 'useCardAfter' },
              filter: function (event, player) {
                return player.storage.jlsg_meixin && player.storage.jlsg_meixin.isAlive();
              },
              forced: true,
              content: function () {
                var target = player.storage.jlsg_meixin;

                if (get.type(trigger.card, 'trick') == 'basic' && target.countCards('he') > 0) {
                  player.logSkill('jlsg_meixin', target);
                  target.chooseToDiscard('he', true);
                }
                if (get.type(trigger.card, 'trick') == 'trick' && target.countCards('he') > 0) {
                  player.logSkill('jlsg_meixin', target);
                  player.gainPlayerCard('he', target, true);
                }
                if (get.type(trigger.card, 'trick') == 'equip') {
                  player.logSkill('jlsg_meixin', target);
                  target.damage();
                }
              }
            },
            jlsg_meixin3: {
              trigger: { player: 'phaseEnd' },
              forced: true,
              popup: false,
              filter: function (event, player) {
                return player.storage.jlsg_meixin && player.storage.jlsg_meixin.isAlive();
              },
              content: function () {
                var target = player.storage.jlsg_meixin;
                target.unmarkSkill('jlsg_meixin');
                delete player.storage.jlsg_meixin;
              }
            },
            jlsg_lihun: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseEnd' },
              filter: () => true,
              async cost(event, trigger, player) {
                event.result = await player.chooseTarget(get.prompt2("jlsg_lihun"), lib.filter.notMe)
                  .set('ai', target => {
                    return get.rank(target) - get.attitude(get.player(), target);
                  })
                  .forResult()
              },
              async content(event, trigger, player) {
                const target = event.targets[0];
                target.addTempSkill('jlsg_lihun_buff', { player: 'phaseAfter' });
                player.storage.jlsg_lihun = target;
                target.insertPhase("jlsg_lihun");
              },
              group: "jlsg_lihun_swapControl",
              subSkill: {
                swapControl: {
                  trigger: {
                    global: ["phaseBeginStart", "phaseAfter", "dieEnd"],
                  },
                  filter(event, player) {
                    if (!player.storage.jlsg_lihun) return false;
                    return player.storage.jlsg_lihun == event.player;
                  },
                  charlotte: true,
                  forceDie: true,
                  forced: true,
                  popup: false,
                  content() {
                    if (
                      event.triggername == "phaseBeginStart"
                      && (!trigger.player._trueMe || trigger.player._trueMe != player)
                    ) {
                      trigger.player._trueMe = player;
                      game.addGlobalSkill("autoswap");
                      if (trigger.player == game.me) {
                        game.notMe = true;
                        if (!_status.auto) ui.click.auto();
                      }
                    }
                    else {
                      if (trigger.player == game.me) {
                        if (!game.notMe) game.swapPlayerAuto(trigger.player._trueMe);
                        else delete game.notMe;
                        //if (!_status.auto) ui.click.auto();
                      }
                      delete player.storage.jlsg_lihun;
                      delete trigger.player._trueMe;
                    }
                  },
                },
                buff: {
                  mark: true,
                  marktext: '离',
                  intro: {
                    name: '离魂',
                    content: '使用牌无次数距离限制,且可以指定任意角色为目标,且可指定任意名目标',
                  },
                  mod: {
                    cardUsable: () => true,
                    targetInRange: () => true,
                    playerEnabled: (card, player, target) => {
                      let info = get.info(card);
                      if (!info) return;
                      if (info.modTarget) {
                        if (typeof info.modTarget == 'boolean') return info.modTarget;
                        else if (typeof info.modTarget == 'function') return Boolean(info.modTarget(card, player, target));
                      }
                      if (info.selectTarget) return true;
                    },
                    selectTarget(card, player, num) {
                      if (get.info(card).allowMultiple === false) {
                        if (num[1] < 0) {
                          if (num[0] === num[1]) num[0] = 1;
                          num[1] = 1;
                        }
                      }
                      else if (num[1] > 0) {
                        num[1] = Infinity;
                      }
                      else if (num[0] <= -1 || num[1] <= -1) {
                        num[0] = 1;
                        num[1] = Infinity;
                      }
                      else if (get.info(card, player)?.filterTarget) {
                        if (typeof num == "number") num = [num, num];
                        num[0] = 1;
                        num[1] = Infinity;
                      }
                    },
                  },
                },
              }
            },
            jlsg_jueshi: {
              audio: "ext:极略:2",
              priority: 114514,
              forced: true,
              trigger: { player: 'showCharacterEnd' },
              delay: false,
              init: function (player) {
                if (player.hasSkill('jlsg_jueshi')) {
                  player.useSkill('jlsg_jueshi');
                };
              },
              filter: function (event, player) {
                return player.maxHp != 1;
              },
              content: function () {
                player.maxHp = 1;
                player.update();
              },
              group: ['jlsg_jueshi2', 'jlsg_jueshi_guard'],
              subSkill: {
                guard: {
                  audio: 'jlsg_jueshi',
                  charlotte: true,
                  forced: true,
                  trigger: { player: ['gainMaxHpBefore', 'loseMaxHpBefore'] },
                  filter: function (event, player) {
                    return player.hasSkill('jlsg_jueshi');
                  },
                  content: function () {
                    trigger.cancel();
                  },
                }
              },
            },
            jlsg_jueshi2: {
              audio: 'jlsg_jueshi',
              trigger: { player: 'dying' },
              locked: true,
              direct: true,
              async content(event, trigger, player) {
                const cards = Array.from(ui.cardPile.childNodes)
                  .filter(c => ['tao', 'jiu', 'jlsgqs_mei'].includes(c.name))
                  .concat(game.filterPlayer()
                    .map(p => p.getCards('h', c => ['tao', 'jiu', 'jlsgqs_mei'].includes(c.name)))
                    .flat())
                  .filter(card => {
                    if (trigger?.filterCard) {
                      let filter = trigger.filterCard;
                      if (typeof filter == "function") return filter(card, player, trigger);
                      else if (typeof filter == "boolean") return filter;
                    }
                    return player.canUse(card, player, false, trigger);
                  });
                while (player.isDying()) {
                  await player.logSkill(event.name);
                  const card = cards.randomRemove();
                  if (!card) break;
                  const next = player.useCard(card, player);
                  const owner = get.owner(card);
                  if (owner && owner != player) {
                    next.throw = false;
                    owner.$throw(card);
                  }
                  await next;
                }
              }
            },
            jlsg_shayi: {
              audio: "ext:极略:4",
              trigger: { player: 'phaseUseBegin' },
              filter: function (event, player) {
                return player.countCards('h') > 0;
              },
              forced: true,
              content: function () {
                'step 0'
                player.showHandcards();
                'step 1'
                if (!player.countCards('h', 'sha')) {
                  player.addTempSkill('jlsg_shayi_buff', 'phaseAfter');
                } else {
                  player.draw();
                }
              },
              mod: {
                cardUsable: function (card, player, num) {
                  if (card.name == 'sha') return Infinity;
                },
                targetInRange: function (card) {
                  if (card.name == 'sha') return true;
                }
              },
              subSkill: {
                buff: {
                  audio: 'ext:极略:2',
                  enable: ['chooseToRespond', 'chooseToUse'],
                  filterCard: function (card) {
                    return get.color(card) == 'black';
                  },
                  position: 'hes',
                  viewAs: { name: 'sha' },
                  viewAsFilter: function (player) {
                    if (!player.countCards('hes', { color: 'black' })) return false;
                  },
                  prompt: '将一张黑色牌当杀使用或打出',
                  check: function (card) {
                    return 4 - get.value(card)
                  },
                  ai: {
                    skillTagFilter: function (player) {
                      if (!player.countCards('hes', { color: 'black' })) return false;
                    },
                    respondSha: true,
                  },
                }
              }
            },
            jlsg_zhenhun: {
              audio: "ext:极略:true",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                return player != target;
              },
              filer: function (event, player) {
                return player.countCards('he') > 0;
              },
              filterCard: true,
              check: function (card) {
                return 4 - get.value(card);
              },
              selectTarget: -1,
              content: function () {
                if (!target.hasSkill('jlsg_zhenhun_debuff')) {
                  var list = [];
                  for (var i = 0; i < target.skills.length; i++) {
                    if (!get.is.locked(target.skills[i])) {
                      list.push(target.skills[i]);
                    }
                  }
                  if (list.length > 0) {
                    target.disableSkill('jlsg_zhenhun', list);
                    target.addSkill('jlsg_zhenhun_debuff');
                  }
                }
              },
              ai: {
                order: 10,
                result: {
                  player: function (player) {
                    if (player.countCards('h') > 2) return 1;
                    return -1;
                  },
                  target: function (target) {
                    var num = 0;
                    for (var i = 0; i < target.skills.length; i++) {
                      if (!get.is.locked(target.skills[i])) {
                        if (target.skills[i].enable && target.skills[i].enable == 'phaseUse') {
                          continue;
                        } else {
                          num++;
                        }
                      }
                    }
                    if (num > 0) return -num;
                    return 0;
                  },
                },
                threaten: 1.3
              },
              subSkill: {
                debuff: {
                  trigger: { global: 'phaseAfter' },
                  forced: true,
                  popup: false,
                  content: function () {
                    player.enableSkill('jlsg_zhenhun');
                    player.removeSkill('jlsg_zhenhun_debuff');
                  },
                  mark: true,
                  intro: {
                    content: function (st, player) {
                      var storage = player.disabledSkills.jlsg_zhenhun;
                      if (storage && storage.length) {
                        var str = '失效技能：';
                        for (var i = 0; i < storage.length; i++) {
                          if (lib.translate[storage[i] + '_info']) {
                            str += get.translation(storage[i]) + '、';
                          }
                        }
                        return str.slice(0, str.length - 1);
                      }
                    }
                  }
                }
              }
            },
            jlsg_yinshi: {
              forced: true,
              audio: "ext:极略:1",
              trigger: { player: 'damageBegin4' },
              filter: function (event) {
                return event.num > 0;
              },
              content: function () {
                player.draw(trigger.num);
                if (trigger.nature !== 'thunder') {
                  trigger.cancel();
                }
              },
              ai: {
                nofire: true,
                // nothunder: true,
                nodamage: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.tag(card, 'damage')) {
                      if (get.tag(card, 'thunderDamage')) {
                        return [1, 0.3];
                      }
                      return [0, 0.3];
                    }
                  }
                },
              },
            },

            jlsg_zhitian: {
              audio: "ext:极略:1",
              trigger: { player: 'phaseBegin' },
              forced: true,
              unique: true,
              content: function () {
                "step 0"
                if (!_status.characterlist) {
                  lib.skill.pingjian.initList();
                }
                _status.characterlist.randomSort();
                var list = [];
                var skills = [];
                var map = [];
                for (var i = 0; i < _status.characterlist.length; i++) {
                  var name = _status.characterlist[i];
                  if (name.indexOf('zuoci') != -1 || name.indexOf('xushao') != -1) continue;
                  if (!get.character(name)) continue;
                  var skills2 = (get.character(name)[3] ?? []);
                  if (!skills2.length) continue;
                  for (var j = 0; j < skills2.length; j++) {
                    if (skills.includes(skills2[j])) {
                      list.add(name);
                      if (!map[name]) map[name] = [];
                      map[name].push(skills2[j]);
                      skills.add(skills2[j]);
                      continue;
                    }
                    var list2 = [skills2[j]];
                    game.expandSkills(list2);
                    for (var k = 0; k < list2.length; k++) {
                      var info = lib.skill[list2[k]];
                      if (!info || info.silent || info.hiddenSkill || info.unique || info.charlotte) continue;
                      list.add(name);
                      if (!map[name]) map[name] = [];
                      map[name].push(skills2[j]);
                      skills.add(skills2[j]);
                    }
                  }
                  if (list.length > 2) break;
                };
                if (!skills.length) event.finish();
                else {
                  player.chooseControl(skills)
                    .set('dialog', ['选择一个技能', [list, 'character']])
                    .set('ai', function () { return Math.floor(Math.random() * _status.event.controls.length); });
                }
                "step 1"
                if (!lib.skill[result.control]) return;
                event.skill = result.control;
                player.chooseTarget(true)
                  .set('prompt2', '将所有手牌交给一名角色')
                  .set('ai', function (target) {
                    return get.attitude(player, target);
                  });
                "step 2"
                if (!result.bool) return;
                if (result.targets[0] == player) return;
                player.line(result.targets[0], 'green');
                var cards = player.getCards('h');
                result.targets[0].gain(cards, player, 'giveAuto');
                "step 3"
                result.targets[0].addSkills(event.skill);
                result.targets[0].loseHp();
              },
            },
            jlsg_zhiji: {
              audio: "ext:极略:3",
              usable: 1,
              enable: 'phaseUse',
              filter: function (event, player) {
                return player.countCards('he', { subtype: 'equip1' });
              },
              filterCard: function (card) {
                return get.subtype(card) == 'equip1';
              },
              position: 'he',
              selectCard: [1, Infinity],
              filterTarget: function (card, player, target) {
                return player != target;
              },
              check: function (card) {
                return 9 - get.value(card);
              },
              content: function () {
                target.damage(cards.length);
              },
              group: ['jlsg_zhiji_damage'],
              subSkill: {
                damage: {
                  audio: 'ext:极略:1',
                  trigger: { player: 'damageEnd' },
                  check: () => true,
                  content: function () {
                    var field = undefined;
                    if (Math.random() > 0.5) {
                      field = 'discardPile';
                    }
                    var card = get.cardPile(function (card) {
                      return get.subtype(card) == 'equip1';
                    }, field);
                    if (!card) {
                      if (!field) {
                        card = get.cardPile(function (card) {
                          return get.subtype(card) == 'equip1';
                        }, 'discardPile');
                      } else {
                        card = get.cardPile(function (card) {
                          return get.subtype(card) == 'equip1';
                        });
                      }
                    }
                    if (card) {
                      player.gain(card, 'gain2');
                      game.log(player, '从' + (field == undefined ? '' : '弃') + '牌堆获得了', card);
                    }
                  }
                }
              },
              ai: {
                order: 10,
                result: {
                  target: -1.5
                },
                tag: {
                  damage: 1
                },
              }
            },
            jlsg_yuanhua: {
              audio: "ext:极略:2",
              mark: true,
              intro: {
                content: '发动元化移出游戏了#张牌',
              },
              init: function (player) {
                player.storage.jlsg_yuanhua = 0;
              },
              locked: true,
              direct: true,
              trigger: { player: 'gainAfter' },
              filter: function (event, player) {
                return event.cards && event.cards.some(c => c.name == 'tao');
              },
              content: function () {
                "step 0"
                event.cards = trigger.cards.filter(c => c.name == 'tao');
                "step 1"
                event.card = event.cards.pop();
                player.logSkill(event.name);
                if (player.isDamaged()) {
                  player.recover();
                }
                "step 2"
                player.draw(2, 'nodelay');
                "step 3"
                game.log(player, '将', event.card, '移出游戏');
                player.lose(event.card, ui.special);
                player.addMark('jlsg_yuanhua', 1, false);
                "step 4"
                if (event.cards.length) {
                  event.goto(1);
                }
              },
            },
            jlsg_guiyuan: {
              audio: "ext:极略:1",
              global: 'jlsg_guiyuan_ai',
              enable: 'phaseUse',
              usable: 1,
              content: function () {
                'step 0'
                player.loseHp();
                event.targets = game.filterPlayer(p => p != player);
                event.targets.sortBySeat();
                player.line(event.targets, 'green');
                event.gained = false;
                'step 1'
                event.target = event.targets.shift();
                if (event.target.countCards('h', 'tao')) {
                  var card = event.target.getCards('h', 'tao').randomGet();
                  player.gain(event.target, card, 'visible', 'give');
                  event.gained = true;
                }
                'step 2'
                if (event.targets.length) {
                  event.goto(1);
                } else {
                  var card = get.cardPile(c => c.name == 'tao');
                  if (card) player.gain(card, 'gain2');
                }
              },
              ai: {
                order: 12,
                result: {
                  player: function (player) {
                    return (player.hp > 1 || player.canSave(player)) ? 1 : 0;
                  }
                }
              }
            },
            jlsg_guiyuan_ai: {
              ai: {
                nokeep: true,
                skillTagFilter: function (player) {
                  if (!game.hasPlayer(p => p.hasSkill('jlsg_guiyuan') && get.attitude(player, p) < 2)) return false;
                },
              }
            },
            jlsg_chongsheng: {
              audio: "ext:极略:1",
              unique: true,
              limited: true,
              trigger: { global: 'dying' },
              check: function (event, player) {
                if (get.attitude(player, event.player) < 4) return false;
                if (player.countCards('h', function (card) {
                  var mod2 = game.checkMod(card, player, 'unchanged', 'cardEnabled2', player);
                  if (mod2 != 'unchanged') return mod2;
                  var mod = game.checkMod(card, player, event.player, 'unchanged', 'cardSavable', player);
                  if (mod != 'unchanged') return mod;
                  var savable = get.info(card).savable;
                  if (typeof savable == 'function') savable = savable(card, player, event.player);
                  return savable;
                }) >= 1 - event.player.hp) return false;
                if (event.player == player || event.player == get.zhu(player)) return true;
                return !player.hasUnknown();
              },
              filter: function (event, player) {
                return event.player.hp <= 0;
              },
              skillAnimation: true,
              animationColor: 'gray',
              logTarget: 'player',
              content: function () {
                'step 0'
                player.awakenSkill('jlsg_chongsheng');
                'step 1'
                var num = player.storage.jlsg_yuanhua || 1;
                trigger.player.maxHp = num;
                trigger.player.recover(trigger.player.maxHp - trigger.player.hp);

                'step 2'
                if (!trigger.player.isAlive() || !trigger.player.group || trigger.player.group == 'unknown' || trigger.player.isUnseen(0)) {
                  event.finish();
                  return;
                }
                var group = trigger.player.group;
                var list = jlsg.characterList.filter(c => get.character(c, 1) == group);

                var players = game.players.concat(game.dead);
                for (var i = 0; i < players.length; i++) {
                  list.remove(players[i].name);
                  list.remove(players[i].name1);
                  list.remove(players[i].name2);
                }
                list = list.randomGets(3);
                if (!list.length) {
                  event.finish();
                  return;
                }
                trigger.player.chooseButton().set('ai', function (button) {
                  return get.rank(button.link, true) - get.character(button.link, 2) -
                    (get.rank(trigger.player.name1, true) - get.character(trigger.player.name1, 2));
                }).set('createDialog', ['将武将牌替换为一名角色', [list, 'character']]);
                'step 3'
                if (result.bool) {
                  trigger.player.reinit(trigger.player.name, result.links[0]);
                }
              },
            },
            jlsg_old_lvezhen: {
              shaRelated: true,
              audio: "jlsg_lvezhen",
              trigger: { player: 'shaBegin' },
              filter: function (event, player) {
                return event.target.countDiscardableCards(player, 'he');
              },
              check: function (event, player) {
                return get.attitude(player, event.target) < 0;
              },
              content: function () {
                'step 0'
                event.cards = get.cards(3);
                game.cardsGotoOrdering(cards);
                player.showCards(event.cards);
                'step 1'
                event.numx = 0;
                for (var i = 0; i < event.cards.length; i++) {
                  if (get.type(event.cards[i]) != 'basic') event.numx++;
                }
                // player.$throw(event.cards);
                if (event.numx) {
                  player.discardPlayerCard('请选择想要弃置的牌', trigger.target,
                    [1, Math.min(event.numx, trigger.target.countDiscardableCards(player, 'he'))], 'he').set(
                      'forceAuto', true);
                }
              }
            },
            jlsg_old_youlong: {
              audio: "jlsg_youlong",
              enable: 'phaseUse',
              mark: true,
              marktext: "游",
              intro: {
                content: function () {
                  return '牌堆数' + ui.cardPile.childNodes.length + '张' + '||' + '弃牌数' + ui.discardPile.childNodes.length + '张';
                }
              },
              filterCard: function (card) {
                return get.color(card) == 'black';
              },
              filter: function (event, player) {
                return ui.discardPile.childNodes.length > ui.cardPile.childNodes.length;
              },
              position: 'hs',
              viewAs: { name: 'shunshou' },
              viewAsFilter: function (player) {
                if (!player.countCards('hs', { color: 'black' })) return false;
              },
              prompt: '将一张黑色手牌当顺手牵羊使用',
              check: function (card) {
                return 8 - get.value(card);
              },
              ai: {
                order: 9.5,
              }
            },
            jlsg_old_danjing: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              direct: true,
              filterTarget: function (card, player, target) {
                return player != target;
              },
              content: function () {
                'step 0'
                player.chooseControl('令其摸三张牌', '令其弃三张牌').ai = function () {
                  if (ai.get.attitude(player, target) > 0) return '令其摸三张牌';
                  return '令其弃三张牌';
                };
                'step 1'
                if (result.control == '令其摸三张牌') {
                  player.logSkill('jlsg_old_danjing1');
                  player.loseHp();
                  target.draw(3);
                }
                else {
                  player.logSkill('jlsg_old_danjing2');
                  player.loseHp();
                  target.chooseToDiscard(3, 'he', true);
                }
              },
              ai: {
                order: 5,
                result: {
                  player: function (player) {
                    return jlsg.getLoseHpEffect(player);
                  },
                  target: function (player, target) {
                    if (get.attitude(player, target) > 0) { return 4; }
                    else {
                      return Math.min(3, target.countDiscardableCards(player, 'he')) * 1.5;
                    }
                  }
                }
              }
            },
            jlsg_old_danjing1: {
              unique: true,
              audio: "ext:极略:true"
            },
            jlsg_old_danjing2: {
              unique: true,
              audio: "ext:极略:true"
            },
            jlsg_old_zhonghun: {
              unique: true,
              limited: true,
              audio: "ext:极略:2",
              trigger: { player: 'dieBegin' },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(function (card, player, target) {
                  return player != target;
                }).ai = function (target) {
                  return get.attitude(player, target);
                };
                'step 1'
                if (result.bool) {
                  player.logSkill('jlsg_old_zhonghun', result.targets);
                  var skills = player.getSkills(null, false, false).filter(function (i) {
                    var info = get.info(i);
                    return info && !info.charlotte;
                  });
                  result.targets[0].addSkills(skills);
                }
              }
            },

            jlsg_qinyin: {
              audio: "ext:极略:2",
              direct: true,
              trigger: {
                player: "phaseDiscardBefore",
              },
              filter: function (event, player) {
                return true;
              },
              content: function () {
                'step 0'
                var list = ["摸两张牌，然后令所有角色各失去1点体力。"];
                if (player.countCards('he') >= 2) {
                  list.push("弃两张牌，然后令所有角色各恢复1点体力。");
                }
                event.list = list;
                player.chooseControlList(event.list)
                  .set('prompt', `###${get.prompt(event.name)}###跳过弃牌阶段`)
                  .set('ai', function (event, player) {
                    var recover = 0, lose = 1, players = game.filterPlayer();
                    for (var i = 0; i < players.length; i++) {
                      if (players[i].hp < players[i].maxHp) {
                        if (get.attitude(player, players[i]) > 0) {
                          if (players[i].hp < 2) {
                            lose--;
                            recover += 0.5;
                          }
                          lose--;
                          recover++;
                        } else if (get.attitude(player, players[i]) < 0) {
                          if (players[i].hp < 2) {
                            lose++;
                            recover -= 0.5;
                          }
                          lose++;
                          recover--;
                        }
                      } else {
                        if (get.attitude(player, players[i]) > 0) {
                          lose--;
                        } else if (get.attitude(player, players[i]) < 0) {
                          lose++;
                        }
                      }
                    }
                    if (player.countCards('h') < player.hp - 1) {
                      lose++;
                    }
                    if (player.needsToDiscard()) {
                      recover++;
                    }
                    if (lose > recover && lose > 0) return event.list.indexOf('摸两张牌，然后令所有角色各失去1点体力。');
                    if (lose < recover && recover > 0 && event.list.includes('弃两张牌，然后令所有角色各恢复1点体力。')) return event.list.indexOf('弃两张牌，然后令所有角色各恢复1点体力。');
                    return event.list.indexOf('cancel2');
                  });
                'step 1'
                event.choice = result.index;
                if (event.list[result.index] == '摸两张牌，然后令所有角色各失去1点体力。') {
                  event.recover = false;
                  trigger.cancel();
                  player.draw(2);
                  var players = game.filterPlayer().sortBySeat();
                  player.logSkill('jlsg_qinyin2');
                  for (var i = 0; i < players.length; i++) {
                    players[i].loseHp();
                  }
                }
                else if (event.list[result.index] == '弃两张牌，然后令所有角色各恢复1点体力。') {
                  event.recover = true;
                  trigger.cancel();
                  player.chooseToDiscard(2, 'he', true);
                  var players = game.filterPlayer().sortBySeat();
                  player.logSkill('jlsg_qinyin1');
                  for (var i = 0; i < players.length; i++) {
                    players[i].recover();
                  }
                } else {
                  event.finish();
                }
                'step 2'
                if (!player.isIn()) {
                  event.finish();
                  return;
                }
                let evts = player.getAllHistory('useSkill', e => lib.translate[e.skill] == '业炎');
                if (!evts.length) {
                  event.finish();
                  return;
                }

                var prompt = `###是否再次触发〖业炎〗?###`;
                var choice;
                if (!event.recover) {
                  prompt += '令所有角色各失去1点体力';
                  choice = game.filterPlayer()
                    .map(p => -get.attitude(player, p) / p.hp)
                    .reduce((a, b) => a + b, 0) > Math.random();
                } else {
                  prompt += '令所有角色各恢复1点体力';
                  choice = game.filterPlayer()
                    .map(p => get.recoverEffect(p, player, player))
                    .reduce((a, b) => a + b, 0) > Math.random();
                }
                player.chooseBool(prompt, choice);
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var players = game.filterPlayer().sortBySeat();
                if (!event.recover) {
                  for (var i = 0; i < players.length; i++) {
                    players[i].loseHp();
                  }
                } else {
                  for (var i = 0; i < players.length; i++) {
                    players[i].recover();
                  }
                }
              },
              group: ['jlsg_qinyin1', 'jlsg_qinyin2'],
            },
            jlsg_qinyin1: {
              audio: "ext:极略:true",
              unique: true,
            },
            jlsg_qinyin2: {
              audio: "ext:极略:true",
              unique: true,
            },
            jlsg_yeyan: {
              unique: true,
              marktext: "炎",
              mark: true,
              forceDie: true,
              enable: "phaseUse",
              audio: "ext:极略:3",
              animationColor: "metal",
              skillAnimation: "legend",
              init: function (player) {
                player.storage.jlsg_yeyan = false;
              },
              filterCard(card) {
                return true;
              },
              limited: true,
              selectCard: [1, 4],
              line: "fire",
              check(card) {
                let result;
                let red = ui.selected.cards.filter(c => get.color(c) == 'red').length;

                let black = ui.selected.cards.filter(c => get.color(c) == 'black').length;
                if (get.color(card) == 'red') {
                  result = game.filterPlayer()
                    .map(p => get.damageEffect(p, _status.event.player, _status.event.player, 'fire'))
                    .sort((a, b) => b - a)
                    .slice(0, black)
                    .reduce((a, b) => a + Math.max(b, 0), 0)
                    - get.value(card);
                }
                else if (get.color(card) == 'black') {
                  result = game.filterPlayer()
                    .map(p => get.damageEffect(p, _status.event.player, _status.event.player, 'fire') * (red + 1))
                    .sort((a, b) => b - a)[black];
                  result = result || 0;
                  result = Math.max(result, 0);
                  result -= get.value(card);
                } else {
                  result = -get.value(card) / 3;
                }
                return result;
              },
              filterTarget: true,
              selectTarget() {
                return [1, 1 + ui.selected.cards.filter(c => get.color(c) == 'black').length];
              },
              multitarget: true,
              multiline: true,
              content: function () {
                "step 0"
                player.awakenSkill('jlsg_yeyan');
                "step 1"
                targets.sortBySeat();
                let cnt = cards.filter(c => get.color(c, player) == 'red').length + 1;
                if (cnt * targets.length >= 5) {
                  player.loseHp(3);
                }
                for (let p of targets) {
                  p.damage('fire', cnt);
                }
              },
              intro: {
                content: 'limited'
              },
              ai: {
                order: 6,
                fireattack: true,
                result: {
                  player: function (player, target) {
                    return game.filterPlayer(p => get.attitude(player, p) < 0).length > 1 ? 5 : -5;
                  },
                  target: function (player, target) {
                    if (target.hasSkillTag('nofire')) return 0;
                    if (lib.config.mode == 'versus') return -1;
                    if (player.hasUnknown()) return 0;
                    return get.damageEffect(target, player, player) / get.attitude(player, target);
                  }
                }
              },
            },
            jlsg_qianqi: {
              audio: "ext:极略:2",
              trigger: {
                player: 'enterGame',
                global: 'phaseBefore',
              },
              forced: true,
              filter: function (event) {
                return event.name != 'phase' || game.phaseNumber == 0;
              },
              content: function () {
                "step 0"
                var defend = lib.inpile.filter(c => lib.card[c].toself && lib.card[c].subtype == 'equip3');
                defend = defend.randomGet();
                if (defend) {
                  var card = game.createCard(defend);
                  player.$gain2(card);
                  player.equip(card);
                }
                game.delayx();
                "step 1"
                var attack = lib.inpile.filter(c => lib.card[c].toself && lib.card[c].subtype == 'equip4');
                attack = attack.randomGet();
                if (attack) {
                  var card = game.createCard(attack);
                  player.$gain2(card);
                  player.equip(card);
                }
              },
              marktext: '骑',
              intro: {
                content: 'mark',
              },
              group: ["jlsg_qianqi_gain", "jlsg_qianqi2"],
              subSkill: {
                gain: {
                  audio: "jlsg_qianqi",
                  trigger: {
                    global: ['loseAfter', 'equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                  },
                  forced: true,
                  filter: function (event, player) {
                    return game.hasPlayer(p => {
                      var evt = event.getl(p);
                      return evt && evt.es && evt.es.some(
                        c => ['equip3', 'equip4', 'equip6'].includes(get.subtype(c, p))
                      );
                    });
                  },
                  content: function () {
                    var cnt = game.countPlayer(p => {
                      var evt = trigger.getl(p);
                      return evt && evt.es && evt.es.some(
                        c => ['equip3', 'equip4', 'equip6'].includes(get.subtype(c, p))
                      );
                    });
                    player.addMark("jlsg_qianqi", 2 * cnt);
                  },
                },
              },
            },
            jlsg_qianqi2: {
              audio: "ext:极略:2",
              prompt: '弃置一枚「千骑」标记，视为使用一张杀',
              enable: 'chooseToUse',
              viewAs: {
                name: 'sha',
                storage: { jlsg_qianqi: true },
              },
              viewAsFilter: function (player) {
                return player.countMark("jlsg_qianqi") != 0;
              },
              filterCard: function () { return false },
              selectCard: -1,
              precontent: function () {
                player.removeMark("jlsg_qianqi", 1);
              },
              mod: {
                targetInRange: function (card) {
                  if (card.storage && card.storage.jlsg_qianqi) return true;
                },
                cardUsable: function (card, player) {
                  if (card.storage && card.storage.jlsg_qianqi) return Infinity;
                },
              },
              ai: {
                respondSha: true,
                skillTagFilter: function (player) {
                  return player.countMark("jlsg_qianqi");
                },
              },
            },
            jlsg_juechen: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin2' },
              direct: true,
              shaRelated: true,
              filter: function (event, player) {
                return event.card && event.card.name == "sha"
                  && event.player != player;
              },
              content: function () {
                "step 0"
                player.chooseControlList(get.prompt(event.name, trigger.player), [
                  `改为其失去${trigger.num}点体力`,
                  `改为其失去1点体力上限`,
                ], function () {
                  if (get.attitude(_status.event.player, _status.event.target) < 0) {
                    return _status.event.target.isDamaged ? 0 : 1;
                  }
                  return 2;
                }).set("target", trigger.player);
                "step 1"
                if (result.control == "cancel2") {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, trigger.player);
                trigger.cancel();
                if (result.index == 0) {
                  trigger.player.loseHp(trigger.num);
                } else {
                  trigger.player.loseMaxHp();
                }
              },
            },
            jlsg_luocha: {
              audio: "ext:极略:2",
              initList: function () {
                if (!_status.characterlist) {
                  lib.skill.pingjian.initList();
                }
                _status.jlsg_luocha_list = [];
                _status.jlsg_luocha_list_hidden = [];
                for (var c of _status.characterlist) {
                  let list = (get.character(c)[3] ?? []).filter(s => lib.skill[s] && lib.translate[s] && lib.translate[s + '_info']);
                  _status.jlsg_luocha_list.addArray(
                    list.filter(s => lib.skill[s].shaRelated)
                  );
                  _status.jlsg_luocha_list_hidden.addArray(
                    list.filter(s => get.plainText(get.skillInfoTranslation(s, get.player())).includes('【杀】'))
                  );
                };
              },
              trigger: {
                player: "enterGame",
                global: ["phaseBefore", "dying"],
              },
              forced: true,
              filter: function (event, player, name) {
                if (name == "dying") return event.player != player;
                return event.name != 'phase' || game.phaseNumber == 0;
              },
              async content(event, trigger, player) {
                if (!_status.jlsg_luocha_list || !_status.jlsg_luocha_list_hidden) {
                  lib.skill.jlsg_luocha.initList();
                }
                let num = event.triggername == "dying" ? 1 : 3;
                if (num == 1) await player.draw(2);
                if (!_status.jlsg_luocha_list.length && !_status.jlsg_luocha_list_hidden.length) {
                  game.log("没有可以获得的技能了");
                } else {
                  let list1 = _status.jlsg_luocha_list.filter(s => !player.hasSkill(s)).randomSort(),
                    list2 = _status.jlsg_luocha_list_hidden.filter(s => !player.hasSkill(s)).randomSort()
                  let skills = list1.concat(list2).unique().randomRemove(num);
                  if (!skills.length) game.log("没有可以获得的技能了");
                  else await player.addSkills(skills);
                }
                await game.delayx();
              },
            },
            jlsg_shajue: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: lib.filter.notMe,
              precontent: function () {
                player.loseHp();
              },
              content: function () {
                "step 0"
                event.cards = new Set(player.getCards('h'));
                "step 1"
                var card = player.getCards('h', c => event.cards.has(c)).randomGet();
                event.cards.delete(card);
                if (!card || !target.isIn()) {
                  event.finish();
                  return;
                }
                player.useCard({
                  name: 'sha',
                  nature: lib.inpile_nature.concat(null).randomGet(),
                  storage: {
                    jlsg_shajue: true,
                  }
                }, [card], target);
                event.redo();
              },
              ai: {
                order: function () {
                  return get.order({ name: 'sha' }) - 0.5;
                },
                result: { target: -2 },
                threaten: 2.5,
                unequip: true,
                skillTagFilter: function (player, tag, arg) {
                  if (!arg || !arg.card || !arg.card.storage || !arg.card.storage.jlsg_shajue) return false;
                },
              },
            },
            jlsg_guiqu: {
              audio: "ext:极略:2",
              unique: true,
              enable: 'chooseToUse',
              getSkills(player) {
                return player.getSkills(null, false, false).filter(
                  s => lib.translate[s] && lib.translate[s + '_info']
                    && lib.skill[s] && !lib.skill[s].nopopup && !lib.skill[s].equipSkill
                );
              },
              filter: function (event, player) {
                return player.isDying() && event.filterCard({ name: 'tao' }, player, event) && lib.skill.jlsg_guiqu.getSkills(player).length > 1;
              },
              hiddenCard: function (player, name) {
                return player.isDying() && name === 'tao'
                  && lib.skill.jlsg_guiqu.getSkills(player).length > 1;
              },
              chooseButton: {
                dialog: function (event, player) {
                  var dialog = ui.create.dialog('鬼躯', 'hidden');
                  var table = document.createElement('div');
                  table.classList.add('add-setting');
                  table.style.margin = '0';
                  table.style.width = '100%';
                  table.style.position = 'relative';
                  var skills = lib.skill.jlsg_guiqu.getSkills(player);
                  // skills = skills.remove('jlsg_guiqu');
                  for (var s of skills) {
                    var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                    td.innerHTML = '<span>' + (lib.translate[s]) + '</span>';
                    td.link = s;
                    td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                    table.appendChild(td);
                    dialog.buttons.add(td);
                  }
                  dialog.content.appendChild(table);
                  dialog.add('　');
                  return dialog;
                },
                check: function (button) {
                  return Math.random();
                },
                prompt: function (links, player) {
                  return `失去〖${get.translation(links[0])}〗,视为使用一张【桃】`;
                },
                backup: function (links) {
                  return {
                    audio: 'jlsg_guiqu',
                    viewAs: {
                      name: 'tao',
                      isCard: true,
                    },
                    selectCard: -1,
                    filterCard: () => false,
                    skill: links[0],
                    onuse: function (links, player) {
                      player.removeSkills(this.skill);
                      player.popup(this.skill);
                    },
                  };
                },
              },
              ai: {
                result: {
                  player: function (player) {
                    if (_status.event.dying) return get.attitude(player, _status.event.dying);
                    return 1;
                  },
                },
              },
              mod: {
                maxHandcard: function (player, num) {
                  return lib.skill.jlsg_guiqu.getSkills(player).length;
                }
              }
            },
            jlsg_shenfu: {
              audio: "ext:极略:3",
              init: function (player) {
                player.storage.jlsg_shenfu = [];
              },
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (player.countCards('h') >= 4) return false;
                var evt = event.getl(player);
                return evt && evt.hs && evt.hs.length;
              },
              frequent: true,
              content: function () {
                'step 0'
                player.drawTo(4);
                'step 1'
                let cards = trigger.getl(player).hs;
                let suit = get.suit(cards, player);
                if (!suit) {
                  event.finish();
                  return;
                }
                let storage = player.storage[event.name];
                storage.unshift(suit);
                if (storage.length > 4) {
                  storage.length = 4;
                }
                player.markSkill(event.name);

                storage = new Set(storage);
                if (storage.size == 4) {
                  player.chooseTarget(`###${get.prompt(event.name)}###对一名角色造成1点雷电伤害`)
                    .set('ai', function (target) {
                      return get.damageEffect(target, _status.event.player, _status.event.player, 'thunder');
                    });
                } else {
                  event.finish();
                }
                'step 2'
                if (result.bool) {
                  result.targets[0].damage('thunder');
                }
              },
              marktext: '赋',
              intro: {
                content: function (storage, player, name) {
                  let suits = storage.slice();
                  while (suits.length < 4) {
                    suits.push(null);
                  }
                  suits.unshift('_');
                  return suits.reverse().map(
                    s => {
                      if (!s) {
                        return 's';
                      }
                      if (s == 'none') {
                        return '无';
                      }
                      return get.translation(s);
                    },
                  ).join(' ');
                },
              },
              ai: {
                noh: true,
              }
            },
            jlsg_lvezhen: {
              audio: "ext:极略:2",
              trigger: { player: 'useCardToPlayered' },
              filter: function (event, player) {
                var phaseUse = _status.event.getParent('phaseUse');
                if (phaseUse.name != 'phaseUse' || phaseUse.player != player) {
                  return false;
                }
                return (event.card.name == 'sha' || get.type2(event.card) == 'trick') &&
                  event.targets.length == 1 && event.target.countGainableCards(player, 'he') &&
                  !player.hasSkill('jlsg_lvezhen2');
              },
              content: function () {
                player.addTempSkill('jlsg_lvezhen2', 'phaseUseAfter');
                var card = trigger.target.getGainableCards(player, 'he').randomGet();
                player.gain(card, trigger.target, 'giveAuto', 'bySelf');
              },
            },
            jlsg_lvezhen2: {},
            jlsg_youlong: {
              audio: "ext:极略:2",
              forced: true,
              charlotte: true,
              unique: true,
              trigger: { player: 'showCharacterEnd' },
              delay: false,
              init: function (player) {
                if (player.hasSkill('jlsg_youlong')) {
                  player.useSkill('jlsg_youlong');
                };
              },
              filter: function (event, player) {
                return !player.isTurnedOver();
              },
              content: function () {
                player.turnOver(true)._triggered = null;
              },
              group: ['jlsg_youlong2', 'jlsg_youlong_guard'],
              subSkill: {
                guard: {
                  silent: true,
                  charlotte: true,
                  trigger: { player: 'turnOverBefore' },
                  filter: function (event, player) {
                    return player.isTurnedOver() && player.hasSkill('jlsg_youlong');
                  },
                  content: function () {
                    trigger.cancel();
                    game.log(player, '取消了翻面');
                  },
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target, current) {
                    if (get.type(card) == 'delay') {
                      return 0;
                    }
                  }
                }
              },
            },
            jlsg_youlong2: {
              audio: "jlsg_youlong",
              trigger: { global: 'phaseEnd' },
              filter: function (event, player) {
                return player != event.player;
              },
              forced: true,
              content: function () {
                'step 0'
                player.draw();
                'step 1'
                var next = player.phaseUse();
                event.next.remove(next);
                trigger.next.push(next);
              },
            },
            jlsg_danjing: {
              audio: "ext:极略:2",
              trigger: {
                player: [
                  "damageEnd",
                  "loseHpEnd",
                  "loseMaxHpEnd",
                  "loseAfter",
                ],
              },
              filter: function (event, player) {
                if (event.name != 'lose') return true;
                return event.type == 'discard';
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2(event.name), lib.filter.notMe).set("ai",
                  function (target) {
                    return -get.attitude(_status.event.player, target) + Math.random() - 0.5;
                  },
                );
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                player.logSkill(event.name, target);
                if (target.ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                switch (trigger.name) {
                  case "damage":
                    target.damage(trigger.num);
                    break;
                  case "loseHp":
                    target.loseHp(trigger.num);
                    break;
                  case "loseMaxHp":
                    target.loseMaxHp(trigger.num);
                    break;
                  case "lose":
                    target.chooseToDiscard(true, 'he', trigger.cards.length);
                    break;
                }
              },
              ai: {
                maixie_defend: true,
              },
            },
            jlsg_zhonghun: {
              audio: "ext:极略:2",
              unique: true,
              limited: true,
              enable: "phaseUse",
              skillAnimation: true,
              animationColor: 'thunder',
              filterTarget: lib.filter.notMe,
              content() {
                'step 0'
                player.awakenSkill(event.name);
                'step 1'
                player.loseMaxHp();
                target.gainMaxHp();
                target.recover();
                'step 2'
                player.storage.jlsg_zhonghun2 = target;
                player.markSkill("jlsg_zhonghun2");
                player.addSkill("jlsg_zhonghun2");
              },
              ai: {
                order: 3,
                result: {
                  player: function (player, target) {
                    if (['nei', 'rYe', 'bYe', 'zhu', 'rZhu', 'bZhu'].includes(player.identity)) {
                      return -5;
                    }
                    return player.isHealthy() ? -1 : 0;
                  },
                  target: function (player, target) {
                    if (target.hp == 1) return 5;
                    if (target.hp == 2) return 2;
                    return 1;
                  }
                },
                threaten: 2
              },
              group: "jlsg_zhonghun3",
            },
            jlsg_zhonghun3: {
              trigger: {
                global: 'phaseBefore',
                player: 'enterGame',
              },
              filter: function (event, player) {
                return (event.name != 'phase' || game.phaseNumber == 0);
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt2("jlsg_zhonghun"), lib.filter.notMe).set("ai",
                  function (target) {
                    return get.attitude(_status.event.player, target) - 10;
                  }
                );
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.addExpose(0.4);
                player.useSkill("jlsg_zhonghun", result.targets);
              },
            },
            jlsg_zhonghun2: {
              audio: "jlsg_zhonghun",
              intro: {
                content: "player",
              },
              locked: false,
              forced: true,
              trigger: {
                global: "damageBegin4",
                player: "dieBegin",
              },
              filter: function (event, player) {
                if (event.name == "damage") {
                  return player.storage.jlsg_zhonghun2 == event.player;
                } else {
                  return player.storage.jlsg_zhonghun2;
                }
              },
              content: function () {
                if (trigger.name == "damage") {
                  trigger.player = player;
                } else {
                  var skills = player.getSkills(null, false, false).filter(function (i) {
                    var info = get.info(i);
                    return info && !info.charlotte;
                  });
                  var target = player.storage.jlsg_zhonghun2;
                  target.addSkills(skills);
                }
              },
            },
            jlsg_yinyang_s: {
              audio: "ext:极略:2",
              derivation: ['jlsg_jiyang', 'jlsg_jiyin', 'jlsg_xiangsheng'],
              forced: true,
              charlotte: true,
              unique: true,
              trigger: {
                player: ['showCharacterEnd', 'changeHp', 'gainMaxHpAfter', 'loseMaxHpAfter'],
              },
              delay: false,
              init: function (player) {
                if (player.hasSkill('jlsg_yinyang_s')) {
                  player.useSkill('jlsg_yinyang_s');
                };
              },
              filter: function (event, player) {
                let skill = lib.skill.jlsg_yinyang_s.getCurrentSkill(player);
                return !player.hasSkill(skill);
              },
              content: function () {
                let skill = lib.skill.jlsg_yinyang_s.getCurrentSkill(player);
                player.addAdditionalSkill(event.name, skill); // keep = false
                // ['jlsg_jiyang', 'jlsg_jiyin', 'jlsg_xiangsheng']
                //   .filter(s => s != skill)
                //   .forEach(s => player.removeAdditionalSkill(event.name, s));
              },
              getCurrentSkill(player) {
                let diff = player.hp - player.getDamagedHp();
                if (diff > 0) {
                  return 'jlsg_jiyang';
                }
                if (diff < 0) {
                  return 'jlsg_jiyin';
                }
                return 'jlsg_xiangsheng';
              },
            },
            jlsg_jiyang: {
              audio: "ext:极略:2",
              sub: true,
              unique: true,
              init: function (player) {
                player.addMark('jlsg_jiyang', 3);
              },
              onremove(player, skill) {
                delete player.storage[skill];
                var card = get.cardPile(function (card) {
                  return get.color(card, false) == "red";
                });
                if (card) {
                  player.gain(card, 'gain2');
                }
              },
              marktext: '阳',
              intro: {
                name: '阳',
                content: 'mark',
              },
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (!player.countMark('jlsg_jiyang')) {
                  return false;
                }
                var evt = event.getl(player);
                if (!evt || !evt.cards2 || !evt.cards2.length) return false;
                for (var i of evt.cards2) {
                  if (get.color(i, player) == 'red') return true;
                }
                return false;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt(event.name))
                  .set('prompt2', '令一名角色回复1点体力，若其未受伤则改为加1点体力上限。')
                  .set('ai', function (target, targets) {
                    var player = _status.event.player;
                    var eff = get.attitude(player, target);
                    eff = 2 * Math.atan(eff);
                    if (!target.isHealthy()) {
                      eff = get.recoverEffect(target, player, player);
                    }
                    return eff - 0.5 + Math.random();
                  });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                player.removeMark(event.name);
                var target = result.targets[0];
                if (player.ai.shown < target.ai.shown) {
                  player.addExpose(0.2);
                }
                if (target.isHealthy()) {
                  target.gainMaxHp();
                } else {
                  target.recover(player);
                }
              },
            },
            jlsg_jiyin: {
              audio: "ext:极略:2",
              sub: true,
              unique: true,
              init: function (player) {
                player.addMark('jlsg_jiyin', 3);
              },
              onremove(player, skill) {
                delete player.storage[skill];
                var card = get.cardPile(function (card) {
                  return get.color(card, false) == "black";
                });
                if (card) {
                  player.gain(card, 'gain2');
                }
              },
              marktext: '阴',
              intro: {
                name: '阴',
                content: 'mark',
              },
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (!player.countMark('jlsg_jiyin')) {
                  return false;
                }
                var evt = event.getl(player);
                if (!evt || !evt.cards2 || !evt.cards2.length) return false;
                for (var i of evt.cards2) {
                  if (get.color(i, player) == 'black') return true;
                }
                return false;
              },
              direct: true,
              content: function () {
                'step 0'
                player.chooseTarget(get.prompt(event.name))
                  .set('prompt2', '对一名角色造成1点雷电伤害，若其已受伤则改为减1点体力上限。')
                  .set('ai', function (target, targets) {
                    var player = _status.event.player;
                    var eff = get.attitude(player, target);
                    eff = -2 * Math.atan(eff);
                    if (target.isHealthy()) {
                      eff = get.damageEffect(target, player, player, 'thunder');
                    }
                    return eff - 0.5 + Math.random();
                  });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                player.removeMark(event.name);
                var target = result.targets[0];
                if (player.ai.shown < target.ai.shown) {
                  player.addExpose(0.2);
                }
                if (target.isHealthy()) {
                  target.damage('thunder');
                } else {
                  target.loseMaxHp();
                }
              },
            },
            jlsg_xiangsheng: {
              audio: "ext:极略:2",
              sub: true,
              unique: true,
              init: function (player) {
                player.addMark('jlsg_xiangsheng', 6);
              },
              onremove(player, skill) {
                delete player.storage[skill];
                player.draw();
              },
              marktext: '生',
              intro: {
                name: '生',
                content: 'mark',
              },
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              filter: function (event, player) {
                if (!player.countMark('jlsg_xiangsheng')) {
                  return false;
                }
                var evt = event.getl(player);
                if (!evt || !evt.cards2 || !evt.cards2.length) return false;
                for (var i of evt.cards2) {
                  if (['black', 'red'].includes(get.color(i, player))) return true;
                }
                return false;
              },
              direct: true,
              frequent: true,
              content: function () {
                'step 0'
                event.colors = [];
                var evt = trigger.getl(player);
                event.cards = evt.cards2;
                for (var i of evt.cards2) {
                  let color = get.color(i, player);
                  if (color == 'black') event.colors.add('red');
                  if (color == 'red') event.colors.add('black');
                }
                if (!event.colors.length) {
                  console.warn('jlsg_xiangsheng no color found!');
                  event.finish();
                  return;
                }
                'step 1'
                event.color = event.colors.shift();
                player.chooseBool(get.prompt(event.name), true)
                  .set('prompt2', `你可以摸一张${lib.translate[event.color]}牌`)
                  .set('frequentSkill', event.name);
                'step 2'
                if (result.bool) {
                  player.logSkill(event.name);
                  player.removeMark(event.name);
                  var card = get.cardPile2(function (card) {
                    return !event.cards.includes(card) && get.color(card, false) == event.color;
                  });
                  if (card) player.gain(card, 'gain2');
                }

                if (player.countMark(event.name) && event.colors.length) {
                  event.goto(1);
                }
              },
            },
            jlsg_dingming: {
              audio: "ext:极略:2",
              trigger: {
                player: ['phaseZhunbeiBegin', 'damageEnd'],
              },
              filter: function (event, player) {
                if (player.hp == player.getDamagedHp()) {
                  return false;
                }
                if (event.name == 'damage' && (!event.source || event.source == player)) {
                  return false;
                }
                return true;
              },
              check: function (event, player) {
                let markCnt = player.countMark(lib.skill['jlsg_yinyang_s'].getCurrentSkill(player));
                if (player.hp > player.getDamagedHp()) {
                  if (!game.hasPlayer(p => get.attitude(player, p) < -5)) {
                    return false;
                  }
                  let targetHp = player.getDamagedHp();
                  return targetHp > 0 && player.hp - targetHp <= 3 - markCnt;
                }
                if (player.hp + 1 < player.getDamagedHp()) {
                  return true;
                }
                return Math.random() < 1 - 0.2 * markCnt;
              },
              prompt2: '交换体力与已损失体力',
              content: function () {
                'step 0'
                event.diff = player.getDamagedHp() - player.hp;
                player.changeHp(event.diff);
                'step 1'
                if (player.hp <= 0) {
                  game.delayx();
                  event._dyinged = true;
                  player.dying(event);
                }
                'step 2'
                player.draw(Math.abs(event.diff));
                'step 3'
                if (player.hp > player.getDamagedHp()) {
                  player.loseMaxHp();
                }
              },
              group: 'jlsg_dingming2',
            },
            jlsg_dingming2: {
              audio: 'jlsg_dingming',
              trigger: { source: 'damageSource' },
              filter: function (event, player) {
                if (event.player == player || !event.player.isIn()) {
                  return false;
                }
                return event.player.hp != event.player.getDamagedHp();
              },
              check: function (event, player) {
                let diff = event.player.getDamagedHp() - event.player.hp;
                if (get.attitude(player, event.player) >= 0) {
                  return diff > 0;
                }
                if (diff > 0) {
                  return false;
                }
                if (['nei', 'rYe', 'bYe'].includes(player.identity) && get.attitude(player, event.player) > -5) {
                  return false;
                }
                if (diff == -1) {
                  return !player.isHealthy();
                } else {
                  return true;
                }
              },
              logTarget: 'player',
              prompt2: function (event, player) {
                return `令${get.translation(event.player)}交换体力与已损失体力`;
              },
              content: function () {
                'step 0'
                event.diff = trigger.player.getDamagedHp() - trigger.player.hp;
                trigger.player.changeHp(event.diff);
                'step 1'
                if (trigger.player.hp <= 0) {
                  game.delayx();
                  // event._dyinged=true;
                  trigger.player.dying(event);
                }
                'step 2'
                player.draw(Math.abs(event.diff));
                'step 3'
                if (trigger.player.hp < trigger.player.getDamagedHp()) {
                  player.loseMaxHp();
                }
              }
            },
            jlsg_lianti: {
              audio: "ext:极略:2",
              forced: true,
              charlotte: true,
              unique: true,
              delay: false,
              trigger: { player: 'showCharacterEnd' },
              init: function (player) {
                if (player.hasSkill('jlsg_lianti')) {
                  player.useSkill('jlsg_lianti');
                };
              },
              intro: {
                content: 'mark',
              },
              filter: function (event, player) {
                return !player.isLinked();
              },
              content: function () {
                player.link(true)._triggered = null;
              },
              group: ['jlsg_lianti_guard', 'jlsg_lianti2', 'jlsg_lianti3', 'jlsg_lianti4'],
              subSkill: {
                guard: {
                  silent: true,
                  charlotte: true,
                  trigger: { player: 'linkBefore' },
                  filter: function (event, player) {
                    return player.isLinked() && player.hasSkill('jlsg_lianti');
                  },
                  content: function () {
                    trigger.cancel();
                    game.log(player, '取消了重置');
                  },
                }
              },
            },
            jlsg_lianti2: {
              audio: "jlsg_lianti",
              forced: true,
              trigger: {
                global: "damageEnd",
              },
              filter: function (event, player) {
                return player === _status.currentPhase && player != event.player && event.nature
                  && event.player.getHistory('damage', e => e.nature).indexOf(event) == 0;
              },
              content: function () {
                trigger.player.damage(trigger.num, trigger.source);
              },
            },
            jlsg_lianti3: {
              audio: "jlsg_lianti",
              forced: true,
              trigger: {
                player: "damageEnd",
              },
              filter: function (event, player) {
                return event.nature;
              },
              content: function () {
                "step 0"
                player.addMark("jlsg_lianti");
                "step 1"
                player.loseMaxHp();
              },
            },
            jlsg_lianti4: {
              audio: "jlsg_lianti",
              forced: true,
              trigger: { player: 'phaseDrawBegin2' },
              filter: function (event, player) {
                return !event.numFixed && player.storage.jlsg_lianti;
              },
              content: function () {
                trigger.num += player.countMark('jlsg_lianti');
              },
              mod: {
                maxHandcard: function (player, num) {
                  return num + player.countMark('jlsg_lianti');
                },
              },
            },
            jlsg_yanlie: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              usable: 1,
              filterCard: true,
              selectCard: function () {
                if (ui.selected.targets.length) return [ui.selected.targets.length, Math.min(ui.selected.targets.length + 1, game.players.length - 1)];
                return [1, Infinity];
              },
              check: function (card) {
                var player = _status.event.player;
                let maxTarget = game.countPlayer(
                  p => lib.skill.jlsg_yanlie.ai.result.target(player, p) * get.attitude(player, p) > 0
                );
                if (maxTarget <= ui.selected.cards.length) return 0;
                return 6 - get.value(card);
              },
              selectTarget: function () {
                return ui.selected.cards.length;
              },
              filterTarget: lib.filter.notMe,
              line: false,
              delay: false,
              multitarget: true,
              multiline: true,

              content: function () {
                'step 0'
                player.useCard({ name: 'tiesuo', isCard: true }, targets);
                'step 1'
                player.chooseTarget(true, function (_, player, target) { return target.isLinked(); })
                  .set("prompt2", "对一名横置角色造成1点火焰伤害")
                  .set("ai", function (target, targets) {
                    if (target == _status.event.player) {
                      return 0;
                    }
                    return Math.random();
                  });
                'step 2'
                if (result.bool) {
                  result.targets[0].damage('fire');
                }
              },
              ai: {
                order: 7,
                fireDamage: true,
                result: {
                  target: function (player, target) {
                    if (target.isLinked() && !target.hasSkill("jlsg_lianti")) {
                      return 0.5;
                    }
                    if (target.hasSkillTag('nofire')) return 0;
                    let eff = get.damageEffect(target, player, player, 'fire') / get.attitude(player, target);
                    if (player.hasSkill("jlsg_lianti")) {
                      eff *= 2;
                    }
                    return eff;
                  }
                }
              },
            },
            jlsg_fengying: {
              audio: "ext:极略:2",
              trigger: { player: 'drawBegin' },
              getIndex(event) {
                return event.num;
              },
              filter(event, player) {
                return player.getHistory('useSkill', e => e.skill == 'jlsg_fengying').length < 4;
              },
              direct: true,
              async content(event, trigger, player) {
                const sha = get.autoViewAs({ name: 'sha', nature: 'thunder', isCard: true }, []);
                const { result } = await player.chooseUseTarget(
                  "nodistance",
                  get.prompt2("jlsg_fengying"),
                  sha,
                  false,
                )
                  .set("logSkill", "jlsg_fengying")
                if (result.bool) --trigger.num;
              }
            },
            jlsg_zhiti: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin2' },
              filter(event, player) {
                if (event.player == player) {
                  return false;
                }
                return event.player.getStorage('jlsg_zhiti').length < 5;
              },
              direct: true,
              content() {
                'step 0'
                event._options = [
                  '取其1点体力和体力上限',
                  '取其摸牌阶段的一摸牌数',
                  '取其一个技能',
                  '令其不能使用装备牌',
                  '令其翻面',
                ];
                event.options = event._options.filter(c => !trigger.player.getStorage(event.name).includes(c));
                event.skills = trigger.player.getSkills(null, false, false).filter(i => {
                  let info = get.info(i);
                  if (!info) return false;
                  return !info.persevereSkill && !info.charlotte;
                })
                if (!event.skills.length) {
                  event.options.remove(event._options[2]);
                }
                player.chooseControlList(get.prompt(event.name, trigger.player), event.options, function () {
                  return Math.floor(Math.random() * _status.event.parent.options.length);
                });
                'step 1'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, trigger.player);
                event.choice = event.options[result.index];
                trigger.player.storage[event.name] = trigger.player.getStorage(event.name).concat(event.choice);
                game.log(player, '选择' + event.choice);
                switch (event.choice) {
                  case event._options[0]:
                    trigger.player.loseHp();
                    trigger.player.loseMaxHp();
                    break;
                  case event._options[1]:
                    trigger.player.addSkill('jlsg_zhiti2');
                    trigger.player.storage.jlsg_zhiti2 = (trigger.player.storage.jlsg_zhiti2 || 0) - 1;
                    break;
                  case event._options[2]:
                    player.chooseControl(event.skills)
                      .set("ai", () => Math.random())
                      .set("prompt", `获取${get.translation(trigger.player)}一个技能`);
                    break;
                  case event._options[3]:
                    trigger.player.addSkill('jlsg_zhiti3');
                    break;
                  case event._options[4]:
                    trigger.player.turnOver();
                    break;

                  default:
                    break;
                }
                'step 2'
                switch (event.choice) {
                  case event._options[0]:
                    player.gainMaxHp();
                    player.recover();
                    break;
                  case event._options[1]:
                    player.addSkill('jlsg_zhiti2');
                    player.storage.jlsg_zhiti2 = (player.storage.jlsg_zhiti2 || 0) + 1;
                    break;
                  case event._options[2]:
                    trigger.player.removeSkills(result.control);
                    player.addSkills(result.control);
                    break;

                  default:
                    break;
                }
                'step 3'
                game.delayx();
              },
            },
            jlsg_zhiti2: {
              charlotte: true,
              mark: true,
              trigger: { player: 'phaseDrawBegin' },
              forced: true,
              filter: function (event, player) {
                return !event.numFixed;
              },
              content: function () {
                trigger.num += player.storage.jlsg_zhiti2;
                if (trigger.num < 0) {
                  trigger.num = 0;
                }
              },
              intro: {
                content: function (storage, player) {
                  if (player.storage.jlsg_zhiti2 > 0) {
                    return '摸牌阶段的额定摸牌数+' + player.storage.jlsg_zhiti2;
                  }
                  return '摸牌阶段的额定摸牌数-' + (-player.storage.jlsg_zhiti2);
                },
                markcount: function (storage, player) {
                  return Math.abs(player.storage.jlsg_zhiti2);
                }
              },
              ai: {
                halfneg: true,
              }
            },
            jlsg_zhiti3: {
              intro: {
                content: '不能使用装备牌',
              },
              mark: true,
              mod: {
                cardEnabled: function (card, player) {
                  if (get.type(card) == 'equip') return false;
                },
              },
            },
            jlsg_huchi: {
              audio: "ext:极略:2",
              enable: 'phaseUse',
              viewAs: {
                name: 'juedou',
                isCard: true,
                storage: { nowuxie: true },
              },
              viewAsFilter: function (player) {
                return !player.hasSkill('jlsg_huchi_disable');
              },
              filterCard: () => false,
              selectCard: -1,
              group: ['jlsg_huchi2', 'jlsg_huchi3'],
              subSkill: {
                disable: {}
              }
            },
            jlsg_huchi2: {
              charlotte: true,
              silent: true,
              trigger: { global: 'damageEnd' },
              filter(event, player) {
                return event.card
                  && event.card.name == 'juedou'
                  && event.getParent().skill == 'jlsg_huchi';
              },
              content() {
                trigger.player.draw(3);
              },
            },
            jlsg_huchi3: {
              charlotte: true,
              silent: true,
              trigger: {
                player: 'useCardAfter',
                global: 'dying'
              },
              filter(event, player) {
                if (event.name == 'useCard') {
                  return event.card.name === 'juedou' && event.skill == 'jlsg_huchi'
                    && game.getGlobalHistory(
                      'changeHp',
                      e => e.getParent().name === 'damage' && e.getParent().card === event.card
                    ).length === 0;
                }
                return event.reason && event.reason.card && event.reason.card.name === 'juedou'
                  && event.reason.getParent().skill == 'jlsg_huchi';
              },
              content() {
                player.addTempSkill('jlsg_huchi_disable', 'phaseUseAfter');
              },
            },
            jlsg_xiejia: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin1' },
              filter: function (event, player) {
                if (!player.isEmpty(2)) return false;
                return event.card && (event.card.name == 'sha' || event.card.name == 'juedou') && event.notLink();
              },
              forced: true,
              content: function () {
                trigger.num += 1 + player.countMark('jlsg_xiejia');
              },
              group: 'jlsg_xiejia2',
              ai: {
                damageBonus: true,
                skillTagFilter: function (player) {
                  return player.isEmpty(2);
                }
              }
            },
            jlsg_xiejia2: {
              audio: 'jlsg_xiejia',
              trigger: {
                player: 'loseAfter',
                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
              },
              forced: true,
              filter: function (event, player) {
                var evt = event.getl(player);
                return evt && evt.es && evt.es.some(c => get.subtype(c) == 'equip2');
              },
              content() {
                player.addMark('jlsg_xiejia');
              }
            },
            jlsg_wangyue: {
              audio: "ext:极略:2",
              trigger: {
                global: ['loseAfter', 'loseAsyncAfter', 'loseHpAfter', 'loseMaxHpAfter'],
              },
              getIndex(event, player) {
                const name = event.name == "loseAsync" ? "lose" : event.name;
                if (name == "lose") return game.filterPlayer(current => {
                  return event.getl(current) && event.getl(current).cards2.length;
                }).sortBySeat(_status.currentPhase);
                return [event.player];
              },
              filter(event, player, triggername, target) {
                const name = event.name == "loseAsync" ? "lose" : event.name;
                const filterx = !player.hasHistory("useSkill", evt => {
                  if (evt.skill != "jlsg_wangyue") return false;
                  return evt.event._result.cost_data?.name == name;
                });
                if (!filterx) return false;
                if (name == 'lose') return event.type == 'discard';
                else if (name == 'loseHp') return game.hasPlayer(current => current.isDamaged());
                else return game.hasPlayer(current => current != target);
              },
              async cost(event, trigger, player) {
                let prompt = `望月:令一名角色`;
                const name = trigger.name == "loseAsync" ? "lose" : trigger.name;
                if (name == 'lose') prompt += `摸${trigger.getl(event.indexedData).cards2.length}张牌`;
                else if (name == 'loseHp') prompt += `回复${trigger.num}点体力`;
                else prompt += `加${trigger.num}点体力上限`;
                event.result = await player.chooseTarget(prompt)
                  .set("filterTarget", (_, player, target) => target != _status.event.source)
                  .set("ai", (target) => {
                    const player = get.player(),
                      name = get.event("key");
                    if (name == "lose") return get.effect(target, { name: "draw" }, player, player);
                    else if (name == "loseHp") return get.recoverEffect(target, player, player);
                    else return get.attitude(player, target);
                  })
                  .set("key", name)
                  .set("source", event.indexedData)
                  .forResult();
                event.result.cost_data = { name };
              },
              async content(event, trigger, player) {
                let target = event.targets[0];
                if (target.ai.shown > player.ai.shown) player.addExpose(0.2);
                let name = event.cost_data?.name;
                if (name == 'lose') await target.draw(trigger.num, player);
                else if (name == 'loseHp') await target.recover(trigger.num, player);
                else await target.gainMaxHp(trigger.num);
              },
            },
            jlsg_luoyan: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseJieshuBegin' },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name), (_, player, target) => !target.hasSkill('jlsg_luoyan2'))
                  .set('ai', (target, targets) => -get.attitude(_status.event.player, target) * (target.countCards('he') + 3));
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let target = result.targets[0];
                player.logSkill(event.name, target);
                if (target.ai.shown > player.ai.shown) {
                  player.addExpose(0.3);
                }
                target.addTempSkill('jlsg_luoyan2', { player: 'dieAfter' });
                if (player.storage.jlsg_luoyan && player.storage.jlsg_luoyan.hasSkill('jlsg_luoyan2')) {
                  player.storage.jlsg_luoyan.removeSkill('jlsg_luoyan2');
                }
                player.storage.jlsg_luoyan = target;
              },
            },
            jlsg_luoyan2: {
              intro: {
                name: '落雁',
                content: '被选择为了目标'
              },
              mark: true,
              trigger: { player: 'useCardAfter' },
              charlotte: true,
              silent: true,
              filter(event, player) {
                let evt = _status.event.getParent('phaseUse');
                if (evt.name != 'phaseUse' || evt.player != player) {
                  return false;
                }
                let evts = player.getHistory('useCard', e => e != event && e.getParent('phaseUse') == evt);
                return evts.length < 3;
              },
              content() {
                player.popup('jlsg_luoyan');
                let evt = _status.event.getParent('phaseUse');
                let cnt = player.getHistory('useCard', e => e.getParent('phaseUse') == evt).length;
                switch (cnt) {
                  case 1:
                    player.randomDiscard();
                    break;
                  case 2:
                    player.loseHp();
                    break;
                  case 3:
                    player.loseMaxHp();
                    break;
                }
              },
              mod: {
                aiOrder: function (player, card, num) {
                  let evt = _status.event.getParent('phaseUse');
                  if (evt.name == 'phaseUse' && evt.player == player) {
                    let cnt = player.getHistory('useCard', e => e.getParent('phaseUse') == evt).length;
                    if (cnt == 1 || cnt == 2 && !player.isDamaged()) {
                      return num - 10;
                    }
                  }
                },
              },
              ai: {
                pretao: true,
                nokeep: true,
              }
            },
            jlsg_jieying: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseDrawBegin1' },
              direct: true,
              unique: true,
              filter: function (event, player) {
                return !event.numFixed && game.filterPlayer(p => p != player && !p.countMark('jlsg_jieying')).length;
              },
              content() {
                'step 0'
                player.chooseTarget(get.prompt2(event.name), (_, p, target) => target != p && !target.countMark('jlsg_jieying'))
                  .set("ai", p => -get.attitude(_status.event.player, p));
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                trigger.changeToZero();

                result.targets[0].addMark(event.name, 3);
                // player.loseHp();
                // player.loseMaxHp();
                player.addExpose(3);
              },
              intro: {
                content: 'mark',
                name: '劫营',
                name2: '劫营',
              },
              marktext: "营",
              group: 'jlsg_jieying2',
              ai: {
                threaten: 6,
              }
            },
            jlsg_jieying2: {
              sourceSkill: "jlsg_jieying",
              audio: "jlsg_jieying",
              forced: true,
              locked: false,
              firstDo: true,
              trigger: { global: ['drawBefore', 'recoverBefore', 'gainMaxHpBefore', 'phaseBefore', 'changeSkillsBefore'] },
              filter(event, player) {
                if (!event.player.countMark('jlsg_jieying')) {
                  return false;
                }
                if (event.player == player) {
                  return false;
                }
                if (event.name == 'phase') {
                  return event.skill;
                }
                if (event.name == 'changeSkills') {
                  return event.addSkill.length
                    && !(
                      player.countMark('jlsg_jieying')
                      && game.hasPlayer(p => p != player && p.hasSkill('jlsg_jieying'))
                    );
                }
                return true;
              },
              logTarget: 'player',
              content() {
                if (trigger.name != 'changeSkills') {
                  trigger.player.removeMark('jlsg_jieying');
                  trigger.player = player;
                  event.finish();
                  return;
                }
                let changed = trigger.addSkill;
                trigger.addSkill = [];
                trigger.player.removeMark('jlsg_jieying');
                player.addSkills(changed);
              },
            },
            jlsg_jinlong: {
              audio: "ext:极略:2",
              intro: {
                content: 'expansion',
                markcount: 'expansion',
              },
              mod: {
                globalFrom: function (from, to, distance) {
                  var num = distance + from.getExpansions('jlsg_jinlong')
                    .map(c => {
                      let d = get.info(c).distance;
                      return d && d.globalFrom;
                    })
                    .reduce((a, b) => a + (b ? b : 0), 0);
                  return num;
                },
                globalTo: function (from, to, distance) {
                  var num = distance + to.getExpansions('jlsg_jinlong')
                    .map(c => {
                      let d = get.info(c).distance;
                      return d && d.globalTo;
                    })
                    .reduce((a, b) => a + (b ? b : 0), 0);
                  return num;
                },
              },
              trigger: {
                player: 'gainAfter',
                global: ['loseAfter', 'cardsDiscardAfter', 'loseAsyncAfter', 'equipAfter'],
              },
              forced: true,
              filter(event, player) {
                if (event.getg && event.getg(player)) return event.getg(player).some(c => c.name != "muniu" && get.type(c) == 'equip');
                if (event.name == "cardsDiscard") {
                  const evt = event.getParent().relatedEvent;
                  if (evt && evt.name != "judge") {
                    return event.cards.some(i => i.name != "muniu" && get.position(i, true) == "d" && get.type(i) == 'equip');
                  }
                } else {
                  if (event.getlx !== false) {
                    for (const target of game.filterPlayer2()) {
                      const evt = event.getl(target);
                      if (evt && (evt.cards2 || []).length) {
                        return evt.cards2.some(i => i.name != "muniu" && i.original != "j" && get.position(i, true) == "d" && get.type(i) == 'equip');
                      }
                    }
                  }
                }
                return false;
              },
              content() {
                let cards = [], gain = [];
                if (trigger.getg && trigger.getg(player)) {
                  gain = trigger.getg(player).filter(c => c.name != "muniu" && get.type(c) == 'equip');
                  player.addToExpansion(gain, "give").gaintag.add("jlsg_jinlong");
                }
                if (trigger.name == "cardsDiscard") {
                  const evt = trigger.getParent().relatedEvent;
                  if (evt && evt.name != "judge") {
                    cards.addArray(trigger.cards.filter(i => i.name != "muniu" && get.position(i, true) == "d" && get.type(i) == 'equip'));
                  }
                } else {
                  if (trigger.getlx !== false) {
                    for (const target of game.filterPlayer2()) {
                      const evt = trigger.getl(target);
                      if (evt && (evt.cards2 || []).length) {
                        cards.addArray((evt.cards2 || []).filter(i => i.name != "muniu" && i.original != "j" && get.position(i, true) == "d" && get.type(i) == 'equip'));
                      }
                    }
                  }
                }
                player.addToExpansion(cards, "gain2").gaintag.add(event.name);
                player.addAdditionalSkill(event.name, cards.addArray(gain).map(c => get.info(c).skills || []).flat(), true);
                player.draw(cards.concat(gain).unique().length);
              },
            },
            jlsg_liegong: {
              audio: "ext:极略:2",
              enable: 'chooseToUse',
              complexCard: true,
              locked: false,
              filterCard: function (card) {
                var suit = get.suit(card);
                for (var i = 0; i < ui.selected.cards.length; i++) {
                  if (get.suit(ui.selected.cards[i]) == suit) return false;
                }
                return true;
              },
              viewAsFilter: function (player) {
                let cnt = player.storage.jlsg_liegong_used ?? 0;
                return player.countCards('h') && cnt < (player.isDamaged() ? 2 : 1);
              },
              selectCard: [1, 4],
              viewAs: {
                name: 'sha',
                nature: 'fire',
                jlsg_liegong: true,
              },
              check: function (card) {
                var val = get.value(card);
                return 10 - val;
              },
              precontent() {
                "step 0"
                player.addTempSkill("jlsg_liegong_used");
                player.storage.jlsg_liegong_used++;
              },
              mod: {
                targetInRange: function (card, player) {
                  if (card.jlsg_liegong) return true;
                },
                cardUsable: function (card, player) {
                  if (card.jlsg_liegong) return Infinity;
                },
              },
              group: ['jlsg_liegong2', 'jlsg_liegong3'],
              subSkill: {
                used: {
                  init(player) {
                    player.storage.jlsg_liegong_used = 0;
                  },
                  onremove: true,
                  charlotte: true,
                  sub: true,
                },
              },
              ai: {
                fireDamage: true,
                directHit_ai: true,
              },
            },
            jlsg_liegong2: {
              sourceSkill: "jlsg_liegong",
              silent: true,
              charlotte: true,
              trigger: {
                player: 'useCard',
              },
              filter(event, player) {
                return event.card.name == "sha" && event.card.jlsg_liegong && event.cards;
              },
              content() {
                let cnt = trigger.cards.length;
                if (cnt >= 1) {
                  trigger.directHit.addArray(game.players);
                }
                if (cnt >= 2) {
                  player.when({ player: "useCardToAfter" })
                    .filter(evt => evt.parent == trigger)
                    .then(() => {
                      if (trigger.card.name == "sha" && trigger.card.jlsg_liegong && trigger.cards.length >= 2) {
                        player.draw(3);
                      }
                    })
                }
                if (cnt >= 3) {
                  trigger.baseDamage++;
                }
              }
            },
            jlsg_liegong3: {
              sourceSkill: "jlsg_liegong",
              silent: true,
              charlotte: true,
              trigger: {
                source: 'damageSource',
              },
              filter(event, player) {
                let skills = event.player.getSkills(null, false, false).filter(skill => {
                  var info = get.info(skill);
                  if (!info || get.is.empty(info) || info.charlotte) return false;
                  return true;
                });
                return event.card && event.card.name == "sha" && event.card.jlsg_liegong && event.notLink()
                  && event.cards.length >= 4 && skills.length;
              },
              content() {
                let skill = trigger.player.getSkills(null, false, false).filter(skill => {
                  var info = get.info(skill);
                  if (!info || get.is.empty(info) || info.charlotte) return false;
                  return true;
                }).randomGet();
                // TODO: make popup synced
                trigger.player.popup(skill, 'gray');
                trigger.player.removeSkills(skill);
              },
            },
            jlsg_xingwu: {
              marktext: "舞",
              intro: { content: "mark" },
              audio: "ext:极略:2",
              trigger: { global: "phaseBegin" },
              init(player) {
                player.storage.jlsg_xingwu_mark = {};
                for (let i of game.filterPlayer()) {
                  player.storage.jlsg_xingwu_mark[i.playerid] = i.countMark("jlsg_xingwu") || 0;
                };
              },
              filter(event, player) {
                return player.hasCard(card => get.suit(card, player) == "heart", "h");
              },
              async cost(event, trigger, player) {
                let str;
                if (!trigger.player.hasMark("jlsg_xingwu")) str = `星舞：是否弃置一张红桃，令${get.translation(trigger.player)}获得一枚“星舞”标记？`;
                else str = `星舞：是否弃置一张红桃，令${get.translation(trigger.player)}的一枚“星舞”标记移动给另一名角色或其再获得一枚“星舞”标记？`
                event.result = await player.chooseCardTarget({
                  source: trigger.player,
                  filterCard: (card, player) => get.suit(card, player) == "heart",
                  filterTarget: function (card, player, target) {
                    if (target == get.event("source")) return false;
                    return get.event("source").hasMark("jlsg_xingwu");
                  },
                  selectTarget() {
                    if (!get.event("source").hasMark("jlsg_xingwu")) return [0, 0];
                    else return [0, 1];
                  },
                  prompt: str,
                  targetprompt: "获得标记",
                  ai1(card) {
                    const player = get.player(),
                      source = get.event("source");
                    if (get.attitude(player, source) > 1) return get.value(card) < 9;
                    else return get.value(card) < (source.countMark("jlsg_xingwu") + 1) ^ 2;
                  },
                  ai2(target) {
                    const player = get.player(),
                      source = get.event("source");
                    if (get.attitude(player, source) > 1) return 0;
                    else return get.attitude(player, target) > 1;
                  }
                }).forResult();
                event.result.skill_popup = false;
              },
              async content(event, trigger, player) {
                event.skillstop = true;
                await player.logSkill("jlsg_xingwu", trigger.player);
                await player.discard(event.cards);
                if (event.targets) {
                  trigger.player.line(event.targets[0]);
                  trigger.player.removeMark("jlsg_xingwu", 1);
                  lib.skill.jlsg_xingwu.loseSkill(trigger.player);
                  player.storage.jlsg_xingwu_mark[trigger.player.playerid]--;
                  event.targets[0].addMark("jlsg_xingwu", 1);
                  await lib.skill.jlsg_xingwu.gainSkill(event.targets[0]);
                  player.storage.jlsg_xingwu_mark[event.targets[0].playerid]++;
                }
                else {
                  trigger.player.addMark("jlsg_xingwu", 1);
                  await lib.skill.jlsg_xingwu.gainSkill(trigger.player);
                  player.storage.jlsg_xingwu_mark[trigger.player.playerid]++;
                }
                const { result } = await player.chooseBool(`是否令${get.translation(trigger.player)}重新获得【星舞】的技能？`, () => Math.random() < 0.5);
                if (result.bool) {
                  let skills = trigger.player.storage.jlsg_xingwu_skill;
                  if (!skills) return;
                  await trigger.player.removeSkills(skills);
                  trigger.player.storage.jlsg_xingwu_skill = [];
                  await lib.skill.jlsg_xingwu.gainSkill(trigger.player, true, skills.length);
                }
              },
              get skills() {
                let skills = {};
                let players = game.players.concat(game.dead);
                for (let c of lib.jlsg.characterList) {
                  if (players.includes(c)) continue;
                  if (!get.character(c) || !get.character(c)[3]) continue;
                  let sex = get.character(c, 0);
                  skills[sex] = skills[sex] || [];
                  skills[sex].addArray(get.character(c)[3].filter(s => lib.skill[s] && !lib.skill[s].charlotte));
                }
                delete this.skills;
                this.skills = skills;
                return skills;
              },
              gainSkill(target, norecover, cnt = 1) {
                if (target.isDamaged() && !norecover) target.recover();
                let targetSkills = target.getSkills(null, false, false);
                let skills = [];
                for (let sex in lib.skill.jlsg_xingwu.skills) {
                  if (sex === target.sex) continue;
                  skills.addArray(lib.skill.jlsg_xingwu.skills[sex].filter(s => !targetSkills.includes(s)));
                }
                skills = skills.randomGets(cnt);
                if (!skills.length) return;
                target.storage.jlsg_xingwu_skill = target.storage.jlsg_xingwu_skill || [];
                target.storage.jlsg_xingwu_skill.addArray(skills);
                target.addSkills(skills);
              },
              loseSkill(target) {
                target.loseHp();
                let skills = [];
                let targetSkills = target.getSkills(null, false, false);
                for (let pack in lib.characterPack) {
                  for (let c in lib.characterPack[pack]) {
                    if (get.character(c, 0) != target.sex) continue;
                    skills.addArray(get.character(c)[3].filter(s => targetSkills.includes(s)));
                  }
                }
                let skill = skills.randomGet();
                if (skill) target.removeSkills(skill);
              },
              group: ["jlsg_xingwu_start", "jlsg_xingwu_effect"],
              subSkill: {
                start: {
                  audio: "jlsg_xingwu",
                  trigger: {
                    global: 'phaseBefore',
                    player: 'enterGame',
                  },
                  getIndex(event, player) {
                    const array = new Array(player.maxHp + 1)
                      .fill(player.maxHp + 1)
                      .map((v, i) => v - i);
                    return array;
                  },
                  prompt(event, player, name, num) {
                    let prompt = `是否发动<span class="yellowtext">星舞</span>？`;
                    if (num <= player.maxHp) prompt += `（可重复${num}次）`
                    return prompt;
                  },
                  filter: function (event, player) {
                    return (event.name != 'phase' || game.phaseNumber == 0);
                  },
                  check: () => true,
                  logTarget(event, player) {
                    return game.filterPlayer().sortBySeat(player);
                  },
                  content() {
                    game.filterPlayer().sortBySeat(player).forEach(p => {
                      p.addMark("jlsg_xingwu", 1);
                    });
                  },
                  sourceSkill: "jlsg_xingwu",
                },
                effect: {
                  trigger: {
                    player: ["useSkill", "logSkill"],
                  },
                  filter(event, player) {
                    let skill = event.sourceSkill || event.skill;
                    if (skill != "jlsg_xingwu" && !event.targets) return false;
                    if (event.skillstop) return false;
                    for (let i of event.targets) {
                      let num = player.storage.jlsg_xingwu_mark[i.playerid];
                      if (num != i.countMark("jlsg_xingwu")) return true;
                    };
                    return false;
                  },
                  charlotte: true,
                  direct: true,
                  async content(event, trigger, player) {
                    for (let i = 0; i < trigger.targets.length; i++) {
                      const target = trigger.targets[i],
                        num = player.storage.jlsg_xingwu_mark[target.playerid];
                      if (num == target.countMark("jlsg_xingwu")) continue;
                      else if (target.countMark("jlsg_xingwu") > num) {
                        while (player.storage.jlsg_xingwu_mark[target.playerid] < target.countMark("jlsg_xingwu")) {
                          await lib.skill.jlsg_xingwu.gainSkill(target);
                          player.storage.jlsg_xingwu_mark[target.playerid]++;
                        };
                      }
                      else {
                        while (player.storage.jlsg_xingwu_mark[target.playerid] > target.countMark("jlsg_xingwu")) {
                          await lib.skill.jlsg_xingwu.loseSkill(target);
                          player.storage.jlsg_xingwu_mark[target.playerid]--;
                        };
                      }
                    };
                  },
                  sourceSkill: "jlsg_xingwu",
                },
              },
            },
            jlsg_chenyu: {
              audio: "ext:极略:2",
              trigger: {
                player: ['phaseJieshuBegin', 'damageEnd'],
              },
              forced: true,
              content() {
                'step 0'
                event.targets = game.filterPlayer(p => p != player).sortBySeat();
                'step 1'
                let target = event.targets.shift();
                if (!target) {
                  game.delayx();
                  event.finish();
                  return;
                }
                let cards = target.getCards('h', c => get.suit(c) == 'heart');
                if (cards.length) {
                  player.gain(cards, target, 'bySelf');
                  target.$giveAuto(cards, player);
                }
                event.redo();
              },
            },
            jlsg_tiangong: {
              audio: "ext:极略:2",
              trigger: {
                global: 'phaseBefore',
                player: ['enterGame', 'phaseBegin', 'phaseEnd'],
              },
              getIndex(event) {
                if (event.name == 'phase' && game.phaseNumber == 0) return 2;
                return 1;
              },
              filter(event, player, triggerName) {
                return (triggerName != 'phaseBefore' || game.phaseNumber == 0)
                  && game.hasPlayer(p => p.getSkills(null, false, false).filter(s => s.startsWith('jlsg_tiangong_jiguan_')).length < 7);
              },
              check(event, player) {
                return true;
              },
              async content(event, trigger, player) {
                const skillCnt = _status.jlsg_tiangong_jiguanCount || 0;
                _status.jlsg_tiangong_jiguanCount = skillCnt + 1;
                game.broadcast(function (cnt) {
                  _status.jlsg_tiangong_jiguanCount = cnt;
                }, _status.jlsg_tiangong_jiguanCount);
                const skill = {
                  audio: 'jlsg_tiangong',
                  forced: true,
                  name: `jlsg_tiangong_jiguan_${skillCnt}`,
                  filter: function (event, player) {
                    if (this.extraFilter && !this.extraFilter(event, player)) return false;
                    return this.targetFilter(player).length;
                  },
                  logTarget: function (event, player) {
                    return this.targetFilter(player).sortBySeat();
                  },
                  async content(event, trigger, player) {
                    const targets = lib.skill[event.name].targetFilter(player).sortBySeat();
                    for (let target of targets) {
                      const next = game.createEvent("jlsg_tiangong_jiguan_event", false)
                        .set("player", target)
                        .setContent(lib.skill[event.name].effect);
                      await next;
                    };
                  },
                };
                const triggersList = [
                  '回合开始阶段，',
                  '判定阶段开始时，',
                  '摸牌阶段开始时，',
                  '出牌阶段开始时，',
                  '出牌阶段结束时，',
                  '弃牌阶段开始时，',
                  '弃牌阶段结束时，',
                  '回合结束阶段，',
                  '每回合限X次(X: 1-3)，当你的判定牌生效后，',
                  '每回合限X次(X: 1-3)，当你获得牌后，',
                  '每回合限X次(X: 1-3)，当你使用基本牌后，',
                  '每回合限X次(X: 1-3)，当你使用锦囊牌后，',
                  '每回合限X次(X: 1-3)，当你使用装备牌后，',
                  '每回合限X次(X: 1-3)，当你使用红色牌后，',
                  '每回合限X次(X: 1-3)，当你使用黑色牌后，',
                  '每回合限X次(X: 1-3)，当你成为非延时锦囊牌的目标后，',
                  '每回合限X次(X: 1-3)，当你失去装备区里的牌后，',
                  '每回合限X次(X: 1-3)，当你成为【杀】的目标时，',
                  '每回合限X次(X: 1-3)，当你成为【杀】的目标后，',
                  '每回合限X次(X: 1-3)，当你使用或打出【杀】时，',
                  '每回合限X次(X: 1-3)，当你使用或打出【闪】时，',
                  '每回合限X次(X: 1-3)，当你造成伤害时，',
                  '每回合限X次(X: 1-3)，当你造成伤害后，',
                  '每回合限X次(X: 1-3)，当你受到伤害时，',
                  '每回合限X次(X: 1-3)，当你受到伤害后，',
                  '每回合限X次(X: 1-3)，当你回复体力或加体力上限后，',
                  '每回合限X次(X: 1-3)，当你失去体力或减体力上限后，',
                  '每回合限X次(X: 1-3)，当你进入濒死状态时，',
                  '每回合限X次(X: 1-3)，当你脱离濒死状态后，',
                  '每回合限X次(X: 1-3)，当你获得技能后，',
                  '每回合限X次(X: 1-3)，当你失去技能后，',
                  '每回合限X次(X: 1-3)，当你横置/重置/翻面后，',
                ];
                let choices = triggersList.randomGets(3).map(s => s.replace(`每回合限X次(X: 1-3)`, `每回合限${Math.floor(event.getRand() * 3) + 1}次`));
                const { result: chooseTrigger } = await player.chooseControlList('请选择机关技能的发动时机', choices)
                  .set('ai', () => Math.floor(get.event().getRand() * _status.event.choiceList.length));
                if (chooseTrigger.control == "cancel2") return;
                let choice = choices[chooseTrigger.index];
                let skillInfo = '锁定技，' + choice;
                const match = choice.match(/每回合限(\d+)次，(.*)/);
                if (match) {
                  skill.cnt = parseInt(match[1]);
                  choice = match[2];
                }
                switch (choice) {
                  case '回合开始阶段，':
                    skill.trigger = { player: 'phaseZhunbeiBegin' };
                    break;
                  case '判定阶段开始时，':
                    skill.trigger = { player: 'phaseJudgeBegin' };
                    break;
                  case '摸牌阶段开始时，':
                    skill.trigger = { player: 'phaseDrawBegin' };
                    break;
                  case '出牌阶段开始时，':
                    skill.trigger = { player: 'phaseUseBegin' };
                    break;
                  case '出牌阶段结束时，':
                    skill.trigger = { player: 'phaseUseEnd' };
                    break;
                  case '弃牌阶段开始时，':
                    skill.trigger = { player: 'phaseDiscardBegin' };
                    break;
                  case '弃牌阶段结束时，':
                    skill.trigger = { player: 'phaseDiscardEnd' };
                    break;
                  case '回合结束阶段，':
                    skill.trigger = { player: 'phaseJieshuBegin' };
                    break;
                  case '当你的判定牌生效后，':
                    skill.trigger = { player: 'judgeEnd' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你获得牌后，':
                    skill.trigger = {
                      player: 'gainAfter',
                      global: 'loseAsyncAfter',
                    };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.getg && event.getg(player).length > 0;
                    };
                    break;
                  case '当你使用基本牌后，':
                    skill.trigger = { player: 'useCardAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.type(event.card) == 'basic';
                    };
                    break;
                  case '当你使用锦囊牌后，':
                    skill.trigger = { player: 'useCardAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.type2(event.card) == 'trick';
                    };
                    break;
                  case '当你使用装备牌后，':
                    skill.trigger = { player: 'useCardAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.type(event.card) == 'equip';
                    };
                    break;
                  case '当你使用红色牌后，':
                    skill.trigger = { player: 'useCardAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.color(event.card) == 'red';
                    };
                    break;
                  case '当你使用黑色牌后，':
                    skill.trigger = { player: 'useCardAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.color(event.card) == 'black';
                    };
                    break;
                  case '当你成为非延时锦囊牌的目标后，':
                    skill.trigger = { target: 'useCardToTargeted' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && get.type(event.card) == 'trick';
                    };
                    break;
                  case '当你失去装备区里的牌后，':
                    skill.trigger = {
                      player: 'loseAfter',
                      global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter', 'addToExpansionAfter'],
                    };
                    skill.extraFilter = function (event, player) {
                      if (player.getHistory('useSkill', e => e.skill == this.name).length >= this.cnt) return false;
                      const evt = event.getl(player);
                      return evt && evt.player == player && evt.es && evt.es.length > 0;
                    };
                    break;
                  case '当你成为【杀】的目标时，':
                    skill.trigger = { target: 'useCardToTarget' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.card.name == 'sha';
                    };
                    break;
                  case '当你成为【杀】的目标后，':
                    skill.trigger = { target: 'useCardToTargeted' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.card.name == 'sha';
                    };
                    break;
                  case '当你使用或打出【杀】时，':
                    skill.trigger = { player: ['useCard', 'respond'] };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.card.name == 'sha';
                    };
                    break;
                  case '当你使用或打出【闪】时，':
                    skill.trigger = { player: ['useCard', 'respond'] };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.card.name == 'shan';
                    };
                    break;
                  case '当你造成伤害时，':
                    skill.trigger = { source: 'damageBegin2' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你造成伤害后，':
                    skill.trigger = { source: 'damageSource' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    }; break;
                  case '当你受到伤害时，':
                    skill.trigger = { player: 'damageBegin3' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    }; break;
                  case '当你受到伤害后，':
                    skill.trigger = { player: 'damageEnd' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你回复体力或加体力上限后，':
                    skill.trigger = { player: ['recoverEnd', 'gainMaxHpEnd'] };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你失去体力或减体力上限后，':
                    skill.trigger = { player: ['loseHpEnd', 'loseMaxHpEnd'] };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你进入濒死状态时，':
                    skill.trigger = { player: 'dying' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你脱离濒死状态后，':
                    skill.trigger = { player: 'dyingAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  case '当你获得技能后，':
                    skill.trigger = { player: 'changeSkillsAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.addSkill.length;
                    };
                    break;
                  case '当你失去技能后，':
                    skill.trigger = { player: 'changeSkillsAfter' };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt
                        && event.removeSkill.length;
                    };
                    break;
                  case '当你横置/重置/翻面后，':
                    skill.trigger = { player: ['turnOverAfter', 'linkAfter'] };
                    skill.extraFilter = function (event, player) {
                      return player.getHistory('useSkill', e => e.skill == this.name).length < this.cnt;
                    };
                    break;
                  default:
                    console.error('jlsg_tiangong description not found', choice);
                    return;
                };
                choices = Object.keys(lib.skill.jlsg_tiangong.targetFilters);
                // safe guard
                if (!game.hasPlayer(p => p.hasSex('male'))) {
                  choices.remove('所有男性角色');
                }
                if (!game.hasPlayer(p => p.hasSex('female'))) {
                  choices.remove('所有女性角色');
                }
                for (let group of lib.group) {
                  if (!game.hasPlayer(p => p.group == group)) {
                    choices.remove(`所有${lib.translate[group]}势力角色`);
                  }
                };
                const targetFilters = choices.randomGets(3);
                // increae chance
                if (!targetFilters.includes('你') && Math.random() < 0.3) {
                  targetFilters[2] = '你';
                  targetFilters.randomSort();
                }
                else if (!targetFilters.includes('所有其他角色') && Math.random() < 0.3) {
                  targetFilters[2] = '所有其他角色';
                  targetFilters.randomSort();
                }
                const { result: chooseTargetFilter } = await player.chooseControlList(`###请选择机关技能的作用目标###${skillInfo}...`, targetFilters, true)
                  .set('ai', () => Math.floor(get.event().getRand() * _status.event.choiceList.length));
                if (chooseTargetFilter.control == "cancel2") return;
                choice = targetFilters[chooseTargetFilter.index];
                skillInfo += choice;
                skill.targetFilter = lib.skill.jlsg_tiangong.targetFilters[choice];
                if (!skill.targetFilter) {
                  console.error('jlsg_tiangong description not found', choice);
                  return;
                }
                choices = Object.keys(lib.skill.jlsg_tiangong.effects);
                if (skillInfo.includes('所有')) {
                  choices = choices.filter(c => !lib.skill.jlsg_tiangong.effects[c].multi);
                }
                const effects = choices.randomGets(3);
                const { result: chooseEffect } = await player.chooseControlList(`###请选择机关技能的作用效果###${skillInfo}...`, effects, true)
                  .set('ai', () => Math.floor(get.event().getRand() * _status.event.choiceList.length));
                if (chooseEffect.control == "cancel2") return;
                choice = effects[chooseEffect.index];
                skillInfo += choice + '。';
                const { content, positive, groupType = null } = lib.skill.jlsg_tiangong.effects[choice];
                if (!content) {
                  console.error('jlsg_tiangong description not found', content);
                  return;
                }
                skill.effect = content;
                skill.positive = positive;
                if (groupType) skill.groupType = groupType;
                const list = game.filterPlayer().reduce((arr, current) => {
                  arr.addArray(current.getSkills(null, false, false).filter(s => s.startsWith('jlsg_tiangong_jiguan_')).map(s => lib.translate[s]))
                  return arr.unique();
                }, []);
                const translate = lib.skill.jlsg_tiangong.skillName.filter(i => !list.includes(i)).randomGet();
                game.broadcastAll(
                  function (skill, name, translate, info) {
                    lib.skill[name] = skill;
                    lib.translate[name] = translate;
                    lib.translate[name + "_info"] = info
                  },
                  skill,
                  skill.name,
                  translate,
                  skillInfo
                );
                const { result: chooseTarget } = await player.chooseTarget(
                  `###请选择获得机关${lib.translate[skill.name]}技能的角色###${skillInfo}`,
                  (_, player, target) => target.getSkills(null, false, false).filter(s => s.startsWith('jlsg_tiangong_jiguan_')).length < 7,
                  true,
                )
                  .set('ai', target => {
                    const players = get.event("targetFilter")(target),
                      player = get.player();
                    return get.event("positive")(players, target, player);
                  })
                  .set('positive', positive)
                  .set('targetFilter', skill.targetFilter);
                if (!chooseTarget?.bool || !chooseTarget?.targets?.length) return;
                player.line(chooseTarget.targets[0]);
                await chooseTarget.targets[0].addSkills(skill.name);
              },
              get skillName() {
                let Heaven = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'],
                  Earth = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'],
                  result = [];
                for (let i of Heaven) {
                  for (let j of Earth) {
                    result.add(i + j);
                  };
                };
                delete this.skillName;
                this.skillName = result;
                return result;
              },
              get targetFilters() {
                let result = {
                  '你': (player) => [player],
                  '所有角色': (player) => game.filterPlayer(),
                  '所有其他角色': (player) => game.filterPlayer(p => p != player),
                  '所有男性角色': (player) => game.filterPlayer(p => p.hasSex('male')),
                  '所有女性角色': (player) => game.filterPlayer(p => p.hasSex('female')),
                  '随机一名角色': (player) => game.filterPlayer().randomGets(1),
                  '随机两名角色': (player) => game.filterPlayer().randomGets(2),
                  '随机三名角色': (player) => game.filterPlayer().randomGets(3),
                  '体力上限最多的角色': (player) => {
                    let v = Math.max(...game.filterPlayer().map(p => p.maxHp));
                    return game.filterPlayer(p => p.maxHp == v);
                  },
                  '体力上限最少的角色': (player) => {
                    let v = Math.min(...game.filterPlayer().map(p => p.maxHp));
                    return game.filterPlayer(p => p.maxHp == v);
                  },
                  '体力最多的角色': (player) => {
                    let v = Math.max(...game.filterPlayer().map(p => p.hp));
                    return game.filterPlayer(p => p.hp == v);
                  },
                  '体力最少的角色': (player) => {
                    let v = Math.min(...game.filterPlayer().map(p => p.hp));
                    return game.filterPlayer(p => p.hp == v);
                  },
                  '随机一名未受伤的角色': (player) => game.filterPlayer(p => p.isHealthy()).randomGets(1),
                  '随机两名未受伤的角色': (player) => game.filterPlayer(p => p.isHealthy()).randomGets(2),
                  '所有未受伤的角色': (player) => game.filterPlayer(p => p.isHealthy()),
                  '随机一名已受伤的角色': (player) => game.filterPlayer(p => p.isDamaged()).randomGets(1),
                  '随机两名已受伤的角色': (player) => game.filterPlayer(p => p.isDamaged()).randomGets(2),
                  '所有已受伤的角色': (player) => game.filterPlayer(p => p.isDamaged()),
                  '手牌最多的角色': (player) => {
                    let v = Math.max(...game.filterPlayer().map(p => p.countCards('h')));
                    return game.filterPlayer(p => p.countCards('h') == v);
                  },
                  '手牌最少的角色': (player) => {
                    let v = Math.min(...game.filterPlayer().map(p => p.countCards('h')));
                    return game.filterPlayer(p => p.countCards('h') == v);
                  },
                };
                for (let group of lib.group) {
                  result[`所有${lib.translate[group]}势力角色`] = (player) => game.filterPlayer(p => p.group == group);
                }
                delete this.targetFilters;
                this.targetFilters = result;
                return result;
              },
              get effects() {
                let result = {
                  '翻面': {
                    content: async function (event, trigger, player) { await player.turnOver() },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => {
                        let turnOver = current.isTurnedOver(),
                          att = get.attitude(viewer, current);
                        if (att > 0) {
                          if (turnOver) sum += 2;
                          else sum -= 1;
                        }
                        else {
                          if (turnOver) sum -= 1;
                          else sum += 2;
                        }
                        return sum;
                      }, 0);
                      return sumEff;
                    },
                  },
                  '进行【闪电】判定': {
                    content: async function (event, trigger, player) { await player.executeDelayCardEffect('shandian') },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.damageEffect(current, player, viewer, "thunder"), 0);
                      return sumEff;
                    },
                  },
                  '手牌上限+1': {
                    content: async function (event, trigger, player) { await lib.skill.jlsg_tiangong_handcard.change(player) },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                  },
                  '使用【杀】的次数上限+1': {
                    content: async function (event, trigger, player) { await lib.skill.jlsg_tiangong_useSha.change(player) },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                  },
                  '随机失去一个技能': {
                    content: async function (event, trigger, player) {
                      let skill = player.getSkills(null, false, false).randomGet();
                      if (skill) await player.removeSkills(skill);
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (-get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                  },
                  '视为使用【南蛮入侵】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'nanman' }, true) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "nanman" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '视为使用【桃园结义】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'taoyuan' }, true) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "taoyuan" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '视为使用【五谷丰登】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'wugu' }, true) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "wugu" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '视为使用【无中生有】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'wuzhong' }, true) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "wuzhong" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '视为使用【万箭齐发】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'wanjian' }, true) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "wanjian" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '视为使用【桃】': {
                    content: async function (event, trigger, player) { await player.chooseUseTarget({ name: 'tao' }, true) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "tao" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '对所有其他角色使用【杀】': {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'sha' }, game.filterPlayer(p => p != player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "sha" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '对所有其他角色使用火【杀】': {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'sha', nature: 'fire' }, game.filterPlayer(p => p != player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "sha", nature: "fire" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '对所有其他角色使用雷【杀】': {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'sha', nature: 'thunder' }, game.filterPlayer(p => p != player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "sha", nature: "thunder" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '对所有其他角色使用【决斗】': {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'juedou' }, game.filterPlayer(p => p != player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "juedou" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '对所有其他角色使用【顺手牵羊】': {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'shunshou' }, game.filterPlayer(p => p != player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "shunshou" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '从牌堆或弃牌堆随机获得两张红色牌': {
                    content: async function (event, trigger, player) {
                      let cards = Array.from(ui.cardPile.childNodes)
                        .concat(...ui.discardPile.childNodes)
                        .filter(c => get.color(c) == 'red')
                        .randomGets(2);
                      if (cards.length) {
                        await player.gain('gain2', cards);
                      }
                    },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "draw" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '从牌堆或弃牌堆随机获得两张黑色牌': {
                    content: async function (event, trigger, player) {
                      let cards = Array.from(ui.cardPile.childNodes)
                        .concat(...ui.discardPile.childNodes)
                        .filter(c => get.color(c) == 'black')
                        .randomGets(2);
                      if (cards.length) {
                        await player.gain('gain2', cards);
                      }
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "draw" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '从牌堆或弃牌堆随机获得两张基本牌': {
                    content: async function (event, trigger, player) {
                      let cards = Array.from(ui.cardPile.childNodes)
                        .concat(...ui.discardPile.childNodes)
                        .filter(c => get.type(c) == 'basic')
                        .randomGets(2);
                      if (cards.length) {
                        await player.gain('gain2', cards);
                      }
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "draw" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '从牌堆或弃牌堆随机获得两张锦囊牌': {
                    content: async function (event, trigger, player) {
                      let cards = Array.from(ui.cardPile.childNodes)
                        .concat(...ui.discardPile.childNodes)
                        .filter(c => get.type2(c) == 'trick')
                        .randomGets(2);
                      if (cards.length) {
                        await player.gain('gain2', cards);
                      }
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "draw" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '从牌堆或弃牌堆随机获得两张装备牌': {
                    content: async function (event, trigger, player) {
                      let cards = Array.from(ui.cardPile.childNodes)
                        .concat(...ui.discardPile.childNodes)
                        .filter(c => get.type(c) == 'equip')
                        .randomGets(2);
                      if (cards.length) {
                        await player.gain('gain2', cards);
                      }
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "draw" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '受到1点伤害': {
                    content: async function (event, trigger, player) { await player.damage('nosource') },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => get.damageEffect(current, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '受到1点火焰伤害': {
                    content: async function (event, trigger, player) { await player.damage('fire', 'nosource') },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.damageEffect(current, player, viewer, "fire"), 0);
                      return sumEff;
                    },
                  },
                  '受到1点雷电伤害': {
                    content: async function (event, trigger, player) { await player.damage('thunder', 'nosource') },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.damageEffect(current, player, viewer, "thunder"), 0);
                      return sumEff;
                    },
                  },
                  '对其他角色各造成1点伤害': {
                    content: async function (event, trigger, player) {
                      for (let target of game.filterPlayer(p => p != player).sortBySeat()) {
                        await target.damage(player)
                      };
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.damageEffect(current, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '加1点体力上限': {
                    content: async function (event, trigger, player) { await player.gainMaxHp() },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + get.attitude(viewer, current) * att, 0);
                      return sumEff;
                    },
                  },
                  '减1点体力上限': {
                    content: async function (event, trigger, player) { await player.loseMaxHp() },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum - (get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                  },
                  '回复1点体力': {
                    content: async function (event, trigger, player) {
                      if (player.isDamaged()) await player.recover();
                    },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.recoverEffect(current, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '回复2点体力': {
                    content: async function (event, trigger, player) {
                      if (player.isDamaged()) await player.recover(2);
                    },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + (get.recoverEffect(current, player, viewer) * 1.2), 0);
                      return sumEff;
                    },
                  },
                  '失去1点体力': {
                    content: async function (event, trigger, player) { await player.loseHp() },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "losehp" }, player, viewer), 0);
                      return sumEff;
                    },
                  },
                  '失去2点体力': {
                    content: async function (event, trigger, player) { await player.loseHp(2) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + (get.effect(current, { name: "losehp" }, player, viewer) * 1.2), 0);
                      return sumEff;
                    },
                  },
                  '失去1点体力然后摸五张牌': {
                    content: async function (event, trigger, player) {
                      await player.loseHp();
                      if (player.isIn()) await player.draw(5);
                    },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => {
                        let losehp = get.effect(current, { name: "losehp" }, player, viewer) * 1.2,
                          draw = get.effect(current, { name: "draw" }, player, viewer) * 1.4;
                        return sum + losehp + draw;
                      }, 0);
                      return sumEff;
                    },
                  },
                  '摸牌阶段摸牌数+1': {
                    content: async function (event, trigger, player) { await lib.skill.jlsg_tiangong_draw.change(player) },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                  },
                  '摸两张牌': {
                    content: async function (event, trigger, player) { await player.draw(2) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + (get.effect(current, { name: "draw" }, player, viewer) * 1.1), 0);
                      return sumEff;
                    },
                  },
                  '摸三张牌': {
                    content: async function (event, trigger, player) { await player.draw(3) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + (get.effect(current, { name: "draw" }, player, viewer) * 1.2), 0);
                      return sumEff;
                    },
                  },
                  '摸四张牌': {
                    content: async function (event, trigger, player) { await player.draw(4) },
                    positive(targets, player, viewer) {
                      let sumEff = targets.reduce((sum, current) => sum + (get.effect(current, { name: "draw" }, player, viewer) * 1.3), 0);
                      return sumEff;
                    },
                  },
                  '随机弃置两张牌': {
                    content: async function (event, trigger, player) {
                      let num = player.countDiscardableCards(player, "he");
                      if (num > 0) await player.randomDiscard(Math.min(num, 2));
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (-get.attitude(viewer, current) * att * 1.1), 0);
                      return sumEff;
                    },
                  },
                  '随机弃置三张牌': {
                    content: async function (event, trigger, player) {
                      let num = player.countDiscardableCards(player, "he");
                      if (num > 0) await player.randomDiscard(Math.min(num, 3));
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (-get.attitude(viewer, current) * att * 1.2), 0);
                      return sumEff;
                    },
                  },
                  '随机弃置四张牌': {
                    content: async function (event, trigger, player) {
                      let num = player.countDiscardableCards(player, "he");
                      if (num > 0) await player.randomDiscard(Math.min(num, 4));
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (-get.attitude(viewer, current) * att * 1.3), 0);
                      return sumEff;
                    },
                  },
                  '随机获得其他角色各一张牌': {
                    content: async function (event, trigger, player) {
                      const targets = game.filterPlayer(p => p != player).sortBySeat();
                      for (let target of targets) {
                        const cards = target.getGainableCards(player, "he");
                        if (cards.length) await player.gain(cards.randomGets(1), target, "giveAuto")
                      };
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(p => p != player && p.countGainableCards(player, "he")).sortBySeat();
                      let sumEff = targets.reduce((sum, current) => sum + Math.sign(get.effect(current, { name: "shunshou_copy2" }, player, viewer)), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '随机将所有手牌分配给其他角色': {
                    content: async function (event, trigger, player) {
                      let players = game.filterPlayer(p => p != player);
                      if (!players.length) return;
                      let dis = new Map();
                      let cards = player.getCards('h');
                      for (let c of cards) {
                        let target = players.randomGet();
                        if (!dis.has(target)) {
                          dis.set(target, []);
                        }
                        dis.get(target).push(c);
                      }
                      await game.loseAsync({
                        gain_list: Array.from(dis.entries()),
                        player: player,
                        cards: cards,
                        giver: player,
                        animate: 'giveAuto',
                      }).setContent('gaincardMultiple');
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      let sumEff = targets.reduce((sum, current) => sum + (-get.attitude(viewer, current) * att), 0);
                      return sumEff;
                    },
                    multi: true,
                  },
                  '与手牌数更少的随机角色交换手牌': {
                    content: async function (event, trigger, player) {
                      let target = game.filterPlayer(p => p.countCards('h') < player.countCards('h'))
                        .randomGet();
                      if (target) await player.swapHandcards(target);
                    },
                    positive(targets, player, viewer) {
                      let att = Math.sign(get.attitude(viewer, player));
                      targets = game.filterPlayer(p => p.countCards('h') < player.countCards('h'))
                      let sumEff = targets.reduce((sum, current) => sum + (get.attitude(viewer, current) * att * 1.3), 0);
                      return sumEff;
                    },
                  },
                  '弃置所有牌并摸等量的牌': {
                    content: async function (event, trigger, player) {
                      let cards = player.getDiscardableCards(player, 'he');
                      await player.discard(cards);
                      await player.draw(cards.length);
                    },
                    positive(targets, player, viewer) {
                      return Math.sign(get.attitude(viewer, player));
                    },
                  },
                };
                lib.skill.jlsgsy_bolue.initList();
                let groups = new Set(jlsg.characterList.map(c => get.character(c, 1)));
                for (let g of groups) {
                  result[`随机获得一个${lib.translate[g]}势力技能`] = {
                    content: async function (event, trigger, player) {
                      let skills = player.getSkills();
                      let skill = _status.jlsgsy_bolue_list[lib.skill[event.getParent().name]?.groupType]
                        .filter(s => !skills.includes(s)).randomGet();
                      player.popup(skill);
                      await player.addSkills(skill);
                    },
                    positive(targets, player, viewer) {
                      return Math.sign(get.attitude(viewer, player));
                    },
                    groupType: g,
                  };
                }
                let jlsg_qs = false;
                if (_status.connectMode) {
                  if (lib.configOL.cardPack.includes("jlsg_qs")) jlsg_qs = true;
                }
                else if (lib.config.cards.includes("jlsg_qs")) jlsg_qs = true;
                if (jlsg_qs) {
                  result['视为使用【望梅止渴】'] = {
                    content: async function (event, trigger, player) {
                      await player.chooseUseTarget({ name: 'jlsgqs_wangmeizhike' }, true);
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "jlsgqs_wangmeizhike" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  };
                  result['视为使用【草船借箭】'] = {
                    content: async function (event, trigger, player) {
                      await player.chooseUseTarget({ name: 'jlsgqs_caochuanjiejian' }, true)
                    },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer(current => current != player);
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "jlsgqs_caochuanjiejian" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  };
                  result['视为对自己使用【梅】'] = {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'jlsgqs_mei' }, player) },
                    positive(targets, player, viewer) {
                      targets = [player];
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "jlsgqs_mei" }, player, viewer), 0);
                      return sumEff;
                    },
                  };
                  result['视为对所有角色使用【梅】'] = {
                    content: async function (event, trigger, player) { await player.useCard({ name: 'jlsgqs_mei' }, game.filterPlayer().sortBySeat(player)) },
                    positive(targets, player, viewer) {
                      targets = game.filterPlayer();
                      let sumEff = targets.reduce((sum, current) => sum + get.effect(current, { name: "jlsgqs_mei" }, player, viewer), 0);
                      return sumEff;
                    },
                    multi: true,
                  };
                }
                delete this.effects;
                this.effects = result;
                return result;
              },
              subSkill: {
                handcard: {
                  charlotte: true,
                  change(player) {
                    player.addSkill('jlsg_tiangong_handcard');
                    player.addMark('jlsg_tiangong_handcard');
                    game.log(player, '的手牌上限', '#y+', '1');
                  },
                  mod: {
                    maxHandcard(player, num) {
                      var add = player.storage.jlsg_tiangong_handcard;
                      if (typeof add == 'number') return num + add;
                    },
                  },
                  markimage: 'image/card/handcard.png',
                  intro: {
                    content(num, player) {
                      return `手牌上限+${num}`;
                    },
                  },
                },
                useSha: {
                  charlotte: true,
                  change(player) {
                    player.addSkill('jlsg_tiangong_useSha');
                    player.addMark('jlsg_tiangong_useSha');
                    game.log(player, '使用【杀】次数上限', '#y+', '1');
                  },
                  mod: {
                    cardUsable(card, player, num) {
                      var add = player.storage.jlsg_tiangong_useSha;
                      if (card.name == "sha") return num + add;
                    },
                  },
                  marktext: '机',
                  intro: {
                    content(num, player) {
                      return `使用【杀】次数上限+${num}`;
                    },
                  },
                },
                draw: {
                  charlotte: true,
                  change(player) {
                    player.addSkill('jlsg_tiangong_draw');
                    player.addMark('jlsg_tiangong_draw');
                    game.log(player, '摸牌阶段摸牌数', '#y+', '1');
                  },
                  trigger: { player: 'phaseDrawBegin2' },
                  forced: true,
                  filter(event, player) {
                    return !event.numFixed && player.countMark('jlsg_tiangong_draw');
                  },
                  content() {
                    trigger.num += player.countMark('jlsg_tiangong_draw');
                  },
                  marktext: '机',
                  intro: {
                    content(num, player) {
                      return `摸牌阶段摸牌数+${num}`;
                    },
                  },
                },
              }
            },
            jlsg_linglong: {
              audio: "ext:极略:2",
              trigger: { player: ['damageBegin3', 'loseHpBefore', 'loseMaxHpBefore', 'changeSkillsBefore'] },
              filter: function (event, player) {
                if (event.name == 'damage') {
                  if (!event.source || event.source == player) return false;
                }
                else if (event.name == 'changeSkills') {
                  if (!event.removeSkill.length) return false;
                  if (event.getParent().name == 'jlsg_linglong') return false;
                  return lib.skill.jlsg_linglong.validTargets(player, event.removeSkill).length;
                }
                return lib.skill.jlsg_linglong.validTargets(player).length;
              },
              direct: true,
              content: function () {
                'step 0'
                var targets = lib.skill.jlsg_linglong.validTargets(player, trigger.removeSkill);
                const list = {};
                for (let target of targets) {
                  if (!list[target.playerid]) list[target.playerid] = {};
                  const skills = lib.skill.jlsg_linglong.validSkillsOthers(target);
                  for (let skill of skills) {
                    const { targetFilter, positive } = lib.skill[skill];
                    const targets = targetFilter(target);
                    let eff = positive(targets, target, player);
                    list[target.playerid][skill] = eff;
                  };
                };
                event.list = list;
                var prompt = `###${get.prompt(event.name)}###选择失去技能的角色`;
                if (trigger.name == 'changeSkills') {
                  prompt += `来抵消失去${trigger.removeSkill.map(s => `【${get.translation(s)}】`).join("")}`;
                } else {
                  let eff = {
                    "damage": "受到伤害",
                    "loseHp": "失去体力",
                    "loseMaxHp": "扣减体力上限",
                  }[trigger.name];
                  prompt += `来抵消或转移<span style="font-weight: bold;">${eff}</span>效果`;
                }
                player.chooseTarget(prompt, (_, player, target) => {
                  return _status.event.targets.includes(target);
                })
                  .set('ai', (target, targets) => 20 - Math.min(Object.values(get.event("choice")[target.playerid])))
                  .set('targets', targets)
                  .set("choice", list);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = result.targets[0];
                event.target = target;
                var skills;
                if (target == player) {
                  skills = lib.skill.jlsg_linglong.validSkillsSelf(target, trigger.removeSkill);
                } else {
                  skills = lib.skill.jlsg_linglong.validSkillsOthers(target);
                }
                if (!skills.length) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, target);
                if (skills.length == 1) {
                  event._result = {
                    bool: true,
                    links: skills,
                  };
                  return;
                }
                var next = player.chooseButton([
                  `玲珑:请选择${get.translation(target)}失去的技能`,
                  [skills.map(s => [s, get.translation(s)]), 'tdnodes'],
                ]).set('forced', true).set("ai", button => {
                  return 20 - get.event("choice")[button.link];
                }).set("choice", event.list[target.playerid]);
                if (trigger.name == 'changeSkills' && trigger.removeSkill.length > 1) {
                  next.set('selectButton', [1, trigger.removeSkill.length]);
                }
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var target = event.target;
                target.removeSkills(result.links);
                if (trigger.name != 'changeSkills') {
                  if (target == player) {
                    trigger.neutralize();
                  } else {
                    trigger.player = target;
                  }
                  event.finish();
                  return;
                }
                if (result.links.length >= trigger.removeSkill.length) {
                  event._result = {
                    bool: true,
                    links: trigger.removeSkill.slice(),
                  };
                  return;
                }
                var next = player.chooseButton([
                  `玲珑:请选择${get.translation(result.links.length)}个技能不被失去`,
                  [trigger.removeSkill.map(s => [s, get.translation(s)]), 'tdnodes'],
                ]);
                next.set('forced', true);
                next.set('selectButton', result.links.length);
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                trigger.removeSkill.removeArray(result.links);
                game.log(player, '失去', ...result.links.map(i => {
                  return '#g【' + get.translation(i) + '】';
                }), '技能的效果被抵消了');
                if (!trigger.addSkill.length && !trigger.removeSkill.length) {
                  trigger.neutralize();
                }
              },
              validSkillsSelf: function (player, ignoreSkills) {
                let skills = player.getSkills(null, false, false)
                  .removeArray(player.getStockSkills())
                  .filter(s => lib.translate[s] && lib.translate[s + '_info'] && lib.skill[s] && !lib.skill[s].charlotte);
                if (ignoreSkills) skills.removeArray(ignoreSkills);
                return skills;
              },
              validSkillsOthers: function (player) {
                return player.getSkills(null, false, false).filter(s => s.startsWith('jlsg_tiangong_jiguan_'));
              },
              validTargets: function (player, ignoreSkills) {
                let result = game.filterPlayer(p => p != player
                  && lib.skill.jlsg_linglong.validSkillsOthers(p).length
                );
                let skills = lib.skill.jlsg_linglong.validSkillsSelf(player, ignoreSkills);
                if (skills.length) result.push(player);
                return result;
              },
            },
            jlsg_bamen: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseUseBegin' },
              forced: true,
              async content(event, trigger, player) {
                await player.chooseToDiscard(true, 'h', player.countCards('h'));
                let list = [];
                for (let i = 0; i < ui.cardPile.childElementCount; i++) {
                  const card = ui.cardPile.childNodes[i];
                  const name = get.name(card, false);
                  if (list.some(c => get.name(c, false) === name)) {
                    if (name == "sha") {
                      if (list.some(c => c.name == "sha" && get.nature(card) === get.nature(c))) continue;
                    }
                    else continue;
                  }
                  list.add(card);
                  if (list.length >= 8) break;
                };
                if (list.length) await player.gain(list, "draw2");
                if (list.length < 8) {
                  const { result } = await player.chooseTarget(`八门：请选择一名其他角色受到${8 - list.length}点雷电伤害`, lib.filter.notMe)
                    .set('ai', target => get.damageEffect(target, _status.event.player, _status.event.player, 'thunder'));
                  if (result.bool && result.targets) await result.targets[0].damage("thunder", 8 - list.length);
                }
              },
            },
            jlsg_gucheng: {
              audio: "ext:极略:2",
              init(player) { player.storage.jlsg_gucheng = [] },
              onremove: true,
              mod: {
                aiOrder(player, card, num) {
                  if (!['basic', 'trick'].includes(get.type(card))) return;
                  let used = player.storage.jlsg_gucheng;
                  if (used.some(i => i.name == card.name)) {
                    if (card.name == "sha") {
                      if (used.some(i => i.name == "sha" && i.nature == get.nature(card))) return;
                    }
                    else return;
                  }
                  if (game.hasPlayer(cur => {
                    if (cur == player) return false;
                    player.storage.jlsg_gucheng_check = true;
                    if (-get.effect(player, card, cur, player) > player.getUseValue(card)) {
                      delete player.storage.jlsg_gucheng_check;
                      return true;
                    };
                    delete player.storage.jlsg_gucheng_check;
                    return false;
                  })) return 0;
                },
              },
              mark: true,
              intro: {
                content(_, player, skill) {
                  let used = player.storage.jlsg_gucheng;
                  if (!used.length) return '';
                  return '使用过：' + used.map(n => get.translation(n)).join(' ');
                },
              },
              trigger: {
                player: "useCard",
                global: 'useCardToPlayered',
              },
              firstDo: true,
              forced: true,
              popup: false,
              filter: function (event, player) {
                if (event.name == "useCardToPlayered") {
                  if (event.getParent().excluded.includes(player)) return false;
                  if (event.player == player) return false;
                  if (!(event._targets || event.targets).includes(player)) return false;
                }
                if (!['basic', 'trick'].includes(get.type(event.card))) return false;
                let card = { name: event.card.name, nature: get.nature(event.card) },
                  used = player.storage.jlsg_gucheng;
                if (card.name != "sha") return !used.some(i => i.name == card.name);
                return !used.some(i => i.name == "sha" && i.nature == card.nature);
              },
              async content(event, trigger, player) {
                if (trigger.name == "useCardToPlayered") {
                  await player.logSkill("jlsg_gucheng");
                  trigger.getParent().excluded.add(player);
                }
                else {
                  let card = { name: trigger.card.name, nature: get.nature(trigger.card) };
                  player.storage.jlsg_gucheng.add(card);
                  player.markSkill("jlsg_gucheng");
                }
              },
              ai: {
                effect: {
                  target: function (card, player, target, current) {
                    if (target.storage.jlsg_gucheng_check) return;
                    if (player != target && ['basic', 'trick'].includes(get.type(card))) {
                      let used = target.storage.jlsg_gucheng;
                      if (
                        card.name != "sha" && !used.some(i => i.name == card.name)
                        || card.name == "sha" && !used.some(i => i.name == "sha" && i.nature == card.nature)
                      ) return "zeroplayertarget";
                    }
                  },
                },
              },
            },
            jlsg_yingshi: {
              audio: "ext:极略:2",
              trigger: {
                global: "gameDrawAfter",
              },
              forced: true,
              unique: true,
              init(player) {
                player.storage.jlsg_yingshi = [];
              },
              content: function () {
                'step 0'
                var card = get.cardPile(card => get.type(card) == 'basic');
                if (card) {
                  player.gain(card, 'gain2');
                }
                'step 1'
                var cards = player.getCards('h', { type: 'basic' });
                player.addGaintag(cards, 'jlsg_yingshi_tag');
                player.storage.jlsg_yingshi.addArray(cards);
              },
              group: ['jlsg_yingshi2', 'jlsg_yingshi3', 'jlsg_yingshi_mark'],
              mod: {
                cardUsable: function (card, player) {
                  if (!card.cards || !card.cards.length) return;
                  for (var i of card.cards) {
                    if (!player.storage.jlsg_yingshi.includes(i)) return;
                  }
                  return Infinity;
                },
                targetInRange: function (card, player) {
                  if (!card.cards || !card.cards.length) return;
                  for (var i of card.cards) {
                    if (!player.storage.jlsg_yingshi.includes(i)) return;
                  }
                  return true;
                }
              },
              subSkill: {
                mark: {
                  trigger: {
                    global: ['gainEnd', 'loseAsyncEnd']
                  },
                  firstDo: true,
                  silent: true,
                  filter(event, player) {
                    for (let p of game.filterPlayer()) {
                      let cards = event.getg(p)
                        .filter(
                          c => !c.hasGaintag('jlsg_yingshi_tag') && player.storage.jlsg_yingshi.includes(c)
                        );
                      if (cards.length) {
                        return true;
                      }
                    }
                    return false;
                  },
                  content() {
                    for (let p of game.filterPlayer()) {
                      let cards = trigger.getg(p).filter(
                        c => !c.hasGaintag('jlsg_yingshi_tag') && player.storage.jlsg_yingshi.includes(c)
                      );
                      if (cards.length) {
                        p.addGaintag(cards, 'jlsg_yingshi_tag');
                      }
                    }
                  },
                }
              },
            },
            jlsg_yingshi2: {
              audio: 'jlsg_yingshi',
              // usable: 1,
              trigger: {
                player: 'gainAfter',
                global: 'loseAsyncAfter',
              },
              forced: true,
              filter(event, player) {
                var cards = event.getg(player);
                var used = player.storage.jlsg_yingshi2_used || new Set();
                var cards2 = game.filterPlayer(p => p != player && !used.has(p)).map(
                  p => event.getl(p).cards2
                ).flat();
                cards = cards.filter(c => cards2.includes(c));
                return cards.every(c => get.type(c) == 'basic') && cards.some(c => !player.storage.jlsg_yingshi.includes(c));
              },
              content() {
                game.log(player, "获得的牌被标记为了", `#r"鹰"`);
                var cards = trigger.getg(player);
                player.addTempSkill('jlsg_yingshi2_used');
                var used = player.storage.jlsg_yingshi2_used;
                for (let target of game.filterPlayer(p => p != player && !used.has(p))) {
                  var cards2 = trigger.getl(target).cards2;
                  var targetCards = cards.filter(c => cards2.includes(c) && !player.storage.jlsg_yingshi.includes(c));
                  if (targetCards.length) {
                    used.add(target);
                    player.addGaintag(targetCards, 'jlsg_yingshi_tag');
                    player.storage.jlsg_yingshi.addArray(targetCards);
                  }
                }
              },
            },
            jlsg_yingshi2_used: {
              init(player) {
                player.storage.jlsg_yingshi2_used = new Set();
              },
              onremove: true,
            },
            jlsg_yingshi3: {
              audio: 'jlsg_yingshi',
              trigger: {
                global: 'phaseEnd',
              },
              forced: true,
              filter(event, player) {
                var cards = ['cardPile', 'discardPile']
                  .map(pos => Array.from(ui[pos].childNodes))
                  .flat()
                  .filter(c => player.storage.jlsg_yingshi.includes(c));
                if (cards.length) {
                  return true;
                }
                for (let p of game.filterPlayer(p => p != player)) {
                  let pCards = p.getCards('h', c => player.storage.jlsg_yingshi.includes(c));
                  if (pCards.length) {
                    return true;
                  }
                }
                return false;
              },
              content() {
                var cards = ['cardPile', 'discardPile']
                  .map(pos => Array.from(ui[pos].childNodes))
                  .flat()
                  .filter(c => player.storage.jlsg_yingshi.includes(c));
                if (cards.length) {
                  player.$gain2(cards);
                }
                for (let p of game.filterPlayer(p => p != player)) {
                  let pCards = p.getCards('h', c => player.storage.jlsg_yingshi.includes(c));
                  if (pCards.length) {
                    p.$give(pCards, player);
                    cards.addArray(pCards);
                  }
                }
                game.loseAsync({
                  gain_list: [[player, cards]],
                  cards: cards,
                  visible: true,
                  gaintag: ['jlsg_yingshi_tag'],
                }).setContent("gaincardMultiple");
              },
            },
            jlsg_langxi: {
              init(player) {
                player.storage.jlsg_langxi = [];
              },
              audio: "ext:极略:2",
              trigger: {
                global: "phaseBefore",
                player: "enterGame",
              },
              filter(event, player) {
                return event.name != "phase" || game.phaseNumber == 0;
              },
              direct: true,
              content() {
                'step 0'
                var cardNames = lib.inpile
                  .filter(c => {
                    let info = lib.card[c];
                    return info.type == 'trick' && !info.notarget && !info.singleCard && info.content;
                  });
                if (!cardNames.length) {
                  event.finish();
                  return;
                }
                var choice;
                var fakeTarget = game.filterPlayer(p => get.attitude(player, p) <= 0).randomGet();
                if (fakeTarget) {
                  choice = cardNames.filter(c => get.effect(fakeTarget, { name: c }, player, player) > 0).randomGet();
                }
                if (!choice) {
                  choice = cardNames.randomGet();
                }
                player.chooseButton([get.prompt(event.name), [cardNames, "vcard"]])
                  .set('ai', (button) => button.link[2] == _status.event.choice ? 1 : 0)
                  .set('choice', choice);
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                var name = result.links[0][2];
                game.log(player, "将", `#y${lib.translate[name]}`, "标记为", `#r"狼"`);
                player.markAuto("jlsg_langxi", [name]);
              },
              intro: { content: "已记录：$" },
              group: ['jlsg_langxi2', 'jlsg_langxi3'],
            },
            jlsg_langxi2: {
              audio: "jlsg_langxi",
              trigger: { player: "useCard" },
              filter: function (event, player) {
                if (get.type(event.card) != 'trick') {
                  return false;
                }
                if (player.getStorage('jlsg_langxi').includes(event.card.name)) {
                  return false;
                }
                let info = get.info(event.card);
                if (info.type != 'trick' || info.notarget || info.singleCard || !info.content) {
                  return false;
                }
                let cards = player
                  .getHistory("lose", evt => evt.getParent() == event)
                  .map(e => e.hs)
                  .flat();
                if (!event.cards.length || event.cards.some(c => !cards.includes(c))) {
                  return false;
                }
                return true;
              },
              check(event, player) {
                var fakeTarget = game.filterPlayer(p => get.attitude(player, p) <= 0).randomGet();
                if (!fakeTarget) {
                  return false;
                }
                return get.effect(fakeTarget, { name: event.card.name }, player, player) > 0;
              },
              prompt2(event, player) {
                return `将【${lib.translate[event.card.name]}】标记为"狼"`
              },
              content() {
                game.log(player, "将", `#y${lib.translate[trigger.card.name]}`, "标记为", `#r"狼"`);
                player.markAuto("jlsg_langxi", [trigger.card.name]);
              },
            },
            jlsg_langxi3: {
              audio: "jlsg_langxi",
              trigger: { player: "useCardAfter" },
              filter: function (event, player) {
                if (get.type(event.card) != 'trick') {
                  return false;
                }
                if (!player.getStorage('jlsg_langxi').length) {
                  return false;
                }
                let info = get.info(event.card);
                if (info.type != 'trick' || info.notarget || info.singleCard || !info.content) {
                  return false;
                }
                let cards = player
                  .getHistory("lose", evt => evt.getParent() == event)
                  .map(e => e.hs)
                  .flat();
                if (!event.cards.length || event.cards.some(c => !cards.includes(c))) {
                  return false;
                }
                return event.targets.length;
              },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(
                  `###${get.prompt(event.name)}###对任意名目标角色依次使用"狼"`,
                  (_, player, target) => _status.event.targets.includes(target),
                  [1, trigger.targets.length],
                )
                  .set('targets', trigger.targets)
                  .set('ai', (target) => {
                    let player = _status.event.player;
                    return player.getStorage('jlsg_langxi')
                      .map(c => get.effect(target, { name: c }, player, player))
                      .reduce((a, b) => a + b, 0);
                  })
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name, result.targets);
                event.targets = result.targets;
                event.cards = player.getStorage('jlsg_langxi').slice().randomSort();
                'step 2'
                var card = { name: event.cards.pop() };
                var targets = event.targets.filter(p => p.isIn() && lib.filter.targetEnabled2(card, player, p));
                player.useCard(card, targets);
                'step 3'
                if (player.isIn() && event.cards.length) {
                  event.goto(2);
                }
              },
            },
            jlsg_shenyin: {
              audio: "ext:极略:2",
              priority: 1,
              trigger: {
                global: "phaseBefore",
                player: "enterGame",
                source: "dieAfter",
              },
              filter(event, player) {
                if (event.name == 'die') {
                  return event.player != player;
                }
                return event.name != "phase" || game.phaseNumber == 0;
              },
              forced: true,
              content() {
                player.addMark('jlsg_shenyin');
              },
              marktext: '隐',
              intro: {
                name: '神隐',
                name2: '隐',
                content: function (storage, player) {
                  let result = ``;
                  if (storage > 0) {
                    result += '共有' + storage + '个标记<br>';
                  }
                  if (player.storage.jlsg_shenyin2) {
                    let { hp, maxHp, skills, jlsg_yingshi, jlsg_langxi } = player.storage.jlsg_shenyin2;
                    result += '记录：';
                    let div = ui.create.div('.hp');
                    div.style.width = 'auto';
                    div.style.left = 'auto';
                    div.style.top = 'auto';
                    div.style.verticalAlign = 'middle';
                    let condition;
                    if (hp == 0) {
                      condition = '';
                    } else if (hp > Math.round(maxHp / 2) || hp === maxHp) {
                      condition = 'high';
                    } else if (hp > Math.floor(maxHp / 3)) {
                      condition = 'mid';
                    } else {
                      condition = 'low';
                    }
                    div.dataset.condition = condition;
                    for (let i = 0; i != hp; ++i) {
                      ui.create.div('', div);
                    }
                    for (let i = hp; i < maxHp; ++i) {
                      ui.create.div('.lost', div);
                    }
                    result += div.outerHTML + '<br>';
                    result += `技能：` + skills.map(s => get.translation(s)) + '<br';
                    if (jlsg_yingshi) {
                      result += `鹰：` + jlsg_yingshi.length;
                    }
                    if (jlsg_langxi) {
                      result += `狼：` + jlsg_langxi.map(c => get.translation(c)).join(' ');
                    }
                  }
                  return result;
                },
              },
              group: ['jlsg_shenyin2', 'jlsg_shenyin3'],
              onremove: function (player, skill) {
                if (lib.skill.jlsg_shenyin3.filter(_status.event, player)) {
                  var next = game.createEvent("jlsg_shenyin3");
                  // event.next.remove(next);
                  // var evt = event.getParent();
                  // evt.after.push(next);
                  next.player = player;
                  next.setContent(lib.skill.jlsg_shenyin3.content);
                }
              },
            },
            jlsg_shenyin2: {
              audio: 'jlsg_shenyin',
              trigger: { player: 'phaseBegin' },
              filter(event, player) {
                return player.countMark('jlsg_shenyin');
              },
              check(event, player) {
                if (!player.storage.jlsg_shenyin2) {
                  return true;
                }
                let stored = player.storage.jlsg_shenyin2;
                let value = Math.sign(player.hp - stored.hp)
                  + Math.sign(player.maxHp - stored.maxHp)
                  + Math.sign(player.getSkills(null, false, false).length - stored.skills.length)
                  + Math.sign((player.storage.jlsg_yingshi || []).length - (stored.jlsg_yingshi || []).length)
                  + Math.sign((player.storage.jlsg_langxi.length || []) - (stored.jlsg_langxi || []).length);
                return value - 0.5 + Math.random() > 0;
              },
              prompt2: '记录你当前的体力、体力上限、技能、“鹰”和“狼”，然后获得一枚「神隐」标记',
              content() {
                player.storage.jlsg_shenyin2 = {
                  hp: player.hp,
                  maxHp: player.maxHp,
                  skills: player.getSkills(null, false, false),
                  jlsg_yingshi: player.storage.jlsg_yingshi,
                  jlsg_langxi: player.storage.jlsg_langxi,
                }
                player.addMark('jlsg_shenyin');
              },
            },
            jlsg_shenyin3: {
              audio: 'jlsg_shenyin',
              trigger: { player: 'dyingBegin' },
              filter(event, player) {
                return player.countMark('jlsg_shenyin') && player.storage.jlsg_shenyin2;
              },
              locked: true,
              direct: true,
              content() {
                'step 0'
                player.chooseBool(`###${get.prompt(event.name)}###弃置所有「神隐」标记并恢复至记录的状态`, player.hp <= -1 || player.canSave(player));
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                event.cnt = player.countMark('jlsg_shenyin');
                player.removeMark('jlsg_shenyin', event.cnt, true);
                var stored = player.storage.jlsg_shenyin2;
                if (stored.maxHp > player.maxHp) {
                  player.gainMaxHp(stored.maxHp - player.maxHp);
                }
                if (stored.maxHp < player.maxHp) {
                  player.loseMaxHp(player.maxHp - stored.maxHp);
                }
                if (stored.hp != player.hp) {
                  player.changeHp(stored.hp - player.hp);
                }
                player.changeSkills(stored.skills, player.getSkills(null, false, false));
                'step 2'
                var stored = player.storage.jlsg_shenyin2;
                if (player.hasSkill('jlsg_yingshi') && !game.hasPlayer(p => p != player && p.hasSkill('jlsg_yingshi'))) {
                  for (let c of player.storage.jlsg_yingshi || []) {
                    if (!stored.jlsg_yingshi || !stored.jlsg_yingshi.includes(c)) {
                      let owner = get.owner(c);
                      c && c.removeGaintag(c, 'jlsg_yingshi_tag');;
                    }
                  }
                  for (let c of stored.jlsg_yingshi || []) {
                    if (!player.storage.jlsg_yingshi || !player.storage.jlsg_yingshi.includes(c)) {
                      let owner = get.owner(c);
                      c && c.addGaintag(c, 'jlsg_yingshi_tag');;
                    }
                  }
                }
                player.storage.jlsg_yingshi = stored.jlsg_yingshi;
                player.storage.jlsg_langxi = stored.jlsg_langxi;
                player.markAuto('jlsg_langxi');
                'step 3'
                if (player.isIn()) {
                  player.draw(2 * event.cnt);
                }
              },
              ai: {
                save: true,
                skillTagFilter: function (player, tag, target) {
                  if (player != target
                    || !player.countMark('jlsg_shenyin')
                    || !player.storage.jlsg_shenyin2
                    || _status.event.name === 'jlsg_shenyin3') return false;
                },
              }
            },
            jlsg_chuyuan: {
              audio: "ext:极略:2",
              marktext: "储",
              intro: {
                markcount: "expansion",
                mark(dialog, content, player) {
                  var content = player.getExpansions("jlsg_chuyuan");
                  if (content && content.length) {
                    if (player == game.me || player.isUnderControl()) {
                      dialog.addAuto(lib.skill.jlsg_chuyuan.prompt2(null, player))
                      dialog.addAuto(content);
                    } else {
                      return "共有" + get.cnNumber(content.length) + "张储";
                    }
                  }
                },
                content(content, player) {
                  var content = player.getExpansions("jlsg_chuyuan");
                  if (content && content.length) {
                    if (player == game.me || player.isUnderControl()) {
                      return `${lib.skill.jlsg_chuyuan.prompt2(null, player)}<br>${get.translation(content)}`;
                    }
                    return "共有" + get.cnNumber(content.length) + "张储";
                  }
                },
              },
              trigger: { global: "useCardAfter" },
              filter(event) {
                return ["sha", "shan"].includes(get.name(event.card));
              },
              prompt(event, player) {
                const color = event.card.name == "sha" ? "黑" : "红";
                return `储元：是否摸两张牌，然后可以将一张${color}色牌至于武将牌上称为“储”？`
              },
              prompt2(event, player) {
                const cards = player.getExpansions("jlsg_chuyuan"),
                  black = cards.filter(i => get.color(i) == "black").length,
                  red = cards.filter(i => get.color(i) == "red").length;
                let str1 = `<span style='color:#000000' data-nature='graymm'>${black}</span>`,
                  str2 = `<span style='color:#FF0000' data-nature='watermm'>${red}</span>`;
                return `<div class='center text'>当前“储”：${cards.length}（${str1}|${str2}）</div>`;
              },
              check(event, player) {
                return get.effect(player, { name: "draw" }, player, player) + 1;
              },
              async content(event, trigger, player) {
                await player.draw(2);
                const color = trigger.card.name == "sha" ? ["black", "黑"] : ["red", "红"];
                if (!player.countCards("he", c => get.color(c, player) == color[0])) return;
                else {
                  let str = lib.skill.jlsg_chuyuan.prompt2(trigger, player);
                  const { result: { bool, cards } } = await player
                    .chooseCard("he", `###储元：请选择一张${color[1]}色牌置于武将牌上称为“储”###${str}`)
                    .set("color", color)
                    .set("filterCard", (card, player, event) => get.color(card, player) == get.event("color")[0])
                    .set("ai", card => {
                      const player = get.player();
                      return 8 - get.value(card, player);
                    })
                  if (!bool) return;
                  await player.addToExpansion(player, cards, "giveAuto").set("gaintag", "jlsg_chuyuan");
                  player.markSkill("jlsg_chuyuan");
                  player.update();
                  game.asyncDelayx();
                }
              },
              group: "jlsg_chuyuan_effect",
              subSkill: {
                effect: {
                  mod: {
                    maxHandcard(player, num) {
                      const cards = player.getExpansions("jlsg_chuyuan"),
                        black = cards.filter(i => get.color(i) == "black").length,
                        red = cards.filter(i => get.color(i) == "red").length;
                      let eff = Math.min(black, red);
                      return num + eff;
                    },
                  },
                  trigger: { player: "phaseDrawBegin1" },
                  filter(event, player) {
                    const cards = player.getExpansions("jlsg_chuyuan"),
                      black = cards.filter(i => get.color(i) == "black").length,
                      red = cards.filter(i => get.color(i) == "red").length;
                    let num = Math.min(black, red);
                    return !event.fixed && num > 0;
                  },
                  forced: true,
                  popup: false,
                  content() {
                    const cards = player.getExpansions("jlsg_chuyuan"),
                      black = cards.filter(i => get.color(i) == "black").length,
                      red = cards.filter(i => get.color(i) == "red").length;
                    let num = Math.min(black, red);
                    trigger.num += num;
                  },
                },
              },
            },
            jlsg_dengji: {
              audio: "ext:极略:2",
              intro: {
                nocount: true,
                content: "limited",
              },
              derivation: ["jlsg_renzheng", "jlsg_jiquan"],
              trigger: { player: "phaseZhunbeiBegin" },
              filter(event, player) {
                let num = player.countExpansions("jlsg_chuyuan");
                return num % 2 != 0 && num >= 5;
              },
              juexingji: true,
              limited: true,
              skillAnimation: true,
              forced: true,
              async content(event, trigger, player) {
                player.awakenSkill("jlsg_dengji");
                const cards = player.getExpansions("jlsg_chuyuan"),
                  black = cards.filter(i => get.color(i) == "black").length,
                  red = cards.filter(i => get.color(i) == "red").length;
                const num = Math.min(black, red);
                await player.gain(player, cards, "giveAuto", true);
                player.disableSkill("jlsg_dengji_awake", "jlsg_chuyuan");
                if (num == black) await player.addSkills(["jlsg_renzheng"]);
                else await player.addSkills(["jlsg_jiquan"]);
                const characters = lib.skill.jlsg_dengji.getCharacters();
                var skills = [];
                for (const name of characters) {
                  if (!get.character(name)) continue;
                  const skills2 = get.character(name)[3];
                  if (!skills2 || !skills2.length) continue;
                  for (let j = 0; j < skills2.length; j++) {
                    if (player.hasSkill(skills2[j])) continue;
                    else if (skills.includes(skills2[j])) continue;
                    const info = lib.skill[skills2[j]];
                    if (!info || (!info.trigger && !info.enable && !info.mod) || info.silent || info.hiddenSkill || (info.zhuSkill && !player.isZhu2())) continue;
                    if (info.ai && (info.ai.combo && !player.hasSkill(info.ai.combo))) continue;
                    skills.add(skills2[j]);
                  };
                };
                if (skills.length) {
                  if (skills.length >= num) skills = skills.randomGets(num);
                  await player.addSkills(skills);
                }
              },
              getCharacters() {
                const name = [
                  '曹操', '曹芳', '曹奂', '曹髦', '曹丕',
                  '曹睿', '曹叡', '董卓', '公孙度', '公孙恭',
                  '公孙康', '公孙渊', '公孙瓒', '郭汜', '韩遂',
                  '李傕', '刘备', '刘辩', '刘表', '刘禅',
                  '刘琮', '刘宏', '刘琦', '刘协', '刘焉',
                  '刘繇', '刘璋', '吕布', '马超', '马腾',
                  '孟获', '士燮', '司马炎', '司马昭', '孙策',
                  '孙登', '孙皓', '孙坚', '孙亮', '孙权',
                  '孙休', '陶谦', '王朗', '袁尚', '袁绍',
                  '袁术', '袁谭', '袁熙', '张角', '张鲁',
                ];
                if (!_status.characterlist) {
                  let list = [];
                  if (_status.connectMode) list = get.charactersOL();
                  else {
                    for (var i in lib.character) {
                      if (!lib.filter.characterDisabled2(i) && !lib.filter.characterDisabled(i)) list.push(i);
                    };
                  }
                  game.countPlayer2(function (current) {
                    list.remove(current.name);
                    list.remove(current.name1);
                    list.remove(current.name2);
                  });
                  _status.characterlist = list;
                }
                let list = _status.characterlist.filter(i => {
                  const str1 = get.translation(i);
                  return name.some(i => str1.indexOf(i) > -1 && str1.lastIndexOf(i) > -1);
                });
                return list.randomSort();
              },
              ai: {
                combo: "jlsg_chuyuan",
              },
            },
            jlsg_jiquan: {
              audio: "ext:极略:1",
              enable: "phaseUse",
              usable: 1,
              filterTarget: lib.filter.notMe,
              selectTarget: [1, Infinity],
              multitarget: true,
              multiline: true,
              async content(event, trigger, player) {
                event.targets.sortBySeat();
                for (let target of event.targets) {
                  if (player.ai.shown > target.ai.shown && get.attitude(player, target) < -1) {
                    player.addExpose(0.1);
                  }
                }
                let history = player.getAllHistory('useSkill', e => e.skill == 'jlsg_jiquan');
                for (let target of event.targets) {
                  if (!player.isIn()) {
                    return;
                  }
                  if (!target.isIn()) {
                    continue;
                  }
                  let cnt = history.filter(e => e.event.targets.includes(target)).length;
                  cnt = Math.min(cnt, 3);
                  let index;
                  let valid0 = cnt <= target.countGainableCards(player, 'he');
                  let valid1 = target.getSkills(null, false, false).length != 0;
                  if (!valid0 && !valid1) {
                    continue;
                  }
                  if (!valid0) {
                    index = 1;
                  }
                  else if (!valid1) {
                    index = 0;
                  }
                  else {
                    ({ result: { index } } = await target.chooseControlList([
                      `交给${get.translation(player)}${get.cnNumber(cnt)}张牌`,
                      `交给${get.translation(player)}一个技能`,
                    ], true, () => _status.event.choice,
                    ).set('choice', cnt != 3 ? 0 : 1));
                  }
                  switch (index) {
                    case 0:
                      await target.chooseToGive(player, cnt, 'he', true);
                      break;
                    case 1:
                      let skills = target.getSkills(null, false, false).map(s => [s, get.translation(s)]);
                      let { result } = await target.chooseButton([
                        `选择一个技能交给${get.translation(player)}`,
                        [skills, 'tdnodes'],
                      ], true);
                      if (result.bool) {
                        let skill = result.links[0];
                        target.popup(skill, 'gray');
                        player.popup(skill);
                        await Promise.all([
                          target.removeSkills(skill),
                          player.addSkills(skill),
                        ]);
                      }
                      break;
                  }
                }
                if (player.maxHp <= event.targets.map(p => p.maxHp || 0).reduce((a, b) => a + b, 0)) {
                  player.gainMaxHp();
                  player.recover();
                }
              },
              ai: {
                threaten: 3,
              }
            },
            jlsg_renzheng: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              chooseButton: {
                dialog(event, player) {
                  let skills = player.getSkills(null, false, false);
                  let choices = [skills.map(s => [s, get.translation(s)]), "tdnodes"];
                  return ui.create.dialog(`###仁政###选择交出的技能, 不选则交手牌`, choices);
                },
                select: [0, Infinity],
                check: button => 0,
                backup: function (links) {
                  let next = {
                    audio: "jlsg_renzheng",
                    discard: false,
                    lose: false,
                    delay: false,
                    links: links,
                    filterTarget: function (card, player, target) {
                      return player != target;
                    },
                    ai1: lib.skill.rende.check,
                    async content(event, trigger, player) {
                      let target = event.target;
                      let links = lib.skill.jlsg_renzheng_backup.links;
                      if (links && links.length) {
                        for (let link of links) {
                          player.popup(link, 'gray');
                          target.popup(link);
                        }
                        await player.removeSkills(links);
                        await target.addSkills(links);
                        return;
                      } else {
                        await player.give(event.cards, target);
                      }
                      if (player.isIn() && target.isIn() && player.getAllHistory('useSkill',
                        e => e.sourceSkill == 'jlsg_renzheng' && e.event.childEvents[0] != event && e.event.targets[0] == target
                      ).length == 0) {
                        let { result } = await player.chooseBool(`是否令你与${get.translation(target)}各增加1点体力上限并回复1点体力？`, get.attitude(player, target) > 0 || player.hp < target.hp);
                        if (result.bool) {
                          player.gainMaxHp();
                          player.recover();
                          target.gainMaxHp();
                          target.recover();
                        }
                      }
                    },
                  };
                  if (!links.length) {
                    next.filterCard = true;
                    next.selectCard = [1, Infinity];
                    next.ai = {
                      result: {
                        target: function (player, target) {
                          if (target.hasSkillTag("nogain")) return 0;
                          if (ui.selected.cards.length && ui.selected.cards[0].name == "du") {
                            if (target.hasSkillTag("nodu")) return 0;
                            return -10;
                          }
                          if (target.hasJudge("lebu")) return 0;
                          var nh = target.countCards("h");
                          var np = player.countCards("h");
                          if (player.hp == player.maxHp || player.storage.rerende < 0 || player.countCards("h") <= 1) {
                            if (nh >= np - 1 && np <= player.hp && !target.hasSkill("haoshi")) return 0;
                          }
                          return Math.max(1, 5 - nh);
                        },
                      },
                    };
                  }
                  return next;
                },
                prompt(links, player) {
                  let prompt2 = '选择一名角色，令其获得你选择的牌';
                  if (links.length) {
                    prompt2 = `选择一名角色，令其获得` + links.map(s => `【${get.translation(s)}】`).join(" ");
                  }
                  return `###${get.prompt('jlsg_renzheng')}###${prompt2}`;
                },
              },
              ai: {
                order: 4,
                result: {
                  player: 1,
                },
              },
            },
            jlsg_qifeng: {
              audio: "ext:极略:2",
              onremove: true,
              forced: true,
              trigger: { player: "dying" },
              async content(event, trigger, player) {
                await player.loseMaxHp();
                if (!player.isIn()) return;
                player.storage.jlsg_qifeng ??= [1, 0, 0];
                const [recover, draw, damage] = player.storage.jlsg_qifeng
                await player.recoverTo(recover);
                if (draw > 0) await player.draw(draw);
                if (damage > 0) {
                  const { result } = await player.chooseTarget(`栖凤：请选择一名其他角色对其造成${damage}点火焰伤害`, true, lib.filter.notMe)
                    .set("ai", target => {
                      return get.damageEffect(target, player, player, "fire");
                    });
                  if (result.bool) await result.targets[0].damage(damage, "fire", player, "noCard");
                }
              },
              ai: {
                threaten: 0.9,
                expose: 0.25,
              },
            },
            jlsg_lunce: {
              audio: "ext:极略:3",
              logAudio(event, player, triggername, _, costResult) {
                let type = costResult.cost_data.typeInfo,
                  list = ["下策", "中策", "上策"];
                let index = list.indexOf(type) + 1;
                return [`ext:极略/jlsg_lunce${index}.mp3`];
              },
              trigger: { global: "roundStart" },
              filter(event, player) {
                let check = ["top", "mid", "bottom"];
                game.countPlayer(current => {
                  let skills = current.getSkills(null, false, false);
                  check.forEach((v, i) => {
                    if (skills.includes(`jlsg_lunce_${player.playerid}_${v}`)) check[i] = null;
                  });
                });
                check = check.filter(i => i);
                return check.length;
              },
              async cost(event, trigger, player) {
                const { result } = await player.chooseTarget(`###论策：请选择一名角色令其获得计策`)
                  .set("ai", target => {
                    const player = _status.event.player;
                    if (game.phaseNumber <= 1) return target == player || target == _status.currentPhase;
                    let num = target.hp * target.countCards("hs") + 0.1;
                    if (target.hasJudge("lebu") || target.hasJudge("bingliang")) num = num * 0.3;
                    const att = 10 - Math.abs(get.attitude(player, target));
                    if (target.isMinHp() && target.hp < 3 || target.isMaxHandcard() && target.countCards("hs", c => target.hasValueTarget(c)) > 3) num = num * 3
                    return num / att;
                  })
                if (!result.bool) {
                  event.result = { bool: false };
                  return;
                }
                const target = result.targets[0],
                  choices = ["top", "mid", "bottom"],
                  choicesInfo = ["上策", "中策", "下策"],
                  storage = {
                    targetFilters: lib.skill.jlsg_lunce.targetFilters,
                    targetEffects: lib.skill.jlsg_lunce.targetEffects,
                  },
                  storage2 = { easy: {}, };
                game.countPlayer(current => {
                  if (!current.isIn()) return false;
                  let skills = current.getSkills(null, false, false);
                  choices.forEach((v, i) => {
                    if (skills.includes(`jlsg_lunce_${player.playerid}_${v}`)) choicesInfo[i] = null;
                  });
                });
                for (const name in storage) {//此处做选项固定
                  let list = storage[name];
                  for (let type of choices) {
                    if (!choicesInfo[choices.indexOf(type)]) continue;
                    const info = Object.keys(list[type]);
                    let num = [Math.floor(Math.random() * 2), Math.floor(Math.random() * 2 + 2), Math.floor(Math.random() * 2 + 4)];
                    if (name === "targetEffects") num = [0, 1, 2, 3].randomGets(3);
                    for (let t in info) {
                      if (num.some(n => n == t)) {
                        let v = info[t];
                        if (!storage2[name]) storage2[name] = {};
                        if (!storage2[name][type]) storage2[name][type] = {};
                        storage2[name][type][v] = list[type][v];
                        if (list[type][v].easy) {
                          if (!storage2.easy[type]) storage2.easy[type] = {};
                          storage2.easy[type][v] = list[type][v].easy(target);
                        }
                      }
                    };
                  };
                };
                let typeChoice, filterChoice, effectChoice, min,
                  { targetFilters, targetEffects, easy } = storage2;
                for (let i in easy) {
                  let list = Object.entries(easy[i]).sort((a, b) => a[1] - b[1]);
                  if (!min || min[1][1] >= list[0][1]) min = [i, list[0]];
                }
                typeChoice = choicesInfo[choices.indexOf(min[0])];
                filterChoice = min[1][0];
                let choiceList = Object.keys(targetEffects[min[0]]),
                  arr = {};
                for (let i of choiceList) {
                  arr[i] = targetEffects[min[0]][i].positive(target);
                };
                let arrList = Object.entries(arr).sort((a, b) => a[1] - b[1]);
                if (get.attitude(player, target) >= 1) {
                  effectChoice = arrList[arrList.length - 1][0];
                }
                else effectChoice = arrList[0][0];
                let typeInfo, filterInfo, effectInfo, str;
                chooseLoop: while (true) {
                  choiceList = choicesInfo.filter(i => i);
                  let list = ["选项一", "选项二", "选项三"].slice(0, choiceList.length);
                  const { result: typex } = await player.chooseControl(list, "cancel2")
                    .set("choiceList", choiceList)
                    .set("prompt", "论策：选择计策类型")
                    .set("ai", () => _status.event.choice)
                    .set("choice", (function () {
                      let num = choiceList.indexOf(typeChoice);
                      return list[num] || "cancel2";
                    })());
                  typeInfo = choiceList[list.indexOf(typex.control)];
                  if (!typeInfo) break;
                  while (true) {
                    choiceList = Object.keys(targetFilters[choices[choicesInfo.indexOf(typeInfo)]]);
                    list = ["选项一", "选项二", "选项三"].slice(0, choiceList.length);
                    str = `${typeInfo}：当你`;
                    const { result: filterx } = await player.chooseControl(list, "cancel2")
                      .set("choiceList", choiceList)
                      .set("prompt", `论策：选择计策条件<br><span style=font-size:16px>${str}。。。</span>`)
                      .set("ai", () => _status.event.choice)
                      .set("choice", (function () {
                        let num = choiceList.indexOf(filterChoice);
                        return list[num] || "cancel2";
                      })());
                    filterInfo = choiceList[list.indexOf(filterx.control)];
                    if (!filterInfo) break;
                    while (true) {
                      choiceList = Object.keys(targetEffects[choices[choicesInfo.indexOf(typeInfo)]]);
                      list = ["选项一", "选项二", "选项三"].slice(0, choiceList.length);
                      str = `${typeInfo}：当你${filterInfo}`;
                      if (filterInfo.endsWith("状态")) str += "时，你";
                      else str += "后，你";
                      const { result: effectx } = await player.chooseControl(list, "cancel2")
                        .set("choiceList", choiceList)
                        .set("prompt", `论策：选择计策效果<br><span style=font-size:16px>${str}。。。</span>`)
                        .set("ai", () => _status.event.choice)
                        .set("choice", (function () {
                          let num = choiceList.indexOf(effectChoice);
                          return list[num] || "cancel2";
                        })());
                      effectInfo = choiceList[list.indexOf(effectx.control)];
                      if (!effectInfo) break;
                      else {
                        str += effectInfo;
                        break chooseLoop;
                      };
                    };
                  };
                };
                if (![typeInfo, filterInfo, effectInfo].filter(i => i).length) event.result = { bool: false };
                else {
                  const name = `jlsg_lunce_${player.playerid}_${choices[choicesInfo.indexOf(typeInfo)]}`,
                    filter = targetFilters[choices[choicesInfo.indexOf(typeInfo)]][filterInfo],
                    effect = targetEffects[choices[choicesInfo.indexOf(typeInfo)]][effectInfo];
                  let skill = {
                    jlsg_lunce_type: typeInfo,
                    name: name,
                    source: player,
                    priority: 1919810 + 3 - choicesInfo.indexOf(typeInfo),
                    charlotte: true,
                    forced: true,
                    popup: false,
                    onremove: true,
                    mark: true,
                    intro: {
                      str: str.slice(3),
                      name: `${typeInfo}<br>来源：${get.seatTranslation(player)}`,
                      markcount: () => "",
                      mark: function (dialog, storage, player) {
                        dialog.addText(this.str);
                        if (storage) dialog.addSmall("计数：" + get.translation(storage));
                      },
                    },
                    trigger: filter.trigger,
                    filter: filter.filter,
                    filterx: filter.filterx,
                    async content(event, trigger, player) {
                      if (lib.skill[event.name].filterx) {
                        if (!lib.skill[event.name].filterx(event, trigger, player)) return;
                      }
                      player.removeSkill(event.name);
                      const source = lib.skill[event.name].source;
                      game.log(player, "完成了", (source == player ? "自己" : source), "给予的", `#g计策(${lib.skill[event.name].jlsg_lunce_type})`);
                      await lib.skill[event.name].contentx(event, trigger, player);
                      await event.trigger("jlsg_lunce_achieve");
                    },
                    contentx: effect.content,
                    gainSkill: effect.gainSkill,
                    loseSkill: effect.loseSkill,
                    ai: {
                      effect: {
                        name: name,
                        targetEffect: effect.positive,
                        tag: filter.tag,
                        target: function (card, player, target) {
                          if (!this.tag?.self) return;
                          let [checkA1, checkB1] = this.tag.need;
                          let eff = 1;
                          if (this.tag.count) {
                            let storage = target.storage[this.name] ?? 0;
                            eff = (storage + 1) / this.tag.count;
                          }
                          if (checkA1 != "tag") {
                            if (get[checkA1](card) == checkB1) return [1, this.targetEffect(target) * eff];
                          }
                          else if (get.tag(card, checkB1)) return [1, this.targetEffect(target) * eff];
                        },
                        player: function (card, player, target) {
                          if (!this.tag?.target) return;
                          let [checkA, checkB] = this.tag.need,
                            checkA1, checkA2, checkB1, checkB2,
                            double;
                          if (checkA.includes("|")) {
                            double = true;
                            [checkA1, checkA2] = checkA.split("|");
                            [checkB1, checkB2] = checkB.split("|");
                          }
                          else {
                            checkA1 = checkA;
                            checkB1 = checkB;
                          }
                          let eff = 1;
                          if (this.tag.count) {
                            let storage = player.storage[this.name] ?? (checkB1 == "all" ? [] : 0);
                            if (typeof storage == "number") {
                              eff = (storage + 1) / this.tag.count;
                            }
                            else {
                              eff = (storage.length + 1) / this.tag.count;
                              let info = get[checkA1](card);
                              if (!storage.includes(info)) return [1, this.targetEffect(player) * eff];
                              return 1;
                            }
                          }
                          if (double) {
                            if (get[checkA1](card) == checkB1 && get[checkA2](card) == checkB2) return [1, this.targetEffect(player) * eff];
                          }
                          else {
                            if (checkA1 != "tag") {
                              if (get[checkA1](card) == checkB1) return [1, this.targetEffect(player) * eff];
                            }
                            else if (get.tag(card, checkB1)) return [1, this.targetEffect(player) * eff];
                          }
                        },
                      },
                    },
                  };
                  game.broadcastAll(function (skillName, skill, typeName) {
                    lib.skill[skillName] = skill;
                    lib.translate[skillName] = typeName;
                  }, name, skill, typeInfo);
                  event.result = {
                    bool: true,
                    targets: [target],
                    cost_data: { typeInfo: typeInfo, name: name },
                  };
                }
              },
              async content(event, trigger, player) {
                game.log(player, "给予了", event.targets[0], `#g计策(${event.cost_data.typeInfo})`)
                event.targets[0].addSkill(event.cost_data.name);
              },
              get targetFilters() {//条件
                const result = {
                  top: {
                    "使用不同花色的牌各一张": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return lib.suit.includes(get.suit(event.card, player));
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= [];
                        let suit = get.suit(trigger.card, player);
                        if (suit != "none") player.markAuto(event.name, [suit]);
                        return player.storage[event.name].length >= 4;
                      },
                      easy: function (player) {
                        let suit = lib.suit,
                          list = [];
                        for (let i of suit) {
                          let card = get.autoViewAs({ name: "sha", suit: i }, "unsure");
                          list.add(get.suit(card, player));
                        };
                        if (list.length >= 4) return 8 / player.countCards("h") - (player.countCards("h") > 4 ? 2 : 0);
                        return 10 / player.countCards("h") - (player.countCards("h") > 4 ? 2 : 0);
                      },
                      tag: {
                        target: true,
                        count: 4,
                        need: ["suit", "all"],
                      },
                    },
                    "使用不同类型的牌各一张": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return get.type2(event.card, player);
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= [];
                        let type = get.type2(trigger.card, player);
                        if (type) player.markAuto(event.name, [type]);
                        return player.storage[event.name].length >= 3;
                      },
                      easy: function (player) {
                        let types = lib.inpile.slice().map(i => get.type2(i, player)).unique();
                        if (types.length == 3) return 8 / player.countCards("hs") - (player.countCards("h") > 4 ? 2 : 0);
                        return 10 / player.countCards("h") + (player.countCards("h") > 4 ? 2 : 0);
                      },
                      tag: {
                        target: true,
                        count: 3,
                        need: ["type2", "all"],
                      },
                    },
                    "获得技能": {
                      trigger: { player: "changeSkillsAfter" },
                      filter: function (event, player) {
                        return event.addSkill?.length;
                      },
                      easy: function (player) {
                        let skills = player.getSkills(null, false, false)
                        for (let skill of skills) {
                          let info = get.info(skill);
                          if (info) continue;
                          if (info.gainSkill) return 2;
                          if (info.dutySkill || info.juexingji || info.xinadingji) return 8;
                        }
                        return 10;
                      },
                    },
                    "失去技能": {
                      trigger: { player: "changeSkillsAfter" },
                      filter: function (event, player) {
                        return event.removeSkill?.length;
                      },
                      easy: function (player) {
                        let skills = player.getSkills(null, false, false)
                        for (let skill of skills) {
                          let info = get.info(skill);
                          if (info) continue;
                          if (info.loseSkill) return 2;
                          if (info.dutySkill || info.limited || info.juexingji || info.xinadingji) return 8;
                        }
                        return 10;
                      },
                    },
                    "令一名角色进入濒死状态": {
                      trigger: { source: "dying" },
                      filter: function (event, player) {
                        return event.source == player;
                      },
                      easy: function (player) {
                        let targets = game.filterPlayer(cur => cur != player)
                          .sortBySeat(player)
                          .filter(cur => cur.isMinHp());
                        if (targets.length) {
                          for (let target of targets) {
                            for (let name of lib.inpile) {
                              let card = get.autoViewAs({ name: name }, "unsure");
                              if (
                                get.tag(card, "damage") &&
                                player.canUse(card, target) &&
                                get.effect(target, card, player, player) > 0
                              ) return target.hp * (target.countCards("h") + 0.5);
                            };
                          };
                        }
                        return 5;
                      },
                      tag: {
                        target: true,
                        need: ["tag", "damage"],
                      },
                    },
                    "进入濒死状态": {
                      trigger: { player: "dying" },
                      filter: function (event, player) {
                        return true;
                      },
                      easy: function (player) {
                        return player.hp * (player.countCards("h") + 0.5);
                      },
                      tag: {
                        self: true,
                        need: ["tag", "damage"],
                      },
                    },
                  },
                  mid: {
                    "使用两张黑桃牌": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        let suit = get.suit(event.card, player);
                        return suit == "spade";
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name]++;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("hs", c => player.hasValueTarget(c));
                        if (get.suit({ name: "sha", suit: "spade" }, player) != "spade") return 6 / num;
                        return 5 / num;
                      },
                      tag: {
                        target: true,
                        count: 2,
                        need: ["suit", "spade"],
                      },
                    },
                    "使用两张红桃牌": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        let suit = get.suit(event.card, player);
                        return suit == "heart";
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name]++;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        if (get.suit({ name: "sha", suit: "heart" }, player) != "heart") return 6 / num;
                        return 5 / num;
                      },
                      tag: {
                        target: true,
                        count: 2,
                        need: ["suit", "heart"],
                      },
                    },
                    "使用杀造成2点伤害": {
                      trigger: { source: "damageSource" },
                      filter: function (event, player) {
                        return get.name(event.card, player) == "sha" && event.num > 0;
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name] += trigger.num;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        if (!player.hasValueTarget("sha")) return 4.8 / num;
                        return 3.8 / num;
                      },
                      tag: {
                        target: true,
                        count: 2,
                        need: ["name", "sha"],
                      },
                    },
                    "使用锦囊牌造成2点伤害": {
                      trigger: { source: "damageSource" },
                      filter: function (event, player) {
                        return get.type2(event.card, player) == "trick" && event.num > 0;
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name] += trigger.num;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          if (get.type2(name, player) != "trick") continue;
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.tag(card, "damage") &&
                            player.hasValueTarget(card)
                          ) return 3.8 / num;
                        };
                        return 4.8 / num;
                      },
                      tag: {
                        target: true,
                        count: 2,
                        need: ["type2|tag", "trick|damage"],
                      },
                    },
                    "造成2点属性伤害": {
                      trigger: { source: "damageSource" },
                      filter: function (event, player) {
                        return game.hasNature(event);

                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name] += trigger.num;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.tag(card, "natureDamage") &&
                            player.hasValueTarget(card)
                          ) return 3.5 / num;
                        };
                        return 4.5 / num;
                      },
                      tag: {
                        target: true,
                        count: 2,
                        need: ["tag", "natureDamage"],
                      },
                    },
                    "回复2点体力": {
                      trigger: { player: "recoverAfter" },
                      filter: function (event, player) {
                        return event.num > 0;
                      },
                      filterx: function (event, trigger, player) {
                        player.storage[event.name] ??= 0;
                        player.storage[event.name] += trigger.num;
                        return player.storage[event.name] >= 2;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.tag(card, "recover") &&
                            player.isDamaged()
                          ) return 3 / num;
                        };
                        return 4 / num;
                      },
                      tag: {
                        slef: true,
                        count: 2,
                        need: ["tag", "recover"],
                      },
                    }
                  },
                  bottom: {
                    "使用黑色牌": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return get.color(event.card, player) == "black";
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.color(card, player) == "black" &&
                            player.hasValueTarget(card)
                          ) return 2 / num;
                        };
                        return 3 / num;
                      },
                      tag: {
                        target: true,
                        need: ["color", "black"],
                      },
                    },
                    "使用红色牌": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return get.color(event.card, player) == "red";
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.color(card, player) == "red" &&
                            player.hasValueTarget(card)
                          ) return 2 / num;
                        };
                        return 3 / num;
                      },
                      tag: {
                        target: true,
                        need: ["color", "red"],
                      },
                    },
                    "使用杀": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return get.name(event.card, player) == "sha";
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        let card = get.autoViewAs({ name: "sha" }, "unsure");
                        if (player.hasValueTarget(card)) return 2 / num;
                        return 3 / num;
                      },
                      tag: {
                        target: true,
                        need: ["name", "sha"],
                      },
                    },
                    "使用锦囊牌": {
                      trigger: { player: "useCardAfter" },
                      filter: function (event, player) {
                        return get.type(event.card, null, player) == "trick";
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          if (get.type2(name, player) != "trick") continue;
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (player.hasValueTarget(card)) return 2 / num;
                        };
                        return 3 / num;
                      },
                      tag: {
                        target: true,
                        need: ["name", "sha"],
                      },
                    },
                    "造成伤害": {
                      trigger: { source: "damageSource" },
                      filter: function (event, player) {
                        return event.num > 0;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.tag(card, "damage") &&
                            player.hasValueTarget(card)
                          ) return 2.5 / num;
                        };
                        return 3.5 / num;
                      },
                      tag: {
                        target: true,
                        need: ["tag", "damage"],
                      },
                    },
                    "回复体力": {
                      trigger: { player: "recoverAfter" },
                      filter: function (event, player) {
                        return event.num > 0;
                      },
                      easy: function (player) {
                        let num = player.countCards("h", c => player.hasValueTarget(c));
                        for (let name of lib.inpile) {
                          let card = get.autoViewAs({ name: name }, "unsure");
                          if (
                            get.tag(card, "recover") &&
                            player.isDamaged()
                          ) return 2 / num;
                        };
                        return 3 / num;
                      },
                      tag: {
                        slef: true,
                        need: ["tag", "recover"],
                      },
                    },
                  },
                };
                delete this.targetFilters;
                this.targetFilters = result;
                return result;
              },
              get targetEffects() {//效果
                const result = {
                  top: {
                    "获得一个同势力武将技能": {
                      content: async function (event, trigger, player) {
                        let group = player.group;
                        if (!_status.characterlist) lib.skill.pingjian.initList();
                        let allList = _status.characterlist.slice(0).randomSort();
                        for (let name of allList) {
                          if (!lib.character[name]) continue;
                          if (lib.character[name][1] != group) continue;
                          if (!lib.character[name][3]) continue;
                          let skills = lib.character[name][3].filter(s => {
                            if (player.hasSkill(s)) return false;
                            let info = get.info(s);
                            if (!info || info.unique || info.charlotte) return false;
                            if (info?.ai?.combo) return player.hasSkill(info.ai.combo);
                            if (info.zhuSkill) return player.isZhu2();
                            return true;
                          });
                          if (!skills.length) continue;
                          else {
                            await player.addSkills(skills.randomGet());
                            break;
                          }
                        };
                      },
                      positive: (player) => 2,
                      gainSkill: true,
                    },
                    "获得1点体力上限并回复1点体力": {
                      content: async function (event, trigger, player) {
                        await player.gainMaxHp(1);
                        await player.recover(1);
                      },
                      positive: (player) => 2,
                    },
                    "随机失去一个技能": {
                      content: async function (event, trigger, player) {
                        let skills = player.getSkills(null, false, false).filter(s => {
                          let info = get.info(s);
                          if (!info || info.unique || info.charlotte) return false;
                          return true;
                        });
                        if (skills.length) await player.removeSkills(skills.randomGet());
                        else game.log(player, "没有技能了");
                      },
                      positive: function (player) {
                        let skills = player.getSkills(null, false, false).filter(s => {
                          let info = get.info(s);
                          if (!info || info.unique || info.charlotte) return false;
                          return true;
                        });
                        return -Math.min(2, skills.length);
                      },
                      loseSkill: true,
                    },
                    "弃置所有牌": {
                      content: async function (event, trigger, player) {
                        if (player.countCards("he")) await player.chooseToDiscard("he", player.countCards("he"), true);
                      },
                      positive: function (player) {
                        return -3;
                      },
                    },
                  },
                  mid: {
                    "摸牌数+1": {
                      content: async function (event, trigger, player) {
                        if (!player.hasSkill("jlsg_lunce_effect")) player.addSkill("jlsg_lunce_effect");
                        player.storage.jlsg_lunce_effect.draw++;
                      },
                      positive: function (player) {
                        return 1;
                      },
                    },
                    "使用杀次数上限+1": {
                      content: async function (event, trigger, player) {
                        if (!player.hasSkill("jlsg_lunce_effect")) player.addSkill("jlsg_lunce_effect");
                        player.storage.jlsg_lunce_effect.sha++;
                      },
                      positive: function (player) {
                        return 1;
                      },
                    },
                    "翻面": {
                      content: async function (event, trigger, player) {
                        await player.turnOver()
                      },
                      positive: function (player) {
                        return -2;
                      },
                    },
                    "减1点体力上限": {
                      content: async function (event, trigger, player) {
                        await player.loseMaxHp(1);
                      },
                      positive: function (player) {
                        return -2;
                      },
                    },
                  },
                  bottom: {
                    "摸两张牌": {
                      content: async function (event, trigger, player) {
                        await player.draw(2);
                      },
                      positive: function (player) {
                        return 2;
                      },
                    },
                    "回复1点体力": {
                      content: async function (event, trigger, player) {
                        await player.recover(1);
                      },
                      positive: function (player) {
                        return 2;
                      },
                    },
                    "随机弃置两张牌": {
                      content: async function (event, trigger, player) {
                        if (player.countCards("he")) await player.discard(player.getCards("he").randomGets(2));
                      },
                      positive: function (player) {
                        return -2;
                      },
                    },
                    "受到1点无来源火焰伤害": {
                      content: async function (event, trigger, player) {
                        await player.damage(1, "fire", "noCard", "noSource");
                      },
                      positive: function (player) {
                        return -2;
                      },
                    },
                  },
                };
                delete this.targetEffects;
                this.targetEffects = result;
                return result;
              },
              group: ["jlsg_lunce_achieved"],
              subSkill: {
                achieved: {
                  sourceSkill: "jlsg_lunce",
                  trigger: { global: "jlsg_lunce_achieve" },
                  filter(event, player) {
                    return event.name.includes(String(player.playerid));
                  },
                  forced: true,
                  popup: false,
                  async content(event, trigger, player) {
                    await player.gainMaxHp(1);
                    if (player.hasSkill("jlsg_qifeng")) {
                      player.storage.jlsg_qifeng ??= [1, 0, 0];
                      let info = trigger.name.split("_"),
                        list = ["mid", "bottom", "top"];
                      let type = info[info.length - 1];
                      let index = list.indexOf(type);
                      game.log(player, "修改了", "#g【栖凤】")
                      player.storage.jlsg_qifeng[index]++;
                    }
                  },
                },
                effect: {
                  sourceSkill: "jlsg_lunce",
                  forced: true,
                  popup: false,
                  charlotte: true,
                  init(player) {
                    player.storage.jlsg_lunce_effect = {
                      draw: 0,
                      sha: 0,
                    };
                  },
                  mod: {
                    cardUsable(card, player, num) {
                      if (get.name(card, player) != "sha") return;
                      return num + player.storage.jlsg_lunce_effect.sha;
                    },
                  },
                  mark: true,
                  marktext: "策",
                  intro: {
                    name: "策(效果)",
                    content(content, player) {
                      const { draw, sha } = player.storage.jlsg_lunce_effect;
                      return `摸牌阶段，你多模${draw}张牌<br>你使用杀的次数上限+${sha}`;
                    },
                  },
                  trigger: { player: "phaseDrawBegin2" },
                  filter(event, player) {
                    if (player.storage?.jlsg_lunce_effect?.draw < 1) return false
                    return !event.numFixed;
                  },
                  async content(event, trigger, player) {
                    trigger.num += player.storage?.jlsg_lunce_effect?.draw;
                  },
                },
              },
              ai: {
                threaten: 1.1,
                expose: 0.25,
              },
            },
            jlsg_qianyuan: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsg_qianyuan = {
                  damage: false,
                  loseHp: false,
                  loseMaxHp: false,
                  discard: false,
                  loseSkill: false,
                  disableSkill: false,
                  link: false,
                  turnOver: false,
                  record: {},
                };
              },
              mark: true,
              marktext: "渊",
              intro: {
                name: "潜渊",
                markcount(storage, player) {
                  let num = Object.keys(storage).filter(i => {
                    if (storage.record[i] === false) return false;
                    return storage[i] === true;
                  }).length;
                  return num;
                },
                mark(dialog, storage, player) {
                  const addNewRow = lib.element.dialog.addNewRow.bind(dialog);
                  if (get.is.phoneLayout()) dialog.classList.add("fullheight");
                  dialog.css({ width: "20%" });
                  let list = Object.keys(storage),
                    map = {
                      "damage": "受到伤害",
                      "loseHp": "失去体力",
                      "loseMaxHp": "减体力上限",
                      "discard": "弃置牌",
                      "loseSkill": "失去技能",
                      "disableSkill": "失效技能",
                      "link": "横置",
                      "turnOver": "翻面",
                    },
                    itemContainerCss = { height: "20px" };
                  for (let i = 0; i < 8; i++) {
                    let info = list[i];
                    let list2 = [
                      { item: map[info], ratio: .8, itemContainerCss },
                      { item: (typeof storage.record[info] == "number" ? storage.record[info].toString() : (storage.record[info] === false ? "空" : "是")), ratio: .5, itemContainerCss },
                    ];
                    if (!storage[info]) list2[1].item = "未触发";
                    addNewRow(...list2);
                  };
                },
              },
              locked(skill, player) {
                return lib.config.extension_极略测试_jlsgsoul_sp_zhaoyun;
              },
              trigger: {
                player: [
                  "damageBefore", "loseHpBefore", "loseMaxHpBefore", "loseBegin",
                  "changeSkillsBefore", "linkBefore", "turnOverBefore",
                ],
              },
              filter(event, player) {
                let storage = player.storage.jlsg_qianyuan,
                  key = lib.skill.jlsg_qianyuan.translate[event.name];
                let bool1 = lib.skill.jlsg_qianyuan.getInfo(event, player, key).bool,
                  bool2 = true;
                if (storage[key] === true) {
                  let used = player.getHistory("useSkill", evt => {
                    if (evt.skill != "jlsg_qianyuan") return false;
                    return evt.event.jlsg_qianyuan;
                  });
                  bool2 = used.length < game.countPlayer();
                }
                return storage && (key in storage) && bool1 && bool2;
              },
              prompt(event, player) {
                let str = "潜渊:是否将此次负面效果";
                let key = lib.skill.jlsg_qianyuan.translate[event.name];
                let translation = lib.skill.jlsg_qianyuan.getInfo(event, player, key).str;
                str += `<span class='yellowtext'>${translation}</span>`;
                if (player.storage.jlsg_qianyuan[key] === false) str += "无效？";
                else str += "转换？";
                return str;
              },
              prompt2(event, player) {
                let storage = player.storage.jlsg_qianyuan,
                  key = lib.skill.jlsg_qianyuan.translate[event.name],
                  num1 = 0, num2 = game.countPlayer();
                if (storage[key] === true) {
                  num1 = player.getHistory("useSkill", evt => {
                    if (evt.skill != "jlsg_qianyuan") return false;
                    return evt.event.jlsg_qianyuan;
                  }).length;
                  return `<span class='center text'>已转化次数（${num1}/${num2}） </span>`;
                }
              },
              check(event, player) {//@.修改
                var key = lib.skill.jlsg_qianyuan.translate[event.name];
                if (player.storage.jlsg_qianyuan[key] === false) return true;
                var num1 = player.getHistory("useSkill", evt => {
                  if (evt.skill != "jlsg_qianyuan") return false;
                  return evt.event.jlsg_qianyuan;
                }).length;
                var num2 = game.countPlayer();
                var num3 = 0;
                if (key == "damage") num3 = 3;
                else if (key == "loseHp") num3 = 3;
                else if (key == "loseMaxHp") num3 = 5;
                else if (key == "discard") {
                  let least = player.storage.jlsg_hualong_effect,
                    card = lib.skill.jlsg_qianyuan.getInfo(event, player).num;
                  if (least && least > player.countCards("h") - card) num3 = 2;
                  else num3 = card + 1;
                }
                else if (key == "loseSkill") num3 = 6;
                else if (key == "disableSkill") num3 = 2.5;
                else if (key == "link") num3 = 1;
                else if (key == "turnOver") {
                  if (player.isTurnedOver()) num3 = 0;
                  else num3 = 4;
                }
                if (num2 - num1 > 2) {
                  if (num3 >= 2) return true;
                  return false;
                } else if (num2 - num1 > 0 && num2 - num1 <= 2) {
                  if (num3 >= 3) return true;
                  return false;
                }
                return true;
              },
              async content(event, trigger, player) {
                let key = lib.skill.jlsg_qianyuan.translate[trigger.name];
                const { num, nature, str } = lib.skill.jlsg_qianyuan.getInfo(trigger, player, key);
                if (trigger.name == "changeSkills") trigger.removeSkill = [];
                else if (trigger.name == "lose") trigger.cards = trigger.cards.filter(i => get.owner(i) != player);
                else trigger.cancel();
                if (player.storage.jlsg_qianyuan[key] === true) {
                  event.getParent().jlsg_qianyuan = true;
                  await lib.skill.jlsg_qianyuan.transfer(trigger, player, key, num, nature);
                } else {
                  player.storage.jlsg_qianyuan[key] = true;
                  game.log(player, "取消了", `#y${str}`);
                  player.storage.jlsg_qianyuan.record[key] = num;
                }
                player.markSkill("jlsg_qianyuan");
              },
              get translate() {
                let result = {
                  "damage": "damage",
                  "loseHp": "loseHp",
                  "loseMaxHp": "loseMaxHp",
                  "lose": "discard",
                  "loseAsync": "discard",
                  "changeSkills": "loseSkill",
                  "disableSkill": "disableSkill",
                  "linkBefore": "link",
                  "link": "link",
                  "turnOverBefore": "turnOver",
                  "turnOver": "turnOver",
                }
                delete this.translation;
                this.translation = result;
                return result;
              },
              transfer(event, player, name, number = 1, nature = null) {
                let next, key = [
                  "damage", "loseHp", "loseMaxHp", "discard",
                  "loseSkill", "disableSkill", "link", "turnOver"
                ].filter(i => {
                  if (i == name) return false;
                  if (i == "discard") return player.countDiscardableCards(player, "he");
                  else if (i == "loseSkill") return player.getSkills(null, false, false).length;
                  return true;
                }).randomGet();
                if (!key) return;
                game.log(
                  player,
                  "将",
                  `#y${lib.skill.jlsg_qianyuan.getInfo(event, player, name, number).str}`,
                  "改为",
                  `#y${lib.skill.jlsg_qianyuan.getInfo(null, player, key, 1, nature).str}`
                );
                if (key == "damage") next = player.damage(1, nature);
                else if (key == "loseHp") next = player.loseHp(1);
                else if (key == "loseMaxHp") next = player.loseMaxHp(1);
                else if (key == "discard") next = player.discard(player.getDiscardableCards(player, "he").randomGets(1));
                else if (key == "loseSkill") next = player.removeSkills(player.getSkills(null, false, false).randomGets(1));
                else if (key == "disableSkill") next = player.storage.jlsg_qianyuan.disableSkill = true;
                else if (key == "link") next = player.link();
                else if (key == "turnOver") next = player.turnOver();
                return next;
              },
              getInfo(event, player, name, num, nature = null) {
                let key = name || lib.skill.jlsg_qianyuan.translate[event.name],
                  bool = true,
                  str = "";
                if (key == "discard") {
                  if (event) {
                    bool = event.type == "discard" && event.cards.some(i => get.owner(i) == player);
                    if (!num) num = event.cards.filter(i => get.owner(i) == player).length;
                  }
                  str = `弃置${num}张牌`;
                } else if (key == "loseSkill") {
                  if (event) {
                    bool = event.removeSkill.length;
                    if (!num) num = event.removeSkill.length;
                  }
                  str = `失去${num}个技能`;
                } else if (key == "link") {
                  if (event) {
                    bool = !player.isLinked();
                    num = true;
                  }
                  str = `横置`;
                } else if (key == "turnOver") {
                  if (event) {
                    bool = !player.isTurnedOver();
                    num = true;
                  }
                  str = `翻面`;
                } else {
                  if (event) num = event.num;
                  if (key == "damage") {
                    if (event) nature = event.nature;
                    str = `受到${num}点${nature ? get.translation(nature) : ""}伤害`;
                  }
                  else if (key == "loseHp") str = `失去${num}点体力`;
                  else if (key == "loseMaxHp") str = `减少${num}点体力上限`;
                  else if (key == "disableSkill") str = "失效技能"
                }
                return {
                  bool: bool,
                  num: num,
                  nature: nature,
                  str: str,
                }
              },
              ai: {//@.修改
                effect: {
                  target(card, player, target) {
                    if (card.name == "tiesuo" && target.storage.jlsg_qianyuan.link === false) return [0, 1];
                    if ((card.name == "shunshou" || card.name == "guohe") && target.storage.jlsg_qianyuan.discard === false) return [0, 1];
                    if (get.tag(card, 'damage') && target.storage.jlsg_qianyuan.damage === false && target.hasFriend()) return [0, 1];
                  },
                }
              },
            },
            jlsg_hualong: {
              audio: "ext:极略:2",
              trigger: { player: "phaseZhunbeiBegin" },
              filter(event, player) {
                if (!player.storage.jlsg_qianyuan) return false;
                let num = Object.keys(player.storage.jlsg_qianyuan).filter(i => {
                  if (player.storage.jlsg_qianyuan.record[i] === false) return false;
                  return player.storage.jlsg_qianyuan[i] === true;
                }).length;
                return num > 0;
              },
              async cost(event, trigger, player) {
                let list = Object.keys(player.storage.jlsg_qianyuan).filter(i => {
                  if (player.storage.jlsg_qianyuan.record[i] === false) return false;
                  return player.storage.jlsg_qianyuan[i] === true;
                });
                let str = `###化龙:选择一名其他角色，令其受到以下负面效果，然后将你的各项属性和最小手牌数改为${list.length + (player.storage.jlsg_hualong_effect ?? 0)}###`;
                for (let i of list) {
                  if (player.storage.jlsg_qianyuan.record[i] !== false) {
                    str += `${lib.skill.jlsg_qianyuan.getInfo(null, player, i, list.length).str}<br>`;
                  }
                };
                event.result = await player.chooseTarget(str, (card, player, target) => target != player)
                  .set("ai", target => -get.attitude(player, target))
                  .forResult();
                event.result.cost_data = list;
              },
              async content(event, trigger, player) {
                const target = event.targets[0],
                  list = event.cost_data;
                for (let key of list) {
                  //全额返还
                  //let number = player.storage.jlsg_qianyuan.record[key];
                  if (player.storage.jlsg_qianyuan.record[key] === false) continue;
                  let number = list.length;
                  player.storage.jlsg_qianyuan.record[key] = false;
                  player.markSkill("jlsg_qianyuan");
                  if (!target.isIn()) continue;
                  if (key == "damage") await target.damage(number);
                  else if (key == "loseHp") await target.loseHp(number);
                  else if (key == "loseMaxHp") await target.loseMaxHp(number);
                  else if (key == "discard") await target.discard(target.getDiscardableCards(target, "he").randomGets(number));
                  else if (key == "loseSkill") await target.removeSkills(target.getSkills(null, false, false).randomGets(number));
                  else if (key == "disableSkill") await target.addTempSkill("baiban")
                  else if (key == "link") await target.link();
                  else if (key == "turnOver") await target.turnOver();
                };
                target.update();
                if (!player.storage.jlsg_hualong_effect) player.storage.jlsg_hualong_effect = 0;
                player.storage.jlsg_hualong_effect += list.length;
                player.maxHp = player.storage.jlsg_hualong_effect;
                player.hp = player.storage.jlsg_hualong_effect;
                player.update();
                await player.addSkill("jlsg_hualong_effect");
              },
              subSkill: {
                effect: {
                  mark: true,
                  marktext: "化",
                  intro: {
                    content(storage, player) {
                      if (!storage) return "";
                      else return `使用牌次数上限最低为${storage}<br>
							                  当手牌数低于${storage}时，将手牌摸至${storage}<br>
							                  攻击范围最低为${storage}`;
                    },
                  },
                  mod: {
                    cardUsable(card, player, num) {
                      if (!player.storage.jlsg_hualong_effect) return;
                      let usable = get.info(card).usable;
                      if (typeof usable == "function") usable = num(card, player);
                      usable = Math.max(num, usable);
                      if (usable < player.storage.jlsg_hualong_effect) return player.storage.jlsg_hualong_effect;
                    },
                    attackRange: function (player, num) {
                      if (!player.storage.jlsg_hualong_effect) return;
                      if (num < player.storage.jlsg_hualong_effect) return player.storage.jlsg_hualong_effect;
                    },
                  },
                  trigger: {
                    player: ["loseAfter", "phaseDrawBegin1"],
                    global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                  },
                  filter(event, player, name) {
                    if (!player.storage.jlsg_hualong_effect) return false;
                    if (name == "phaseDrawBegin1") return !event.numFixed;
                    let evt = event.getl(player);
                    if (!evt || !evt.hs || evt.hs.length == 0 || player.countCards("h") >= player.storage.jlsg_hualong_effect) return false;
                    evt = event.getParent("jlsg_hualong_effect");
                    if (evt && evt.name == "jlsg_hualong_effect") return false;
                    return player.countCards("h") < player.storage.jlsg_hualong_effect;
                  },
                  logv: false,
                  popup: false,
                  forced: true,
                  charlotte: true,
                  async content(event, trigger, player) {
                    let num = player.storage.jlsg_hualong_effect - player.countCards("h");
                    if (event.triggername == "phaseDrawBegin1") trigger.num = player.storage.jlsg_hualong_effect;
                    else await player.draw(num);
                  },
                  sub: true,
                  sourceSkill: "jlsg_hualong",
                },
              },
              ai: {
                combo: "jlsg_qianyuan",
              },
            },
            jlsg_zhuxing: {
              audio: "ext:极略:2",
              intro: {
                content: "expansion",
                markcount: "expansion",
              },
              onremove(player, skill) {
                for (let current of game.players) {
                  var cards = current.getExpansions(skill);
                  if (cards.length) current.loseToDiscardpile(cards);
                }
              },
              usable: 2,
              trigger: { global: "useCard" },
              filter(event) {
                const card = event.card;
                if (!["basic", "trick"].includes(get.type(card, null, false))) return false;
                if (!lib.card[event.card.name]?.enable) return false;
                return get.is.ordinaryCard(card);
              },
              async cost(event, trigger, player) {
                const targets = game.filterPlayer().reduce((list, current) => {
                  let effect = get.effect(current, trigger.card, player, player);
                  if (current.countExpansions("jlsg_zhuxing") > 3) effect = -114514;
                  if (!list[current.playerid]) list[current.playerid] = effect;
                  return list;
                }, {});
                if (targets[player.playerid] <= 0) targets[player.playerid] = -get.effect(player, trigger.card, player, player) - 1;
                const num = Math.max(...Object.values(targets));
                const choice = Object.keys(targets).find(i => targets[i] == num);
                event.result = await player.chooseTarget(`###逐星：是否将${get.translation(trigger.card)}置于一名角色的武将牌上称为“逐星”牌###然后你可以令此牌无效`)
                  .set("ai", target => {
                    return target.playerid == _status.event.choice;
                  })
                  .set("choice", choice)
                  .forResult();
              },
              async content(event, trigger, player) {
                const target = event.targets[0];
                await target.addToExpansion(trigger.cards, "gain2").set("gaintag", ["jlsg_zhuxing"]);
                const { result } = await player.chooseBool(`###逐星：是否令${get.translation(trigger.card)}无效？###${get.translation(trigger.targets)}`)
                  .set("ai", (event, player) => {
                    const trigger = event.getTrigger();
                    const card = trigger.card,
                      targets = trigger.targets;
                    let eff = targets.reduce((num, target) => num + get.effect(target, card, trigger.player, player), 0);
                    return eff <= 0;
                  });
                if (result.bool) {
                  game.log(player, "取消了", trigger.card);
                  trigger.targets = [];
                  trigger.all_excluded = true;
                }
              },
              group: "jlsg_zhuxing_begin",
              subSkill: {
                begin: {
                  audio: "ext:极略:2",
                  trigger: { global: "phaseBegin" },
                  filter(event, player) {
                    return event.player.countExpansions("jlsg_zhuxing");
                  },
                  prompt(event, player) {
                    return `逐星：是否对${get.translation(event.player)}依次使用“逐星”牌？`;
                  },
                  prompt2(event, player) {
                    return `${get.translation(event.player.getExpansions("jlsg_zhuxing").reverse())}`;
                  },
                  check(event, player) {
                    const cards = event.player.getExpansions("jlsg_zhuxing").reverse();
                    let eff = cards.reduce((num, card) => num + get.effect(event.player, get.autoViewAs(card, []), player, player), 0);
                    return eff > 0;
                  },
                  logTarget: "player",
                  async content(event, trigger, player) {
                    const cards = trigger.player.getExpansions("jlsg_zhuxing").map(card => {
                      const [suit, number, name, nature] = get.cardInfo(card);
                      return get.autoViewAs({ name, number, suit, nature }, []);
                    }).reverse();
                    for (let card of cards) {
                      if (trigger.player.isIn()) await player.useCard(card, trigger.player).set("addCount", false);
                    };
                  },
                },
              },
            },
            jlsg_lingze: {
              audio: "ext:极略:2",
              init() {
                //来自活动武将
                game.broadcastAll(() => {
                  if (!get.bolskillTips) {
                    get.bolskillTips = function (tipname, id) {
                      var dibeijing = ui.create.div('.bol-dibeijing', document.body);
                      dibeijing.style.zIndex = 16;
                      var skilltip = ui.create.div('.bol-skilltip', dibeijing);
                      skilltip.innerHTML = tipname;
                      var herf = document.getElementById(id);
                      if (herf) {
                        var left = herf.getBoundingClientRect().left;
                        if (/mobile|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i.test(navigator.userAgent)) left += herf.offsetParent.offsetLeft;
                        left += document.body.offsetWidth * 0.15;
                        skilltip.style.left = left + 'px';
                        skilltip.style.top = (herf.getBoundingClientRect().top + 30) + 'px';
                      }
                      dibeijing.listen(function (e) {
                        e.stopPropagation();
                        this.remove();
                      })
                    };
                  }
                  lib.init.sheet([
                    '.card.jlsg_xuyuan-glow:before{',
                    'opacity:0.2;',
                    'box-shadow:rgba(0,0,0,0.2) 0 0 0 1px,rgb(255,109,12) 0 0 5px,rgb(255,0,0) 0 0 10px;',
                    'background-color:red;',
                    '-webkit-filter:blur(5px);',
                    'filter:blur(5px);',
                    '}'
                  ].join(''));
                  lib.init.sheet([
                    '.bol-dibeijing {',
                    'height: 100%;',
                    'width: 100%;',
                    'position: absolute;',
                    'left: 0;',
                    'top: 0;',
                    'z-index: 8;',
                    '}',
                  ].join(''));
                  lib.init.sheet([
                    '.bol-skilltip {',
                    'width: 20%;',
                    'min-height: 5%;',
                    'left: 50%;',
                    ' top: 50%;',
                    'font-size: 16px;',
                    'color: #ccad76;',
                    "font-family: 'shousha';",
                    'background-color: rgba(36, 29, 19, 0.85);',
                    'border: #523a24 3px solid;',
                    'border-radius: 10px;',
                    'position: absolute;',
                    'display: block;',
                    'padding: 8px;',
                    'transform: translate(-50%, -50%);',
                    'transition: none;',
                    '}',
                  ].join(''));
                });
              },
              trigger: {
                global: ["phaseUseBegin", "damageBegin2"],
              },
              filter(event, player) {
                return event.player.countExpansions("jlsg_zhuxing");
              },
              async cost(event, trigger, player) {
                const { result } = await player.chooseButton([`灵泽：是否将其中一张“逐星”牌置于牌堆顶，令${get.translation(trigger.player)}进行许愿？`, trigger.player.getExpansions("jlsg_zhuxing")])
                  .set("ai", button => {
                    const card = button.link,
                      player = _status.event.player,
                      target = _status.event.getTrigger().player;
                    if (get.attitude(player, target) < 0) return 0;
                    else if (get.effect(target, card, player, player) <= 0) return 114514;
                    else return 50 - get.effect(target, card, player, player);
                  })
                if (result.bool) event.result = { bool: true, cards: result.links, targets: [trigger.player] };
                else event.result = { bool: false };
              },
              async content(event, trigger, player) {
                game.log(player, "将", event.cards, "置于了牌堆顶");
                trigger.player.$throw(event.cards, 1000);
                await game.cardsGotoPile(event.cards, "insert");
                if (!trigger.player.countExpansions("jlsg_zhuxing")) trigger.player.unmarkSkill("jlsg_zhuxing");
                game.addCardKnower([_status.pileTop], "everyone");
                const list = ["选项一", "选项二", "选项三", "cancel2"],
                  typeList = [
                    "征伐（额外获得一张随机类型的临时【杀】）",
                    "宁息（额外获得一张临时【桃】）",
                    "混沌（额外获得一张随机临时牌）",
                  ];
                const { result: typeChoose } = await trigger.player.chooseControl(list)
                  .set("choiceList", typeList)
                  .set("prompt", "灵泽：请选择一个命运")
                  .set("ai", () => {
                    const player = _status.event.player;
                    if (player.isDamaged()) return "选项二";
                    return "选项一";
                  });
                if (typeChoose.control != "cancel2") {
                  let name, type;
                  switch (typeChoose.control) {
                    case "选项一": name = "sha"; type = "damage"; break;
                    case "选项二": name = "tao"; type = "recover"; break;
                    case "选项三": name = null; type = "chaos"; break;
                  };
                  const copy = lib.skill.jlsg_lingze.getEffects[type].randomGets(3),
                    card = lib.skill.jlsg_lingze.createTempCard(name);
                  if (card) await trigger.player.gain(card, "draw");
                  const effectsList = [[null, {}], [null, {}], [null, {}]];
                  for (let i = 0; i < copy.length; i++) {
                    effectsList[i][0] = copy[i][0];
                    effectsList[i][1].content = copy[i][1].content;
                    effectsList[i][1].effect = copy[i][1].effect;
                  };
                  if (!copy.some(i => i[0] == "随机两个技能") && Math.random() < 0.5) {
                    effectsList[2] = ["随机两个技能", {
                      content: async function (event, trigger, player) {
                        await player.addSkills(event.gainSkills);
                      },
                      effect() { return 4; },
                    }];
                  }
                  else if (effectsList.some((i, v) => i[0] == "随机两个技能" && v != 2)) {
                    const num = effectsList.map(i => i[0]).indexOf("随机两个技能");
                    effectsList[num] = effectsList[2];
                    effectsList[2] = ["随机两个技能", {
                      content: async function (event, trigger, player) {
                        await player.addSkills(event.gainSkills);
                      },
                      effect() { return 4; },
                    }];
                  }
                  for (let i = 0; i < effectsList.length; i++) {
                    const [str, { content }] = effectsList[i];
                    const next = game.createEvent("jlsg_xuyuan_effect", false, event)
                      .set("player", trigger.player)
                      .set("jlsg_xuyuan_type", type);
                    event.next.remove(next);
                    next.setContent(content);
                    if (str.includes("伤害")) {
                      let nature = lib.card.sha.nature.concat([null]).randomGet();
                      next.set("nature", nature)
                      if (nature !== null) {
                        let list = str.split("伤害");
                        effectsList[i][0] = list[0] + get.translation(nature) + "伤害" + list[1];
                      }
                    }
                    /*else if (str.includes("角色") && str.includes("|")) {
                      let [str1, str3] = str.split("(");
                      let [numList, str2] = str3.split(")");
                      let num = numList.split("|").map(i => Number(i)).randomGet();
                      next.set("num", num)
                      effectsList[i][0] = str1 + get.cnNumber(num) + str2;
                    }*/
                    else if ((str.startsWith("获得") || str.startsWith("弃置")) && str.includes("|")) {
                      let [str1, str3] = str.split("(");
                      let [cardList, str2] = str3.split(")");
                      let cardName = cardList.split("|").randomGet();
                      next.set("cardName", cardName)
                      effectsList[i][0] = str1 + get.translation(cardName) + str2;
                    }
                    else if (str == "随机两个技能") {
                      let gains = lib.skill.jlsg_lingze.skills
                        .filter(skill => lib.skill.jlsg_lingze.typeSkills[type].some(i => i == lib.translate[skill]))
                        .randomGets(2);
                      next.set("gainSkills", gains);
                      let list = gains.map(i => `【${get.skillTranslation(i, trigger.player)}】`);
                      effectsList[i][0] = `获得${list}`;
                    }
                    effectsList[i][1].content = next;
                  };
                  const translate = function (str1, str2) {//来自活动武将
                    const id = Math.random().toString(36).slice(-8);
                    return "<a id='" + id + "' style='color:unset' href=\"javascript:get.bolskillTips('" + str2 + "','" + id + "');\">" + str1 + "</a>";
                  };
                  const effectPrompt = effectsList.map((i, v) => {
                    let str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">选项' + get.cnNumber(v + 1, true) + "：" + i[0] + "</div>";
                    if (i[1].content?.gainSkills) {
                      const gainSkills = i[1].content.gainSkills;
                      str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">选项' +
                        get.cnNumber(v + 1, true) +
                        "：获得" +
                        translate(get.translation(gainSkills[0]), lib.translate[gainSkills[0] + "_info"]) +
                        "和" +
                        translate(get.translation(gainSkills[1]), lib.translate[gainSkills[1] + "_info"]) +
                        "</div>";
                      /*for (let skill of gainSkills) {
                        str += '<div class="popup pointerdiv" style="width:calc(100% - 10px);display:inline-block"><div class="skill">【' +
                          get.translation(skill) +
                          "】</div><div>" +
                          lib.translate[skill + "_info"] +
                          "</div></div>";
                      };*/
                    }
                    return str;
                  });
                  const { result: effectChoose } = await trigger.player.chooseControl(list)
                    .set("dialog", ["灵泽：请选择一个效果", [effectPrompt, "textbutton"]])
                    .set("ai", () => {
                      if (_status.event.choice) return _status.event.choice;
                      return ["选项一", "选项二", "选项三"].randomGet();
                    })
                    .set("choice", (function () {
                      let aiList = effectsList.map(i => {
                        let arr = i[1].content.nature || i[1].content.cardName;
                        return i[1].effect(player, arr);
                      });
                      let max = Math.max(...aiList);
                      return list[aiList.indexOf(max)];
                    })());
                  if (effectChoose.control != "cancel2") {
                    game.log(trigger.player, "获得的效果为", `#r${effectsList[list.indexOf(effectChoose.control)][0]}`);
                    const next = effectsList[list.indexOf(effectChoose.control)][1].content;
                    event.next.add(next);
                    await next;
                  }
                }
              },
              get getEffects() {
                const result = {
                  damage: [
                    ["令一名角色交给你四张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色交给你四张牌`, true)
                          .set("filterTarget", (card, player, target) => target.countGainableCards(player, "he"))
                          .set("num", 4)
                          .set("ai", target => {
                            const player = _status.event.player,
                              num = _status.event.num
                            return get.effect(target, { name: "shunshou_copy2" }, player, player) * Math.min(num, target.countGainableCards(player, "he"));
                          });
                        if (result.bool) {
                          await result.targets[0].chooseToGive(player, 4, true, "he");
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "shunshou_copy2" }, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令一名角色弃置六张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色弃置六张牌`, true)
                          .set("filterTarget", (card, player, target) => target.countDiscardableCards(target, "he"))
                          .set("num", 6)
                          .set("ai", target => {
                            const player = _status.event.player,
                              num = _status.event.num
                            return get.effect(target, { name: "guohe_copy2" }, player, player) * Math.min(num, target.countGainableCards(player, "he"));
                          });
                        if (result.bool) {
                          await result.targets[0].chooseToDiscard(6, true, "he");
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "guohe_copy2" }, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各交给你两张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各交给你两张牌`, true)
                          .set("filterTarget", (card, player, target) => target.countGainableCards(player, "he"))
                          .set("num", 2)
                          .set("ai", target => {
                            const player = _status.event.player,
                              num = _status.event.num
                            return get.effect(target, { name: "shunshou_copy2" }, player, player) * Math.min(num, target.countGainableCards(player, "he"));
                          });
                        if (result.bool) {
                          result.targets.sortBySeat(player);
                          for (const target of result.targets) {
                            await target.chooseToGive(player, 2, true, "he");
                          }
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "shunshou_copy2" }, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各弃置四张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各弃置四张牌`, true)
                          .set("filterTarget", (card, player, target) => target.countDiscardableCards(player, "he"))
                          .set("num", 4)
                          .set("ai", target => {
                            const player = _status.event.player,
                              num = _status.event.num
                            return get.effect(target, { name: "guohe_copy2" }, player, player) * Math.min(num, target.getDiscardableCards(player, "he"));
                          });
                        if (result.bool) {
                          result.targets.sortBySeat(player);
                          for (const target of result.targets) {
                            const done = await target.chooseToDiscard(4, true, "he");
                          };
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "guohe_copy2" }, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令所有其他角色各交给你一张牌", {
                      content: async function (event, trigger, player) {
                        const targets = game.filterPlayer().remove(player).sortBySeat(player);
                        for (const target of targets) {
                          await target.chooseToGive(player, 1, true, "he");
                        };
                      },
                      effect(player) {
                        return game.countPlayer(current => current != player && get.effect(current, { name: "shunshou_copy2" }, player, player) > 0)
                      },
                    }],
                    ["令所有其他角色各弃置两张牌", {
                      content: async function (event, trigger, player) {
                        const targets = game.filterPlayer().remove(player).sortBySeat(player);
                        for (const target of targets) {
                          const done = await target.chooseToDiscard(2, true, "he");
                        }
                      },
                      effect(player) {
                        const targets = game.filterPlayer().sortBySeat(player);
                        return targets.reduce((eff, target) => eff + get.effect(target, { name: "guohe_copy2" }, player, player), 0) / targets.length;
                      },
                    }],
                    ["令一名角色减少2点体力上限", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色减少2点体力上限`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return 5 - get.attitude(player, target);
                          });
                        if (result.bool) {
                          await result.targets[0].loseMaxHp(2);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.attitude(player, current) < 0)) return 2;
                        return 0;
                      },
                    }],
                    ["令一名角色失去2点体力", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色失去2点体力`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "losehp" }, player, player);
                          });
                        if (result.bool) {
                          await result.targets[0].loseHp(2);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "losehp" }, player, player) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["对一名角色造成2点伤害", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`对一名角色造成2点${event.nature ? get.translation(event.nature) : ""}伤害`, true)
                          .set("nature", event.nature)
                          .set("ai", target => {
                            const player = _status.event.player,
                              nature = _status.event.nature;
                            return get.damageEffect(target, player, player, nature);
                          });
                        if (result.bool) {
                          await result.targets[0].damage(2, event.nature, player);
                        }
                      },
                      effect(player, nature) {
                        if (game.hasPlayer(current => current != player && get.damageEffect(current, player, player, nature) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["令一名角色随机失去两个技能", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色失去两个技能`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            if (!target.getSkills(null, false, false).length) return 0;
                            return 10 - get.attitude(player, target);
                          });
                        if (result.bool) {
                          const target = result.targets[0];
                          let skills = target.getSkills(null, false, false).filter(i => {
                            if (!lib.translate[i] || !lib.translate[i + "_info"]) return false;
                            let info = get.info(i);
                            return info && !info.charlotte;
                          });
                          if (skills.length) await target.removeSkills(skills.randomGets(2));
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.attitude(player, current) < 0 && current.getSkills(null, false, false).length)) return 2;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各减少1点体力上限", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各减少1点体力上限`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return 5 - get.attitude(player, target);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) {
                            await target.loseMaxHp();
                          }
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.attitude(player, current) < 0)) return 2;
                        return 0
                      },
                    }],
                    ["令至多两名角色各失去1点体力", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各失去1点体力`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "losehp" }, player, player);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) {
                            await target.loseHp();
                          }
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.effect(current, { name: "losehp" }, player, player) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["对至多两名角色各造成1点伤害", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `对至多两名角色各造成1点${event.nature ? get.translation(event.nature) : ""}伤害`, true)
                          .set("nature", event.nature)
                          .set("ai", target => {
                            const player = _status.event.player,
                              nature = _status.event.nature;
                            return get.damageEffect(target, player, player, nature);
                          });
                        if (result.bool) {
                          await result.targets[0].damage(1, event.nature, player);
                        }
                      },
                      effect(player, nature) {
                        if (game.hasPlayer(current => current != player && get.damageEffect(current, player, player, nature) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各随机失去一个技能", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各随机失去一个技能`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            if (!target.getSkills(null, false, false).length) return 0;
                            return 10 - get.attitude(player, target);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) {
                            let skills = target.getSkills(null, false, false).filter(i => {
                              if (!lib.translate[i] || !lib.translate[i + "_info"]) return false;
                              let info = get.info(i);
                              return info && !info.charlotte;
                            });
                            if (skills.length) await target.removeSkills(skills.randomGet());
                          }
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => current != player && get.attitude(player, current) < 0 && current.getSkills(null, false, false).length)) return 2;
                        return 0;
                      },
                    }],
                    ["令一名角色翻面", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色翻面`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            const att = get.attitude(player, target);
                            if (target.hasSkillTag("noturn")) return 0;
                            if (target.isTurnedOver()) return att;
                            return 5 - att;
                          });
                        if (result.bool) {
                          await result.targets[0].turnOver();
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => {
                          const att = get.attitude(player, current);
                          if (current.hasSkillTag("noturn")) return 0;
                          if (current.isTurnedOver()) return att > 0;
                        })) return 2;
                        return 0;
                      },
                    }],
                    ["令任意名角色横置", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, game.countPlayer()], `令任意名角色横置`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "tiesuo" }, player, player);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) await target.link();
                        };
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "shunshou_copy" }, player, player) > 0)) return game.countPlayer();
                      },
                    }],

                    ["获得三张【(nanman|wanjian)】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(event.cardName);
                          if (card) cards.add(card);
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        if (!lib.card[cardName]) return 0;
                        const card = get.autoViewAs({ name: cardName, isCard: true }, "unsure");
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得六张【过河拆桥】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("guohe");
                          if (card) cards.add(card);
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        if (!lib.card["guohe"]) return 0;
                        const card = get.autoViewAs({ name: "guohe", isCard: true }, "unsure");
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得四张【顺手牵羊】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("shunshou");
                          if (card) cards.add(card);
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        if (!lib.card["shunshou"]) return 0;
                        const card = get.autoViewAs({ name: "shunshou", isCard: true }, "unsure");
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得两张【火攻】、两张【铁索连环】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 2; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("huogong");
                          if (card) cards.add(card);
                        }
                        for (let i = 0; i < 2; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("tiesuo");
                          if (card) cards.add(card);
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "huogong", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "tiesuo", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【火攻】、四张花色不同的随机牌", {
                      content: async function (event, trigger, player) {
                        const cards = [lib.skill.jlsg_lingze.createTempCard("huogong")];
                        for (let suit of lib.suit) {
                          let card = lib.skill.jlsg_lingze.createTempCard(null, suit);
                          if (card) cards.add(card);
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card = get.autoViewAs({ name: "huogong", isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得六张随机属性【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card = get.autoViewAs({ name: "huogong", isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得一张【酒】、两张【铁索连环】、一张火【杀】、一张雷【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                          lib.skill.jlsg_lingze.createTempCard("tiesuo"),
                          lib.skill.jlsg_lingze.createTempCard("tiesuo"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, "fire"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, "thunder"),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card = get.autoViewAs({ name: "sha", isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得两张【决斗】、两张【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("juedou"),
                          lib.skill.jlsg_lingze.createTempCard("juedou"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "juedou", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【乐不思蜀】、一张【兵粮寸断】、一张【(shandian|jlsgqs_shuiyanqijun)】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("lebu"),
                          lib.skill.jlsg_lingze.createTempCard("bingliang"),
                          lib.skill.jlsg_lingze.createTempCard(event.cardName),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        if (!lib.card[cardName]) return;
                        const card1 = get.autoViewAs({ name: "lebu", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "bingliang", isCard: true }, "unsure"),
                          card3 = get.autoViewAs({ name: cardName, isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2) + player.getUseValue(card3);
                      },
                    }],
                    ["获得一张【南蛮入侵】、一张【万箭齐发】、一张【决斗】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("nanman"),
                          lib.skill.jlsg_lingze.createTempCard("wanjian"),
                          lib.skill.jlsg_lingze.createTempCard("juedou"),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "nanman", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "wanjian", isCard: true }, "unsure"),
                          card3 = get.autoViewAs({ name: "juedou", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2) + player.getUseValue(card3);
                      },
                    }],
                    ["获得两张【酒】、三张【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "jiu", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure")
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【过河拆桥】、一张【顺手牵羊】、一张【决斗】、一张【酒】、一张【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("guohe"),
                          lib.skill.jlsg_lingze.createTempCard("shunshou"),
                          lib.skill.jlsg_lingze.createTempCard("juedou"),
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                          lib.skill.jlsg_lingze.createTempCard("sha"),
                        ].flat();
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "nanman", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "wanjian", isCard: true }, "unsure"),
                          card3 = get.autoViewAs({ name: "juedou", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2) + player.getUseValue(card3);
                      },
                    }],
                    ["获得一张【诸葛连弩】、一张进攻马、三张随机属性【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("zhuge"),
                        ];
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet());
                          if (card) cards.add(card).flat();
                        };
                        let attack = lib.inpile.filter(name => {
                          if (get.type(name, null, false) != "equip") return false;
                          const card = lib.card[name];
                          return card.distance?.globalFrom;
                        }).randomGet();
                        cards.add(lib.skill.jlsg_lingze.createTempCard(attack)).flat();
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "zhuge", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【贯石斧】、一张【酒】、两张随机属性【杀】、两张随机牌", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("guanshi"),
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                        ];
                        for (let i = 0; i < 2; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet());
                          if (card) cards.add(card).flat();
                        };
                        for (let i = 0; i < 2; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(null);
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "guanshi", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【青龙偃月刀】、四张随机属性【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("qinglong"),
                        ];
                        for (let i = 0; i < 4; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet());
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "qinglong", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["获得一张【丈八蛇矛】、四张随机牌", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("zhangba"),
                        ];
                        for (let i = 0; i < 4; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(null);
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card = get.autoViewAs({ name: "zhangba", isCard: true }, "unsure");
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得一张【(cixiong|fangtian|qinggang|qilin|zhuque)】、一张【酒】、两张随机属性【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard(event.cardName),
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                        ];
                        for (let i = 0; i < 2; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet());
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        const card1 = get.autoViewAs({ name: cardName, isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "jiu", isCard: true }, "unsure"),
                          card3 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2) + player.getUseValue(card3);
                      },
                    }],
                    ["获得一张【古锭刀】、一张【过河拆桥】、一张【酒】、一张随机属性【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("guding"),
                          lib.skill.jlsg_lingze.createTempCard("guohe"),
                          lib.skill.jlsg_lingze.createTempCard("jiu"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, lib.card.sha.nature.randomGet()),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "guding", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "guohe", isCard: true }, "unsure"),
                          card3 = get.autoViewAs({ name: "jiu", isCard: true }, "unsure"),
                          card4 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2) + player.getUseValue(card3) + player.getUseValue(card4);
                      },
                    }],
                    ["获得一张【寒冰剑】、一张【杀】、一张火【杀】、一张雷【杀】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("hanbing"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, null),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, "fire"),
                          lib.skill.jlsg_lingze.createTempCard("sha", null, "thunder"),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "hanbing", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "sha", isCard: true }, "unsure");
                        return player.getUseValue(card1) + player.getUseValue(card2);
                      },
                    }],
                    ["随机两个技能", {
                      content: async function (event, trigger, player) {
                        await player.addSkills(event.gainSkills);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                  ],
                  recover: [
                    ["令一名角色摸六张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色摸六张牌`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "draw" }, player, player);
                          });
                        if (result.bool) {
                          await result.targets[0].draw(6);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "draw" }, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各摸四张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各摸四张牌`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "draw" }, player, player);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) await target.draw(4);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "draw" }, player, player) > 0)) return 3;
                        return 0;
                      },
                    }],
                    ["令所有角色各摸两张牌", {
                      content: async function (event, trigger, player) {
                        const targets = game.filterPlayer().sortBySeat(player);
                        for (const target of targets) await target.draw(2);
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "draw" }, player, player) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["令一名角色回复3点体力", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一两名角色回复3点体力`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.recoverEffect(target, player, player);
                          });
                        if (result.bool) {
                          await result.targets[0].recover(3);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.recoverEffect(current, player, player) > 0)) return 4;
                        return 0;
                      },
                    }],
                    ["令一名角色增加2点体力上限", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget(`令一名角色增加2点体力上限`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.attitude(player, target);
                          });
                        if (result.bool) {
                          await result.targets[0].gainMaxHp(2);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.attitude(player, current) > 0)) return 2;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各回复2点体力", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各回复2点体力`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.recoverEffect(target, player, player);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) await target.recover(2);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.recoverEffect(current, player, player) > 0)) return 3;
                        return 0;
                      },
                    }],
                    ["令至多两名角色各增加1点体力上限", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, 2], `令至多两名角色各增加1点体力上限`, true)
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.attitude(player, target);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) await target.gainMaxHp(1);
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.attitude(player, current) > 0)) return 3;
                        return 0;
                      },
                    }],
                    ["令所有角色各回复1点体力", {
                      content: async function (event, trigger, player) {
                        const targets = game.filterPlayer().sortBySeat(player);
                        for (const target of targets) await target.recover(1);
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.recoverEffect(current, player, player) > 0)) return 1;
                        return 0;
                      },
                    }],
                    ["令所有角色各增加1点体力上限", {
                      content: async function (event, trigger, player) {
                        const targets = game.filterPlayer().sortBySeat(player);
                        for (const target of targets) await target.gainMaxHp(1);
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.attitude(player, current) > 0)) return 1;
                        return 0;
                      },
                    }],
                    ["使用【杀】次数上限+4", {
                      content: async function (event, trigger, player) {
                        if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                        await game.delayx();
                        player.storage.jlsg_lingze_effect.sha += 4;
                      },
                      effect(player) {
                        if (player.getUseValue("sha") > 0) return 2;
                        return 0;
                      },
                    }],
                    ["手牌上限+4", {
                      content: async function (event, trigger, player) {
                        if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                        await game.delayx();
                        player.storage.jlsg_lingze_effect.maxHandcard += 4;
                      },
                      effect() {
                        return 2;
                      },
                    }],
                    ["摸牌阶段额定摸牌数+2", {
                      content: async function (event, trigger, player) {
                        if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                        await game.delayx();
                        player.storage.jlsg_lingze_effect.draw += 2;
                      },
                      effect(player) {
                        if (get.effect(player, { name: "draw" }, player, player) > 0) return 2;
                        return 0;
                      },
                    }],
                    ["获得两张【闪】、两张【桃】", {
                      content: async function (event, trigger, player) {
                        const cards = [
                          lib.skill.jlsg_lingze.createTempCard("shan"),
                          lib.skill.jlsg_lingze.createTempCard("shan"),
                          lib.skill.jlsg_lingze.createTempCard("tao"),
                          lib.skill.jlsg_lingze.createTempCard("tao"),
                        ];
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card1 = get.autoViewAs({ name: "shan", isCard: true }, "unsure"),
                          card2 = get.autoViewAs({ name: "tao", isCard: true }, "unsure");
                        return get.value(card1, player) + player.getUseValue(card2);
                      },
                    }],
                    ["获得四张【(tao|taoyuan|wugu|jlsgqs_qingmeizhujiu)】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 4; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(event.cardName);
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        const card = get.autoViewAs({ name: cardName, isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得六张【(shan|wuxie)】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(event.cardName);
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        const card = get.autoViewAs({ name: cardName, isCard: true }, "unsure")
                        return get.value(card, player);
                      },
                    }],
                    ["获得三张【(wuzhong|jlsgqs_wangmeizhike)】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(event.cardName);
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        if (!lib.card[cardName]) return;
                        const card = get.autoViewAs({ name: cardName, isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得三张【白银狮子】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard("baiyin");
                          if (card) cards.add(card).flat();
                        };
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        const card = get.autoViewAs({ name: "baiyin", isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["获得一张防御马、一张【(bagua|renwang|tengjia|baiyin)】", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let attack = lib.inpile.filter(name => {
                          if (get.type(name, null, false) != "equip") return false;
                          const card = lib.card[name];
                          return card.distance?.globalTo;
                        }).randomGet();
                        cards.add(lib.skill.jlsg_lingze.createTempCard(attack)).flat();
                        cards.add(lib.skill.jlsg_lingze.createTempCard(event.cardName)).flat();
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player, cardName) {
                        const card = get.autoViewAs({ name: cardName, isCard: true }, "unsure")
                        return player.getUseValue(card);
                      },
                    }],
                    ["随机两个技能", {
                      content: async function (event, trigger, player) {
                        await player.addSkills(event.gainSkills);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                  ],
                  chaos: [
                    ["选择任意名角色，令这些角色各进行一次【闪电】判定", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, game.countPlayer()], `令任意名角色各进行一次【闪电】判定`, true)
                          .set("ai", target => {
                            const player = _status.event.player,
                              card = _status.pileTop;
                            let damage = get.damageEffect(target, undefined, player, "thunder"),
                              result = {
                                card: card,
                                name: card.name,
                                number: get.number(card),
                                suit: get.suit(card),
                                color: get.color(card),
                              };
                            if (!ui.selected.targets.length) {
                              if (lib.card.shandian.judge(card) < 0) result.bool = false;
                              else if (lib.card.shandian.judge(card) > 0) result.bool = true;
                              else result.bool = null;
                              _status.event.cardname = "shandian";
                              game.checkMod(target, result, "judge", target);
                              delete _status.event.cardname;
                              if (result.bool) return damage;
                            }
                            return damage;
                          })
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          for (const target of targets) await target.executeDelayCardEffect("shandian");
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.damageEffect(current, player, player, "thunder") > 0)) return 3;
                      },
                    }],
                    ["连续进行六次判定，结果为：红桃，增加1点体力上限并回复1点体力；黑桃，失去1点体力；梅花，随机弃置一点手牌；方片，摸四张牌", {
                      content: async function (event, trigger, player) {
                        for (let i = 0; i < 6; i++) {
                          await player.judge(function (result) {
                            if (get.color(result) == "black") return 0;
                            return 1;
                          })
                            .set("judgestr", "许愿")
                            .set("callback", async function (event, trigger, player) {
                              const suit = event.judgeResult.suit;
                              switch (suit) {
                                case "heart":
                                  await player.gainMaxHp(1);
                                  await player.recover(1);
                                  break;
                                case "spade":
                                  await player.loseHp(1);
                                  break;
                                case "club":
                                  if (player.countDiscardableCards(player, "h")) await player.randomDiscard(1, "h");
                                  break;
                                case "diamond":
                                  await player.draw(4);
                                  break;
                              };
                            })
                            .set("judge2", function (result) {
                              return result.bool ? true : false;
                            });
                        }
                      },
                      effect(player) {
                        return 1;
                      },
                    }],
                    ["连续进行六次判定，结果为：红桃，摸牌数+1；黑桃，失去1点体力；梅花，手牌上限+1；方片，使用【杀】次数上限+1", {
                      content: async function (event, trigger, player) {
                        for (let i = 0; i < 6; i++) {
                          await player.judge(function (result) {
                            if (get.suit(result) == "spade") return 0;
                            return 1;
                          })
                            .set("judgestr", "许愿")
                            .set("callback", async function (event, trigger, player) {
                              const suit = event.judgeResult.suit;
                              switch (suit) {
                                case "heart":
                                  if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                                  player.storage.jlsg_lingze_effect.draw++;
                                  break;
                                case "spade":
                                  await player.loseHp(1);
                                  break;
                                case "club":
                                  if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                                  player.storage.jlsg_lingze_effect.maxHandcard++;
                                  break;
                                case "diamond":
                                  if (!player.hasSkill("jlsg_lingze_effect")) player.addSkill("jlsg_lingze_effect");
                                  player.storage.jlsg_lingze_effect.sha++;
                                  break;
                              };
                            })
                            .set("judge2", function (result) {
                              return result.bool ? true : false;
                            });
                        }
                      },
                      effect(player) {
                        return 1.5;
                      },
                    }],
                    ["弃置所有手牌，获得两倍的基本牌、锦囊牌或装备", {
                      content: async function (event, trigger, player) {
                        const hs = player.getDiscardableCards(player, "h");
                        if (hs.length) {
                          await player.discard(hs);
                          const type = ["basic", "trick", "equip"].randomGet(),
                            cards = [];
                          let cardList = lib.inpile.filter(name => {
                            if (get.type2(name, player) != type) return false;
                            return true;
                          });
                          for (let i = 0; i < hs.length * 2; i++) {
                            let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet())
                            if (card) cards.add(card).flat();
                          };
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        }
                      },
                      effect(player) {
                        let num = player.countDiscardableCards(player, "h")
                        if (num) return num * 2;
                        return 0;
                      },
                    }],
                    ["选择失去任意个技能，然后获得三倍数量的技能", {
                      content: async function (event, trigger, player) {
                        const skills = player.getSkills(null, false, false)
                          .filter(i => {
                            if (!lib.translate[i] || !lib.translate[i + "_info"]) return false;
                            let info = get.info(i);
                            return info && !info.charlotte;
                          })
                        if (skills.length) {
                          const buttons = skills.map(i => [
                            i,
                            '<div class="popup pointerdiv" style="width:80%;display:inline-block"><div class="skill">【' +
                            get.translation(i) +
                            "】</div><div>" +
                            lib.translate[i + "_info"] +
                            "</div></div>"
                          ]);
                          const { result } = await player.chooseButton([1, skills.length], true, ["选择要失去的技能（一次性至多获得50个技能）", [buttons, "textbutton"]])
                            .set("ai", button => {
                              if (get.info(button.link).ai?.neg) return 114514;
                              if (ui.selected.buttons?.length >= 16) return 0;
                              return 5 - get.skillRank(button.link);
                            })
                          if (result.bool) {
                            let gains = get.gainableSkills();
                            gains.removeArray(player.getSkills());
                            let num = Math.min(result.links.length * 3, 50)
                            gains = gains.randomGets(num);
                            player.changeSkills(gains, result.links)
                              .set("$handle", (player, addSkill, removeSkill) => {
                                if (removeSkill.length) {
                                  player.removeSkill(removeSkill);
                                  game.log(
                                    player,
                                    "失去了技能",
                                    ...removeSkill
                                      .filter(i => i in lib.translate)
                                      .map(i => {
                                        return "#g【" + get.translation(i) + "】";
                                      })
                                  );
                                }
                                if (addSkill.length) {
                                  player.addSkill(addSkill);
                                  game.log(
                                    player,
                                    "获得了技能",
                                    ...addSkill
                                      .filter(i => i in lib.translate)
                                      .map(i => {
                                        return "#g【" + get.translation(i) + "】";
                                      })
                                  );
                                }
                              });
                          }
                        }
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                    ["选择任意名其他角色，从这些角色的每个区域里各随机获得一张牌", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([1, game.countPlayer()], `选择任意名其他角色，从这些角色的每个区域里各随机获得一张牌`, true)
                          .set("filterTarget", (card, player, target) => target != player && target.countGainableCards(player, "hej"))
                          .set("ai", target => {
                            const player = _status.event.player;
                            return get.effect(target, { name: "shunshou_copy" }, player, player);
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player);
                          const list = [],
                            position = "hej";
                          for (const target of targets) {
                            let cards = [];
                            for (let i of position) {
                              if (target.countGainableCards(player, i)) cards.add(target.getGainableCards(player, i).randomGet());
                            };
                            if (cards.length) {
                              target.$give(cards, player);
                              list.addArray(cards);
                            }
                          };
                          await game.loseAsync({
                            gain_list: [[player, list]],
                            cards: list[1],
                          }).setContent("gaincardMultiple");
                          await game.delayx();
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "shunshou_copy" }, player, player) > 0)) return game.countPlayer();
                      },
                    }],
                    ["选择至少两名角色，令这些角色顺时针各对你此法选择的剩余角色使用一张【杀】", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget([2, game.countPlayer()], `选择至少名角色，令这些角色顺时针各对你未以此法选择的角色使用一张【杀】`, true)
                          .set("ai", target => {
                            const player = _status.event.player,
                              sha = get.autoViewAs({ name: "sha", isCard: true }, []);
                            if (get.attitude(player, target > 0)) return target.getUseValue(sha);
                            else return get.attitude(player, target) < 0;
                          });
                        if (result.bool) {
                          const targets = result.targets.sortBySeat(player).reverse(),
                            sha = get.autoViewAs({ name: "sha", isCard: true }, []);
                          for (const target of targets) {
                            let targetx = targets.filter(i => i != target && target.canUse(sha, i, false)).sortBySeat(target);
                            if (targetx.length) await target.useCard(sha, targetx);
                          };
                        }
                      },
                      effect(player) {
                        if (game.hasPlayer(current => get.effect(current, { name: "sha" }, player, player) > 0)) return 2;
                      },
                    }],
                    ["获得六张随机基本牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => get.type(name) == "basic");
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                    ["获得六张随机(red|black)牌", {
                      content: async function (event, trigger, player) {
                        const cards = [],
                          suits = event.cardName == "red" ? ["heart", "diamond"] : ["spade", "club"];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(null, suits.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                    ["获得六张随机(heart|spade|diamond|club)牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        for (let i = 0; i < 6; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(null, event.cardName);
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                    ["获得五张锦囊牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => get.type2(name) == "trick");
                        for (let i = 0; i < 5; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 3.5;
                      },
                    }],
                    ["获得五张普通锦囊牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => get.type(name) == "trick");
                        for (let i = 0; i < 5; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 3.5;
                      },
                    }],
                    ["获得五张延时锦囊牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => get.type(name) == "delay");
                        for (let i = 0; i < 5; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 3.5;
                      },
                    }],
                    ["获得四张装备牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => get.type2(name) == "equip");
                        for (let i = 0; i < 4; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 3;
                      },
                    }],
                    ["获得三张(equip1|equip2)牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList = lib.inpile.filter(name => {
                          if (get.type2(name) != "equip") return false;
                          return get.subtype(name) == event.cardName;
                        });
                        for (let i = 0; i < 4; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 3;
                      },
                    }],
                    ["获得三张基本牌、三张锦囊牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList1 = lib.inpile.filter(name => get.type2(name) == "basic"),
                          cardList2 = lib.inpile.filter(name => get.type2(name) == "trick");
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList1.randomGet());
                          if (card) cards.add(card).flat();
                          card = lib.skill.jlsg_lingze.createTempCard(cardList2.randomGet());
                          if (card) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 6;
                      },
                    }],
                    ["获得三张锦囊牌、两张装备牌", {
                      content: async function (event, trigger, player) {
                        const cards = [];
                        let cardList1 = lib.inpile.filter(name => get.type2(name) == "equip"),
                          cardList2 = lib.inpile.filter(name => get.type2(name) == "trick");
                        for (let i = 0; i < 3; i++) {
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList1.randomGet());
                          if (card) cards.add(card).flat();
                          card = lib.skill.jlsg_lingze.createTempCard(cardList2.randomGet());
                          if (card && cards.length < 4) cards.add(card).flat();
                        }
                        if (cards.length) await player.gain(cards, "draw").set("log", true);
                      },
                      effect(player) {
                        return 5.5;
                      },
                    }],
                    ["选择一名角色，令其对其余所有角色连续使用六张同名非延时锦囊牌", {
                      content: async function (event, trigger, player) {
                        const list = lib.inpile.filter(name => {
                          if (get.type(name, null, false) != "trick") return false;
                          let info = lib.card[name];
                          if (!info || info.filterAddedTarget) return false;
                          return true;
                        });
                        const { result } = await player.chooseTarget("选择一名角色，令其对其余所有角色连续使用六张同名非延时锦囊牌", true)
                          .set("filterTarget", (_, player, target) => get.event("list").some(name => target.hasUseTarget(name)))
                          .set("ai", target => Math.random())
                          .set("list", list);
                        if (result.bool) {
                          const target = result.targets[0];
                          const cards = list.filter(name => target.hasUseTarget(name));
                          event.card = get.autoViewAs({ name: cards.randomGet(), isCard: true }, []);
                          game.log(target, "抽中的牌为", get.translation(event.card.name));
                          const targets = game.filterPlayer(current => current != target);
                          for (let i = 0; i < 6; i++) {
                            await target.useCard(event.card, targets.filter(i => i.isIn())).set("addCount", false);
                          };
                        }
                      },
                      effect(player) {
                        return 2;
                      },
                    }],
                    ["选择任意名角色，令这些角色各随机失去一个非初始技能，然后随机获得两个技能", {
                      content: async function (event, trigger, player) {
                        const { result } = await player.chooseTarget("选择任意名角色，令这些角色各随机失去一个非初始技能，然后随机获得两个技能", true, [1, game.countPlayer()])
                          .set("ai", target => Math.random())
                        if (result.bool) {
                          result.targets.sortBySeat(_status.currentPhase);
                          for (const target of result.targets) {
                            const loseList = target.getSkills(null, false, false).removeArray(target.getStockSkills());
                            if (loseList.length) await target.removeSkills(loseList.randomGet());
                            const addList = lib.skill.jlsg_lingze.skills.randomGets(2);
                            if (addList) await target.addSkills(addList);
                          };
                        }
                      },
                      effect(player) {
                        return 5.5;
                      },
                    }],
                    ["随机两个技能", {
                      content: async function (event, trigger, player) {
                        await player.addSkills(event.gainSkills);
                      },
                      effect(player) {
                        return 4;
                      },
                    }],
                  ],
                };
                let jlsg_qs = false;
                if (_status.connectMode) {
                  if (lib.configOL.cardPack.includes("jlsg_qs")) jlsg_qs = true;
                }
                else if (lib.config.cards.includes("jlsg_qs")) jlsg_qs = true;
                if (jlsg_qs) {
                  const list = {
                    damage: [
                      ["获得一张【(jlsgqs_xiujian|jlsgqs_qixingbaodao)】、一张随机武器牌、一张【酒】，一张普通【杀】", {
                        content: async function (event, trigger, player) {
                          const cards = [
                            lib.skill.jlsg_lingze.createTempCard(event.cardName),
                          ];
                          let cardList = lib.inpile.filter(name => get.subtype(name) == "equip1");
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomRemove());
                          if (card) cards.add(card);
                          cards.addArray([
                            lib.skill.jlsg_lingze.createTempCard("jiu"),
                            lib.skill.jlsg_lingze.createTempCard("sha", undefined, null),
                          ]);
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 4;
                        },
                      }],
                    ],
                    recover: [
                      ["获得一张【(jlsgqs_yuxi|jlsgqs_taipingyaoshu)】、一张随机防具牌、一张【无懈可击】，一张【梅】", {
                        content: async function (event, trigger, player) {
                          const cards = [
                            lib.skill.jlsg_lingze.createTempCard(event.cardName),
                          ];
                          let cardList = lib.inpile.filter(name => get.subtype(name) == "equip2");
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomRemove());
                          if (card) cards.add(card);
                          cards.addArray([
                            lib.skill.jlsg_lingze.createTempCard("wuxie"),
                            lib.skill.jlsg_lingze.createTempCard("jlsgqs_mei"),
                          ]);
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 4;
                        },
                      }],
                      ["获得一张【(jlsgqs_jinnangdai|jlsgqs_muniu)】、一张随机防具牌、一张【无中生有】，一张【梅】", {
                        content: async function (event, trigger, player) {
                          const cards = [
                            lib.skill.jlsg_lingze.createTempCard(event.cardName),
                          ];
                          let cardList = lib.inpile.filter(name => get.subtype(name) == "equip2");
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomRemove());
                          if (card) cards.add(card);
                          cards.addArray([
                            lib.skill.jlsg_lingze.createTempCard("wuzhong"),
                            lib.skill.jlsg_lingze.createTempCard("jlsgqs_mei"),
                          ]);
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 4.5;
                        },
                      }],
                      ["获得一张【孔明灯】、一张随机防具牌、两张张【无中生有】", {
                        content: async function (event, trigger, player) {
                          const cards = [
                            lib.skill.jlsg_lingze.createTempCard("jlsgqs_kongmingdeng"),
                          ];
                          let cardList = lib.inpile.filter(name => get.subtype(name) == "equip1");
                          let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomRemove());
                          if (card) cards.add(card);
                          cards.addArray([
                            lib.skill.jlsg_lingze.createTempCard("wuzhong"),
                            lib.skill.jlsg_lingze.createTempCard("wuzhong"),
                          ]);
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 5;
                        },
                      }],
                      ["获得一张【遁甲天书】、一张进攻马、一张防御马", {
                        content: async function (event, trigger, player) {
                          const cards = [
                            lib.skill.jlsg_lingze.createTempCard("jlsgqs_dunjiatianshu"),
                          ];
                          let attack = lib.inpile.filter(name => {
                            if (get.type(name, null, false) != "equip") return false;
                            const card = lib.card[name];
                            return card.distance?.globalFrom;
                          }).randomGet(),
                            defend = lib.inpile.filter(name => {
                              if (get.type(name, null, false) != "equip") return false;
                              const card = lib.card[name];
                              return card.distance?.globalTo;
                            }).randomGet();
                          cards.addArray([
                            lib.skill.jlsg_lingze.createTempCard(attack),
                            lib.skill.jlsg_lingze.createTempCard(defend),
                          ]);
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 4;
                        },
                      }],
                    ],
                    chaos: [
                      ["获得三张随机宝物牌", {
                        content: async function (event, trigger, player) {
                          const cards = [];
                          let cardList = lib.inpile.filter(name => get.subtype(name) == "equip5");
                          if (cardList.length < 4) cardList = [
                            'lingsheji', 'shanrangzhaoshu', 'changandajian_equip5', 'sanlve', 'zhaogujing',
                            'shufazijinguan', 'xuwangzhimian', 'zhuangshu_basic', 'zhuangshu_trick', 'zhuangshu_equip',
                            'dagongche', 'pilitoushiche', 'jlsgqs_kongmingdeng', 'jlsgqs_muniu', 'jlsgqs_yuxi',
                            'jlsgqs_taipingyaoshu', 'jlsgqs_dunjiatianshu', 'jlsgqs_qixingbaodao', 'jlsgqs_xiujian', 'jlsgqs_jinnangdai',
                            'muniu', 'tongque', 'tianjitu', 'taigongyinfu', 'zhaoshu',
                            'dinglanyemingzhu', 'yuxi', 'xinge', 'jinhe'];
                          if (!lib.inpile.some(i => i.startsWith("jlsgqs_"))) cardList = cardList.filter(i => !i.startsWith("jlsgqx_"));
                          for (let i = 0; i < 3; i++) {
                            let card = lib.skill.jlsg_lingze.createTempCard(cardList.randomRemove());
                            if (card) cards.add(card);
                          };
                          if (cards.length) await player.gain(cards, "draw").set("log", true);
                        },
                        effect(player) {
                          return 3;
                        },
                      }],
                    ],
                  };
                  for (let type in list) {
                    result[type].addArray(list[type]);
                  };
                }
                delete this.getEffects;
                this.getEffects = result;
                return result;
              },
              get typeSkills() {
                let list = {
                  damage: ['长驱', '电界', '横江', '无双', '龙胆', '习武', '酒诗',
                    '狂风', '纵欲', '慧觑', '止戈', '断粮', '引兵', '神速',
                    '咆哮', '武圣', '权倾', '扫讨', '笔伐', '剑舞', '贿生',
                    '悲歌', '缮甲', '献祭', '征南', '整毅', '蒺藜', '义从',
                    '扰梦', '虎痴', '啖睛', '诈降', '谱毁', '无畏', '焚营',
                    '伏诛', '严教', '授计', '溃诛', '祸世', '鸩毒', '湮灭',
                    '母仪', '反间', '千幻', '神戟', '琴音', '顺世', '铁骑',
                    '尚义', '猛进', '主宰', '惴恐', '逆施', '奔袭', '夙隐',
                    '诋毁', '鱼忧', '索魂', '八门', '三治', '残掠', '仇决',
                    '国色', '鬼门', '极弓', '蛮裔', '震魂', '劫焰', '刚烈',
                    '卸甲', '调度', '拒战', '观虚', '木牛', '寝情', '暴政',
                    '突围', '轻袭', '薮影', '眩惑', '神威', '缔盟', '鸡肋',
                    '魔兽', '傲才', '沉鱼', '魔舞', '魅心', '送丧', '落雷',
                    '狂傲', '纵情', '解烦', '温酒', '踏破', '凤吟', '虎啸',
                    '司敌', '搏战', '忠勇', '求援', '屯田', '逐寇', '曼舞',
                    '过论', '忠魂', '蚕食', '勇继', '国士', '画策', '游侠',
                    '贺春', '炼体', '狂斧', '戟舞', '献州', '奋威', '伏射',
                    '虚猩', '活墨', '天启', '朝臣', '颂词', '驱虎', '狼顾',
                    '灭计', '谦冲', '蓄劲', '魔箭', '奇袭', '恃傲', '制敌',
                    '死谏', '弓骑', '乱嗣', '强袭', '凌波', '星舞', '专擅',
                    '乱武', '旋风', '修罗', '三绝', '绝策', '决裂', '咒缚',
                    '激诏', '攻心', '延粮', '谗陷', '集军', '折节', '火计',
                    '醉酒', '截军', '妖惑', '待劳', '掠阵', '乱政', '凌怒',
                    '祸水', '忧戎', '悍勇', '落雁', '素检', '藏书', '永劫',
                    '神愤', '舌剑', '埋伏', '烈弓', '烈医', '逐鹿', '知命',
                    '摧锋', '陷嗣', '挑衅', '横行', '射戟', '戚乱', '龙咆',
                    '朝凰', '酋首', '龙魂', '迷乱', '极武', '筹略', '米道',
                    '罪论', '布教', '独进', '战绝', '飞军'],
                  recover: ['甘露', '孤城', '芳馨', '礼让', '存嗣', '严整', '天辩',
                    '伏枥', '豹变', '法恩', '匡弼', '红颜', '大雾', '遗计',
                    '蛮王', '兴学', '秉壹', '品第', '天姿', '姻盟', '绝勇',
                    '御策', '诛暴', '羽化', '据守', '纵玄', '义谏', '谦逊',
                    '温良', '明政', '矫诏', '威风', '才遇', '倾国', '娇媚',
                    '无言', '五禽', '帷幕', '锦织', '鏖战', '放权', '狂暴',
                    '闭月', '凤仪', '经纶', '连营', '七星', '乘风', '隐世',
                    '天命', '溃围', '全政', '智迟', '极略', '贤士', '招降',
                    '闪戏', '强识', '衍息', '仁德', '恭慎', '怀璧', '奇才',
                    '勘误', '享乐', '帷幄', '困奋', '空城', '储元', '仁心',
                    '权略', '淑贤', '雅士', '直言', '良缘', '游龙', '捧日',
                    '归命', '昭心', '资国', '尚俭', '闺秀', '归心', '断念',
                    '奋激', '涅槃', '武志', '省身', '武继', '忍忌', '落英',
                    '扶汉', '祸心', '涉猎', '好施', '制衡', '父志', '普渡',
                    '缓兵', '誓仇', '八阵', '忘隙', '昂扬', '陈情', '密诏',
                    '明策', '才捷', '衡势', '掣政', '狡慧', '追尊', '倾城',
                    '虎踞', '雅虑', '儒宗', '刚直', '激词', '伏间', '鼓舌',
                    '自守', '无前', '迭嶂', '宴诛', '绝境', '淫恣', '英才',
                    '举荐', '博略', '行殇', '怀异', '拜月', '重生', '权计',
                    '矢北', '仙授', '结姻', '刀侍', '反骨', '渐营', '天香',
                    '雄略', '龙变', '元化', '枭姬', '单骑', '同心', '狂言'],
                  chaos: ['五禽', '烈弓', '冲阵', '凌虐', '募马', '残掠', '咆哮',
                    '勘误', '征南', '米道', '智愚', '凌弱', '震魂', '流离',
                    '乱武', '刚直', '摧锋', '劝降', '伏诛', '刻死', '享乐',
                    '掩杀', '慷忾', '品第', '天策', '搏战', '大雾', '剑舞',
                    '缓兵', '太平', '折节', '箜篌', '逆战', '掣政', '温良',
                    '当先', '焚城', '帷幕', '天妒', '神戟', '国色', '追击',
                    '制合', '八门', '炼体', '雷魂', '七星', '三分', '攻心',
                    '蒺藜', '空城', '观虚', '火计', '激词', '变天', '骄矜',
                    '恩怨', '雷祭', '洞察', '魔箭', '恃傲', '烈医', '虎缚',
                    '严整', '饵敌', '固政', '忧恤', '威震', '闭月', '飞军',
                    '蓄劲', '追忆', '龙吟', '隐世', '衡势', '凤吟', '断粮',
                    '娇媚', '绝境', '专擅', '承志', '伏枥', '伏间', '酒诗',
                    '连环', '才鉴', '乱政', '素检', '流云', '离间', '御象',
                    '战绝', '暴政', '狂暴', '勇烈', '蛮王', '落英', '涅槃',
                    '雅虑', '狂傲', '司敌', '峻刑', '回春', '挑衅', '惠敛',
                    '狂袭', '倾城', '横江', '曼舞', '商道', '神愤', '君望',
                    '天辩', '悍勇', '顺世', '鱼忧', '贤士', '滔乱', '雄异',
                    '机巧', '弓骑', '刀侍', '怒发', '魅惑', '狂骨', '风雅',
                    '魔舞', '截军', '匡弼', '索魂', '千幻', '闪戏', '挥泪',
                    '不屈', '无畏', '结姻', '罪论', '怀橘', '巧变', '淑贤',
                    '鏖战', '忧戎', '千骑', '湮灭', '狂言', '仙授', '纵玄'],
                };
                delete this.typeSkills;
                this.typeSkills = list;
                return list;
              },
              get skills() {
                const skills = [];
                for (const packname in lib.characterPack) {
                  if (![
                    "standard", "shenhua", "jlsg_sk", "jlsg_skpf", "jlsg_sr", "jlsg_soul", "jlsg_sy", "jlAddition",
                  ].includes(packname)) continue;
                  const pack = lib.characterPack[packname];
                  if (!Object.keys(pack).length) continue;
                  for (const i in pack) {
                    if (i.includes("xushao") || i.includes("zuoci")) continue;
                    if (lib.filter.characterDisabled(i)) continue;
                    if (lib.filter.characterDisabled2(i)) continue;
                    if (pack[i].isBoss) continue;
                    if (pack[i].isHiddenBoss) continue;
                    if (pack[i].isMinskin) continue;
                    if (pack[i].isUnseen) continue;
                    for (const skill of pack[i].skills) {
                      const info = lib.skill[skill];
                      if (lib.filter.skillDisabled(skill)) continue;
                      if (info?.charlotte) continue;
                      skills.add(skill);
                    };
                  };
                };
                const list = game.filterPlayer(undefined, undefined, true).reduce((i, current) => i.addArray(current.getSkills(null, false, false)), []);
                if (list.length) skills.removeArray(list);
                return skills;
              },
              createTempCard(name, suit, nature) {
                if (!name in lib.card && name !== null) return [];
                if (!name) name = lib.inpile.randomGet();
                if (!suit) suit = lib.suit.randomGet();
                if (name == "sha" && !nature && nature !== null && Math.random() > 0.5) nature = lib.card.sha.nature.randomGet();
                let number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].randomGet();
                let card = game.createCard(name, suit, number, nature);
                game.broadcastAll(function (card) {
                  card.destroyed = "discardPile";
                  card.classList.add("jlsg_xuyuan-glow");
                }, card)
                return card;
              },
              subSkill: {
                effect: {
                  mod: {
                    maxHandcardBase: function (player, num) {
                      return num + player.storage.jlsg_lingze_effect.maxHandcard;
                    },
                    cardUsable(card, player, num) {
                      if (card.name == "sha") return num + player.storage.jlsg_lingze_effect.sha;
                    },
                  },
                  init(player) {
                    player.storage.jlsg_lingze_effect = {
                      sha: 0,
                      maxHandcard: 0,
                      draw: 0,
                    };
                  },
                  mark: true,
                  marktext: "愿",
                  intro: {
                    mark(dialog, storage) {
                      const addNewRow = lib.element.dialog.addNewRow.bind(dialog),
                        itemContainerCss = { height: "20px" },
                        map = {
                          "sha": "使用杀次数",
                          "maxHandcard": "手牌上限",
                          "draw": "额定摸牌数",
                        }
                      if (get.is.phoneLayout()) dialog.classList.add("fullheight");
                      dialog.css({ width: "20%" });
                      for (let i in storage) {
                        let num = storage[i];
                        if (num <= 0) continue;
                        let list = [
                          { item: map[i], ratio: .8, itemContainerCss },
                          { item: "+" + num, ratio: .5, itemContainerCss },
                        ];
                        addNewRow(...list);
                      };
                    },
                  },
                  trigger: { player: "phaseDrawBegin1" },
                  filter(event, player) {
                    return !event.numFixed && player.storage.jlsg_lingze_effect.draw > 0;
                  },
                  forced: true,
                  popup: false,
                  async content(event, trigger, player) {
                    trigger.num += player.storage.jlsg_lingze_effect.draw;
                  },
                },
              },
            },
            jlsg_hanshuang: {
              audio: "ext:极略:2",
              trigger: { global: "damageBegin3" },
              filter: () => true,
              async cost(event, trigger, player) {
                const { player: target, source, card } = trigger,
                  [SUB, ADD] = ["减伤", "加伤"],
                  list = ["加伤", "减伤", "cancel2"],
                  num = player.getRoundHistory("useSkill", evt => evt.skill == "jlsg_hanshuang" && evt.targets?.includes(trigger.player)).length + 1;
                let prompt = `${get.translation(target)}即将受到${source ? "来自" + get.translation(source) : "无来源"}的${trigger.num}点伤害，你可以选择一项：`;
                const choiceTexts = [`1.令其摸${get.cnNumber(num)}张牌并令此次伤害+${num}`, `2.令其弃置${get.cnNumber(num)}张牌并令此次伤害-${num}`];
                if (target.countDiscardableCards(target, "he") < num) {
                  list.remove("减伤")
                  choiceTexts[1] = `<span style="text-decoration: line-through;">${choiceTexts[1]}</span>`
                }
                choiceTexts.forEach(text => (prompt += "<br>" + text));
                const { result } = await player.chooseControl(list)
                  .set("prompt", get.prompt("jlsg_hanshuang", target))
                  .set("prompt2", prompt).set("ai", () => get.event("choice"))
                  .set(
                    "choice",
                    (() => {
                      const damageEff = get.damageEffect(target, source, player, trigger.nature),
                        guohe = get.effect(target, { name: "guohe_copy2" }, target, player) * num,
                        draw = get.effect(target, { name: "draw" }, target, player) * num;
                      const canFilterDamage = target.hasSkillTag("filterDamage", null, {
                        player: source,
                        card,
                      });
                      if (damageEff > 0) {
                        if (!canFilterDamage &&
                          (target.getHp() <= trigger.num + num ||
                            guohe < draw)
                        ) return ADD;
                        else {
                          if (get.attitude(player, target) > 0 && (damageEff === 0 || canFilterDamage)) return ADD;
                          if (
                            target.getHp() + target.countCards("hs", card => target.canSaveCard(card, target)) > trigger.num + 1 &&
                            !list.includes(SUB)
                          )
                            return ADD;
                        }
                      } else {
                        if (get.attitude(player, target) > 0) {
                          if (damageEff === 0 || canFilterDamage) return ADD;
                          if (
                            target.getHp() + target.countCards("hs", card => target.canSaveCard(card, target)) > trigger.num + num &&
                            draw > guohe
                          ) return ADD;
                          else {
                            const discardableCards = target.getDiscardableCards(target, "he");
                            if (
                              (discardableCards.length >= trigger.num ||
                                trigger.num >= target.getHp() ||
                                discardableCards.reduce((sum, card) => sum + target.getUseValue(card), 0) > Math.abs(guohe)
                              ) && list.includes(SUB)
                            ) return SUB;
                          }
                        }
                        else if (
                          target.hasSkillTag("maixie") &&
                          trigger.num === 1 &&
                          damageEff < -20 &&
                          list.includes(SUB)
                        ) return SUB;
                      }
                      return "cancel2";
                    })()
                  )
                if (result.control !== "cancel2") {
                  event.result = {
                    bool: true,
                    targets: [target],
                    cost_data: {
                      control: result.control,
                      num,
                    },
                  };
                }
              },
              async content(event, trigger, player) {
                const { control, num } = event.cost_data,
                  { player: target } = trigger;
                if (control === "减伤") {
                  await target.chooseToDiscard(num, true, "he");
                  game.log(player, "令此伤害", `#y-${num}`);
                  trigger.num -= Math.min(num, trigger.num);
                } else {
                  await target.draw(num);
                  game.log(player, "令此伤害", `#y+${num}`);
                  trigger.num += num;
                }
                await game.delayx();
              },
            },
            jlsg_liluan: {
              audio: "ext:极略:2",
              trigger: { global: ["loseBefore", "drawBefore"] },
              usable: 1,
              filter(event, player) {
                if (event.name == "lose") return event.type == "discard";
                else return event.num > 0;
              },
              async cost(event, trigger, player) {
                const { player: target } = trigger,
                  num = trigger.name == "lose" ? trigger.cards.filter(card => get.owner(card) == target).length : trigger.num;
                const prompt = `${get.translation(target)}即将${trigger.name == "lose" ? "弃置" : "摸"}${get.cnNumber(num)}张牌，是否取消此操作改为其以外的角色各${trigger.name == "lose" ? "随机弃置" : "摸"}一张牌？`;
                event.result = await player.chooseBool()
                  .set("prompt", get.prompt("jlsg_liluan", target))
                  .set("prompt2", prompt)
                  .set("ai", (event, player) => {
                    const trigger = event.getTrigger(),
                      target = event.getTrigger().player;
                    const targetEff = get.effect(target, { name: trigger.name == "lose" ? "guohe_copy2" : "draw" }, target, player) * get.event("num"),
                      sumEff = game.filterPlayer(current => current != target)
                        .reduce((sum, current) => sum + get.effect(current, { name: trigger.name == "lose" ? "guohe_copy2" : "draw" }, current, player), 0);
                    return targetEff < sumEff;
                  })
                  .set("num", num)
                  .forResult();
                event.result.targets = [target];
              },
              async content(event, trigger, player) {
                const { player: target } = trigger,
                  targets = game.filterPlayer(current => current != target).sortBySeat(_status.currentPhase);
                if (trigger.name == "lose") {
                  trigger.cards = trigger.cards.filter(i => get.owner(i) != target);
                  const lose_list = [];
                  for (let current of targets) {
                    const cards = current.getDiscardableCards(current, "he")
                    if (cards.length) lose_list.add([current, cards.randomGets(1)]);
                  };
                  game.log(player, "取消了", target, "的弃牌");
                  await game.loseAsync({ lose_list }).setContent("discardMultiple");
                } else {
                  trigger.cancel();
                  game.log(player, "取消了", target, "的摸牌");
                  await game.asyncDraw(targets);
                }
              }
            },
          },
          translate: {
            jlsg_soul: "魂烈包",
            jlsgsoul_caocao: 'SK神曹操',
            jlsgsoul_sunquan: 'SK神孙权',
            jlsgsoul_jiaxu: 'SK神贾诩',
            jlsgsoul_liubei: 'SK神刘备',
            jlsgsoul_zhugeliang: 'SK神诸葛亮',
            jlsgsoul_sp_zhugeliang: 'SP神诸葛亮',
            jlsgsoul_simayi: 'SK神司马懿',
            jlsgsoul_sp_simayi: 'SP神司马懿',
            jlsgsoul_luxun: 'SK神陆逊',
            jlsgsoul_lvbu: 'SK神吕布',
            jlsgsoul_sp_lvbu: 'SP神吕布',
            jlsgsoul_guanyu: 'SK神关羽',
            jlsgsoul_zhaoyun: 'SK神赵云',
            jlsgsoul_zhangliao: 'SK神张辽',
            jlsgsoul_sp_zhangliao: 'SP神张辽',
            jlsgsoul_huangyueying: 'SK神黄月英',
            jlsgsoul_sp_huangyueying: 'SP神黄月英',
            jlsgsoul_zhangjiao: 'SK神张角',
            jlsgsoul_sp_zhangjiao: 'SP神张角',
            jlsgsoul_lvmeng: 'SK神吕蒙',
            jlsgsoul_guojia: 'SK神郭嘉',
            jlsgsoul_sunshangxiang: 'SK神孙尚香',
            jlsgsoul_diaochan: 'SK神貂蝉',
            jlsgsoul_sp_diaochan: 'SP神貂蝉',
            jlsgsoul_zhangfei: 'SK神张飞',
            jlsgsoul_simahui: 'SK神司马徽',
            jlsgsoul_dianwei: 'SK神典韦',
            jlsgsoul_huatuo: 'SK神华佗',
            jlsgsoul_ganning: 'SK神甘宁',
            jlsgsoul_sp_ganning: 'SP神甘宁',
            jlsgsoul_xiahoudun: 'SK神夏侯惇',
            jlsgsoul_zhouyu: 'SK神周瑜',
            jlsgsoul_machao: 'SK神马超',
            jlsgsoul_zhenji: 'SK神甄姬',
            jlsgsoul_huanggai: 'SK神黄盖',
            jlsgsoul_xuzhu: 'SK神许褚',
            jlsgsoul_daqiao: 'SK神大乔',
            jlsgsoul_huangzhong: 'SK神黄忠',
            jlsgsoul_xiaoqiao: 'SK神小乔',
            jlsgsoul_caoren: 'SK神曹仁',
            jlsgsoul_caopi: 'SK神曹丕',
            jlsgsoul_pangtong: "SK神庞统",
            jlsgsoul_sp_zhaoyun: "SP神赵云",
            jlsgsoul_sp_sunshangxiang: "SP神孙尚香",
            jlsgsoul_caiwenji: "SK神蔡文姬",

            jlsg_yinyang_s: '阴阳',
            jlsg_yinyang_s_info: '锁定技，若你的体力：多于已损失体力，你拥有〖极阳〗；少于已损失体力，你拥有〖极阴〗；等于已损失体力，你拥有〖相生〗。',
            jlsg_jiyang: '极阳',
            jlsg_jiyang_info: '锁定技，获得此技能时，你获得3枚「阳」标记；失去此技能后，你随机获得一张红色牌；当你失去红色牌后，你可以弃置1枚「阳」标记令一名角色回复1点体力，若其未受伤则改为加1点体力上限。',
            jlsg_jiyin: '极阴',
            jlsg_jiyin_info: '锁定技，获得此技能时，你获得3枚「阴」标记；失去此技能后，你随机获得一张黑色牌；当你失去黑色牌后，你可以弃置1枚「阴」标记对一名角色造成1点雷电伤害，若其已受伤则改为减1点体力上限。',
            jlsg_xiangsheng: '相生',
            jlsg_xiangsheng_info: '锁定技，获得此技能时，你获得6枚「生」标记；失去此技能后，你摸一张牌；当你失去黑色/红色牌后，你可以弃置1枚「生」标记并摸一张红色/黑色牌。',
            jlsg_dingming: '定命',
            jlsg_dingming2: '定命',
            jlsg_dingming_info: '准备阶段，或当你受到其他角色造成的伤害后，你可以交换体力与已损失体力并摸X张牌，然后若你的体力多于已损失体力，你减1点体力上限；当你对其他角色造成伤害后，你可以令其交换体力与已损失体力且你摸X张牌，然后若其体力少于已损失体力，你减1点体力上限。（X为此次体力值变化量）',
            jlsg_qianqi: '千骑',
            jlsg_qianqi2: '千骑',
            jlsg_qianqi_info: '游戏开始时，你装备随机+1与-1坐骑牌。当一名角色从装备区里失去坐骑牌后，你获得2枚「千骑」标记。出牌阶段，你可以弃置一枚「千骑」标记，视为使用一张无距离与次数限制的【杀】。',
            jlsg_juechen: '绝尘',
            jlsg_juechen_info: '当你使用【杀】对其他角色造成伤害时，你可以防止此伤害，改为令其失去X点体力（X为伤害值），或减一点体力上限。',
            jlsg_shenfu: '神赋',
            jlsg_shenfu_info: '当你失去手牌后，你可以将手牌补至四张，并记录本次失去的手牌的花色，然后若你最近四次以此法记录的花色各不相同，你可以对一名角色造成1点雷电伤害。',
            jlsg_shenfu_append: '<span style="font-family: yuanli">失去多张手牌则记录无花色。结算不同花色时，无花色视为第五种花色。</span>',
            jlsg_lvezhen: '掠阵',
            jlsg_lvezhen_info: '出牌阶段限一次，你使用【杀】或锦囊指定唯一目标后，可以随机获得其一张牌。',
            jlsg_youlong: '游龙',
            jlsg_youlong2: '游龙',
            jlsg_youlong_info: '锁定技，你始终背面朝上。其他角色的回合结束时，你摸一张牌并执行一个额外的出牌阶段。',
            jlsg_danjing: "啖睛",
            jlsg_danjing_info: "当你受到伤害后/失去体力后/扣减体力上限后/弃置牌后，你可以令一名其他角色也执行等量相同的效果。",
            jlsg_zhonghun: "忠魂",
            jlsg_zhonghun2: "忠魂",
            jlsg_zhonghun3: "忠魂",
            jlsg_zhonghun_info: "限定技，游戏开始时，或出牌阶段，你可以减1点体力上限并选择一名其他角色，令其加1点体力上限并回复1点体力。此后当其受到伤害时，若伤害来源不是你，将此伤害转移给你；你死亡时，其获得你的所有技能。",
            jlsg_lianti: "炼体",
            jlsg_lianti2: "炼体",
            jlsg_lianti3: "炼体",
            jlsg_lianti4: "炼体",
            jlsg_lianti_info: "锁定技，你始终横置，其他角色于你的回合内第一次受到属性伤害后，你令其再受到一次等量同属性伤害。当你受到属性伤害后，你摸牌阶段摸牌数和手牌上限+1，然后减1点体力上限。",
            jlsg_huchi: '虎痴',
            jlsg_huchi_info: '出牌阶段，你可以视为使用【决斗】（不能被【无懈可击】响应），以此法受到伤害的角色摸三张牌。若有角色以此法进入濒死状态，或此【决斗】未造成伤害，此技能失效直到阶段结束。',
            jlsg_xiejia: '卸甲',
            jlsg_xiejia2: '卸甲',
            jlsg_xiejia_info: '锁定技，若你的装备区没有防具牌，你使用【杀】和【决斗】对其他角色造成的伤害+1。每当你从装备区失去防具后，你以此法造成的伤害额外+1。',
            jlsg_yanlie: "炎烈",
            jlsg_yanlie_info: "出牌阶段限一次，你可以弃置至少一张手牌并选择等量的其他角色，视为你对这些角色使用【铁索连环】，然后对一名横置角色造成1点火焰伤害。",
            jlsg_fengying: "锋影",
            jlsg_fengying_info: "当你摸一张牌前，你可以改为使用雷【杀】。每回合限四次。",
            jlsg_zhiti: "止啼",
            jlsg_zhiti2: "止啼",
            jlsg_zhiti3: "止啼",
            jlsg_zhiti_info: "当你对其他角色造成伤害时，你可以选择一项：1. 取其1点体力和体力上限；2. 取其摸牌阶段的一摸牌数。3.取其一个技能；4.令其不能使用装备牌；5.令其翻面。每项对每名其他角色限一次。",
            jlsg_wangyue: "望月",
            jlsg_wangyue_info: "当一名角色弃牌/失去体力/减体力上限后，你可以令另一名角色摸牌/回复体力/加体力上限，每项每回合限一次。",
            jlsg_luoyan: "落雁",
            jlsg_luoyan2: "落雁",
            jlsg_luoyan_info: "回合结束阶段，你可以选择一名角色。当其于出牌阶段内使用第一/二/三张牌后，其随机弃置一张牌/失去1点体力/减1点体力上限，直到你再次发动此技能。",
            jlsg_jieying: "劫营",
            jlsg_jieying2: "劫营",
            jlsg_jieying_info: "摸牌阶段，你可以放弃摸牌，然后令一名未拥有「劫营」标记的其他角色获得3枚「劫营」。拥有「劫营」标记的角色摸牌/回复体力/加体力上限/执行额外回合/获得技能前，你弃置其1枚「劫营」标记并改为由你执行此效果。",
            jlsg_jinlong: "锦龙",
            jlsg_jinlong_info: "锁定技，当装备牌被你获得或不因判定而进入弃牌堆后，将之置于你的武将牌上，然后你摸一张牌。你视为拥有这些装备牌的技能。",
            jlsg_jinlong_append: '<span style="font-family:yuanli">无法获得武器的攻击范围。坐骑的距离结算效果相加后结算。</span>',
            jlsg_liegong: '烈弓',
            jlsg_liegong2: '烈弓',
            jlsg_liegong3: '烈弓',
            jlsg_liegong_info: '你可以将任意花色各不相同的手牌当无距离和次数限制的火【杀】使用，若以此法使用的转化前的牌数不小于：1,此【杀】不能被【闪】响应；2,使用此【杀】后，你摸三张牌;3，此【杀】的伤害+1;4,此【杀】对目标角色造成伤害后，令其随机失去一个技能。每回合限一次，若你已受伤，改为每回合限两次。',
            jlsg_xingwu: '星舞',
            jlsg_xingwu2: '星舞',
            jlsg_xingwu_info: '游戏开始时，你可以令所有角色各获得一枚「星舞」标记，你可以重复此流程至多X次(X为你的体力)。一名角色的回合开始时，你可以弃置一张红桃牌，然后移动该角色的一枚「星舞」标记，或令其获得一枚「星舞」标记，若如此做，你可以令其失去所有因「星舞」获得的技能并重新获得。当角色获得“星舞”标记后，你令其回复1点体力，然后其随机获得一个与其性别不同的武将的技能。当角色失去「星舞」标记后，你令其失去1点体力，然后其随机失去一个与其性别相同的武将的技能。',
            jlsg_chenyu: '沉鱼',
            jlsg_chenyu_info: '锁定技，回合结束阶段，或当你受到伤害后，你获得其他角色手牌里的红桃牌。',
            jlsg_bamen: '八门',
            jlsg_bamen_info: '锁定技，出牌阶段开始时，你弃置所有手牌，然后摸八张牌名各不相同的牌，若你因牌堆缺少牌名而少摸牌，你可以对一名其他角色造成X点雷电伤害(X为以此法少摸的牌数)。',
            jlsg_gucheng: '孤城',
            jlsg_gucheng_info: '锁定技，其他角色使用基本牌或非延时锦囊牌指定你为目标后，若你没有使用过此牌，你令此牌对你无效。',
            jlsg_yingshi: '鹰视',
            jlsg_yingshi2: '鹰视',
            jlsg_yingshi3: '鹰视',
            jlsg_yingshi_tag: '鹰',
            jlsg_yingshi_info: '锁定技，分发起始手牌后，你随机获得一张基本牌，然后将手牌里的所有基本牌标记为“鹰”。每回合每名角色限一次，当你获得其他角色的牌后，若这些牌均为基本牌，你将这些牌标记为“鹰”。任意角色的回合结束时，你从牌堆、弃牌堆或其他角色手牌中获得所有“鹰”。你使用“鹰”无距离和次数限制。',
            jlsg_langxi: '狼袭',
            jlsg_langxi2: '狼袭',
            jlsg_langxi3: '狼袭',
            jlsg_langxi_info: '每种牌名限一次，游戏开始时/当你使用手牌里的非延时锦囊牌时，你可以将任意非延时锦囊牌的牌名/此牌名标记为“狼”。当你使用手牌里的非延时锦囊牌后，你可以视为对其中任意个目标依次使用所有“狼”。',
            jlsg_shenyin: '神隐',
            jlsg_shenyin2: '神隐',
            jlsg_shenyin3: '神隐',
            jlsg_shenyin_info: '锁定技，游戏开始时，你获得1枚「神隐」标记。回合开始时，若你拥有「神隐」标记，你可以记录你当前的体力、体力上限、技能、“鹰”和“狼”，然后获得1枚「神隐」标记。当你进入濒死状态时，或失去此技能后，若有记录的信息，你可以弃置所有「神隐」标记，将你恢复至记录的状态，并摸两倍弃置标记数的牌。当你杀死其他角色后，你获得一枚「神隐」标记。',
            jlsg_chuyuan: '储元',
            jlsg_chuyuan_info: '当任意角色使用【杀】/【闪】后，你可以摸两张牌然后将一张黑色/红色牌置于你的武将牌上，称为「储」。你每有一张黑色「储」和红色「储」，摸牌数和手牌上限+1。',
            jlsg_dengji: '登极',
            jlsg_dengji_info: "觉醒技，回合开始阶段，若你的「储」数为单数且不小于5，你获得所有「储」并失去〖储元〗；若以此法获得的黑色「储」多于红色「储」，你获得〖极权〗；否则你获得〖仁政〗。每以此法获得一张黑色「储」和红色「储」，你随机获得一个君主技。",
            jlsg_jiquan: '极权',
            jlsg_jiquan_info: '出牌阶段限一次，你可以令任意名其他角色各选择一项:1.交给你X张牌，若牌数不足则改为不交(X为你对其发动此技能的次数且至多为3) ; 2.交给你一个技能。然后若你的体力上限不大于目标的体力上限之和，你加1点体力上限并回复1点体力。',
            jlsg_renzheng: '仁政',
            jlsg_renzheng_backup: '仁政',
            jlsg_renzheng_info: '出牌阶段限一次，你可以将任意数量的手牌或技能交给一名其他角色，然后若该角色是第一次成为此技能的目标，你可以令你与其各加1点体力上限并回复1点体力。',

            jlsg_qinyin: '琴音',
            jlsg_qinyin1: '琴音',
            jlsg_qinyin2: '琴音',
            jlsg_yeyan: '业炎',
            jlsg_huju: '虎踞',
            jlsg_huju2: '虎踞',
            jlsg_hufu: '虎缚',
            jlsg_yanmie: '湮灭',
            jlsg_shunshi: '顺世',
            jlsg_junwang: '君望',
            jlsg_jizhao: '激诏',
            jlsg_jizhao_zhao: "<font color=Red>激诏</font>",
            jlsg_qixing: '七星',
            jlsg_kuangfeng: '狂风',
            jlsg_kuangfeng2: '狂风',
            jlsg_dawu: '大雾',
            jlsg_dawu2: '大雾',
            jlsg_yaozhi: '妖智',
            jlsg_yaozhi_use: '妖智',
            jlsg_xingyun: '星陨',
            jlsg_tongtian: '通天',
            // jlsg_tongtian_shu: '观星',
            // jlsg_tongtian_wei: '反馈',
            // jlsg_tongtian_wu: '制衡',
            // jlsg_tongtian_qun: '完杀',
            // jlsg_tongtian_wei_info: "当你受到伤害后，你可以获得伤害来源的一张牌。",
            // jlsg_tongtian_shu_info: "准备阶段，你可以观看牌堆顶的X张牌，并将其以任意顺序置于牌堆项或牌堆底。（X为存活角色数且至多为5）",
            // jlsg_tongtian_qun_info: "锁定技，你的回合内，除你以外，不处于濒死状态的角色不能使用【桃】。",
            // jlsg_tongtian_wu_info: "出牌阶段限一次，你可以弃置任意张牌，然后摸等量的牌。",
            jlsg_jilve: '极略',
            jlsg_jieyan: '劫焰',
            jlsg_jieyan_buff: "劫焰·摸牌",
            jlsg_fenying: '焚营',
            jlsg_kuangbao: '狂暴',
            jlsg_kuangbao1: '狂暴',
            jlsg_wumou: '无谋',
            jlsg_wuqian: '无前',
            jlsg_shenfen: '神愤',
            jlsg_wushen: '武神',
            jlsg_suohun: '索魂',
            jlsg_suohun2: '索魂',
            jlsg_juejing: '绝境',
            jlsg_longhun: '龙魂',
            jlsg_longhun1: '龙魂·桃',
            jlsg_longhun2: '龙魂·杀',
            jlsg_longhun3: '龙魂·无懈',
            jlsg_longhun4: '龙魂·闪',
            jlsg_old_nizhan: '逆战',
            jlsg_old_cuifeng: '摧锋',
            jlsg_old_weizhen: '威震',
            jlsg_nizhan: '逆战',
            jlsg_cuifeng: '摧锋',
            jlsg_weizhen: '威震',
            jlsg_weizhen2: '威震',
            jlsg_weizhen3: '威震',
            jlsg_zhiming: '知命',
            jlsg_suyin: '夙隐',
            jlsg_old_zhiming: '知命',
            jlsg_old_suyin: '夙隐',
            jlsg_dianjie: '电界',
            jlsg_dianjie2: '电界',
            jlsg_dianjie_buff: '电界·电击',
            jlsg_shendao: '神道',
            jlsg_leihun: '雷魂',
            jlsg_shelie: '涉猎',
            jlsg_gongxin: '攻心',
            jlsg_tianqi: '天启',
            jlsg_tianqi_shan: '天启',
            jlsg_tianqi_wuxie: '天启',
            jlsg_tianji: '天机',
            jlsg_xianzhu: '贤助',
            jlsg_xianzhu2: '贤助',
            jlsg_liangyuan: '良缘',
            jlsg_liangyuan2: '良缘',
            jlsg_tianzi: '天姿',
            jlsg_meixin: '魅心',
            jlsg_shayi: '杀意',
            jlsg_zhenhun: '震魂',
            jlsg_yinshi: '隐世',
            jlsg_zhitian: '知天',
            jlsg_zhiji: '掷戟',
            jlsg_zhiji_damage: '掷戟',
            jlsg_yuanhua: '元化',
            jlsg_guiyuan: '归元',
            jlsg_chongsheng: '重生',
            jlsg_old_lvezhen: '掠阵',
            jlsg_old_youlong: '游龙',
            jlsg_old_danjing: '啖睛',
            jlsg_old_danjing1: '啖睛',
            jlsg_old_danjing2: '啖睛',
            jlsg_old_zhonghun: '忠魂',
            jlsg_feiying: '飞影',
            jlsg_guixin: '归心',
            jlsg_old_dianjie: '电界',
            jlsg_old_shendao: '神道',

            jlsg_luocha: '罗刹',
            jlsg_luocha_info: '锁定技，游戏开始时，你随机获得三个与【杀】有关的技能；当其他角色进入濒死状态时，你摸两张牌，然后随机获得一个与【杀】有关的技能。',
            jlsg_shajue: '杀绝',
            jlsg_shajue_info: '出牌阶段限一次，你可以失去1点体力并选择一名其他角色，你将随机一张手牌当随机属性且无视防具的【杀】对其使用，重复此流程直到你失去这些手牌。',
            jlsg_guiqu: '鬼躯',
            jlsg_guiqu_backup: '鬼躯',
            jlsg_guiqu_info: '锁定技，你的手牌上限为你的技能数，当你处于濒死状态时，你可以失去一个技能，视为使用【桃】',
            jlsg_lihun: '离魂',
            jlsg_lihun_info: '回合结束时，你可以选择一名其他角色， 该角色进行一个由你操控的额外回合，且于此额外回合内使用牌可以选择任意名角色，可以选择任意角色为目标，无距离和次数限制。', // 可以使用任意装备牌发动赠予
            jlsg_jueshi: '绝世',
            jlsg_jueshi2: '绝世',
            jlsg_jueshi_info: '锁定技，你的体力上限始终为1点。当你进入濒死状态时，你随机使用所有角色手牌和牌堆里的【桃】/【酒】/【梅】，直到你脱离濒死状态。',
            jlsg_tiangong: '天工',
            jlsg_tiangong_info: '游戏开始/回合开始/回合结束时，你可以创造2/1/1个机关技能并令一名角色获得之。一名角色至多拥有七个机关技能。',
            jlsg_linglong: '玲珑',
            jlsg_linglong_info: '当其他角色令你受到伤害时/失去体力时/减体力上限前/失去技能前，你可以令你失去一个非初始技能，然后抵消此效果;或令一名其他角色失去一个机关技能，然后将此效果转移给该角色（若效果为失去技能则改为抵消效果）。',

            jlsg_feiying_info: '锁定技，若你的武将牌正面朝上，你使用【杀】无距离限制；若你的武将牌正面朝下，你不能成为【杀】的目标。',
            jlsg_guixin_info: '当你受到一次伤害后，你可以获得每名其他角色区域里的一张牌，再摸X张牌（X为阵亡/败退的角色数），然后翻面。',
            jlsg_qinyin_info: '你可以跳过弃牌阶段，然后摸/弃置两张牌，令所有角色各失去/回复1点体力，若你发动过〖业炎〗，可以再执行一次相同的失去/回复体力效果。',
            jlsg_yeyan_info: '限定技，出牌阶段，你可以弃置一至四张手牌，然后对至多X+1名角色各造成Y+1点火焰伤害(X/Y为以此法弃置的黑色/红色牌数)，若你以此法即将造成的总伤害不小于5点，你须先失去3点体力。',
            jlsg_huju_info: '锁定技，其他角色的回合开始时，你摸一张牌。你的回合开始时，若你的手牌数为最多（或之一），你选择一项：1、失去一点体力；2、减一点体力上限，失去〖虎踞〗，并获得技能〖制衡〗和〖虎缚〗。',
            jlsg_hufu_info: '出牌阶段限一次，你可以令一名其他角色弃置X张牌（X为其装备区的牌数）。',
            jlsg_yanmie_info: '出牌阶段，你可以弃置一张黑桃牌，令一名其他角色先弃置所有手牌再摸等量的牌并展示之。你弃置其中所有非基本牌，并对其造成等量的伤害。',
            jlsg_shunshi_info: '当你成为其他角色使用基本牌的目标后，你可以令你与除该角色以外的一至三名其他角色各摸一张牌，然后这些角色也成为此牌的目标。',
            jlsg_junwang_info: '锁定技，其他角色的出牌阶段开始时/出牌阶段结束时，若其手牌数不小于你，其须交给你一张手牌。',
            jlsg_jizhao_info: '出牌阶段对一名无标记的其他角色限一次，你可以交给其至少一张手牌，并令其获得一个「诏」标记；拥有「诏」标记的角色回合结束时，若其本回合内未造成过伤害，其受到你造成的一点伤害并失去「诏」标记。',
            jlsg_qixing_info: '分发起始手牌时，你将获得起始手牌改为观看牌堆顶十一张牌并获得其中4张手牌，然后将其余7张牌扣置于武将牌上，称为「星」；摸牌阶段结束时，你可以用一-三张手牌来替换一-二枚「星」',
            jlsg_kuangfeng_info: '回合开始阶段开始时，你可以将一张「星」置入弃牌堆，然后选择一名角色获得一枚「风」标记，若如此做，当其于你的下回合开始前受到火焰伤害时，该伤害+1；雷电伤害时，你令其弃置两张牌；普通伤害时，你摸一张牌置入「星」。',
            jlsg_dawu_info: '回合结束阶段开始时，你可以弃掉至少一张「星」，然后选择等量的角色获得「雾」标记，若如此做，当其于你的下回合开始前受到非雷电伤害时，你防止之。',
            jlsg_yaozhi_info: '准备阶段开始时/结束阶段开始时/当你受到伤害后/出牌阶段限一次，你可以摸一张牌，系统随机挑选三个能在对应时机发动的技能，然后你可以选择其中一个发动',
            jlsg_xingyun_info: '锁定技，回合结束后，你减1点体力上限，然后获得一个你发动〖妖智〗选择的技能',
            jlsg_tongtian_info: '限定技，出牌阶段你可以弃置任意花色不同的牌，然后根据以下技能获得相应技能：黑桃·反馈；红桃·观星；梅花·完杀；方片·制衡。',
            jlsg_jilve_info: '出牌阶段，你可以摸一张牌，然后选择一项：使用一张牌，或弃置一张牌。若你以此法弃置牌，则本回合此技能失效。',
            jlsg_jieyan_info: '当一张红色【杀】或红色普通锦囊牌仅指定一名角色为目标后，你可以弃置一张手牌令其无效，然后对目标角色造成一点火焰伤害。',
            jlsg_fenying_info: '当一名角色受到火焰伤害后，你可以摸一张牌，然后你可以弃置X张牌(X为你于本回合内发动此技能的次数)，然后对该角色或与其距离最近的一名角色造成等量的火焰伤害。',
            jlsg_kuangbao_info: '锁定技，游戏开始时，你获得2枚「暴」标记。每当你造成或受到伤害时，你获得等量的「暴」标记。',
            jlsg_wumou_info: '锁定技，当你使用非延时锦囊牌时，你须选择一项：1，弃置一枚「暴」标记；2，受到一点伤害。',
            jlsg_wuqian_info: '出牌阶段：你可以弃置2枚「暴」标记，若如此做，本回合内你视为拥有技能【无双】且你造成伤害后额外获得一枚「暴」标记。',
            jlsg_shenfen_info: '出牌阶段，弃6个暴怒标记，你对每名其他角色各造成一点伤害，其他角色先弃掉各自装备区里所有的牌，再各弃4张手牌，然后将你的武将牌翻面，每回合限一次。',
            jlsg_wushen_info: '锁定技，你的【杀】和【桃】均视为【决斗】。你对神势力角色造成的伤害+1。',
            jlsg_suohun_info: '锁定技，当你对其他角色造成伤害后，或当你受到其他角色造成的1点伤害后，其获得一个「魂」标记。当你进入濒死状态时，减一半(向上取整)的体力上限并恢复体力至体力上限，拥有「魂」标记的角色依次弃置所有的「魂」标记，然后受到与弃置的「魂」标记数量相同的伤害。',
            jlsg_juejing_info: '锁定技，你的体力不能大于1点，你的手牌上限为体力上限。当你进入或脱离濒死状态时，你摸两张牌。',
            jlsg_longhun_info: '你可以将一至两张牌按下列规则使用或打出:红桃当【桃】，方块当火【杀】，梅花当【闪】,黑桃当【无懈可击】。若你以此法使用的牌为两张:使用的【桃】令目标角色加1点体力上限，使用的火【杀】额外结算两次，使用的【闪】令此【杀】的使用者随机弃置两张牌，使用的【无懈可击】不能被响应且你获得被响应的牌。',
            jlsg_old_nizhan_info: '每当一名角色受到【杀】或【决斗】造成的一次伤害后，你可以将一枚「袭」标记放置在该角色或伤害来源(不为你)的武将牌上；锁定技，你的身份为“主公”时，不增加体力上限。',
            jlsg_old_cuifeng_info: '锁定技，回合结束阶段，若场上的「袭」标记总数不小于4，你须依次从每名被标记的角色处获得等同于其「袭」标记数量的手牌。若该角色手牌不足，则你获得其全部手牌，然后该角色受到你对其造成的一点伤害。最后移除场上全部的「袭」标记。',
            jlsg_old_weizhen_info: '回合开始阶段，你可以移除场上全部的「袭」标记，然后摸等同于「袭」标记数量的牌。',
            jlsg_nizhan_info: '锁定技，场上每名角色的准备阶段开始时，若其已受伤，其获得一枚「逆」标记，否则其弃置一枚「逆」标记',
            jlsg_cuifeng_info: '出牌阶段限一次，你可以移动场上的一枚「逆」，然后视为失去「逆」的角色对获得「逆」的角色使用一张不计入次数限制的【杀】。',
            jlsg_weizhen_info: '锁定技，若一名角色的「逆」数至少为：1，你摸牌阶段摸牌数+1；2，其摸牌阶段摸牌数-1；3，你对其造成的伤害+1；4，其非锁定技无效。',
            jlsg_old_zhiming_info: '其他角色的回合开始阶段开始时，若其有手牌，你可以弃置一张手牌，然后弃置其一张手牌，若两张牌颜色相同，你令其跳过此回合的摸牌阶段或出牌阶段。',
            jlsg_old_suyin_info: '你的回合外，当你失去最后的手牌时，可令一名其他角色将其武将牌翻面。',
            jlsg_zhiming_info: '出牌阶段限一次， 你可以选择至多X名其他角色(X为你的体力)，然后你依次选择是否失去1点体力、翻面、弃置任意张牌(不能选择上个出牌阶段以此法执行过的效果) ,若如此做，这些角色与你执行相同的效果。',
            jlsg_suyin_info: '当你失去所有手牌后，你可以令一名角色翻面，若有角色以此法翻回正面，你令其回复所有体力。',
            jlsg_mod_dianjie_info: '你的回合外，当你使用或打出一张【闪】后，或你主动跳过出牌阶段后：你可以进行一次判定，若为黑色，你对一名角色造成1点雷电伤害；若为红色，你可以令一至二名未横置的角色横置。',
            jlsg_dianjie_info: '你可以跳过你的摸牌阶段或出牌阶段，然后判定：若结果为黑色，你对一名角色造成2点雷电伤害；若结果为红色，你令至多两名武将牌未横置的角色将其武将牌横置。',
            jlsg_mod_shendao_info: '锁定技，对一名角色的判定牌生效前，你亮出牌堆顶的两张牌，选择其中一张直接代替之，若不是你的回合，你将另一种牌收入手牌。',
            jlsg_shendao_info: '一名角色的判定牌生效前，你可以打出一张手牌或用场上的牌代替之，然后获得原判定牌。',
            jlsg_leihun_info: '锁定技，你受到的雷电伤害均视为体力恢复。',
            jlsg_old_shelie_info: '锁定技，摸牌阶段开始时，你跳过之，改为选择指定获得某种类型的牌（最多四次），然后从牌堆随机摸取之。',
            jlsg_old_gongxin_info: '出牌阶段限一次，你可以观看一次任意一名角色的手牌并展示其中所有的红桃牌，然后若展示的牌数：为一，你弃置之并对其造成一点伤害；大于一，你获得其中一张红桃牌。',
            jlsg_shelie_info: '锁定技，当你使用牌后，你从牌堆随机获得两张与此牌类别不同的牌，每回合每种类别限一次。',
            jlsg_gongxin_info: '出牌阶段限一次，你可以观看一名其他角色的手牌并获得其中一张，然后你可以弃置另一张花色不同的牌，若如此做，该角色于本回合内不能使用或打出剩余两种花色的手牌。',
            jlsg_tianqi_info: '你的濒死状态除外，每当你需要使用或打出一张基本牌或非延时锦囊牌时，你可以声明之，然后亮出牌堆顶的一张牌，并将此牌当你所述之牌使用或打出，若其与你所述之牌不为同一类别，你须先失去一点体力。（但出牌阶段仅限一次。）',
            jlsg_tianji_info: '任一角色的出牌阶段开始时，你可以观看牌堆顶的一张牌，然后你可以选择一项：用一张手牌替换之；若你的手牌数不是全场最多的(或之一)，你可以获得之。',
            jlsg_xianzhu_info: '当一名角色恢复体力后，或失去一张装备区里的牌后，你可以令其摸两张牌。',
            jlsg_liangyuan_info: '限定技，出牌阶段，你可以选择一名其他男性角色，则于本局游戏中，你的自然回合结束时，该角色进行一个额外的回合。',
            jlsg_tianzi_info: '摸牌阶段开始时，你可以放弃摸牌，然后令所有其他角色依次选择一项：1、交给你一张牌；2、令你摸一张牌。',
            jlsg_meixin_info: '出牌阶段限一次，你可以弃置一张牌并选择一名其他男性角色，若如此做，本阶段当你使用一张基本牌后，你令其弃置一张牌；当你使用一张锦囊牌后，你获得其一张牌；当你使用一张装备牌后，你对其造成一点伤害。',
            jlsg_shayi_info: '锁定技，出牌阶段开始时，你展示所有手牌，若有【杀】，你摸一张牌；若没有【杀】，你于本阶段可以将一张黑色牌当【杀】使用。你使用【杀】无距离限制、无次数限制。',
            jlsg_zhenhun_info: '出牌阶段限一次，你可以弃置一张牌令所有其他角色的非锁定技于本阶段内无效。',
            jlsg_zhitian_info: "锁定技,你的回合开始时,系统从剩余武将堆随机挑选三张,你须选择其中一个技能,然后将所有手牌交给一名角色,并令该角色获得此技能,然后该角色失去一点体力.",
            jlsg_yinshi_info: '锁定技，当你受到伤害时，你摸等同于此伤害值数量的牌，然后若此伤害不为雷电伤害，你防止之。',
            jlsg_zhiji_info: '出牌阶段限一次，你可以弃置至少一张武器牌，然后对一名其他角色造成等同于此次弃置武器牌数点伤害。当你受到伤害后，你可以从弃牌堆或牌堆随机获得一张武器牌。',
            jlsg_yuanhua_info: '锁定技，你获得【桃】后，若你已受伤，你回复1点体力并摸两张牌，然后将此【桃】移出游戏。',
            jlsg_guiyuan_info: '出牌阶段限一次，你可以失去一点体力，然后令所有其他角色依次交给你一张【桃】，然后从牌堆或弃牌堆获得一张【桃】。',
            jlsg_chongsheng_info: '限定技，一名角色进入濒死状态时，你可以令其将体力上限调整至X并回复所有体力，然后其可以从随机三张同势力武将牌中选择一张替换之。（X为你发动〖元化〗移除牌的数量且至少为1）',
            jlsg_old_lvezhen_info: '当你使用【杀】指定目标后，你可以将牌堆顶的3张牌置入弃牌堆，其中每有一张非基本牌，你弃置目标角色一张牌。',
            jlsg_old_youlong_info: '出牌阶段，若弃牌堆的牌数多于牌堆，你可以将黑色手牌当【顺手牵羊】使用。',
            jlsg_old_danjing_info: '出牌阶段限一次，你可以失去1点体力，然后令一名其他角色摸三张牌或弃置三张牌。',
            jlsg_old_zhonghun_info: '限定技，当你死亡时，你可以令一名其他角色获得你当前的所有技能。',

            jlsg_qifeng: "栖凤",
            jlsg_qifeng_info: "锁定技，当你进入濒死状态时，你减1点体力上限，回复体力至1点，摸0张牌，然后对一名其他角色造成0点火焰伤害。",
            jlsg_lunce: "论策",
            jlsg_lunce_info: "轮次开始时，你可以令一名角色获得一项计策。当任意角色完成计策后，你加1点体力上限并修改“栖凤”",
            jlsg_lunce_append: '<span style="font-family: yuanli">任意角色完成下策后，修改摸牌数+1<br>任意角色完成中策后，修改回复体力+1<br>任意角色完成上策后，修改造成的火焰伤害+1</span>',
            jlsg_qianyuan: "潜渊",
            jlsg_qianyuan_info: "当你受到未记录的负面效果前，你可以令此效果对你无效，然后获得1枚“潜渊”标记并记录此负面效果。每回合限X次（X为存活角色数），当你受到已记录的负面效果前，你可以将此负面效果随机改为另一种负面效果。",
            jlsg_hualong: "化龙",
            jlsg_hualong_info: "回合开始阶段，你可以选择一名其他角色并弃置所有“潜渊”标记，令其执行这些标记记录的负面效果(负面效果的数值为本次弃置的标记数)，然后将你的各项属性和最小手牌数改为X（X为以此法弃置的标记总数）",
            jlsg_zhuxing: "逐星",
            jlsg_zhuxing_info: "每回合限两次，当任意角色使用出牌阶段可以使用的非转化的实体牌或非延时锦囊牌时，你可以将之置于一名角色的武将牌上，称为“逐星”牌，然后你可以令当前使用的牌无效。一名角色的回合开始时，你可以视为对其依次使用其武将牌上的所有“逐星”牌。",
            jlsg_lingze: "灵泽",
            jlsg_lingze_info: "任意角色的出牌阶段开始时，或受到伤害时，若其有“逐星”牌，你可以将其中一张置于牌堆顶，令其进行一次“许愿”。",
            jlsg_hanshuang: "寒霜",
            jlsg_hanshuang_info: "当任意角色受到伤害时，你可以令其摸X张牌并令此伤害+X，或令其弃置x张牌并令此伤害-X(X为此技能本轮对其发动的次数）。",
            jlsg_liluan: "离乱",
            jlsg_liluan_info: "每回合限一次，你可以将任意角色的弃置牌改为其以外的所有角色各随机弃置一张牌，或将任意角色的摸牌改为其以外的所有角色各摸一张牌。",

          },
          dynamicTranslate: {
            jlsg_xiejia: function (player) {
              let cnt = player.countMark('jlsg_xiejia');
              if (!cnt) {
                return lib.translate.jlsg_xiejia_info;
              }
              return `锁定技，若你的装备区没有防具牌，你使用【杀】和【决斗】对其他角色造成的伤害+<span class="bluetext">+${1 + cnt}</span>。每当你从装备区失去防具后，你以此法造成的伤害额外+1。`;
            },
            jlsg_qianyuan: function (player) {
              let str = "当你受到未记录的负面效果前，你可以令此效果对你无效，然后获得1枚“潜渊”标记并记录此负面效果。每回合限X次（X为存活角色数），当你受到已记录的负面效果前，你可以将此负面效果随机改为另一种负面效果。"
              if (lib.config.extension_极略测试_jlsgsoul_sp_zhaoyun) return "锁定技，" + str;
              return str;
            },
            jlsg_qifeng: function (player) {
              const [recover, draw, damage] = (player?.storage?.jlsg_qifeng ?? [1, 0, 0]);
              return `锁定技，当你进入濒死状态时，你减1点体力上限，回复体力至${recover}点，摸${draw}张牌，然后对一名其他角色造成${damage}点火焰伤害。`
            },
          }
        };
        postProcessPack(jlsg_soul);
        return jlsg_soul;
      });
      game.import('character', function () { // 三英
        var jlsg_sy = {
          name: 'jlsg_sy',
          connect: true,
          character: {
            jlsgsy_lvbu: ['male', 'shen', 8, ['jlsgsy_wushuang', 'mashu', 'jlsgsy_baonulvbu'], ['qun', 'boss', 'bossallowed']],
            jlsgsy_lvbubaonu: ['male', 'shen', 4, ['jlsgsy_wushuang', 'mashu', 'jlsgsy_xiuluo', 'jlsgsy_shenwei', 'jlsgsy_shenji'], ['qun', 'hiddenboss', 'bossallowed']],
            jlsgsy_dongzhuo: ['male', 'shen', 8, ['jlsgsy_zongyu', 'jlsgsy_lingnue', 'jlsgsy_baozheng', 'jlsgsy_baonudongzhuo'], ['qun', 'boss', 'bossallowed']],
            jlsgsy_dongzhuobaonu: ['male', 'shen', 4, ['jlsgsy_zongyu', 'jlsgsy_lingnue', 'jlsgsy_baozheng', 'jlsgsy_nishi', 'jlsgsy_hengxing'], ['qun', 'hiddenboss', 'bossallowed']],
            jlsgsy_zhangjiao: ['male', 'shen', 8, ['jlsgsy_bujiao', 'jlsgsy_taiping', 'jlsgsy_baonuzhangjiao'], ['qun', 'boss', 'bossallowed']],
            jlsgsy_zhangjiaobaonu: ['male', 'shen', 4, ['jlsgsy_bujiao', 'jlsgsy_taiping', 'jlsgsy_yaohuo', 'jlsgsy_sanzhi'], ['qun', 'hiddenboss', 'bossallowed']],
            jlsgsy_zhangrang: ['male', 'shen', 7, ['jlsgsy_chanxian', 'jlsgsy_baonuzhangrang'], ['qun', 'boss', 'bossallowed']],
            jlsgsy_zhangrangbaonu: ['male', 'shen', 4, ['jlsgsy_chanxian', 'jlsgsy_luanzheng', 'jlsgsy_canlue'], ['qun', 'hiddenboss', 'bossallowed']],
            jlsgsy_weiyan: ['male', 'shen', 8, ['jlsgsy_shiao', 'jlsgsy_baonuweiyan'], ['shu', 'boss', 'bossallowed']],
            jlsgsy_weiyanbaonu: ['male', 'shen', 4, ['jlsgsy_shiao', 'jlsgsy_fangu', 'jlsgsy_kuangxi'], ['shu', 'hiddenboss', 'bossallowed']],
            jlsgsy_sunhao: ['male', 'shen', 8, ['jlsgsy_mingzheng', 'jlsgsy_baonusunhao'], ['wu', 'boss', 'bossallowed']],
            jlsgsy_sunhaobaonu: ['male', 'shen', 4, ['jlsgsy_shisha', 'jlsgsy_huangyin', 'jlsgsy_zuijiu', 'jlsgsy_guiming'], ['wu', 'hiddenboss', 'bossallowed']],
            jlsgsy_caifuren: ['female', 'shen', 7, ['jlsgsy_dihui', 'jlsgsy_baonucaifuren'], ['qun', 'boss', 'bossallowed', 'name:蔡|null']],
            jlsgsy_caifurenbaonu: ['female', 'shen', 4, ['jlsgsy_dihui', 'jlsgsy_luansi', 'jlsgsy_huoxin'], ['qun', 'hiddenboss', 'bossallowed', 'name:蔡|null']],
            jlsgsy_simayi: ['male', 'shen', 7, ['jlsgsy_bolue', 'jlsgsy_baonusimayi'], ['jin', 'boss', 'bossallowed', 'name:司马|懿'], 'jin'],
            jlsgsy_simayibaonu: ['male', 'shen', 4, ['jlsgsy_bolue', 'jlsgsy_renji', 'jlsgsy_biantian', 'jlsgsy_tianyou'], ['jin', 'hiddenboss', 'bossallowed', 'name:司马|懿'], 'jin'],
            jlsgsy_diaochan: ['female', 'shen', 7, ['jlsgsy_meihuo', 'jlsgsy_baonudiaochan'], ['qun', 'boss', 'bossallowed', 'name:null|null']],
            jlsgsy_diaochanbaonu: ['female', 'shen', 4, ['jlsgsy_meihuo', 'jlsgsy_yaoyan', 'jlsgsy_miluan'], ['qun', 'hiddenboss', 'bossallowed', 'name:null|null']],
            jlsgsy_yuanshao: ['male', 'shen', 8, ['jlsgsy_mojian', 'jlsgsy_baonuyuanshao'], ['qun', 'boss', 'bossallowed']],
            jlsgsy_yuanshaobaonu: ['male', 'shen', 4, ['jlsgsy_mojian', 'jlsgsy_zhuzai', 'jlsgsy_duoji'], ['qun', 'hiddenboss', 'bossallowed']],
            jlsgsy_sunluban: ['female', 'shen', 7, ['jlsgsy_quanqing', 'jlsgsy_baonusunluban'], ['wu', 'boss', 'bossallowed']],
            jlsgsy_sunlubanbaonu: ['female', 'shen', 4, ['jlsgsy_quanqing', 'jlsgsy_raomeng', 'jlsgsy_yongjie'], ['wu', 'hiddenboss', 'bossallowed']],
            jlsgsy_caocao: ['male', 'shen', 8, ['jlsgsy_weiwu', 'jlsgsy_baonucaocao'], ['wei', 'boss', 'bossallowed']],
            jlsgsy_caocaobaonu: ['male', 'shen', 4, ['jlsgsy_weiwu', 'jlsgsy_duzun', 'jlsgsy_longbian'], ['wei', 'hiddenboss', 'bossallowed']],
            jlsgsy_zoushi: ["female", "shen", 7, ["jlsgsy_huoshi", "jlsgsy_baonuzoushi"], ["qun", "boss", "bossallowed"]],
            jlsgsy_zoushibaonu: ["female", "shen", 3, ["jlsgsy_huoshi", "jlsgsy_yinzi", "jlsgsy_mowu"], ["qun", "hiddenboss", "bossallowed"]],
            jlsgsy_menghuo: ["male", "shen", 8, ["jlsgsy_qiushou", "jlsgsy_baonumenghuo"], ["shu", "boss", "bossallowed"]],
            jlsgsy_menghuobaonu: ["male", "shen", 3, ["jlsgsy_qiushou", "jlsgsy_moshou"], ["shu", "hiddenboss", "bossallowed"]],
          },
          skill: {
            jlsgsy_baonu: {
              audio: "ext:极略:1",
              skillAnimation: true,
              trigger: { player: 'changeHp' },
              forced: true,
              charlotte: true,
              silent: true,
              priority: 100,
              unique: true,
              mode: ['identity', 'guozhan', 'boss', 'stone'],
              filter: function (event, player) {
                return player.hp <= 4;
              },
              init(player, skill) {
                if (game.bossinfo) {
                  game.bossinfo.loopType = 2;
                }
              },
              content: function () {
                var slimName = null;
                if (event.name.length > 12 && event.name.startsWith("jlsgsy_baonu")) {
                  slimName = event.name.substr(12);
                } else {
                  event.finish(); return;
                }
                if (player.hp < 4) {
                  player.hp = 4;
                }
                var name1 = player.name1, name2 = player.name2;
                if (name1.startsWith('jlsgsy_') && !name1.endsWith('baonu')) {
                  player.logSkill('jlsgsy_baonu' + name1.substr(7));
                  player.reinit(name1, name1 + 'baonu');
                }
                if (name2 && name2.startsWith('jlsgsy_') && !name2.endsWith('baonu')) {
                  player.logSkill('jlsgsy_baonu' + name2.substr(7));
                  player.reinit(name2, name2 + 'baonu');
                }
                player.update();
                ui.clear();
                while (_status.event.name != 'phaseLoop') {
                  _status.event = _status.event.parent;
                }
                game.resetSkills();
                _status.paused = false;
                _status.event.player = player;
                _status.event.step = 0;
                if (game.bossinfo) {
                  game.bossinfo.loopType = 1;
                }
              },
              group: ['jlsgsy_baonu2'],
            },
            jlsgsy_baonulvbu: {
              inherit: 'jlsgsy_baonu',
              animationStr: '把你们全宰了！',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_wushuang: {
              audio: "ext:极略:1",
              group: ['jlsgsy_wushuang1', 'jlsgsy_wushuang2', 'jlsgsy_wushuang3'],
            },
            jlsgsy_wushuang1: {
              audio: 'jlsgsy_wushuang',
              trigger: { player: 'useCard' },
              filter: function (event, player) {
                return get.tag(event.card, 'damage') && (get.number(event.card, player) & 1 === 1);
              },
              forced: true,
              direct: true,
              content: function () {
                trigger.baseDamage = 3;
                if (!['sha', 'juedou'].includes(trigger.card.name)) {
                  player.logSkill(event.name);
                }
              },
            },
            jlsgsy_wushuang2: {
              audio: 'jlsgsy_wushuang',
              trigger: { player: 'useCardToPlayered' },
              forced: true,
              filter: function (event, player) {
                return event.card.name == 'sha' && !event.getParent().directHit.includes(event.target);
              },
              logTarget: 'target',
              content: function () {
                var id = trigger.target.playerid;
                var map = trigger.getParent().customArgs;
                if (!map[id]) map[id] = {};
                if (typeof map[id].shanRequired == 'number') {
                  map[id].shanRequired++;
                }
                else {
                  map[id].shanRequired = 2;
                }
              },
              ai: {
                directHit_ai: true,
                skillTagFilter: function (player, tag, arg) {
                  if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1) return false;
                },
              },
            },
            jlsgsy_wushuang3: {
              audio: 'jlsgsy_wushuang',
              trigger: { player: 'useCardToPlayered', target: 'useCardToTargeted' },
              forced: true,
              logTarget: function (trigger, player) {
                return player == trigger.player ? trigger.target : trigger.player
              },
              filter: function (event, player) {
                return event.card.name == 'juedou';
              },
              //priority:-1,
              content: function () {
                var id = (player == trigger.player ? trigger.target : trigger.player)['playerid'];
                var idt = trigger.target.playerid;
                var map = trigger.getParent().customArgs;
                if (!map[idt]) map[idt] = {};
                if (!map[idt].shaReq) map[idt].shaReq = {};
                if (!map[idt].shaReq[id]) map[idt].shaReq[id] = 1;
                map[idt].shaReq[id]++;
              },
              ai: {
                directHit_ai: true,
                skillTagFilter: function (player, tag, arg) {
                  if (arg.card.name != 'juedou' || Math.floor(arg.target.countCards('h', 'sha') / 2) > player.countCards('h', 'sha')) return false;
                }
              }
            },
            jlsgsy_xiuluo: {
              audio: "ext:极略:1",
              trigger: { target: "useCardToTargeted" },
              filter: function (event, player) {
                return event.targets && event.targets.length === 1
                  && (event.card.name == 'sha' || get.type(event.card) == 'trick');
              },
              check: function (event, player) {
                return get.effect(player, { name: 'juedou' }, event.player, player) + 4 > get.effect(player, event.card, event.player, player);
              },
              frequent: function (event, player) {
                return event.card.name != 'juedou';
              },
              content: function () {
                'step 0'
                player.draw();
                trigger.card.name = 'juedou';
                if (trigger.card.isCard && trigger.cards.length) {
                  trigger.card.isCard = false;
                }
              },
              ai: {
                expose: 0.2,
              }
            },
            jlsgsy_shenwei: {
              audio: "ext:极略:1",
              global: 'jlsgsy_shenwei_g',
            },
            jlsgsy_shenwei_g: {
              mod: {
                maxHandcard: function (player, num) {
                  return num - game.countPlayer(function (current) {
                    return current != player && current.hasSkill('jlsgsy_shenwei') && current.inRange(player);
                  });
                },
              },
            },
            jlsgsy_shenji: {
              audio: "ext:极略:1",
              forced: true,
              mod: {
                selectTarget: function (card, player, range) {
                  if (card.name != 'sha') return;
                  range[1] += 2;
                }
              },
              trigger: { player: 'useCard1' },
              forced: true,
              firstDo: true,
              filter: function (event, player) {
                if (event.card.name != 'sha') return false;
                return event.targets.length > 1;
              },
              content: function () { },
            },
            jlsgsy_guiming: {
              audio: "ext:极略:1", // audio: ['jlsgsy_guiming'],
              trigger: { player: 'dying' },
              limited: true,
              skillAnimation: true,
              animationColor: 'thunder',
              check: () => true,
              content: function () {
                'step 0'
                player.awakenSkill(event.name);
                event.cnt = game.filterPlayer().length;
                player.recover(event.cnt - player.hp);
                event.targets = game.filterPlayer(p => p != player).sortBySeat();
                'step 1'
                if (!event.targets.length) {
                  event.finish();
                  return;
                }
                let target = event.targets.shift();
                target.discard(target.getCards('he').randomGets(event.cnt), 'notBySelf').set('delay', false);
                game.delayx(0.5);
                event.redo();
              }
            },
            jlsgsy_huangyin: {
              audio: "ext:极略:1",
              trigger: { global: ['loseAfter', 'loseAsyncAfter'] },
              frequent: true,
              filter(event, player) {
                if (event.type != 'discard') {
                  return false;
                }
                if ((event.discarder || event.getParent(2).player) != player) return false;
                return game
                  .filterPlayer(p => p != player)
                  .some(
                    p => {
                      let evt = event.getl(p);
                      return evt.hs.length > 0 || evt.es.length > 0
                    }
                  );
              },
              content: function () {
                let cards = game
                  .filterPlayer(p => p != player)
                  .map(
                    p => {
                      let evt = trigger.getl(p);
                      return [evt.hs, evt.es];
                    }
                  )
                  .flat()
                  .flat();
                if (cards.length) {
                  let card = cards.randomGet()
                  player.gain('log', false, card);
                  player.$gain2(card);
                  game.delayx(0.5);
                }
              }
            },
            jlsgsy_baonusunhao: {
              inherit: 'jlsgsy_baonu',
              animationStr: '当个好皇帝有什么意思!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_mingzheng: {
              audio: "ext:极略:1",
              derivation: 'jlsgsy_shisha',
              trigger: { global: 'phaseDrawBegin' },
              frequent: true,
              content: function () {
                if (trigger.player == player) {
                  trigger.num += 2;
                } else {
                  trigger.num++;
                }
              },
              group: ['jlsgsy_mingzheng2'],
              ai: {
                threaten: 0.8,
              },
            },
            jlsgsy_mingzheng2: {
              trigger: { player: 'damageEnd' },
              forced: true,
              content: function () {
                player.changeSkills(['jlsgsy_shisha'], ['jlsgsy_mingzheng']);
                player.draw(game.phaseNumber);
              }
            },
            jlsgsy_shisha: {
              audio: "ext:极略:1", // audio: ['jlsgsy_shisha'],
              trigger: { player: 'useCardToPlayered' },
              forced: true,
              filter(event, player) {
                return event.card.name == 'sha' && event.target.countCards('he');
              },
              content: function () {
                "step 0"
                var num = 1 + Math.floor(Math.random() * 3);
                trigger.target.randomDiscard(num);
              }
            },
            jlsgsy_zuijiu: {
              audio: "ext:极略:1", // audio: ['jlsgsy_zuijiu'],
              enable: 'phaseUse',
              delay: 0,
              filter: function (event, player) {
                let used = player.getStat().skill;
                used = (used && used.jlsgsy_zuijiu) || 0;
                return player.countCards('h') >= used;
              },
              content: function () {
                "step 0"
                let used = player.getStat().skill;
                used = (used && used.jlsgsy_zuijiu) || 0;
                player.randomDiscard(used - 1);
                "step 1"
                let sha = { name: 'sha' };
                let jiu = { name: 'jiu' };
                let shaTargets = game.filterPlayer(p => player.canUse(sha, p));
                let jiuTargets = game.filterPlayer(p => player.canUse(jiu, p));
                if (shaTargets.length > 0 && (jiuTargets.length == 0 || Math.random() < 0.5)) {
                  let cnt = get.rand(...lib.filter.selectTarget(sha, player));
                  player.useCard(sha, shaTargets.randomGets(cnt), 'noai', false);
                }
                else if (jiuTargets.length > 0) {
                  let cnt = get.rand(...lib.filter.selectTarget(jiu, player));
                  if (cnt >= 0) {
                    player.useCard(jiu, jiuTargets.randomGets(cnt), 'noai', false);
                  } else {
                    player.useCard(jiu, jiuTargets, 'noai', false);
                  }
                }
              },
              ai: {
                order: 6,
                result: {
                  player: function (player) {
                    let used = player.getStat().skill;
                    used = (used && used.jlsgsy_zuijiu) || 0;
                    if (used <= 1) return 1;
                    return 0;
                  }
                }
              },
            },
            jlsgsy_bolue: {
              audio: "ext:极略:4",
              trigger: { player: "phaseBegin" },
              forced: true,
              initList() {
                let result = {};
                for (let c of lib.jlsg.characterList) {
                  let info = get.character(c);
                  if (!result[info[1]]) {
                    result[info[1]] = new Set();
                  }
                  info[3]
                    .filter(s => lib.skill[s] && (!lib.skill[s].ai || !lib.skill[s].ai.neg))
                    .forEach(s => result[info[1]].add(s));
                }
                for (let g in result) {
                  result[g] = [...result[g]];
                }
                _status.jlsgsy_bolue_list = result;
              },
              init(player) {
                player.storage.jlsgsy_bolue = {
                  'wei': 1,
                  'shu': 1,
                  'wu': 1,
                };
              },
              content: function () {
                'step 0'
                if (!_status.jlsgsy_bolue_list) {
                  lib.skill.jlsgsy_bolue.initList();
                }
                let obj = Object.assign({}, player.storage.jlsgsy_bolue);
                let list = [];
                for (let g in obj) {
                  if (!_status.jlsgsy_bolue_list[g]) continue;
                  list.addArray(_status.jlsgsy_bolue_list[g].randomGets(obj[g]));
                }
                player.addTempSkills(list, { player: 'phaseBefore' });
              },
            },
            jlsgsy_baonusimayi: {
              inherit: 'jlsgsy_baonu',
              animationStr: '老夫没时间陪你们了!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_biantian: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseJudgeBefore' },
              forced: true,
              filter: function (event, player) {
                if (event.player == player) return false;
                return event.player.isAlive();
              },
              unique: true,
              content: function () {
                trigger.player.executeDelayCardEffect('shandian');
              }
            },
            jlsgsy_tianyou: {
              audio: "ext:极略:1", // audio: ['jlsgsy_tianyou'],
              trigger: { player: 'phaseJieshuBegin' },
              forced: true,
              filter(event, player) {
                let cnt = game.getAllGlobalHistory(
                  'changeHp',
                  e => {
                    let p = e.getParent();
                    if (p.name != 'damage') {
                      return false;
                    }
                    return p.getParent().name == "jlsgsy_biantian" || p.card && p.card.name == 'shandian';
                  }).length;
                return cnt != 0 || player.isDamaged();
              },
              content: function () {
                "step 0"
                let cnt = game.getAllGlobalHistory(
                  'changeHp',
                  e => {
                    let p = e.getParent();
                    if (p.name != 'damage') {
                      return false;
                    }
                    return p.getParent().name == "jlsgsy_biantian" || p.card && p.card.name == 'shandian';
                  }).length;
                if (cnt == 0) {
                  player.recover();
                } else {
                  player.draw(cnt);
                }
              },
            },
            jlsgsy_renji: {
              audio: "ext:极略:3",
              trigger: { player: 'damageEnd' },
              frequent: true,
              content: function () {
                player.draw();
                if (!player.storage.jlsgsy_bolue) {
                  player.storage.jlsgsy_bolue = {};
                }
                if (trigger.source) {
                  let group = trigger.source.group || 'qun';
                  player.storage.jlsgsy_bolue[group] = player.storage.jlsgsy_bolue[group] || 0;
                  player.storage.jlsgsy_bolue[group] += 1;
                }
              },
              ai: {
                maixie: true,
                combo: 'jlsgsy_bolue',
              },
            },
            jlsgsy_zongyu: {
              audio: "ext:极略:1", // audio: ['zhongyu'],
              forced: true,
              trigger: { player: 'useCardEnd' },
              filter: function (event, player) {
                return player.isPhaseUsing() && get.type(event.card, 'trick') == 'trick'
                  && player.hasUseTarget({ name: 'jiu', isCard: true }, null, false);
              },
              direct: true,
              content: function () {
                player.chooseUseTarget({ name: 'jiu', isCard: true }, true, false, 'nopopup', 'noanimate')
                  .set('logSkill', event.name);
              },
            },
            jlsgsy_lingnue: {
              audio: "ext:极略:1", // audio: ['linnue'],
              trigger: { source: 'damageSource' },
              filter: function (event) {
                return event.num >= 2;
              },
              frequent: true,
              content: function () {
                'step 0'
                player.draw(2);
                'step 1'
                player.gainMaxHp();
              },
            },
            jlsgsy_baozheng: {
              audio: "ext:极略:1",
              forced: true,
              trigger: { global: 'phaseDrawAfter' },
              filter: function (event, player) {
                return event.player != player;
              },
              logTarget: 'player',
              content: function () {
                "step 0"
                trigger.player.chooseCard(`交给${get.translation(event.player)}一张锦囊牌`, function (card) {
                  return get.type(card, 'trick') == 'trick';
                }).set("ai", function (card, cards) {
                  let player = _status.event.player;
                  let source = _status.event.source;
                  let v = -get.value(card, player) * get.attitude(player, player) + get.value(card, source) * get.attitude(player, source);
                  // console.log("card v", card.name, v);
                  v -= get.effect(player, { name: 'sha' }, source, player) * 7;
                  // console.log("add v", v);
                  return v;
                }).set('source', player);
                "step 1"
                if (result.bool) {
                  if (get.attitude(trigger.player, player) > 0 && trigger.player.ai.shown < player.ai.shown) {
                    trigger.player.addExpose(0.2);
                  }
                  player.gain(result.cards[0], trigger.player, 'give');
                }
                else {
                  if (get.attitude(trigger.player, player) < 0 && trigger.player.ai.shown < player.ai.shown
                    && trigger.player.countCards('h') > 0
                  ) {
                    trigger.player.addExpose(0.05);
                  }
                  player.useCard({ name: 'sha', isCard: true }, trigger.player, 'noai');
                }
              },
              ai: {
                threaten: 3
              }
            },
            jlsgsy_nishi: {
              audio: "ext:极略:1", // audio: ['nishi'],
              forced: true,
              trigger: { player: 'damageEnd' },
              filter: function (event, player) {
                return event.source && event.source != player;
              },
              logTarget: 'source',
              line: false,
              content: function () {
                'step 0'
                if (trigger.source.countCards('e') == 0) {
                  event.goto(2);
                  return;
                }
                let choice = trigger.source.getCards('e').reduce((a, b) => a + get.value(b), 0)
                  < get.effect(trigger.source, { name: 'sha' }, player, trigger.source);
                trigger.source.chooseBool(`是否弃置装备区的牌？`, choice);
                'step 1'
                if (result.bool) {
                  trigger.source.discard(trigger.source.getCards('e'));
                  event.finish();
                }
                'step 2'
                player.useCard({ name: 'sha', isCard: true }, trigger.source, 'noai');
              },
              ai: {
                maixie_defend: true,
              }
            },
            jlsgsy_hengxing: {
              audio: "ext:极略:1",
              trigger: { source: 'damageBegin' },
              filter: function (event, player) {
                return !player.isPhaseUsing();
              },
              forced: true,
              content: function () {
                trigger.num += 1;
              },
              ai: {
                damageBonus: true,
                skillTagFilter: function (player) {
                  return !player.isPhaseUsing();
                }
              }
            },
            jlsgsy_baonudongzhuo: {
              inherit: 'jlsgsy_baonu',
              animationStr: '统统杀光',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_baonu2: {
              trigger: { global: 'gameDrawBegin' },
              forced: true,
              popup: false,
              priority: 100,
              content: function () {
                if (game.bossinfo) {
                  game.bossinfo.loopType = 2;
                }
                player.draw(4, false);
              }
            },
            jlsgsy_bujiao: {
              audio: "ext:极略:1",
              trigger: { global: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return event.player != player;
              },
              check: () => Math.random() < 0.8,
              logTarget: 'player',
              content() {
                'step 0'
                trigger.player.draw('nodelay');
                'step 1'
                trigger.player.addMark('jlsgsy_taiping');
                game.delayx();
              },
              global: 'jlsgsy_bujiao_debuff',
            },
            jlsgsy_bujiao_debuff: {
              mod: {
                maxHandcard: function (player, num) {
                  if (player.storage['jlsgsy_taiping']) {
                    return num - player.storage['jlsgsy_taiping']
                      * game.filterPlayer(p => p != player && p.hasSkill('jlsgsy_bujiao')).length;
                  }
                }
              }
            },
            jlsgsy_taiping: {
              audio: "ext:极略:1", // audio: ['taiping'],
              trigger: { player: 'phaseZhunbeiBegin' },
              filter: function (event, player) {
                return game.filterPlayer().some(p => p.hasMark('jlsgsy_taiping'));
              },
              check(event, player) {
                let marks = game.filterPlayer().reduce((a, b) => a + b.countMark('jlsgsy_taiping'), 0);
                let diff = game.filterPlayer(p => p != player).reduce((a, b) => a + b.countCards('h'), 0)
                  - player.countCards('h');
                if (marks > diff) {
                  return true;
                }
                return Math.random > 0.5;
              },
              content: function () {
                "step 0"
                let marks = game.filterPlayer().reduce((a, b) => a + b.countMark('jlsgsy_taiping'), 0);
                player.draw(marks);
                for (let p of game.filterPlayer()) {
                  if (p.storage.jlsgsy_taiping) {
                    p.storage.jlsgsy_taiping = 0;
                    p.syncStorage('jlsgsy_taiping');
                    p.unmarkSkill('jlsgsy_taiping');
                  }
                }
                "step 1"
                let others = game.filterPlayer(p => p != player).reduce((a, b) => a + b.countCards('h'), 0);
                if (others >= player.countCards('h')) {
                  event.finish();
                  return;
                }
                player.chooseBool("是否对所有其他角色造成1点伤害？", true);
                "step 2"
                if (result.bool) {
                  let targets = game.filterPlayer(p => p != player).sortBySeat();
                  player.line(targets);
                  targets.forEach(p => p.damage());
                }
              },
              marktext: '平',
              intro: {
                name: '太平',
                name2: '太平',
                content: 'mark',
              },
            },
            jlsgsy_yaohuo: {
              audio: "ext:极略:1",
              enable: 'phaseUse',
              usable: 1,
              filterTarget: function (card, player, target) {
                if (player == target) return false;
                let quota = player.countDiscardableCards(player, 'he'),
                  skills = target.getSkills(null, false, false);
                skills = target.getStockSkills(true, true).filter(s => {
                  for (let i in target.disabledSkills) {
                    if (i == s) return false;
                  };
                  return skills.includes(s);
                });
                return target.countCards('h') > 0 && quota >= target.countCards('h')
                  || skills.length && quota >= skills.length;
              },
              delay: false,
              init(player) {
                player.storage.jlsg_yaohuo_retrieve = new Map();
              },
              content: function () {
                'step 0'
                let quota = player.countDiscardableCards(player, 'he'),
                  skills = target.getSkills(null, false, false);
                event.skills = target.getStockSkills(true, true).filter(s => {
                  for (let i in target.disabledSkills) {
                    if (i == s) return false;
                  };
                  return skills.includes(s);
                });
                let list = [];
                if (target.countCards('h') > 0 && quota >= target.countCards('h')) {
                  list.push(`弃置${get.cnNumber(target.countCards('h'))}张牌并获得${get.translation(target)}的所有手牌。`);
                }
                if (event.skills.length && quota >= event.skills.length) {
                  list.push(`弃置${get.cnNumber(event.skills.length)}张牌并取走${get.translation(target)}的所有技能。`);
                }
                event.list = list;
                player.chooseControlList(list, true);
                'step 1'
                event.choseCard = event.list[result.index].includes('并获得');
                if (event.choseCard) {
                  player.chooseToDiscard(target.countCards('h'), true, "he");
                } else {
                  player.chooseToDiscard(event.skills.length, true, "he");
                }
                'step 2'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                if (event.choseCard) {
                  player.gain(target.getCards('h'), target, 'giveAuto');
                  event.finish();
                  return;
                }
                let addSkills = player.addTempSkills(event.skills, { player: 'dieAfter' });
                addSkills.$handleInner = addSkills.$handle;
                addSkills.jlsg_yaohuo_target = target;
                addSkills.$handle = function () {
                  let currentAdditional = Object.keys(this.player.additionalSkills);
                  this.$handleInner.apply(this, arguments);
                  let addtionalSkill = Object.keys(this.player.additionalSkills).removeArray(currentAdditional);
                  console.assert(addtionalSkill.length == 1, 'jlsg_yaohuo hook not working properly');
                  if (!this.player.storage.jlsg_yaohuo_retrieve.has(this.jlsg_yaohuo_target)) {
                    this.player.storage.jlsg_yaohuo_retrieve.set(this.jlsg_yaohuo_target, addtionalSkill[0]);
                  }
                };

                target.storage.jlsgsy_yaohuo2 = target.storage.jlsgsy_yaohuo2 || [];
                target.storage.jlsgsy_yaohuo2.addArray(event.skills);
                target.storage.jlsgsy_yaohuo2_player = player;
                target.addTempSkill('jlsgsy_yaohuo2', { player: 'phaseBeginStart' });
              },
              group: 'jlsgsy_yaohuo_clear',
              ai: {
                order: 9.5,
                result: {
                  target: function (player, target) {
                    if (target.num('h') < 3) return 0;
                    return -jlsg.relu(get.attitude(player, target));
                  }
                },
                expose: 0.2
              },
            },
            jlsgsy_yaohuo2: {
              init: function (player, skill) {
                player.disableSkill(skill, player.storage.jlsgsy_yaohuo2);
              },
              onremove: function (player, skill) {
                player.enableSkill(skill);
                if (player.storage.jlsgsy_yaohuo2_player) {
                  let zj = player.storage.jlsgsy_yaohuo2_player;
                  if (zj.storage.jlsg_yaohuo_retrieve) {
                    let retrieve = zj.storage.jlsg_yaohuo_retrieve;
                    if (retrieve.get(player)) {
                      zj.removeAdditionalSkills(retrieve.get(player));
                      retrieve.delete(player);
                    }
                  }
                }
                player.storage.jlsgsy_yaohuo2 = [];
                player.storage.jlsgsy_yaohuo2_player = null;
              },
              locked: true,
              mark: true,
              charlotte: true,
              intro: {
                content: function (storage, player, skill) {
                  var list = [];
                  for (var i in player.disabledSkills) {
                    if (player.disabledSkills[i].includes(skill)) list.push(i);
                  };
                  if (list.length) {
                    var str = '失效技能：';
                    for (var i = 0; i < list.length; i++) {
                      if (lib.translate[list[i] + '_info']) str += get.translation(list[i]) + '、';
                    };
                    return str.slice(0, str.length - 1);
                  };
                },
              },
            },
            jlsgsy_yaohuo_clear: {
              trigger: { global: 'dieAfter' },
              silent: true,
              charlotte: true,
              filter(event, player) {
                return event.player.storage.jlsgsy_yaohuo2_player === player
                  && event.player.storage.jlsgsy_yaohuo2
                  && player.storage.jlsg_yaohuo_retrieve;
              },
              content() {
                let retrieve = player.storage.jlsg_yaohuo_retrieve;
                if (retrieve.get(trigger.player)) {
                  zj.removeAdditionalSkills(retrieve.get(trigger.player));
                  retrieve.delete(trigger.player);
                }
              }
            },
            jlsgsy_sanzhi: {
              audio: "ext:极略:1",
              init(player) {
                player.storage['jlsgsy_sanzhi'] = [];
              },
              silent: true,
              trigger: { player: 'useCardAfter' },
              filter(event, player) {
                return !player.getStorage('jlsgsy_sanzhi').includes(get.type(event.card, 'trick'));
              },
              content: function () {
                'step 0'
                player.storage.jlsgsy_sanzhi.add(get.type(trigger.card, 'trick'));
                if (player.hasSkill('jlsgsy_sanzhi')) {
                  player.markSkill('jlsgsy_sanzhi');
                }
                if (player.getStorage('jlsgsy_sanzhi').length >= 3) {
                  player.storage.jlsgsy_sanzhi = [];
                  player.chooseBool(get.prompt2(event.name));
                } else {
                  event.finish();
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                game.filterPlayer(p => p != player).forEach(p => p.addMark('jlsgsy_taiping'));
              },
              intro: {
                content: function (storage, player, skill) {
                  if (!storage.length) {
                    return "还未记录牌类别";
                  }
                  return '使用了' + storage.map(t => lib.translate[t]).join();
                }
              }
            },
            jlsgsy_baonuzhangjiao: {
              inherit: 'jlsgsy_baonu',
              animationStr: '招神劾鬼, 统摄天地!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_baonucaifuren: {
              inherit: 'jlsgsy_baonu',
              animationStr: '别想逃出我的手掌心!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_dihui: {
              audio: "ext:极略:2", // audio: ['dihui', 2],
              enable: 'phaseUse',
              usable: 1,
              unique: true,
              complexCard: true,
              filter: function (event, player) {
                let players = game.filterPlayer();
                for (let i = 0; i < players.length - 1; ++i) {
                  if (players[i].hp != players[i + 1].hp) {
                    return true;
                  }
                }
                return false;
              },
              filterTarget: function (card, player, target) {
                if (ui.selected.targets.length == 1) {
                  return target.hp < ui.selected.targets[0].hp;
                }
                let min = Math.min(...game.filterPlayer().map(c => c.hp));
                return target.hp > min;
              },
              multitarget: true,
              targetprompt: ['造成伤害', '受到伤害'],
              selectTarget: 2,
              prompt2: '请选择造成伤害与受到伤害的角色',
              content: function () {
                "step 0"
                // targets[0].line(targets[1], 'green');
                targets[1].damage(targets[0]);
                if (targets[1].ai.shown > player.ai.shown) {
                  player.addExpose(0.2);
                }
                "step 1"
                if (player.isDamaged() && targets[0] != player) {
                  player.recover();
                }
              },
              ai: {
                order: 9.5,
                result: {
                  target: function (player, target) {
                    var att = ai.get.attitude(player, target);
                    if (att < 0) return att;
                  }
                },
                // expose: 0.2
              },
            },
            jlsgsy_luansi: {
              audio: "ext:极略:2", // audio: ['luansi', 2],
              enable: 'phaseUse',
              usable: 1,
              unique: true,
              filterTarget: function (card, player, target) {
                if (player == target || !target.countCards('h')) return false;
                if (ui.selected.targets.length) {
                  return !target.hasSkillTag('noCompareTarget');
                } else {
                  return !target.hasSkillTag('noCompareSource');
                }
              },
              filter: function (event, player) {
                return game.countPlayer(p => p != player && p.countCards('h')) >= 2;
              },
              multitarget: true,
              targetprompt: ['发起拼点', '被拼点'],
              selectTarget: 2,
              prompt: '选择两名拼点目标',
              content: function () {
                "step 0"
                targets[0].line(targets[1], 'green');
                targets[0].chooseToCompare(targets[1]);
                "step 1"
                if (result.bool) {
                  targets[0].useCard({ name: 'juedou' }, targets[1]);
                  if (targets[1].isAlive()) player.discardPlayerCard(targets[1], 'he', 2, true);
                }
                else {
                  targets[1].useCard({ name: 'juedou' }, targets[0]);
                  if (targets[0].isAlive()) player.discardPlayerCard(targets[0], 'he', 2, true);
                }
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    if (game.players.length <= 2) return 0;
                    if (target.num('he') < 1) return 0;
                    var att = ai.get.attitude(player, target);
                    if (att < 0) return -target.num('he');
                  }
                },
              },
            },
            jlsgsy_huoxin: {
              audio: "ext:极略:1", // audio: ['huoxin'],
              trigger: { source: 'damageSource', player: 'damageEnd' },
              unique: true,
              filter: function (event, player, name) {
                if (name == 'damageSource') {
                  return event.player && event.player != player && event.player.isAlive();
                } else {
                  return event.source && event.source != player;
                }
              },
              check: function (event, player) {
                var target = (event.player == player) ? event.source : event.player;
                var att = get.attitude(player, target);
                return att < 0 || (att < 1 && target.countGainableCards(player, 'e'));
              },
              logTarget: function (event, player) {
                if (event.player == player) return event.source;
                return event.player;
              },
              content: function () {
                "step 0"
                event.target = (trigger.player == player) ? trigger.source : trigger.player;
                if (!event.target.countCards('e')) {
                  event.target.loseHp();
                  event.finish();
                  return;
                }
                event.target.chooseCard(`交给${get.translation(player)}一张装备区内的牌或者失去一点体力`, 'e', function (card) {
                  return get.type(card) == 'equip';
                }).ai = function (card, cards2) {
                  if (event.target.hp == event.target.maxHp) {
                    return 6 - get.value(card);
                  }
                  else if (event.target.hp == 1) {
                    return 12 - get.value(card);
                  }
                  else {
                    return 7 - get.value(card);
                  }
                };
                "step 1"
                if (result.bool) {
                  player.gain(result.cards[0], event.target);
                  event.target.$give(result.cards[0], player);
                }
                else {
                  event.target.loseHp();
                }
              },
              ai: {
                maixie_defend: true,
              },
            },
            jlsgsy_shiao: {
              audio: "ext:极略:true", // audio: ['shiao'],
              trigger: { player: 'phaseZhunbeiBegin' },
              direct: true,
              unique: true,
              filter: function (event, player) {
                return game.hasPlayer(function (current) {
                  return current.countCards('h') < player.countCards('h');
                });
              },
              content: function () {
                player.chooseUseTarget(game.filterPlayer(function (current) {
                  return current.countCards('h') < player.countCards('h');
                }), '###是否发动【恃傲】？###视为对一名手牌小于你的角色使用一张【杀】', { name: 'sha' }, false, 'nodistance').logSkill = 'jlsgsy_shiao';
              },
              group: ['jlsgsy_shiao2']
            },
            jlsgsy_shiao2: {
              audio: "ext:极略:true", // audio: ['shiao2'],
              trigger: { player: 'phaseJieshuBegin' },
              direct: true,
              unique: true,
              filter: function (event, player) {
                return game.hasPlayer(function (current) {
                  return current.countCards('h') > player.countCards('h');
                });
              },
              content: function () {
                player.chooseUseTarget(game.filterPlayer(function (current) {
                  return current.countCards('h') > player.countCards('h');
                }), '###是否发动【恃傲】？###视为对一名手牌大于你的角色使用一张【杀】', { name: 'sha' }, false, 'nodistance').logSkill = 'jlsgsy_shiao2';
              }
            },
            jlsgsy_kuangxi: {
              audio: "ext:极略:2", // audio: ['kuangxi', 2],
              trigger: { player: 'useCardEnd' },
              filter: function (event, player) {
                let targets = event.targets.slice().remove(player);
                if (!targets || targets.length == 0 || !event.card) return false;
                if (event.card.name == 'wuxie') return false;
                return get.type(event.card, 'trick') == 'trick';
              },
              check: function (event, player) {
                let targets = event.targets.slice().remove(player),
                  att = 0;
                for (var i = 0; i < targets.length; i++) {
                  att += ai.get.effect(targets[i], { name: 'sha' }, player, player);
                }
                return att > 1;
              },
              content: function () {
                "step 0"
                let targets = trigger.targets.slice().remove(player);
                event.evt = player.useCard({ name: 'sha', jlsgsy_kuangxi: true }, targets, false);
                "step 1"
                let evt = player.getHistory('sourceDamage', e => e.getParent(2) === event.evt);
                if (!evt.length && player.isIn()) {
                  player.loseHp();
                }
              },
              ai: {
                effect: {
                  player: function (card, player, target) {
                    if (get.type(card) == 'trick') return [1, 2];
                  },
                },
              },
            },
            jlsgsy_baonuweiyan: {
              inherit: 'jlsgsy_baonu',
              animationStr: '老子岂能受你们摆布!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_fangu: {
              audio: "ext:极略:1",
              trigger: {
                player: "damageEnd",
              },
              forced: true,
              priority: 100,
              content: function () {
                "step 0"
                game.broadcastAll(ui.clear);
                player.insertPhase("jlsgsy_fangu");
                "step 1"
                var evt = _status.event.getParent("phase");
                if (evt) {
                  _status.event = evt;
                  _status.event.finish();
                  game.log(_status.currentPhase, "结束了回合");
                }
                _status.paused = false;
              },
              "_priority": 10000,
            },
            jlsgsy_canlue: {
              audio: "ext:极略:1", // audio: ['jlsgsy_canlue'],
              trigger: { source: 'gainEnd' },
              forced: true,
              filter: function (event, player) {
                return event.player && event.player != player && event.player.isIn();
              },
              logTarget: 'player',
              content: function () {
                trigger.player.chooseToDiscard('he', trigger.cards.length, true);
              },
              group: ['jlsgsy_canlue2'],
            },
            jlsgsy_canlue2: {
              audio: "jlsgsy_canlue",
              trigger: { player: 'gainEnd' },
              filter: function (event, player) {
                return event.source && event.source != player && event.source.isIn();
              },
              check: function (event, player) {
                return get.damageEffect(event.source, player, player) > 0;
              },
              prompt2: function (event, player) {
                return `对其造成${event.cards.length}点伤害`;
              },
              logTarget: 'source',
              content: function () {
                trigger.source.damage(trigger.cards.length, player);
              },
            },
            jlsgsy_chanxian: {
              audio: "ext:极略:2", // audio: ['jlsgsy_chanxian', 2],
              enable: 'phaseUse',
              usable: 1,
              selectTarget: 2,
              multitarget: true,
              filterTarget(card, player, target) {
                if (ui.selected.targets.length) {
                  var from = ui.selected.targets[0];
                  var js = from.getCards('j');
                  for (var i = 0; i < js.length; i++) {
                    if (target.canAddJudge(js[i])) return true;
                  }
                  if (target.isMin()) return false;
                  var es = from.getCards('e');
                  for (var i = 0; i < es.length; i++) {
                    if (target.isEmpty(get.subtype(es[i]))) return true;
                  }
                  return from.countCards('h') != 0;
                }
                else {
                  return target.countCards('hej') > 0;
                }
              },
              targetprompt: ['被移走', '移动目标'],
              content: function () {
                "step 0"
                player.choosePlayerCard('hej', true, function (button) {
                  var player = _status.event.player;
                  var targets0 = _status.event.targets0;
                  var targets1 = _status.event.targets1;
                  if (get.attitude(player, targets0) > 0 && get.attitude(player, targets1) < 0) {
                    if (get.position(button.link) == 'j') return 12;
                    if (get.value(button.link, targets0) < 0 && get.effect(targets1, button.link, player, targets1) > 0) return 10;
                    return 0;
                  }
                  else {
                    if (get.position(button.link) == 'j') return -10;
                    return get.value(button.link) * get.effect(targets1, button.link, player, targets1);
                  }
                }, targets[0]).set('targets0', targets[0]).set('targets1', targets[1]).set('filterButton', function (button) {
                  var targets1 = _status.event.targets1;
                  if (get.position(button.link) == 'e') {
                    return targets1.isEmpty(get.subtype(button.link));
                  }
                  return true;
                });
                "step 1"
                if (result.bool && result.links.length) {
                  var link = result.links[0];
                  if (get.position(link) == 'h') {
                    event.targets[1].gain(link, event.targets[0], 'giveAuto');
                    return;
                  }
                  if (get.position(link) == 'e') {
                    event.targets[1].equip(link);
                  }
                  else if (link.viewAs) {
                    event.targets[1].addJudge({ name: link.viewAs }, [link]);
                  }
                  else {
                    event.targets[1].addJudge(link);
                  }
                  event.targets[0].$give(link, event.targets[1], false);
                  game.log(event.targets[0], '的', link, '被移动给了', event.targets[1])
                  game.delay();
                }
                "step 2"
                event.juedou = event.targets[0].useCard(event.targets[1], { name: 'juedou', isCard: true }, 'noai');
                "step 3"
                let damaged = game.filterPlayer(p => p.getHistory('damage', e => {
                  return e.card === event.juedou.card;
                }).length);
                damaged.sortBySeat();
                for (let p of damaged) {
                  if (!p.countGainableCards(player, 'he')) {
                    continue;
                  }
                  player.gainPlayerCard(p, true);
                }
              },
              ai: {
                order: 8,
                result: {
                  target: function (player, target) {
                    return player == target ? -1 : Math.random();
                  },
                  player: 1,
                },
              },
            },
            jlsgsy_luanzheng: {
              audio: "ext:极略:2",
              trigger: { global: 'useCardToPlayer' },
              usable: 1,
              filter: function (event, player) {
                return event.targets.length == 1
                  && event.player != player
                  && ['basic', 'trick'].includes(get.type(event.card))
                  && game.filterPlayer(p => !event.targets.includes(p)).length;
              },
              direct: true,
              content: function () {
                "step 0"
                player.chooseTarget(get.prompt2(event.name), function (card, player, target) {
                  return !trigger.targets.includes(target);
                })
                  .set('ai', function (target) {
                    return get.effect(target, _status.event.card, _status.event.user, _status.event.player);
                  })
                  .set('card', trigger.card)
                  .set('user', trigger.player);
                "step 1"
                if (result.bool) {
                  player.logSkill(event.name, result.targets);
                  trigger.targets.addArray(result.targets);
                }
              },
              ai: {
                threaten: 3,
              },
            },
            jlsgsy_baonuzhangrang: {
              inherit: 'jlsgsy_baonu',
              animationStr: '明帝, 都得叫我一声爹呢!',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_baonudiaochan: {
              inherit: 'jlsgsy_baonu',
              animationStr: '可惜、已经晚了！',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_meihuo: {
              audio: "ext:极略:2",
              enable: "phaseUse",
              usable: 1,
              filterCard: true,
              selectCard: [1, Infinity],
              discard: false,
              lose: false,
              delay: false,
              filterTarget: function (card, player, target) {
                return player != target && target.hasSex('male');
              },
              check: function (card) {
                if (card.name == 'du') return 20;
                var player = get.owner(card);
                if (card.name != "sha" && get.type(card) != "trick") {
                  return 0;
                }
                let info = get.info(card);
                if (info.singleCard || info.notarget) {
                  return 0;
                }
                if (get.effect(player, card, game.filterPlayer().randomGet()) > 0) {
                  return 0;
                }
                return 10 - 3 * Math.random();
              },
              content() {
                "step 0"
                player.give(cards, target);
                "step 1"
                event.cards = target.getCards('h', c => {
                  if ((c.name != 'sha' && get.type(c) != "trick")) {
                    return false;
                  }
                  let info = get.info(c);
                  return !info.singleCard && !info.notarget;
                });
                player.chooseTarget(
                  [1, Infinity],
                  `请选择${get.translation(target)}使用牌的目标"`,
                  (_, player, target) => target != _status.event.target,
                  true,
                )
                  .set("ai", p => -get.attitude(_status.event.player, p) - Math.random())
                  .set("target", target);
                "step 2"
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.targets = result.targets;
                "step 3"
                if (!event.cards.length || !target.isIn()) {
                  event.finish();
                  return;
                }
                let card = event.cards.pop();
                if (!target.getCards('h').includes(card)) {
                  event.redo();
                  return;
                }
                let targets = event.targets.filter(p => target.canUse(card, p, false) && p.isIn());
                if (!targets.length) {
                  event.redo();
                  return;
                }
                target.useCard(card, targets, "noai");
                event.redo();
              },
              ai: {
                order: 10,
                result: {
                  target: function (player, target) {
                    return Math.random() - 0.5;
                  },
                  player: 1,
                },
              }
            },
            jlsgsy_yaoyan: {
              audio: "ext:极略:2",
              trigger: {
                target: "useCardToTarget",
              },
              forced: true,
              direct: true,
              filter: function (event, player) {
                return event.player != player && ['basic', 'trick'].includes(get.type(event.card))
                  && !event.targets.includes(event.player);
              },
              logTarget: "player",
              content() {
                "step 0"
                trigger.getParent().targets.push(trigger.player);
                trigger.getParent().triggeredTargets2.push(trigger.player);
                game.delayx();
                "step 1"
                player.logSkill(event.name, trigger.player);
                game.log(trigger.player, "成为", trigger.card, "的额外目标");
              }
            },
            jlsgsy_miluan: {
              audio: "ext:极略:2",
              trigger: { player: "damageEnd" },
              filter(event, player) {
                return game.filterPlayer(p => p != player).some(p => p.countCards('h'));
              },
              check(event, player) {
                let gain = game.filterPlayer(p => p != player).reduce((a, b) => a + b.countCards('h'), 0);
                let lose = Math.floor((gain + player.countCards('h')) / 2);
                return gain * 1.2 > lose;
              },
              content() {
                'step 0'
                event.targets = game.filterPlayer(p => p != player);
                'step 1'
                var target = event.targets.shift();
                let cards = target.getCards('h');
                if (!cards.length) {
                  event.redo();
                  return;
                }
                player.gain(target, cards, 'bySelf');
                target.$give(cards.length, player);
                game.delayx(0.3);
                if (event.targets.length) {
                  event.redo();
                }
                'step 2'
                let cnt = Math.floor(player.countCards('h') / 2);
                player.chooseCard(cnt, true);
                'step 3'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let dis = [];
                let len = game.filterPlayer(p => p != player).length;
                let base = Math.floor(result.cards.length / len);
                let i = 0, iMax = result.cards.length % len;
                for (; i != iMax; ++i) {
                  dis.push(result.cards.randomRemove(base + 1));
                }
                while (dis.length < len) {
                  dis.push(result.cards.randomRemove(base));
                }
                dis.randomSort();
                event.dis = dis;
                event.targets = game.filterPlayer(p => p != player).sortBySeat();
                'step 4'
                if (!event.targets.length) {
                  event.finish();
                  return;
                }
                {
                  let target = event.targets.shift();
                  let cards = event.dis.shift();
                  target.gain(cards, player);
                  player.$giveAuto(cards, target);
                  // game.delayx(0.3);
                  event.redo();
                }
              },
              ai: {
                maixie: true,
                maixie_hp: true,
              }
            },
            jlsgsy_baonuyuanshao: {
              inherit: 'jlsgsy_baonu',
              animationStr: '都是蝼蚁！',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_mojian: {
              audio: "ext:极略:2",
              forced: true,
              trigger: { player: ['phaseZhunbeiBegin', 'phaseJieshuBegin'] },
              filter(event, player) {
                if (event.name == 'phaseZhunbei') {
                  return true;
                }
                return game.hasPlayer(p => p.getHistory('respond')
                  .some(e => {
                    if (e.card.name != 'shan') { return false }
                    let wj = e.getParent(2);
                    return wj.name == 'wanjian' && wj.card.jlsgsy_mojian;
                  }))
              },
              content() {
                player.chooseUseTarget({ name: 'wanjian', isCard: true, jlsgsy_mojian: true, }, true);
              },
            },
            jlsgsy_zhuzai: {
              audio: "ext:极略:2",
              trigger: { source: 'damageBegin1', player: 'damageBegin1' },
              forced: true,
              filter(event, player) {
                return event.card && get.type2(event.card) == 'trick';
              },
              content() {
                if (trigger.player == player) {
                  trigger.num -= 1;
                }
                if (trigger.source == player) {
                  trigger.num += 1;
                }
              },
              ai: {
                notrick: true,
                effect: {
                  target: function (card, player, target, current) {
                    if (get.type(card) == 'trick' && get.tag(card, 'damage')) {
                      return 'zeroplayertarget';
                    }
                  },
                }
              }
            },
            jlsgsy_duoji: {
              audio: "ext:极略:2",
              trigger: { global: 'die' },
              filter(event, player) {
                return event.source == player;
              },
              forced: true,
              logTarget: 'player',
              content() {
                player.gain(trigger.player.getCards('he'), 'give');
                var skills = trigger.player.getSkills(null, false, false).filter(function (i) {
                  var info = get.info(i);
                  return info && !info.charlotte;
                });
                if (skills.length) {
                  player.addSkills(skills);
                }
              }
            },
            jlsgsy_baonusunluban: {
              inherit: 'jlsgsy_baonu',
              animationStr: '这般无礼！',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_quanqing: {
              audio: "ext:极略:2",
              init(player) {
                player.storage.jlsgsy_quanqing = {
                  shown: [],
                  targets: [],
                }
              },
              onremove: true,
              enable: 'phaseUse',
              filter: function (event, player) {
                if (!player.storage.jlsgsy_quanqing) return false;
                return player.countCards('h', c => !player.getStorage('jlsgsy_quanqing').shown.includes(c))
                  && game.hasPlayer(current => lib.skill.jlsgsy_quanqing.filterTarget(null, player, current));
              },
              filterTarget: function (card, player, target) {
                return player != target && !player.getStorage('jlsgsy_quanqing').targets.includes(target);
              },
              filterCard: function (card, player) {
                return (!player.getStorage('jlsgsy_quanqing').shown?.includes(card)) || false;
              },
              check(card) {
                const player = get.player();
                let hs = player.getCards("h", c => !player.getStorage('jlsgsy_quanqing').shown.includes(c))
                  .sort((a, b) => get.number(a, player) - get.number(b, player));
                return hs.filter((v, i) => i == 0 || i == hs.length - 1).includes(card);
              },
              discard: false,
              lose: false,
              delay: false,
              content() {
                'step 0'
                player.showCards(cards);
                player.storage.jlsgsy_quanqing.shown.add(cards[0]);
                player.storage.jlsgsy_quanqing.targets.add(target);
                if (target.countCards('he', c => get.number(c, target) > get.number(cards[0]))) {
                  var next = target.chooseToDiscard(c => get.number(c) > _status.event.number)
                    .set('number', get.number(cards[0]))
                    .set('recover', player.isDamaged());
                  if (get.attitude(target, player) < 0) {
                    next.set('ai', c => {
                      let v = 9 - get.value(c);
                      if (_status.event.recover) {
                        v += 4;
                      }
                      return v - 2 * Math.random();
                    });
                  } else next.set("ai", () => 0);
                } else event.goto(2);
                'step 1'
                if (result.bool) {
                  delete player.storage.jlsgsy_quanqing.choice;
                  event.finish();
                }
                'step 2'
                let list = get.inpileVCardList(v => {
                  if (!["basic", "trick"].includes(get.type(v[2], null, false))) return false;
                  let card = get.autoViewAs({ name: v[2], nature: v[3], isCard: true }, []);
                  return target.hasUseTarget(card)
                });
                var next = player.chooseButton(['', `###权倾###请选择${get.translation(target)}使用的牌`, [list, 'vcard']]);
                next.ai = function (button) {
                  return button.link[2] === _status.event.choice[0] &&
                    (button.link[3] || true) === (_status.event.choice[1] || true);
                }
                next.choice = player.storage.jlsgsy_quanqing.choice ?? [];
                'step 3'
                delete player.storage.jlsgsy_quanqing.choice;
                if (!result.bool) {
                  event.finish();
                  return;
                }
                let card = { name: result.links[0][2], nature: result.links[0][3] };
                event.card = card;
                let info = get.info(card);
                let range;
                if (!info.notarget) {
                  let select = get.copy(info.selectTarget);
                  if (select == undefined) {
                    range = [1, 1];
                  }
                  else if (typeof select == 'number') range = [select, select];
                  else if (get.itemtype(select) == 'select') range = select;
                  else if (typeof select == 'function') range = select(card, target);
                  game.checkMod(card, target, range, 'selectTarget', target);
                }
                if (info.notarget || range[1] == -1) {
                  target.chooseUseTarget(card, true);
                  event.goto(5);
                  return;
                }
                var next = player.chooseTarget();
                next.set('_get_card', card);
                next.set('filterTarget', function (card, player, target) {
                  return lib.filter.targetInRange(card, _status.event.subject, target)
                    && lib.filter.targetEnabledx(card, _status.event.subject, target);
                });
                next.set('ai', function (target, targets) {
                  return get.effect_use(target, [], _status.event.subject, _status.event.player);
                });
                next.set('selectTarget', range);
                next.set('forced', true);
                next.set('subject', target);
                next.set('prompt', `选择${get.translation(card)}的目标`);
                next.set('prompt2', `由${get.translation(target)}使用`);
                'step 4'
                if (result.bool) {
                  target.useCard(event.card, result.targets, 'noai');
                }
                'step 5'
                if (player.isDamaged()) player.recover();
              },
              ai: {
                order(skill, player) {
                  if (!lib.skill.jlsgsy_quanqing.filter(null, player)) return 0;
                  let hs = player.getCards('h', c => !player.getStorage('jlsgsy_quanqing').shown.includes(c));
                  let numbers = hs.map(i => get.number(i, player)).filter(i => i != Infinity && typeof i == "number"),
                    orders = hs.map(i => get.order(i, player)).filter(i => i != Infinity && typeof i == "number");
                  return Math.max.apply(Math, numbers.concat(orders)) + 0.1;
                },
                result: {
                  player(player, target) {
                    const cards = get.inpileVCardList(v => {
                      if (!["basic", "trick"].includes(get.type(v[2], null, false))) return false;
                      let card = get.autoViewAs({ name: v[2], nature: v[3], isCard: true }, []);
                      return target.hasUseTarget(card);
                    });
                    if (cards.length) {
                      let choice,
                        value = 0,
                        keys = ["effect", "canUse", "effect_use", "getUseValue"];
                      for (let [, , cardName, nature] of cards) {
                        let card = get.autoViewAs({ name: cardName, nature: nature }, []);//神金传虚拟牌，cardid也不设置一下😅
                        let newV = lib.skill.dcpandi.getUseValue(card, target, player);
                        if (newV > value) {
                          choice = [cardName, nature];
                          value = newV;
                        }
                        for (let key of keys) {//补救措施
                          let info = _status.event._tempCache[key];
                          for (let i in info) {
                            if (i.indexOf(player.playerid) > -1 && i.endsWith("-") && i.indexOf("c:") == -1) delete _status.event._tempCache[key][i];
                          };
                        };
                      };
                      if (choice) {
                        player.storage.jlsgsy_quanqing.choice = choice;
                        return 1;
                      }
                    }
                    return 0;
                  },
                  target(player, target) {
                    if (lib.skill.jlsgsy_quanqing.ai.result.player.apply(this, arguments) > 0) {
                      if (Math.floor(Math.random() * 7) + 1 > get.number(ui.selected.cards[0], player)) return 1;
                    }
                    return -1;
                  },
                },
              },
              group: ["jlsgsy_quanqing_temp"],
              subSkill: {
                temp: {
                  charlotte: true,
                  forced: true,
                  popup: false,
                  trigger: { player: "phaseUseAfter" },
                  content() {
                    lib.skill.jlsgsy_quanqing.init(player);
                  },
                },
              }
            },
            jlsgsy_raomeng: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseJudgeBegin' },
              forced: true,
              filter(event, player) {
                return event.player != player && !event.player.countCards('j');
              },
              check(event, player) {
                return get.attitude(player, event.player) < 0 && !event.player.skipList.includes('phaseUse');
              },
              content() {
                trigger.player.executeDelayCardEffect('lebu');
              },
            },
            jlsgsy_yongjie: {
              audio: "ext:极略:2",
              trigger: { player: "phaseJieshuBegin" },
              filter(event, player) {
                let dealers = game.me.getAllHistory('damage').map(e => e.source)
                return game.hasPlayer(p => p != player && dealers.includes(p));
              },
              direct: true,
              content() {
                'step 0'
                player.chooseTarget(
                  get.prompt2(event.name),
                  [1, Infinity],
                  (_, player, target) => target.getAllHistory('sourceDamage', e => e.player == _status.event.player).length,
                )
                  .set('ai', (target, targets) => {
                    if (get.attitude(_status.event.player, target) >= 0) {
                      return 0;
                    }
                    let cnt = target.getAllHistory('sourceDamage', e => e.player == _status.event.player).length;
                    let cnt2 = target.countDiscardableCards(target, 'he');
                    return Math.min(
                      target.isHealthy() ? 2 : 1,
                      cnt < cnt2 ? cnt : Infinity,
                    ) - (get.attitude(_status.event.player, target) + Math.random()) / 10;
                  });
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event.targets = result.targets.sortBySeat();
                player.logSkill(event.name, event.targets);

                for (let p of event.targets.slice().sort((a, b) => b.ai.shown - a.ai.shown)) {
                  if (p.ai.shown > player.ai.shown) {
                    player.addExpose(0.2);
                  }
                }
                'step 2'
                var target = event.targets.shift();
                event.target = target;
                if (!target) {
                  event.finish();
                  return;
                }
                var cnt = target.getAllHistory('sourceDamage', e => e.player == _status.event.player).length;
                var cnt2 = target.countDiscardableCards(target, 'he');
                if (cnt > cnt2) {
                  event._result = { bool: false };
                  return;
                }
                target.chooseToDiscard(cnt)
                  .set('prompt2', '否则减一点体力上限')
                  .set('ai', c => {
                    let player = _status.event.player;
                    if (player.maxHp == 1 && !player.storage.nohp) {
                      return 20 - get.value(c);
                    }
                    let v = 7 - _status.event.selectCard[0] - get.value(c);
                    if (player.isHealthy()) {
                      v += 3;
                    }
                    return v;
                  })
                'step 3'
                if (!result.bool) {
                  target.loseMaxHp();
                }
                event.goto(2);
              },
            },
            jlsgsy_baonucaocao: {
              inherit: 'jlsgsy_baonu',
              animationStr: '休叫天下人负我！',
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_weiwu: {
              audio: "ext:极略:2",
              trigger: { player: 'damageEnd' },
              frequent: true,
              content() {
                'step 0'
                player.draw(2);
                if (trigger.card && trigger.card.isCard && trigger.cards.length) {
                  let cards = trigger.cards.slice().filterInD('o');
                  let prompt = `是否获得${get.translation(cards)}与弃牌堆的所有${get.translation({ name: trigger.card.name, nature: trigger.card.nature })}?`;
                  player.chooseBool(prompt).set("frequentSkill", "jlsgsy_weiwu");
                } else {
                  event.finish();
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                var cards = trigger.cards.slice().filterInD('o')
                  .concat(Array.from(ui.discardPile.childNodes)
                    .filter(c => c.name == trigger.card.name && (!c.nature && !trigger.card.nature || c.nature === trigger.card.nature))
                  );
                player.gain(cards, 'gain2');
              },
              ai: {
                maixie: true,
                maixie_hp: true,
                effect: {
                  target: function (card, player, target) {
                    if (player.hasSkillTag("jueqing", false, target)) return [1, -1];
                    if (get.tag(card, "damage")) return [1, 2];
                  },
                },
              },
            },
            jlsgsy_duzun: {
              audio: "ext:极略:2",
              trigger: { global: 'phaseBegin' },
              unique: true,
              init(player) {
                player.storage.jlsgsy_duzun = new Map();
              },
              filter(event, player) {
                let cnt = player.storage.jlsgsy_duzun.get(event.player);
                return event.player != player && (!cnt || cnt < 2);
              },
              logTarget: 'player',
              forced: true,
              content() {
                'step 0'
                let triggeredCnt = player.storage.jlsgsy_duzun.get(trigger.player) || 0;
                player.storage.jlsgsy_duzun.set(trigger.player, triggeredCnt + 1);

                event.allChoices = [
                  '使用【杀】的次数上限',
                  '摸牌阶段摸牌基数',
                  '体力上限',
                ];
                event.choices = [];
                if (trigger.player.getCardUsable("sha", true) > 0) {
                  event.choices.push(event.allChoices[0]);
                }
                if ((trigger.player.storage.jlsgsy_duzun_buff || [null, 0])[1] > -2) {
                  event.choices.push(event.allChoices[1]);
                }
                event.choices.push(event.allChoices[2]);
                var choice = function () {
                  let isFriend = get.attitude(trigger.player, player) > 0;
                  if (isFriend) {
                    if (event.choices.includes(event.allChoices[0]) && trigger.player.getCardUsable("sha", true) > 1) {
                      return 0;
                    }
                    if (trigger.player.getDamagedHp() > 1) {
                      return event.choices.indexOf(event.allChoices[2]);
                    }
                    return event.choices.map((_, i) => i).randomGet();
                  }
                  // player.hasSkill('jlsgsy_longbian')
                  if (trigger.player.maxHp > 1) {
                    return event.choices.indexOf(event.allChoices[2]);
                  }
                  return event.choices.map((_, i) => i).randomGet();
                }();
                trigger.player.chooseControlList(event.choices, true)
                  .set('ai', function () {
                    return _status.event.choice;
                  })
                  .set('choice', choice);
                'step 1'
                player.addSkill('jlsgsy_duzun_buff');
                trigger.player.addSkill('jlsgsy_duzun_buff');
                var index = event.allChoices.indexOf(event.choices[result.index]);
                lib.skill.jlsgsy_duzun_buff.addMark(trigger.player, index, -1);
                lib.skill.jlsgsy_duzun_buff.addMark(player, index, 1);
              },
              subSkill: {
                buff: {
                  addMark(player, type, cnt) {
                    if (type == 2) {
                      if (cnt > 0) {
                        player.gainMaxHp(cnt);
                      } else {
                        player.loseMaxHp(-cnt);
                      }
                      return;
                    }
                    if (!player.storage.jlsgsy_duzun_buff) {
                      player.storage.jlsgsy_duzun_buff = [0, 0];
                    }
                    player.storage.jlsgsy_duzun_buff[type] += cnt;
                    if (player.storage.jlsgsy_duzun_buff.some(i => i)) {
                      player.markSkill('jlsgsy_duzun_buff');
                    } else {
                      player.unmarkSkill('jlsgsy_duzun_buff');
                    }
                  },
                  audio: "jlsgsy_duzun",
                  locked: false,
                  marktext: "尊",
                  intro: {
                    markcount(storage, player) {
                      return Math.abs(storage.reduce((a, b) => a + b));
                    },
                    content(storage, player) {
                      let str = [];
                      if (storage[0] != 0) {
                        str.push('使用【杀】的次数上限' + (storage[0] < 0 ? "" : "+") + storage[0]);
                      }
                      if (storage[1] != 0) {
                        str.push('摸牌阶段摸牌基数' + (storage[1] < 0 ? "" : "+") + storage[1]);
                      }
                      return str.join('<br>');
                    },
                  },
                  mod: {
                    cardUsable(card, player, num) {
                      if (card.name == "sha" && player.storage.jlsgsy_duzun_buff) return num + player.storage.jlsgsy_duzun_buff[0];
                    },
                  },
                  trigger: { player: "phaseDrawBegin2" },
                  forced: true,
                  filter: function (event, player) {
                    return !event.numFixed && player.storage.jlsgsy_duzun_buff && player.storage.jlsgsy_duzun_buff[1];
                  },
                  content: function () {
                    trigger.num += player.storage.jlsgsy_duzun_buff[1];
                    if (trigger.num < 0) {
                      trigger.num = 0;
                    }
                  },
                },
              },
              ai: {
                threaten: 2.5,
              },
            },
            jlsgsy_longbian: {
              audio: "ext:极略:2",
              trigger: { player: 'phaseBegin' },
              direct: true,
              countShaUsable(player) {
                const card = get.autoViewAs({ name: "sha" }),
                  name = "cardUsable";
                let num = get.info(card).usable,
                  skills = [];
                if (typeof num == "function") num = num(card, player);
                if (typeof player.getModableSkills == "function") {
                  skills = player.getModableSkills();
                } else if (typeof player.getSkills == "function") {
                  skills = player.getSkills().concat(lib.skill.global);
                  game.expandSkills(skills);
                  skills = skills.filter(function (skill) {
                    let info = get.info(skill);
                    return info && info.mod;
                  });
                  skills.sort((a, b) => get.priority(a) - get.priority(b));
                }
                const arg = [card, player, num];
                skills.forEach(value => {
                  var mod = get.info(value).mod[name];
                  if (!mod) return;
                  const result = mod.call(this, ...arg);
                  if (!result || result === Infinity) return;
                  if (typeof arg[arg.length - 1] != "object") arg[arg.length - 1] = result;
                });
                return arg[arg.length - 1];
              },
              filter(event, player) {
                let cnt = [
                  lib.skill.jlsgsy_longbian.countShaUsable(player),
                  2 + (player.storage.jlsgsy_duzun_buff || [null, 0])[1],
                  player.maxHp,
                ];
                return cnt.filter(cnt => cnt > 0).length >= 2;
              },
              content() {
                'step 0'
                var cnt = [
                  lib.skill.jlsgsy_longbian.countShaUsable(player),
                  2 + (player.storage.jlsgsy_duzun_buff || [null, 0])[1],
                  player.maxHp,
                ];
                event.cnt = cnt;
                var names = [
                  '使用【杀】的次数上限',
                  '摸牌阶段摸牌基数',
                  '体力上限',
                ];
                var promptGen = function (index) {
                  let prompt = `令${names[index]}+1,令`;
                  for (let index2 of [0, 1, 2]) {
                    if (index2 == index) {
                      continue;
                    }
                    prompt += names[index2] + `(${cnt[index2]})`;
                  }
                  prompt += '互换';
                  return prompt;
                };
                event.choices = [0, 1, 2].map(promptGen);

                if (cnt.some(cnt => cnt <= 0)) {
                  let index = cnt.findIndex(cnt => cnt <= 0);
                  event.index = index;
                  let prompt = `###${get.prompt(event.name)}###${promptGen(index)}`;
                  player.chooseBool(prompt, true);
                } else {
                  let choice = [0, 1, 2]
                    .filter(index => {
                      if (index == 2) {
                        return true;
                      }
                      return cnt[1 - index] > player.hp - 2;
                    })
                    .randomGet();
                  player.chooseControlList(get.prompt(event.name), event.choices)
                    .set('ai', function () {
                      return _status.event.choice;
                    })
                    .set('choice', choice);
                  event.goto(2);
                }
                'step 1'
                if (!result.bool) {
                  event.finish();
                  return;
                }
                event._result = { index: event.index };
                'step 2'
                if (result.control == 'cancel2') {
                  event.finish();
                  return;
                }
                player.logSkill(event.name);
                game.log(player, event.choices[result.index]);
                player.addSkill('jlsgsy_duzun_buff');
                var otherTwo = [0, 1, 2].filter(index => index != result.index);
                var diff = event.cnt[otherTwo[0]] - event.cnt[otherTwo[1]];
                lib.skill.jlsgsy_duzun_buff.addMark(player, otherTwo[0], -diff);
                lib.skill.jlsgsy_duzun_buff.addMark(player, otherTwo[1], diff);
                lib.skill.jlsgsy_duzun_buff.addMark(player, result.index, 1);
              },
              ai: {
                combo: 'jlsgsy_duzun',
              },
            },
            //魔邹氏
            jlsgsy_baonuzoushi: {
              audio: "ext:极略:1",
              animationStr: '既然如此，接下来的表演，将军可要看好了',
              inherit: "jlsgsy_baonu",
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_huoshi: {
              audio: "ext:极略:2",
              trigger: { global: "useCardToPlayered" },
              filter(event, player) {
                if (event.player == player) return false;
                if (event.getParent("jlsgsy_mowu").name == "jlsgsy_mowu") return false;
                if (event.getParent().triggeredTargets3.length > 1) return false;
                if (!['basic', 'trick'].includes(get.type(event.card, event.player))) return false;
                let players = game.filterPlayer(cur => !event.targets.includes(cur));
                return players.length;
              },
              forced: true,
              async content(event, trigger, player) {
                let targetx = game.filterPlayer(cur => !trigger.targets.includes(cur)).randomGet();
                trigger.targets.add(targetx);
                trigger.player.line(targetx);
                game.log(targetx, "成为", trigger.card, "的额外目标");
                await game.asyncDelayx();
              },
            },
            jlsgsy_yinzi: {
              audio: "ext:极略:2",
              trigger: { global: ["gainAfter", "loseAsyncAfter", "recoverAfter"] },
              getIndex(event, player) {
                if (event.name == "recover") return [event.player];
                if (!event.getg) return [];
                return game.filterPlayer(current => {
                  if (current == player) return false;
                  return event.getg(current)?.length;
                }).sortBySeat();
              },
              filter(event, player, name, target) {
                if (!target?.isIn() || target == player || target == _status.currentPhase) return false;
                return !player.hasHistory("useSkill", evt => {
                  if (evt.skill != "jlsgsy_yinzi") return false;
                  if (!evt.targets || !evt.targets.includes(target)) return false;
                  if (event.name == "recover") return evt.event.triggername == "recoverAfter";
                  return true;
                });
              },
              forced: true,
              logTarget(event, player, name, target) {
                return target;
              },
              async content(event, trigger, player) {
                if (event.triggername != "recoverAfter") await player.recover();
                else await player.draw(2);
              },
            },
            jlsgsy_mowu: {
              audio: "ext:极略:2",
              trigger: { global: "useCardAfter" },
              filter(event, player) {
                if (event.getParent("jlsgsy_mowu").name == "jlsgsy_mowu") return false;
                let targets = (event._targets || event.targets).slice().filter(i => i.isIn());
                if (!event.player.isIn()) return false;
                if (!['basic', 'trick'].includes(get.type(event.card, event.player))) return false;
                if (event.player != player && !targets.includes(player)) return false;
                else if (event.player == player && !targets.remove(player).length) return false;
                return true;
              },
              check(event, player) {
                let targets = (event._targets || event.targets).slice().filter(i => i.isIn());
                let cardEff = targets.reduce((t, cur) => t + get.effect(cur, event.card, event.player, player), 0);
                let drawer = targets.addArray([player, event.player]).filter(i => i.isIn());
                let drawEff = drawer.reduce((t, cur) => t + get.effect(cur, { name: "draw" }, player, player), 0);
                return drawEff + cardEff > 0;
              },
              prompt(event, player) {
                let targets = (event._targets || event.targets).slice()
                  .add(event.player)
                  .remove(player)
                  .filter(i => i.isIn());
                return `魔舞：是否与${get.translation(targets)}各摸一张牌？<br>然后令${get.translation(event.card)}额外结算一次`
              },
              async content(event, trigger, player) {
                let targets = (trigger._targets || trigger.targets).slice().filter(i => i.isIn());
                let drawer = targets.slice().addArray([player, trigger.player]).filter(i => i.isIn());
                await game.asyncDraw(drawer);
                let card = get.autoViewAs(trigger.card, []);
                card.cards = [];
                if (targets.length) await trigger.player.useCard(card, targets, false);
              },
              ai: {
                expose: 0.4,
                threaten: 0.9,
              },
            },
            //魔孟获
            jlsgsy_baonumenghuo: {
              audio: "ext:极略:1",
              animationStr: '非要逼我，现出真身！',
              inherit: "jlsgsy_baonu",
              mode: ['identity', 'guozhan', 'boss', 'stone'],
            },
            jlsgsy_qiushou: {
              audio: "ext:极略:2",
              trigger: {
                player: "useCardToPlayered",
                target: "useCardToTargeted",
              },
              filter(event, player, name) {
                if (get.type(event.card) != "trick") return false;
                let source = event.player,
                  target = event.target;
                if (source == player) return target != player && target.isIn();
                return source.isIn();
              },
              forced: true,
              logTarget(event, player) {
                let source = event.player,
                  target = event.target;
                if (source == player) return target;
                return source;
              },
              async content(event, trigger, player) {
                let source = trigger.player,
                  target = trigger.target,
                  damage;
                if (source == player) damage = target;
                else damage = source;
                const { result } = await damage.chooseToRespond()
                  .set("filterCard", card => get.name(card) == "sha")
                  .set("ai", card => {
                    const player = _status.event.player,
                      source = get.event("source");
                    if (get.damageEffect(player, source, player) > 0) return 0;
                    return 8 - get.value(card);
                  })
                  .set("prompt", `${get.translation(player)}对你发动了【酋首】`)
                  .set("prompt2", `请打出一张【杀】，或受到${get.translation(player)}造成的一点伤害`)
                  .set("source", player);
                if (!result.bool) await damage.damage(1, player);
              },
              ai: {
                effect: {
                  target(card, player, target) {
                    if (target == player) return;
                    if (get.type(card) != "trick") return;
                    return [1, 0, 1, -2];
                  },
                  player(card, player, target) {
                    if (target == player) return;
                    if (get.type(card) != "trick") return;
                    return [1, 0, 1, -2];
                  },
                }
              },
            },
            jlsgsy_moshou: {
              audio: "ext:极略:3",
              init(player) {
                player.storage.jlsgsy_moshou = {
                  "1": 0,
                  "2": 0,
                  "3": 0,
                };
              },
              mark: true,
              marktext: "兽",
              intro: {
                markcount(storage, player) {
                  return player.storage.jlsgsy_moshou_record;
                },
                mark(dialog, storage, player) {
                  const addNewRow = lib.element.dialog.addNewRow.bind(dialog),
                    itemContainerCss = { height: "20px" },
                    map = ["无", "①", "②", "③"];
                  if (get.is.phoneLayout()) dialog.classList.add("fullheight");
                  dialog.css({ width: "20%" });
                  for (let i = 0; i < 4; i++) {
                    let list;
                    if (i == 0) list = [
                      { item: `当前效果`, ratio: .5, itemContainerCss },
                      { item: `${map[player.storage.jlsgsy_moshou_record || 0]}`, ratio: .5, itemContainerCss },
                    ]
                    else list = [
                      { item: `效果${map[i]}`, ratio: .5, itemContainerCss },
                      { item: `${get.cnNumber(storage[i.toString()])}次`, ratio: .5, itemContainerCss },
                    ];
                    addNewRow(...list);
                  };
                },
              },
              trigger: { player: "phaseBegin" },
              locked: true,
              logAudio(event, player, triggername, _, costResult) {
                const num = costResult.cost_data.num;
                return [`ext:极略/jlsgsy_moshou${num}.mp3`];
              },
              async cost(event, trigger, player) {
                let num = [1, 2, 3].remove(player.storage.jlsgsy_moshou).randomGet();
                event.result = {
                  bool: true,
                  cost_data: { num },
                };
              },
              async content(event, trigger, player) {
                const num = event.cost_data.num;
                player.storage.jlsgsy_moshou_record = num;
                player.storage.jlsgsy_moshou[num.toString()]++;
                player.update();
                if (num == 2) {
                  let targets = game.filterPlayer().remove(player).sortBySeat(player);
                  for (let target of targets) {
                    player.line(target);
                    game.log(target, "的非锁定技和装备技能失效了");
                    target.addTempSkill("jlsgsy_moshou_2", { player: "phaseEnd" });
                  }
                }
                await player.draw(player.storage.jlsgsy_moshou[num.toString()]);
              },
              getSkills(player) {
                let equipSkills = player.getCards("e").reduce((list, card) => {
                  const info = get.info(card);
                  if (info && info.skills) return list.addArray(info.skills);
                  return list;
                }, []),
                  skills = player.getSkills(null, false, false);
                return equipSkills.concat(skills).filter(skill => {
                  let info = get.info(skill);
                  return info && !get.is.locked(skill, player) && !info.charlotte && !info.persevereSkill;
                });;
              },
              group: ["jlsgsy_moshou_1", "jlsgsy_moshou_3"],
              subSkill: {
                "1": {
                  trigger: { source: "damageSource" },
                  filter(event, player) {
                    if (player.storage.jlsgsy_moshou_record != 1) return false;
                    if (event.player == player) return false;
                    return event.num > 0;
                  },
                  forced: true,
                  async content(event, trigger, player) {
                    if (trigger.player.countDiscardableCards(player, "he")) {
                      await trigger.player.randomDiscard("he", 1);
                    }
                    await trigger.player.turnOver();
                  },
                  ai: {
                    effect: {
                      player(card, player, target) {
                        if (player.storage.jlsgsy_moshou_record != 1) return;
                        if (get.tag(card, "damage")) {
                          if (player.hasSkillTag("jueqing", false, target)) return;
                          return [1, 0, 1, -1];
                        }
                      }
                    }
                  },
                },
                "2": {
                  init(player) {
                    player.disableSkill("jlsgsy_moshou", lib.skill.jlsgsy_moshou.getSkills(player));
                  },
                  onremove(player) {
                    player.enableSkill("jlsgsy_moshou");
                  },
                  trigger: {
                    player: "loseAfter",
                    global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                  },
                  filter(event, player) {
                    if (event.name == "equip" && event.player == player) return true;
                    const evt = event.getl(player);
                    return evt && evt.player == player && evt.es && evt.es.length;
                  },
                  forced: true,
                  popup: false,
                  firstDo: true,
                  async content(event, trigger, player) {
                    player.enableSkill("jlsgsy_moshou");
                    player.disableSkill("jlsgsy_moshou", lib.skill.jlsgsy_moshou.getSkills(player));
                  },
                  ai: {
                    neg: true,
                    unequip_equip1: true
                  },
                },
                "3": {
                  trigger: {
                    player: [
                      "damageBefore", "loseHpBefore", "loseMaxHpBefore", "loseBegin",
                      "changeSkillsBefore", "linkBefore", "turnOverBefore",
                    ],
                  },
                  filter(event, player) {
                    if (player.storage.jlsgsy_moshou_record != 3) return false;
                    let key = lib.skill.jlsg_qianyuan.translate[event.name];
                    let bool = lib.skill.jlsg_qianyuan.getInfo(event, player, key).bool;
                    if (!bool) return false;
                    if (key == "damage") {
                      if (event.hasNature()) return false;
                      if (!event.source && event.source == player) return false;
                    }
                    else if (["loseHp", "loseMaxHp", "loseSkill", "link", "turnOver"].includes(key)) {
                      if (key == "loseSkill" && !event.removeSkill.length) return false;
                      if (event.getParent().player && event.getParent().player == player) return false;
                      if (!event.getParent().player) return false;
                    }
                    else if (key == "discard") {
                      let discarder = event.discarder || event.getParent().player;
                      if (discarder && discarder == player) return false;
                      if (!discarder) return false;
                    }
                    return true;
                  },
                  forced: true,
                  async content(event, trigger, player) {
                    let key = lib.skill.jlsg_qianyuan.translate[trigger.name];
                    const { str } = lib.skill.jlsg_qianyuan.getInfo(trigger, player, key);
                    if (trigger.name == "changeSkills") trigger.removeSkill = [];
                    else if (trigger.name == "lose") trigger.cards = trigger.cards.filter(i => get.owner(i) != player);
                    else trigger.cancel();
                    game.log(player, "取消了", `#y${str}`);
                  },
                  ai: {
                    effect: {
                      target(card, player, target) {
                        if (player == target || target.storage.jlsgsy_moshou_record != 3) return;
                        if (card.name == "tiesuo") return "zerotarget";
                        if (card.name == "guohe") return "zerotarget";
                        if (get.tag(card, "damage")) {
                          if (get.tag(card, "natureDamage")) return;
                          return "zerotarget";
                        }
                        else if (get.name(card) == "guohe") return "zerotarget";
                        else if (get.name(card) == "tiesuo" && !target.isLinked()) return "zerotarget";
                      }
                    },
                  },
                },
              },
            },
          },
          translate: {
            jlsg_sy: 'SK三英',
            jlsgsy_lvbu: '善战无前',
            jlsgsy_lvbubaonu: '善战无前',
            jlsgsy_dongzhuo: '狱魔祸世',
            jlsgsy_dongzhuobaonu: '狱魔祸世',
            jlsgsy_zhangrang: '祸乱之源',
            jlsgsy_zhangrangbaonu: '祸乱之源',
            jlsgsy_zhangjiao: '大贤良师',
            jlsgsy_zhangjiaobaonu: '大贤良师',
            jlsgsy_caifuren: '蛇蝎美人',
            jlsgsy_caifurenbaonu: '蛇蝎美人',
            jlsgsy_weiyan: '嗜血狂狼',
            jlsgsy_weiyanbaonu: '嗜血狂狼',
            jlsgsy_simayi: '三分归晋',
            jlsgsy_simayibaonu: '三分归晋',
            jlsgsy_sunhao: '末世暴君',
            jlsgsy_sunhaobaonu: '末世暴君',
            jlsgsy_diaochan: '妖狐之媚',
            jlsgsy_diaochanbaonu: '妖狐之媚',
            jlsgsy_yuanshao: '专行魔君',
            jlsgsy_yuanshaobaonu: '专行魔君',
            jlsgsy_sunluban: '权倾梦魇',
            jlsgsy_sunlubanbaonu: '权倾梦魇',
            jlsgsy_caocao: '乱世枭雄',
            jlsgsy_caocaobaonu: '乱世枭雄',
            jlsgsy_zoushi: "妖媚之殃",
            jlsgsy_zoushibaonu: "妖媚之殃",
            jlsgsy_menghuo: "南中魔兽",
            jlsgsy_menghuobaonu: "南中魔兽",

            jlsgsy_xiuluo: '修罗',
            jlsgsy_shenwei: '神威',
            jlsgsy_shenji: '神戟',
            jlsgsy_zongyu: '纵欲',
            jlsgsy_lingnue: '凌虐',
            jlsgsy_luanzheng: '乱政',
            jlsgsy_chanxian: '馋陷',
            jlsgsy_baozheng: '暴政',
            jlsgsy_nishi: '逆施',
            jlsgsy_hengxing: '横行',
            jlsgsy_baonudongzhuo: '暴怒',
            jlsgsy_bujiao: '布教',
            jlsgsy_taiping: '太平',
            jlsgsy_sanzhi: '三治',
            jlsgsy_yaohuo: '妖惑',
            jlsgsy_yaohuo2: '妖惑',
            jlsgsy_baonuzhangjiao: '暴怒',
            jlsgsy_dihui: '诋毁',
            jlsgsy_luansi: '乱嗣',
            jlsgsy_huoxin: '祸心',
            jlsgsy_huoxin2: '祸心',
            jlsgsy_canlue: '残掠',
            jlsgsy_canlue2: '残掠',
            jlsgsy_baonucaifuren: '暴怒',
            jlsgsy_shiao: '恃傲',
            jlsgsy_shiao2: '恃傲',
            jlsgsy_kuangxi: '狂袭',
            jlsgsy_baonuweiyan: '暴怒',
            jlsgsy_baonuzhangrang: '暴怒',
            jlsgsy_fangu: '反骨',
            jlsgsy_bolue: '博略',
            jlsgsy_qiangxi: '强袭',
            jlsgsy_qicai: '奇才',
            jlsgsy_luanji: '乱击',
            jlsgsy_quanheng: '权衡',

            jlsgsy_baonulvbu: '暴怒',
            jlsgsy_baonulvbu_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_wushuang: '无双',
            jlsgsy_wushuang1: '无双',
            jlsgsy_wushuang2: '无双',
            jlsgsy_wushuang3: '无双',
            jlsgsy_wushuang_info: '锁定技，当你使用【杀】或【决斗】指定目标后，你令此牌需要依次使用或打出两张【闪】或【杀】响应。你点数为奇数的伤害牌的伤害基数固定为3。',
            jlsgsy_xiuluo: '修罗',
            jlsgsy_xiuluo_info: '当你成为【杀】或非延时锦囊的唯一目标后，你可以摸一张牌并将此牌的效果改为【决斗】。',
            jlsgsy_shenwei: '神威',
            jlsgsy_shenwei_info: '锁定技，你攻击范围内其他角色的手牌上限-1。',
            jlsgsy_shenji: '神戟',
            jlsgsy_shenji_info: '锁定技，你的【杀】的目标上限+2。',

            jlsgsy_luanzheng_info: '其他角色使用基本牌或非延时锦囊指定唯一目标时，你可为此牌指定一个额外目标，每回合限一次。',
            jlsgsy_chanxian_info: '出牌阶段限一次，你可以移动一名角色区域里一张牌，若如此做，视为失去牌的角色对获得牌的角色使用【决斗】，然后你获得受此【决斗】伤害角色的一张牌。',
            jlsgsy_canlue_info: '你从其他角色处获得牌时，可对其造成等量的伤害；锁定技，其他角色获得你的牌时，须弃置等量的牌',
            jlsgsy_zongyu_info: '锁定技，出牌阶段，当你使用锦囊牌后，你视为使用【酒】',
            jlsgsy_lingnue_info: '当你造成不少于2点的伤害后，你可以摸两张牌，并加1点体力上限。',
            jlsgsy_baozheng_info: '锁定技，其他角色的摸牌阶段结束时，除非其交给你一张锦囊牌，否则视为你对其使用【杀】。',
            jlsgsy_nishi_info: '锁定技，当你受到其他角色造成的伤害后，除非其弃置装备区里的所有牌，否则视为你对其使用【杀】。',
            jlsgsy_hengxing_info: '锁定技，你于出牌阶段外造成的伤害+1。',
            jlsgsy_baonudongzhuo_info: '锁定技，当你体力降至4或者更少时，你变身为暴怒董卓并立即开始你的回合',
            jlsgsy_baonuzhangrang_info: '锁定技，当你体力降至4或者更少时，你变身为暴怒张让并立即开始你的回合',
            jlsgsy_bujiao_info: '其他角色的回合开始阶段，你可以令其摸一张牌并获得1枚「太平」标记。其他角色的手牌上限-X(X为其拥有的「太平」标记数).',
            jlsgsy_taiping_info: '回合开始阶段，你可以弃置所有角色的「太平」标记并摸等同于弃置标记数的牌。然后若你的手牌数大于其他角色手牌数之和，你可以对其他角色各造成1点伤害。',
            jlsgsy_sanzhi_info: '你使用三种类型不同的牌后，可以令所有其他角色获得1枚「太平」标记。',
            jlsgsy_yaohuo_info: '出牌阶段限一次，你可以指定一名其他角色并选择一项：1、弃置其手牌数的牌并获得其所有手牌；2、弃置其技能数的牌并取走其所有技能直到其回合开始或阵亡。',
            jlsgsy_baonuzhangjiao_info: '锁定技，当你体力降至4或者更少时，你变身为暴怒张角并立即开始你的回合',
            jlsgsy_dihui_info: '出牌阶段限一次，你可令一名角色对另一名体力更少角色造成1点伤害，若造成伤害的角色不是你，你回复一点体力。',
            jlsgsy_luansi_info: '出牌阶段限一次，你可以令两名其他角色拼点，视为拼点赢的角色对没赢的角色使用一张【决斗】，然后你弃置拼点没赢的角色两张牌',
            jlsgsy_huoxin_info: '你对其他角色造成伤害，或受到其他角色造成的伤害后，你可令该角色交给你一张装备区内的装备牌 ，或者失去一点体力。',
            jlsgsy_baonucaifuren_info: '锁定技，当你体力降至4或者更少时，你变身为暴怒蔡夫人并立即开始你的回合',
            jlsgsy_shiao_info: '回合开始阶段开始时，你可以视为对手牌数少于你的一名其他角色使用一张【杀】；回合结束阶段开始时你可以视为对手牌数大于你的一名其他角色使用一张【杀】',
            jlsgsy_kuangxi_info: '你使用锦囊牌后，可以视为对此牌的目标使用【杀】。若你以此法没有造成伤害，你失去1点体力。',
            jlsgsy_baonuweiyan_info: '锁定技，当你体力降至4或者更少时，你变身为暴怒魏延并立即开始你的回合',
            jlsgsy_fangu_info: '锁定技，当你受到伤害后，结束当前回合，你执行一个额外回合',

            jlsgsy_bolue_info: '锁定技，回合开始前，你随机获得一个魏/一个蜀/一个吴势力的技能，直到下个回合开始。',
            jlsgsy_baonusimayi: '暴怒',
            jlsgsy_baonusimayi_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_renji: '忍忌',
            jlsgsy_renji_info: '当你受到伤害后，你可以摸一张牌，若如此做，你发动〖博略〗时额外随机获得一个与来源势力相同的技能。',
            jlsgsy_biantian: '变天',
            jlsgsy_biantian_info: '锁定技，其他角色的判定阶段开始前，需先进行一次额外的闪电判定',
            jlsgsy_tianyou: '天佑',
            jlsgsy_tianyou_info: '锁定技，回合结束阶段，若没有角色受到过【闪电】伤害，你回复1点体力，否则你摸所有角色受到【闪电】伤害次数的牌.',
            jlsgsy_mingzheng: '明政',
            jlsgsy_mingzheng_info: '锁定技，其他角色摸牌阶段摸牌数+1，你的摸牌阶段摸牌数+2。当你受到一次伤害后，失去该技能，并获得技能〖嗜杀〗',
            jlsgsy_shisha: '嗜杀',
            jlsgsy_shisha_info: '锁定技，当你使用【杀】指定目标后，你令目标角色随机弃置一至三张牌。',
            jlsgsy_baonusunhao: '暴怒',
            jlsgsy_baonusunhao_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_huangyin: '荒淫',
            jlsgsy_huangyin_info: '当你弃置其他角色的牌后，你可以从这些牌里随机获得一张牌。',
            jlsgsy_zuijiu: '醉酒',
            jlsgsy_zuijiu_info: '出牌阶段，你可以随机弃置X张手牌(X为你于本阶段内再次发动此技能的次数)，然后随机视为使用【酒】或【杀】，以此法使用的牌不计入次数限制。',
            jlsgsy_guiming: '归命',
            jlsgsy_guiming_info: '限定技，当你进入濒死状态时，你可以将回复体力至X,然后令其他角色各随机弃置X张牌（X为存活角色数）。',
            jlsgsy_taiping4: '太平',
            jlsgsy_baonudiaochan: '暴怒',
            jlsgsy_baonudiaochan_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_meihuo: '魅惑',
            jlsgsy_meihuo_info: '出牌阶段限一次，你可以将至少一张手牌交给一名男性角色，然后选择至少一名除该角色外的角色，若如此做，此男性角色以这些角色为目标随机使用当前手牌里的【杀】和非延时锦囊牌。',
            jlsgsy_yaoyan: '妖颜',
            jlsgsy_yaoyan_info: '锁定技，当其他角色使用基本牌或非延时锦囊牌指定你为目标时，你令其也成为此牌的目标。',
            jlsgsy_miluan: '迷乱',
            jlsgsy_miluan_info: '当你受到伤害后，你可以获得所有其他角色的手牌，然后将一半数量（向下取整）的手牌随机分配给其他角色。',
            jlsgsy_baonuyuanshao: '暴怒',
            jlsgsy_baonuyuanshao_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_mojian: '魔箭',
            jlsgsy_mojian_info: '锁定技，准备阶段，你视为使用【万箭齐发】，若有角色打出【闪】响应此牌，结束阶段，你视为使用【万箭齐发]】。',
            jlsgsy_zhuzai: '主宰',
            jlsgsy_zhuzai_info: '锁定技，你受到锦囊牌造成的伤害-1,你使用锦囊牌造成的伤害+1。',
            jlsgsy_duoji: '夺冀',
            jlsgsy_duoji_info: '变身技，锁定技，当你杀死其他角色时，你获得其所有手牌和技能。',
            jlsgsy_baonusunluban: '暴怒',
            jlsgsy_baonusunluban_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_baonucaocao: '暴怒',
            jlsgsy_baonucaocao_info: '锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。',
            jlsgsy_quanqing: '权倾',
            jlsgsy_quanqing_info: '出牌阶段对每名角色限一次，你可以展示一张本阶段内未以此法展示过的手牌并选择一名其他角色，除非其弃置一张点数大于此牌的牌，否则你令其视为使用目标由你选择的任意基本牌或非延时锦囊牌，然后你回复1点体力。',
            jlsgsy_raomeng: '扰梦',
            jlsgsy_raomeng_info: '锁定技，其他角色的判定阶段开始时，若其判定区里没有牌，你令其进行【乐不思蜀】判定。',
            jlsgsy_yongjie: '永劫',
            jlsgsy_yongjie_info: '回合结束阶段，你可以选择至少一名对你造成过伤害的其他角色，除非其弃置X张牌(X为其对你造成过伤害的次数)，否则你令其减1点体力上限。',
            jlsgsy_weiwu: '魏武',
            jlsgsy_weiwu_info: '当你受到伤害后，你可以摸两张牌，然后若造成此伤害的渠道为实体的【杀】或非延时锦囊牌，你可以获得此牌和弃牌堆里所有的同名牌。',
            jlsgsy_duzun: '独尊',
            jlsgsy_duzun_info: '锁定技，每名角色限两次，其他角色的回合开始时，其须选择其大于0的一项-1并令你的相同项+1:使用【杀】的次数上限;摸牌阶段摸牌基数;体力上限。',
            jlsgsy_longbian: '龙变',
            jlsgsy_longbian_info: '回合开始时，你可以令你大于0的两项互换，然后令另一项+1:使用【杀】的次数上限;摸牌阶段摸牌基数;体力上限。',
            jlsgsy_baonuzoushi: "暴怒",
            jlsgsy_baonuzoushi_info: "锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。",
            jlsgsy_huoshi: "祸世",
            jlsgsy_huoshi_info: "锁定技，当其他角色使用基本牌或非延时锦囊牌指定目标后，你令随机一名不是此牌目标的角色也成为此牌的目标。",
            jlsgsy_yinzi: "淫恣",
            jlsgsy_yinzi_info: "变身技，锁定技，每回合每名角色限一次，当其他角色于回合外获得牌后，你回复1点体力；每回合每名角色限一次，当其他角色于回合外回复体力后，你摸两张牌。",
            jlsgsy_mowu: "魔舞",
            jlsgsy_mowu_info: "变身技，当其他角色对你/你对其他角色使用基本牌或非延时锦囊牌后，你可以令此牌的使用者和目标角色各摸一张牌，若如此做，此牌额外结算一次。",
            jlsgsy_baonumenghuo: "暴怒",
            jlsgsy_baonumenghuo_info: "锁定技，当你的体力值降至4或更低时，你进入暴怒状态并立即开始你的回合。",
            jlsgsy_qiushou: "酋首",
            jlsgsy_qiushou_info: "锁定技，当你使用非延时锦囊牌指定其他角色为目标后，或成为其他角色使用非延时锦囊牌的目标后，对方需打出一张【杀】，否则你对其造成1点伤害。",
            jlsgsy_moshou: "魔兽",
            jlsgsy_moshou_info: "变身技，锁定技，回合开始时，你随机获得一项未拥有的的效果并移除其余效果，然后摸X张牌（X为你获得当前效果的次数）：1.当你对其他角色造成伤害后，你令其随机弃置一张牌并翻面；2.令其他角色的非锁定技和装备技能失效直到其下个回合结束；3.你防止其他角色施加的除属性伤害外的负面效果。",


          },
          dynamicTranslate: {
            jlsgsy_bolue(player) {
              let extra = '';
              if (player?.storage?.jlsgsy_bolue) {
                let skills = [];
                for (let g in player.storage.jlsgsy_bolue) {
                  skills.push(get.cnNumber(player.storage.jlsgsy_bolue[g]) + '个' + (lib.translate[g] || '??'));
                }
                if (skills.length) {
                  extra = `<span class="bluetext">及额外${skills.join('、')}势力技能</span>`;
                }
              }
              return `锁定技，回合开始前，你随机获得一个魏/一个蜀/一个吴势力的技能${extra}，直到下个回合开始。`;
            },
          }
        };
        postProcessPack(jlsg_sy);
        return jlsg_sy;
      });
      var specialRelic = config.qsRelic;
      game.import('card', () => { // 七杀
        var jlsg_qs = {
          name: "jlsg_qs",
          connect: true,
          card: {
            jlsgqs_kongmingdeng: {
              chongzhu: true,
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              skills: ['jlsgqs_kongmingdeng'],
              // loseDelay: false,
              onLose: function () {
                player.recover();
              },
              filterLose: function (card, player) {
                return player.isDamaged();
              },
              ai: {
                basic: {
                  equipValue: 8
                }
              }
            },
            jlsgqs_muniu: {
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              chongzhu: true,
              skills: ['jlsgqs_muniu'],
              onLose: function () {
                "step 0"
                player.chooseToDiscard('h', '木牛流马：请弃置一张基本牌，否则失去1点体力', function (card) {
                  return get.type(card) == 'basic';
                }).set('ai', function (card) {
                  if (card.name == 'tao') return -10;
                  if (card.name == 'jiu' && player.hp == 1) return -10;
                  if (player.hp == 1) return 15 - ai.get.value(card);
                  return 8 - ai.get.value(card);
                });
                "step 1"
                if (!result.bool) {
                  player.loseHp();
                }
              },
              ai: {
                basic: {
                  equipValue: function (card, player) {
                    if (player.num('h', { type: 'basic' }) < 1) return 5;
                    return 3;
                  }
                }
              }
            },
            jlsgqs_yuxi: {
              fullskin: true,
              type: 'equip',
              chongzhu: true,
              subtype: 'equip5',
              skills: ['jlsgqs_yuxi'],
              ai: {
                basic: {
                  equipValue: 9
                }
              }
            },
            jlsgqs_taipingyaoshu: {
              fullskin: true,
              type: 'equip',
              chongzhu: true,
              subtype: 'equip5',
              enable: function (card, player) {
                if (player == game.me) return true;
                if (player != game.me) {
                  if (player.hp <= 1) return player.num('h', { color: 'red' }) > 1;
                }
              },
              onEquip: specialRelic ? function () {
                "step 0"
                var cards = player.getCards('e', { subtype: ['equip3', 'equip4'] });
                if (cards.length == 2) {
                  player.chooseCard('e', '将进攻坐骑或防御坐骑置入弃牌堆', card => cards.includes(card), true);
                }
                "step 1"
                // 模拟替换
                player.lose(result.cards, false, 'visible').set('type', 'equip').set('getlx', false);
                "step 2"
                player.chooseToDiscard('h', function (card) {
                  return get.color(card) == 'red';
                }).set('ai', function (card) {
                  if (card.name == 'tao') return -10;
                  if (card.name == 'jiu' && player.hp == 1) return -10;
                  if (player.hp == 1) return 15 - ai.get.value(card);
                  return 8 - ai.get.value(card);
                }).set('prompt2', '太平要术：弃置一张红色手牌，否则失去1点体力');
                "step 3"
                if (!result.bool) {
                  player.loseHp();
                }
              } : function () {
                "step 0"
                player.chooseToDiscard('h', '太平要术：弃置一张红色手牌，否则失去1点体力', function (card) {
                  return get.color(card) == 'red';
                }).set('ai', function (card) {
                  if (card.name == 'tao') return -10;
                  if (card.name == 'jiu' && player.hp == 1) return -10;
                  if (player.hp == 1) return 15 - ai.get.value(card);
                  return 8 - ai.get.value(card);
                });
                "step 1"
                if (!result.bool) {
                  player.loseHp();
                }
              },
              skills: ['jlsgqs_taipingyaoshu'],
              ai: {
                basic: {
                  equipValue: function (card, player) {
                    if (player.countCards('h', { color: 'red' }) < 1) return 1;
                    return 6;
                  }
                }
              }
            },
            jlsgqs_dunjiatianshu: {
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              chongzhu: true,
              skills: ['jlsgqs_dunjiatianshu'],
              ai: {
                equipValue: 7
              }
            },
            jlsgqs_qixingbaodao: {
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              chongzhu: true,
              skills: ['jlsgqs_qixingbaodao'],
              ai: {
                equipValue: 4
              }
            },
            jlsgqs_xiujian: {
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              skills: ['jlsgqs_xiujian'],
              chongzhu: true,
              loseDelay: false,
              onLose: function () {
                var next = player.draw('nodelay');
                event.next.remove(next);
                var evt = event.getParent();
                if (evt.getlx === false) evt = evt.getParent();
                evt.after.push(next);
              },
              ai: {
                order: 9.5,
                basic: {
                  equipValue: 6
                }
              }
            },
            jlsgqs_jinnangdai: {
              fullskin: true,
              type: 'equip',
              subtype: 'equip5',
              skills: ['jlsgqs_jinnangdai'],
              chongzhu: true,
              loseDelay: false,
              onLose: function () {
                player.logSkill('jlsgqs_jinnangdai');
                player.draw();
              },
              ai: {
                equipValue: 4
              }
            },
            jlsgqs_qingmeizhujiu: {
              audio: true,
              fullskin: true,
              type: 'trick',
              enable: true,
              filterTarget: function (card, player, target) {
                return target.countCards('h') != 0 && player != target;
              },
              content: function () {
                "step 0"
                if (!target.countCards('h')) {
                  event.finish();
                  return;
                }
                target.chooseCard(true).ai = function (card) {
                  var evt = _status.event.getParent();
                  if (get.recoverEffect(evt.target, evt.player, evt.target) >
                    get.recoverEffect(evt.player, evt.player, evt.target)
                  )
                    return get.number(card);
                  else return -get.number(card);
                };
                "step 1"
                event.criteria = get.number(result.cards[0]);
                event.dialog = ui.create.dialog(get.translation(target) + '展示的手牌', result.cards);
                event.videoId = lib.status.videoId++;

                game.broadcast('createDialog', event.videoId, get.translation(target) + '展示的手牌', result.cards);
                game.addVideo('cardDialog', null, [get.translation(target) + '展示的手牌', get.cardsInfo(result.cards), event.videoId]);
                event.card2 = result.cards[0];
                game.log(target, '展示了', event.card2);
                var rand = Math.random() < 0.5;
                player.chooseToDiscard().ai = function (card) {
                  var evt = _status.event.getParent(), value = -get.value(card);
                  value += (evt.criteria >= get.number(card)) ? get.recoverEffect(evt.target, evt.player, evt.player)
                    : get.recoverEffect(evt.player, evt.player, evt.player);
                  return value;
                };
                game.delayx(2);
                "step 2"
                if (result.bool) {
                  // player.showCards(result.cards[0]);
                  // player.discard(result.cards);
                  var number = get.number(result.cards[0]);
                  if (number <= event.criteria) {
                    target.recover();
                  } else {
                    player.recover();
                  }
                }
                event.dialog.close();
                game.addVideo('cardDialog', null, event.videoId);
                game.broadcast('closeDialog', event.videoId);
              },
              ai: {
                basic: {
                  order: 4,
                  useful: [2, 1],
                  value: 1,
                },
                wuxie: function (target, card, player, current, state) {
                  if (ai.get.attitude(current, player) >= 0 && state > 0) return false;
                },
                result: {
                  target: function (player, target) {
                    if (target.hp == target.maxHp) return 0;
                    if (player.hp == player.maxHp) return 0;
                    if (target.hp == 1) return 2;
                    var hs = player.num('h');
                    var bool = false;
                    for (var i = 0; i < hs.length; i++) {
                      if (hs[i].number >= 9 && ai.get.value(hs[i]) < 7) {
                        bool = true;
                        break;
                      }
                    }
                    if (!bool) return ai.get.recoverEffect(target);
                    return 0;
                  },
                },
                tag: {
                  recover: 1,
                },
              },
            },
            jlsgqs_shuiyanqijun: {
              audio: true,
              fullskin: true,
              type: 'delay',
              range: { attack: 1 },
              filterTarget: function (card, player, target) {
                return (lib.filter.judge(card, player, target) && player != target);
              },
              judge: function (card) {
                if (get.suit(card) == 'diamond') return 0;
                return -3;
              },
              judge2: function (result) {
                if (result.bool == false) return true;
                return false;
              },
              effect: function () {
                if (result.bool == false) {
                  player.addTempSkill('jlsgqs_shuiyanqijun_skill');
                }
              },
              ai: {
                basic: {
                  order: 1,
                  useful: 1,
                  value: 7.5,
                },
                result: {
                  target: function (player, target) {
                    var eff = target.countCards('h') + 1;
                    if (target.hasJudge('bingliang') || target.hasJudge('caomu')) {
                      eff = Math.max(0, eff - 1.5);
                    }
                    if (target.hasJudge('lebu')) {
                      eff /= 4;
                    }
                    return -eff;
                  }
                },
                tag: {
                  discard: 1,
                  loseCard: 1,
                  position: 'h',
                },
              },
            },
            jlsgqs_yuqingguzong: {
              audio: true,
              fullskin: true,
              type: 'trick',
              enable: true,
              range: { attack: 1 },
              selectTarget: 1,
              filterTarget: function (card, player, target) {
                return target != player;
              },
              modTarget: true,
              content: function () {
                "step 0"
                target.draw();
                "step 1"
                if (target.num('h') < 2) {
                  target.damage('fire');
                  event.finish();
                } else {
                  target.chooseControl('获得你两张牌', '对你造成伤害',)
                    .set("prompt", '请选择一项')
                    .set('ai', function () {
                      if (get.attitude(target, player) > 5) return '获得你两张牌';
                      if (get.damageEffect(target, player, target, 'fire') > 0) return '对你造成伤害';
                      if (target.countCards('h', 'tao')) return '对你造成伤害';
                      if (target.countCards('h', 'jiu') && target.hp == 1) return '对你造成伤害';
                      if (target.hp == 1) return '获得你两张牌';
                      // if (target.num('h') > 3) return '获得你两张牌';
                      // if (target.hasSkillTag('nofire')) return '对你造成伤害';
                      // if (target.hasSkillTag('nodamage')) return '对你造成伤害';
                      // if (target.hasSkillTag('notrick')) return '对你造成伤害';
                      return '对你造成伤害';
                    }).set('target', target);
                }
                "step 2"
                if (result.control == '获得你两张牌') {
                  player.gainPlayerCard(target, 'h', 2, true);
                  event.finish();
                } else if (result.control == '对你造成伤害') {
                  target.damage('fire');
                }
              },
              ai: {
                wuxie: function (target, card, player, viewer) {
                  if (ai.get.attitude(viewer, target) > 0) {
                    if (target.hasSkillTag('nofire')) return 0;
                    if (target.hasSkillTag('nodamage')) return 0;
                    if (target.hasSkillTag('notrick')) return 0;
                  }
                },
                basic: {
                  order: 3,
                  value: 5.5,
                  useful: 1,
                },
                result: {
                  target: function (player, target) {
                    if (target.hasSkillTag('nofire')) return 1;
                    if (player == target) return -2;
                    var nh = target.num('h');
                    if (nh > 2) return -0.5;
                    if (nh == 1) return -1;
                    if (nh == 1 && target.hp == 1) return -2;
                    return -0.8;
                  },
                },
                tag: {
                  damage: 1,
                  fireDamage: 1,
                  natureDamage: 1,
                },
              },
            },
            jlsgqs_caochuanjiejian: {
              audio: true,
              fullskin: true,
              type: 'trick',
              enable: true,
              selectTarget: -1,
              filterTarget: function (card, player, target) {
                return target != player;
              },
              modTarget: true,
              content: function () {
                "step 0"
                target.chooseToUse({ name: 'sha' }, player, -1, '草船借箭：对' + get.translation(player) + '使用一张杀，或令其获得你的一张牌').set('targetRequired', true);
                "step 1"
                if (result.bool == false && target.num('he') > 0) {
                  player.gainPlayerCard(target, 'he', true);
                  event.finish();
                } else {
                  event.finish();
                }
              },
              ai: {
                wuxie: function (target, card, player, viewer) {
                  if (target.hasSha() && get.attitude(target, player) < -2 && Math.random() < 0.5) {
                    return;
                  }
                  if (get.attitude(viewer, target) > 0 && get.effect(target, { name: 'shunshou' }, player, viewer) > 0) {
                    return 0;
                  }
                },
                basic: {
                  order: 6,
                  useful: 3
                },
                result: {
                  target: function (player, target) {
                    var num = 0;
                    for (var i = 0; i < game.players.length; i++) {
                      if (game.players[i].ai.shown == 0) num++;
                    }
                    if (num > 1) return 0;
                    var nh = target.num('h');
                    if (nh > 2) return -0.5;
                    if (nh == 1) return -2;
                    return -0.8;
                  },
                  player: function (player, target) {
                    var num = 0;
                    if (ai.get.attitude(target, player) < -1) num--;
                    if (ai.get.attitude(target, player) > 1) num++;
                    if (target.num('h') == 0) return 0;
                    if (target.num('h') == 1) return -0.5;
                    if (player.hp <= 1) return -2;
                    if (target.num('h', 'sha') == 0 && Math.random() < 0.5) return 1;
                    return num - 1;
                  },
                },
                tag: {
                  multitarget: 1,
                  multineg: 1,
                },
              },
            },
            jlsgqs_wangmeizhike: {
              audio: true,
              fullskin: true,
              type: 'trick',
              enable: true,
              selectTarget: -1,
              filterTarget: true,
              ignoreTarget: function (card, player, target) {
                return target.isHealthy() && target.hp == 1;
              },
              modTarget: true,
              content: function () {
                if (target.hp > 1) target.draw(2, 'nodelay');
                else {
                  target.recover();
                }
              },
              ai: {
                wuxie: function (target, card, player, viewer) {
                  if (ai.get.attitude(viewer, target) < 0 && target.hp == 1) {
                    if (Math.random() < 0.7) return 1;
                    return 0;
                  }
                },
                basic: {
                  order: 6.5,
                  useful: 4,
                  value: 10
                },
                result: {
                  target: function (player, target) {
                    if (target.hp == 1) return 2;
                    if (get.mode() == 'identity') {
                      if (target.isZhu && target.hp <= 1) return 10;
                    }
                    if (target.num('h') < 1) return 1.5;
                    return 1;
                  },
                },
                tag: {
                  draw: 2,
                  recover: 0.5,
                  multitarget: 1,
                },
              },
            },
            jlsgqs_mei: {
              audio: true,
              fullskin: true,
              type: 'basic',
              enable: true,
              savable: function (event, player) {
                return _status.event.dying != player;
              },
              selectTarget: function () {
                if (_status.event.type == 'dying') return -1;
                return 1;
              },
              filterTarget: true,
              modTarget: true,
              content: function () {
                "step 0"
                if (target.hp > 1) target.draw(2);
                else {
                  target.recover();
                }
                "step 1"
                if (target.hp > 0 && event.getParent(2).type == 'dying') target.draw();
              },
              ai: {
                basic: {
                  order: function (card, player) {
                    return get.order({ name: 'tao' }) - 0.5;
                    // if (player.hasSkillTag('pretao')) return 5;
                    // return 2;
                  },
                  useful: [8, 6.5],
                  value: [8, 6.5],
                },
                result: {
                  target: function (player, target) {
                    // if(player==target&&player.hp<=0) return 2;
                    if (target.hp == target.maxHp && target.hp == 1) {
                      return 0;
                    }
                    var nh = target.countCards('h');
                    var keep = false;
                    if (nh <= target.hp) {
                      keep = true;
                    } else if (nh == target.hp + 1 && target.hp >= 2 && target.num('h', 'tao') <= 1) {
                      keep = true;
                    }
                    var mode = get.mode();
                    if (target.hp >= 2 && keep && target.hasFriend()) {
                      if (target.hp > 2) return 0;
                      if (target.hp == 2) {
                        for (var i = 0; i < game.players.length; i++) {
                          if (target != game.players[i] && ai.get.attitude(target, game.players[i]) >= 3) {
                            if (game.players[i].hp <= 1) return 0;
                            if (mode == 'identity' && game.players[i].isZhu && game.players[i].hp <= 2) return 0;
                          }
                        }
                      }
                    }
                    if (target.hp < 0 && target != player && target.identity != 'zhu') return 0;
                    var att = ai.get.attitude(player, target);
                    if (att < 3 && att >= 0 && player != target) return 0;
                    var tri = _status.event.getTrigger();
                    if (mode == 'identity' && player.identity == 'fan' && target.identity == 'fan') {
                      if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'fan' && tri.source != target) {
                        var num = 0;
                        for (let aplayer of game.players) {
                          if (aplayer.identity == 'fan') {
                            num += aplayer.num('h', 'tao');
                            if (num > 2) return 2;
                          }
                        }
                        if (num > 1 && player == target) return 2;
                        return 0;
                      }
                    }
                    if (mode == 'identity' && player.identity == 'zhu' && target.identity == 'nei') {
                      if (tri && tri.name == 'dying' && tri.source && tri.source.identity == 'zhong') {
                        return 0;
                      }
                    }
                    if (mode == 'stone' && target.isMin() &&
                      player != target && tri && tri.name == 'dying' && player.side == target.side &&
                      tri.source != target.getEnemy()) {
                      return 0;
                    }
                    return 2;
                  },
                },
                tag: {
                  recover: 1,
                  save: 1,
                },
              },
            },
          },
          skill: {
            jlsgqs_relic: {
              trigger: { player: 'equipEnd' },
              forced: true,
              filter: function (event, player) {
                if (!event.card) return false;
                if (get.position(event.card) != 'e') return false;
                return ['equip3', 'equip4'].includes(get.subtype(event.card, player));
              },
              content: function () {
                'step 0'
                var type = get.subtype(trigger.card, player)[5];
                var card = null, cards = [];
                if (type == '3') {
                  card = player.getCards('e', { subtype: "equip4" });
                } else {
                  card = player.getCards('e', { subtype: "equip3" });
                }
                if (!card) {
                  event.finish(); return;
                }
                cards = cards.concat(card);
                card = player.getCards('e', { subtype: "equip5" });
                if (!card) {
                  event.finish(); return;
                }
                cards = cards.concat(card);
                var prompt = "将" + cards.map(card => get.translation(card)).join("或") + "置入弃牌堆";
                player.chooseCard('e', prompt, card => cards.includes(card), true);
                'step 1'
                player.lose(result.cards, false, 'visible').set('type', 'equip').set('getlx', false);
              },
            },
            jlsgqs_kongmingdeng: {
              equipSkill: true,
              popname: true,
              enable: ['chooseToUse', 'chooseToRespond'],
              filterCard: function (card) {
                return _status.event.player.getCards('e', 'jlsgqs_kongmingdeng').includes(card);
              },
              check: () => true,
              selectCard: -1,
              position: 'e',
              // filter: function (event, player) {
              //   var card = player.get('e', '5');
              //   if (card) {
              //     var name = card.name;
              //     if (name && name.indexOf('jlsgqs_kongmingdeng') == -1) return false;
              //     return _status.event.type == 'dying';
              //   }
              // },
              viewAsFilter: function (player) {
                return player.countCards('e', 'jlsgqs_kongmingdeng') != 0 && _status.event.type == 'dying';
                // var card = player.get('e', '5');
                // if (card) {
                //   var name = card.name;
                //   return name == 'jlsgqs_kongmingdeng';
                // }
              },
              viewAs: { name: 'tao' },
              prompt: '将孔明灯当【桃】使用',
              ai: {
                skillTagFilter: function (player) {
                  var card = player.get('e', '5');
                  if (card) {
                    var name = card.name;
                    return name && name.indexOf('jlsgqs_kongmingdeng') != -1;
                  }
                },
                threaten: 1.5,
                save: true,
              },
            },
            jlsgqs_muniu: {
              equipSkill: true,
              enable: 'phaseUse',
              usable: 1,
              prompt: '请选择一名角色交给其一张牌然后你摸一张牌',
              filterTarget: function (card, player, target) {
                return player != target;
              },
              filter: function (event, player) {
                return player.countCards('h') != 0;
              },
              filterCard: true,
              discard: false,
              lose: false,
              delay: false,
              check: function (card) {
                var player = get.owner(card);
                return 6 - ai.get.value(card);
                if (!ui.selected.cards.length && card.name == 'du'
                  && game.hasPlayer(p => get.attitude(player, p) < 0 && !p.hasSkillTag('nodu'))) return 20;
                return 8 - get.value(card);
              },
              content: function () {
                target.gain(cards, player, 'giveAuto');
                // player.$give(1, target);
                player.draw();
              },
              ai: {
                expose: 0.1,
                order: 8,
                result: {
                  target: function (player, target) {
                    if (target.hasSkillTag('nogain')) return 0;
                    if (ui.selected.cards.length && ui.selected.cards[0].name == 'du') {
                      if (target.hasSkillTag('nodu')) return 0;
                      return -10;
                    }
                    if (target.hasJudge('lebu')) return 0;
                    var nh = target.countCards('h');
                    return Math.max(1, 5 - nh);
                  }
                },
              }
            },
            jlsgqs_yuxi: {
              equipSkill: true,
              trigger: { player: 'phaseBegin' },
              forced: true,
              content: function () {
                player.draw();
              },
              mod: {
                maxHandcard: function (player, current) {
                  return current + 2;
                }
              }
            },
            _jlsgqs_yuxi2: {
              equipSkill: true,
              trigger: { player: 'shaHit' },
              forced: true,
              filter: function (event, player) {
                if (player != event.player) return false;
                var card = event.target.get('e', '5');
                if (card) {
                  var name = card.name;
                  if (name && name.indexOf('jlsgqs_yuxi') != -1) return true;
                }
                return false;
              },
              // prompt: function (event, player) {
              //   var str = '';
              //   str += '是否获得' + get.translation(event.target) + '装备区中的【玉玺】？';
              //   return str;
              // },
              // check: function (event, player) {
              //   return 1;
              // },
              content: function () {
                var card = trigger.target.get('e', '5');
                if (card) {
                  var name = card.name;
                  if (name && name.indexOf('jlsgqs_yuxi') != -1 && card) {
                    trigger.player.gain(card, trigger.target);
                    trigger.target.$give(card, trigger.player);
                  }
                }
              }
            },
            jlsgqs_xiujian: {
              equipSkill: true,
              trigger: { player: 'phaseBegin' },
              direct: true,
              filter: function (event, player) {
                var card = player.get('e', '5');
                if (card) {
                  var name = card.name;
                  if (name && name.indexOf('jlsgqs_xiujian') != -1) return true;
                }
                return false;
              },
              content: function () {
                "step 0"
                player.chooseTarget(function (card, player, target) {
                  return player != target;
                }, '是否发动【袖箭】？').ai = function (target) {
                  return ai.get.damageEffect(target, player, player);
                };
                "step 1"
                if (result.bool && result.targets) {
                  player.line(result.targets, 'green');
                  player.logSkill('jlsgqs_xiujian', result.targets);
                  var card = player.get('e', '5');
                  if (card) {
                    var name = card.name;
                    if (name && name.indexOf('jlsgqs_xiujian') != -1 && card) {
                      player.discard(card);
                      result.targets[0].damage();
                    }
                  }
                }
              }
            },
            jlsgqs_qixingbaodao: {
              equipSkill: true,
              trigger: { player: 'shaMiss' },
              filter: function (event, player) {
                return event.target && event.target.countGainableCards(player, 'e');
              },
              // prompt: function (event, player) {
              //   return `###是否发动【七星宝刀】?###获得${get.translation(event.target)}装备区中的一张牌并将【七星宝刀】交给他`;
              // },
              check: function (event, player) {
                return 1;
              },
              content: function () {
                'step 0'
                var card = player.getEquip('jlsgqs_qixingbaodao');
                if (card) {
                  player.give(card, trigger.target);
                }
                if (trigger.target.countGainableCards(player, 'e') == 0) {
                  event.finish();
                }
                'step 1'
                player.gainPlayerCard('e', trigger.target, true);
              },
            },
            jlsgqs_dunjiatianshu: {
              equipSkill: true,
              mod: {
                globalTo: function (from, to, distance) {
                  var e1 = to.get('e', '3');
                  var e2 = to.get('e', '4');
                  if (!e1 && !e2) return distance + 1;
                },
                globalFrom: function (from, to, distance) {
                  var e1 = from.get('e', '3');
                  var e2 = from.get('e', '4');
                  if (!e1 && !e2) return distance - 1;
                },
                maxHandcard: function (player, current) {
                  var e1 = player.get('e', '3');
                  var e2 = player.get('e', '4');
                  if (e1 || e2) return current + 1;
                },
              },
            },
            jlsgqs_taipingyaoshu: {
              equipSkill: true,
              enable: 'phaseUse',
              usable: 1,
              prompt: '请选择一名角色令其摸一张牌',
              filterTarget: true,
              content: function () {
                target.draw();
              },
              ai: {
                expose: 0.1,
                order: 9,
                result: {
                  target: function (player, target) {
                    var att = ai.get.attitude(player, target);
                    if (target.num('h') >= 4) return 0;
                    if (target.num('h') == 0 && att > 0) return 2;
                    var num = target.num('h');
                    if (att > 0) return att - num;
                  },
                },
              }
            },
            jlsgqs_shuiyanqijun_skill: {
              audio: 'ext:极略:1',
              trigger: { player: 'phaseUseBegin' },
              hidden: true,
              forced: true,
              charlotte: true,
              cardSkill: true,
              content: function () {
                var num = Math.ceil(player.num('h') / 2);
                player.chooseToDiscard(num, 'h', true);
              }
            },
            jlsgqs_jinnangdai: {
              equipSkill: true,
              mod: {
                maxHandcard: function (player, current) {
                  return current + 1;
                },
              },
            }
          },
          translate: {
            jlsg_qs: '七杀包',
            jlsgqs_kongmingdeng: '孔明灯',
            jlsgqs_muniu: '木牛流马',
            jlsgqs_taipingyaoshu: '太平要术',
            jlsgqs_dunjiatianshu: '遁甲天书',
            jlsgqs_qixingbaodao: '七星宝刀',
            jlsgqs_xiujian: '袖箭',
            _jlsgqs_yuxi2: '玉玺',
            jlsgqs_yuxi: '玉玺',
            jlsgqs_jinnangdai: '锦囊袋',
            jlsgqs_jinnangdai_info: '锁定技，你的手牌上限+1；你失去装备区里的【锦囊袋】时，摸一张牌。',
            jlsgqs_kongmingdeng_info: '任意角色处于濒死状态时，你可以将你装备区的【孔明灯】当【桃】使用；锁定技，当你从装备区中失去【孔明灯】时，回复1点体力',
            jlsgqs_muniu_info: '出牌阶段限一次，你可以将一张手牌交给一名其他角色，然后摸一张牌；锁定技，当你从装备区中失去【木牛流马】时，须弃置一张基本牌或者失去1点体力',
            jlsgqs_taipingyaoshu_info: '出牌阶段限一次，你可以令一名角色摸一张牌；锁定技，当【太平要术】置入你的装备区时，你须弃置一张红色手牌或者失去1点体力',
            jlsgqs_dunjiatianshu_info: '锁定技，若你的装备区没有坐骑牌，其他角色计算与你的距离时，始终+1，你计算与其他角色的距离时，始终-1；锁定技，若你的装备区有坐骑牌，你的手牌上限+1',
            jlsgqs_qixingbaodao_info: '当你使用的【杀】被目标角色的【闪】响应后，你可以将装备区的【七星宝刀】交给该名角色，然后获得其装备区的一张牌',
            jlsgqs_xiujian_info: '回合开始阶段开始时，你可以弃置你装备区中的【袖箭】，然后对一名其他角色造成一点伤害；锁定技，当你从装备区失去【袖箭】时，你摸一张牌',
            _jlsgqs_yuxi2_info: '一名角色使用【杀】对你造成伤害时，可获得你装备区中的【玉玺】',
            jlsgqs_yuxi_info: '锁定技，你的手牌上限+2，回合开始阶段开始时，你摸一张牌；一名角色使用【杀】对你造成伤害时，可获得你装备区中的【玉玺】',
            jlsgqs_qingmeizhujiu: '青梅煮酒',
            jlsgqs_qingmeizhujiu_info: '出牌阶段对一名有手牌的其他角色使用，该角色展示一张手牌，然后你可以弃置一张大于此牌的手牌并回复一点体力，或者弃置一张不大于此牌的手牌令其回复一点体力',
            jlsgqs_shuiyanqijun: '水淹七军',
            jlsgqs_shuiyanqijun_info: '出牌阶段，对你攻击范围内的一名其他角色使用。若判定结果不为方片，则该角色出牌阶段开始时须弃置一半数量的手牌（向上取整）',
            jlsgqs_yuqingguzong: '欲擒故纵',
            jlsgqs_yuqingguzong_info: '出牌阶段，对你攻击范围内的一名其他角色使用。你令该角色摸一张牌，然后其选择一项：令你获得其两张手牌，或受到1点火焰伤害',
            jlsgqs_caochuanjiejian: '草船借箭',
            jlsgqs_caochuanjiejian_info: '出牌阶段，对除你以外的所有角色使用。每名目标角色须依次选择一项：对你使用一张【杀】；或令你获得其一张牌。',
            jlsgqs_wangmeizhike: '望梅止渴',
            jlsgqs_wangmeizhike_info: '出牌阶段，对所有角色使用。每名目标角色：若体力值为1，则回复1点体力；若体力值大于1，则摸两张牌',
            jlsgqs_mei: '梅',
            jlsgqs_mei_info: '出牌阶段，对一名角色使用，若其体力值大于1，则摸两张牌；否则其回复1点体力。一名其他角色处于濒死状态时，对其使用，其回复1点体力，若因此脱离濒死状态，该角色摸一张牌。',
          },
          list: [
            ["heart", 5, "sha", "fire"],
            ["heart", 12, "sha", "fire"],
            ["heart", 6, "sha", "fire"],
            ["diamond", 9, "sha", "fire"],
            ["heart", 6, "sha"],
            ["spade", 7, "sha"],
            ["heart", 8, "sha"],
            ["club", 5, "sha"],
            ["diamond", 6, "sha"],
            ["diamond", 7, "sha"],
            ["heart", 8, "sha"],
            ["club", 3, "jiu"],
            ["heart", 12, "shan"],
            ["diamond", 6, "shan"],
            ["diamond", 5, "shan"],
            ["heart", 2, "shan"],
            ["heart", 4, "shan"],
            ["diamond", 8, "shan"],
            ["heart", 8, "jlsgqs_kongmingdeng"],
            ["heart", 2, "jlsgqs_muniu"],
            ["diamond", 9, "jlsgqs_taipingyaoshu"],
            ["club", 5, "jlsgqs_dunjiatianshu"],
            ["spade", 8, "jlsgqs_qixingbaodao"],
            ["diamond", 3, "jlsgqs_xiujian"],
            ["spade", 12, "jlsgqs_yuxi"],
            ["heart", 4, "jlsgqs_mei"],
            ["heart", 6, "jlsgqs_mei"],
            ["diamond", 5, "jlsgqs_mei"],
            ["diamond", 12, "jlsgqs_mei"],
            ["heart", 9, "jlsgqs_mei"],
            ["heart", 11, "jlsgqs_mei"],
            ["heart", 5, "jlsgqs_qingmeizhujiu"],
            ["diamond", 3, "jlsgqs_qingmeizhujiu"],
            ["diamond", 8, "jlsgqs_qingmeizhujiu"],
            ["club", 8, "jlsgqs_shuiyanqijun"],
            ["diamond", 9, "jlsgqs_shuiyanqijun"],
            ["diamond", 7, "jlsgqs_wangmeizhike"],
            ["spade", 10, "jlsgqs_caochuanjiejian"],
            ["heart", 6, "jlsgqs_caochuanjiejian"],
            ["diamond", 10, "jlsgqs_yuqingguzong"],
            ["heart", 12, "jlsgqs_yuqingguzong"],
            ["diamond", 8, "jlsgqs_yuqingguzong"],
            ["heart", 5, "jlsgqs_yuqingguzong"],
            ["heart", 13, "wuxie"],
            ["club", 12, "wuxie"],
            ["diamond", 3, "jlsgqs_jinnangdai"],
          ]
        };
        var extname = _status.extension;
        for (var cardName in jlsg_qs.card) {
          var card = jlsg_qs.card[cardName];
          if (card.fullskin) {
            if (_status.evaluatingExtension) {
              card.image = `db:extension-${extname}:${cardName}.png`;
            }
            else {
              card.image = `ext:${extname}/${cardName}.png`;
            }
          }
          if (card.audio === true) {
            card.audio = `ext:${extname}`;
          }
          if (card.chongzhu && config.qsRelic) { // 七杀特殊宝物规则
            if (!card.onEquip) {
              card.onEquip = function () { // remember to sync with onEquip of jlsgqs_taipingyaoshu!
                "step 0"
                var cards = player.getCards('e', { subtype: ['equip3', 'equip4'] });
                if (cards.length == 2) {
                  player.chooseCard('e', '将进攻坐骑或防御坐骑置入弃牌堆', card => cards.includes(card), true);
                }
                "step 1"
                // 模拟替换
                player.lose(result.cards, false, 'visible').set('type', 'equip').set('getlx', false);
              };
            }
            if (!card.skills) {
              card.skills = [];
            }
            card.skills.push("jlsgqs_relic");
          }
        }
        return jlsg_qs;
      });
      // jlsg library
      lib.arenaReady.push(function () {
        lib.element.player.hasSkills = function (skills) {
          var skill = skills.split("|");
          for (var i = 0; i < skill.length; i++) {
            if (this.hasSkill(skill[i])) return true;
          }
          return false;
        }
      });
      var jlsg = {
        debug: {
          logCurrentRanks() {
            var logC = function (name) {
              console.log(`${name} ${get.translation(name)} ${get.rank(name)}`);
            };
            Array.from(document.getElementsByClassName('character')).filter(
              c => c.link
            ).forEach(
              c => logC(c.link)
            );
            if (!game.players || !game.players.forEach) return;
            game.players.forEach(
              p => {
                if (p.name1) logC(p.name1);
                if (p.name2) logC(p.name2);
              }
            )
          },
          debugProperty(obj, name, get = true, set = true) {
            if (name in obj) {
              console.log(name, 'found in', obj);
              obj['__' + name + '__'] = obj[name];
              delete obj[name];
            } else {
              console.log(name, 'not found in', obj);
            }
            Object.defineProperty(obj, name, {
              get() {
                debugger;
                return this['__' + name + '__'];
              },
              set(value) {
                debugger;
                return (this['__' + name + '__'] = value);
              },
            })
          },
        },
        relu(num) {
          return num >= 0 ? num : 0;
        },
        get characterList() {
          let result;
          if (_status.characterlist) {
            result = _status.characterlist;
          }
          else if (_status.connectMode) {
            result = get.charactersOL(() => true);
          }
          else {
            result = get.gainableCharacters(() => true);
          }
          delete this.characterList;
          this.characterList = result;
          return result;
        },
        /**
         * 
         * @param {Element} ele
         */
        makeDraggable(ele) {
          game.broadcastAll(function (ele) {
            let x0, y0, x1, y1, delta, top0, left0;
            ele.addEventListener('pointerdown', e => {
              x0 = x1 = e.screenX;
              y0 = y1 = e.screenY;
              delta = 0;
              ({ top: top0, left: left0 } = getComputedStyle(ele));
              let ctx = _status.jlsg_draggable.get(ele) || {
                ids: [],
              };
              ctx.ids = [e.pointerId];
              ele.style.transition = 'none';
              ele.style.touchAction = 'none';
              _status.jlsg_draggable.set(ele, ctx);
            })
            ele.addEventListener('pointermove', e => {
              if (e.pressure == 0) {
                return;
              }
              let ctx = _status.jlsg_draggable.get(ele);
              if (!ctx || !ctx.ids.includes(e.pointerId)) {
                return;
              }
              delta += Math.abs(e.screenX - x1);
              delta += Math.abs(e.screenY - y1);
              if (delta < 10) {
                return;
              }
              ele.style.left = `calc(${left0} + ${e.screenX - x0}px / ${game.documentZoom})`;
              ele.style.top = `calc(${top0} + ${e.screenY - y0}px / ${game.documentZoom})`;
            });
            if (!_status.jlsg_draggable) {
              _status.jlsg_draggable = new Map();
              let listener = e => {
                for (let ele of e.composedPath()) {
                  let ctx = _status.jlsg_draggable.get(ele);
                  if (!ctx) {
                    continue;
                  }
                  ctx.ids.remove(e.pointerId);
                  if (!ctx.ids.length) {
                    ele.style.transition = '';
                    ele.style.touchAction = '';
                    _status.jlsg_draggable.delete(ele);
                  }
                }
              };
              addEventListener('pointerup', listener);
              addEventListener('pointercancel', listener);
            }
          }, ele);
        },
        /**
         * 
         * @param {Array<Number>} dist 
         * @returns {Number}
         */
        distributionGet(dist) {
          var res = Math.random();
          let sum = dist.reduce((a, b) => a + b);
          console.assert(sum > 0, `utils.distributionGet received param ${JSON.stringify(dist)}`);
          dist = dist.map(v => v / sum);
          for (let i = 0; ;) {
            if (res < dist[i]) return i;
            res -= dist[i];
            ++i;
          }
        },
        showRepo() {
          var mirrorURL = lib.extensionPack["极略"] && lib.extensionPack["极略"].mirrorURL;
          if (!mirrorURL) return;
          this.openLink(mirrorURL);
        },
        openLink(url) {
          if (window.cordova) {
            if (cordova.InAppBrowser) {
              return cordova.InAppBrowser.open(url, '_system');
            }
            return;
          }
          if (window.require) {
            return require('electron').shell.openExternal(url);
          }
          return window.open(url);
        },
        checkUpdate(refNode) {
          if (!('noModule' in HTMLScriptElement.prototype)) {
            alert("游戏运行时/系统webview过老无法自动更新");
            return;
          }
          import('./modules/idb-keyval.js')
          var version = lib.extensionPack['极略'].version;
          refNode.insertAdjacentHTML('afterend',
            `<div>当前版本${version}<br>正在获取最新版本号</div>`
          );
          var cNode = refNode.nextSibling;
          var responsePromise = fetch("https://api.github.com/repos/xiaoas/jilue/releases/latest", {
            "headers": {
              "accept": "application/vnd.github.v3+json",
              "accept-language": "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7",
              "cache-control": "no-cache",
              "pragma": "no-cache"
            },
            "method": "GET",
          });
          // TODO: only update to version with same major version
          let successHandler = (response) => {
            if (response.status >= 300) {
              cNode.innerHTML += ` 失败<br>${response.status} ${response.statusText}`;
              return Promise.reject(response);
            } else {
              cNode.innerHTML += ' 成功';
              return response;
            }
          }
          let errorHandler = (error) => {
            cNode.innerHTML += ` 失败<br>${error}`;
            console.log(error);
            return Promise.reject(error);
          };
          responsePromise.then(successHandler, errorHandler)
            .then(response => response.json())
            .then(data => {
              var latestVersion = data.tag_name;
              if (latestVersion.startsWith('v')) {
                latestVersion = latestVersion.slice(1)
              }
              if (latestVersion > version) {
                refNode.innerHTML = `更新至 ${latestVersion}<br>`;
                window.jlsg.updateData = data;
                var newFunc = `jlsg.updateGuard(this)`;
                refNode.setAttribute("onClick", newFunc);
              } else {
                refNode.innerHTML = `当前已经是最新版<br>`;
              }
            })
        },
        async updateGuard(refNode) {
          if (!this.update) {
            return;
          }
          if (!this.update.guard) {
            this.update.guard = true;
            await this.update(refNode);
            this.update.guard = false;
          }
        },
        async update(refNode) {
          // TODO
          var latestTag = window.jlsg.updateData.tag_name;
          var currentTag = 'v' + lib.extensionPack['极略'].version;
          var response = await fetch("https://api.github.com/repos/xiaoas/jilue/tags", {
            "headers": {
              "accept": "application/vnd.github.v3+json",
              "accept-language": "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7",
            },
            "method": "GET",
          });
          var tags = await response.json()
          tags = tags.map(t => t.name)
          if (!tags.includes(currentTag)) {
            if (tags.every(t => t > currentTag)) {
              refNode.insertAdjacentHTML('afterend',
                `<div>没有找到适用当前版本的更新讯息${currentTag}</div>`
              );
            }
            currentTag = tags.filter(t => t < currentTag).reduce((a, b) => a < b ? b : a);
          }
          // var compareURI = `https://api.github.com/repos/xiaoas/jilue/compare/v2.1.0208...v2.2.0631`
          var compareURI = `https://api.github.com/repos/xiaoas/jilue/compare/${currentTag}...${latestTag}`
          var cNode, data;
          try {
            refNode.insertAdjacentHTML('afterend',
              `<div>获取文件列表</div>`
            ); cNode = refNode.nextSibling;
            let response = await fetch(compareURI, {
              "headers": {
                "accept": "application/vnd.github.v3+json",
                "accept-language": "en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7",
              },
              "method": "GET",
            });
            data = await response.json();
            cNode.innerHTML += ' 成功';
          } catch (e) {
            console.log(e);
            cNode.innerHTML += ' 失败';
            return
          }
          var files = data.files;
          game.saveExtensionConfig('极略', 'pendingFiles', JSON.stringify(files))
          var idbKeyval;
          try {
            idbKeyval = await import('./modules/idb-keyval.js')
          }
          catch (e) {
            idbKeyval = await import('https://cdn.jsdelivr.net/npm/idb-keyval@5/+esm')
          }
          var required = files.filter(f => ['added', 'modified'].includes(f.status))
          var blobs = await idbKeyval.getMany(required.map(f => f.sha))
          // var downloads = required.map((f,i) => blobs[i] || fetch(f.raw_url))
          var myMap = new Map()
          var waitBuffer = []
          // for (let f of required) {
          //   if (f.raw_url.includes("raw.githubusercontent.com")) {
          //     f.raw_url.replace("raw.githubusercontent.com", "raw.fastgit.org")
          //   }
          // }
          const maxConcurrent = 5, maxRetry = 3;
          for (let [i, f] of required.entries()) {
            if (!blobs[i]) {
              if (myMap.size < maxConcurrent) {
                myMap.set(fetch(f.raw_url), f)
              } else {
                waitBuffer.push(f)
              }
            }
          }
          // required.forEach((f, i) => blobs[i] || myMap.set(fetch(f.raw_url), f))
          refNode.insertAdjacentHTML('afterend',
            `<div>正在下载<span>0</span>/${required.length}请耐心等待</div><br>`
          ); cNode = refNode.nextSibling;
          var [valNode] = cNode.getElementsByTagName('span')
          var finishedCnt = {
            _v: null,
            get v() {
              return this._v;
            },
            set v(_v) {
              this._v = _v;
              valNode.innerHTML = _v.toString();
            },
          };
          var downloadError = 0
          finishedCnt.v = required.length - myMap.size - waitBuffer.length
          while (myMap.size) {
            let [completed] = await Promise.any(Array.from(myMap.keys()).map(p => p.then(res => [p], res => [p])))
            let f = myMap.get(completed)
            myMap.delete(completed)
            try {
              let value = await completed;
              // value = await value.blob()
              // save as arrayBuffer
              value = await value.arrayBuffer()
              ++finishedCnt.v;
              idbKeyval.set(f.sha, value)
              console.log(`${f.filename} downloaded and stored.`)
            } catch (e) {
              // console.log(f, e)
              f.retry = f.retry || 0;
              ++f.retry;
              console.log(`${f.filename} download No.${f.retry} failed`)
              if (f.retry >= maxRetry) {
                ++downloadError;
              } else {
                let nextURL = f.raw_url
                nextURL = nextURL.replace('github.com', 'hub.fastgit.org')
                myMap.set(fetch(nextURL), f)
              }
            } finally {
              if (myMap.size < maxConcurrent && waitBuffer.length) {
                let f = waitBuffer.pop()
                myMap.set(fetch(f.raw_url), f)
              }
            }
          }
          if (downloadError != 0) {
            cNode.innerHTML += `失败${downloadError} 下次运气会更好`
            return;
          }
          // actually array Buffers
          blobs = await idbKeyval.getMany(required.map(f => f.sha))
          if (blobs.some(b => !b)) {
            cNode.innerHTML += ' 失败<br> Error blob not found';
            return;
          }
          let blobMap = new Map(required.map((f, i) => [f.sha, blobs[i]]))
          if (!game.download) {
            throw "Not implemented";
          }
          cNode.innerHTML += ' 成功<br>请酌情等待五秒后再重启不是不可以探测安装完了但是我太懒了';
          console.log('writing files');
          if (lib.node && lib.node.fs) {
            let prefix = __dirname + '/extension/极略/'
            for (let [i, f] of files.entries()) {
              switch (f.status) {
                case 'added':
                case 'modified':
                  let blob = blobMap.get(f.sha)
                  lib.node.fs.writeFile(prefix + f.filename, Buffer.from(blob), e => e && console.log(f, e))
                  break;
                case 'removed':
                  lib.node.fs.rm(prefix + f.filename, e => e && console.log(f, e))
                  break;
                case 'renamed':
                  lib.node.fs.rename(prefix + f.previous_filename, prefix + f.filename, e => e && console.log(f, e))
                  break;
                default:
                  console.log(f)
                  break;
              }
            }
          } else {
            window.resolveLocalFileSystemURL(lib.assetURL, function (entry) {
              entry.getDirectory('extension/极略/', {}, function (dirEntry) {
                for (let [i, f] of files.entries()) {
                  switch (f.status) {
                    case 'added':
                    case 'modified':
                      let blob = blobMap.get(f.sha)
                      dirEntry.getFile(f.filename, { create: true }, function (fileEntry) {
                        fileEntry.createWriter(function (fileWriter) {
                          fileWriter.write(blob);
                        });
                      });
                      break;
                    case 'removed':
                      dirEntry.getFile(f.filename, function (fileEntry) {
                        fileEntry.remove();
                      });
                      break;
                    case 'renamed':
                      dirEntry.getFile(f.previous_filename, function (fileEntry) {
                        fileEntry.moveTo(dirEntry, f.filename);
                      });
                      break;
                    default:
                      console.log(f)
                      break;
                  }
                }
              });
            });
          }
          idbKeyval.clear()
        },
        showRepoElement(refElement) {
          let potentialRepo = refElement.nextElementSibling;
          if (potentialRepo && potentialRepo.id == "repo-link") {
            potentialRepo.remove();
          } else {
            refElement.insertAdjacentHTML('afterend', `<a id="repo-link" onclick="lib.jlsg.showRepo()" style="cursor: pointer;text-decoration: underline;display:block">Visit Repository</a>`);
            // refElement.nextElementSibling.scrollIntoView({
            //   behavior: 'smooth',
            //   block: 'nearest',
            // });
          }
        },
        getLoseHpEffect(player) {
          var loseHpEffect = -3;
          if (player.hp == 1) loseHpEffect *= 2.5;
          if (player.hp == 2) loseHpEffect *= 1.8;
          if (player.hp == 4) loseHpEffect *= 0.9;
          if (player.hp == 5) loseHpEffect *= 0.8;
          if (player.hp > 5) loseHpEffect *= 0.6;
          if (player.hasSkillTag('maihp')) loseHpEffect += 3;
          return loseHpEffect;
        },
        ai: {
          skill: {
            lose_equip: 'xiaoji|xuanfeng',
            need_kongcheng: 'shangshix|shangshi|jlsg_ruya|jlsg_qicai|lianying|relianying|kongcheng|sijian|hengzheng',
            rejudge: 'guicai|jlsg_guicai|guidao|jilve|nos_zhenlie|huanshi|midao',
            save: 'jlsg_guagu|jlsg_fangxin|jlsg_renxin|jijiu|buyi|chunlao|longhun|jlsg_longhun',
            need_card: 'jlsg_youdi|jlsg_rende|jlsg_liuyun|jlsg_yansha|jlsg_huiqu|jlsg_zhaoxiang|kanpo|guicai|jlsg_guicai|guidao|beige|xiaoguo|liuli|tianxiang|jijiu|leiji|releiji|qingjian|zhuhai|qinxue|danqi',
            recover: 'jlsg_liuyun|jlsg_zhishi|rerende|rende|kuanggu|zaiqi|jieyin|qingnang|yinghun|hunzi|shenzhi|longhun|zishou|ganlu|xueji|shangshi|chengxiang|buqu|quji',
            use_lion: 'longhun|duanliang|qixi|guidao|relijian|lijian|xinjujian|jujian|zhiheng|mingce|yongsi|fenxun|gongqi|yinling|jilve|qingcheng',
            need_equip: 'shensu|mingce|jujian|jlsg_liuyun|beige|yuanhu|huyuan|gongqi|gongji|yanzheng|qingcheng|longhun|shuijian|yinbing',
            straight_damage: 'jlsg_chouxi|jlsg_zhishi|qiangxi|duwu|danshou',
            double_sha: 'paoxiao|fuhun|tianyi|xianzhen|zhaxiang|lihuo|jiangchi|shuangxiong|qiangwu|luanji',
            need_maxhp: 'jlsg_ruya|yingzi|zaiqi|yinghun|hunzi|juejing|ganlu|zishou|miji|chizhong|xueji|quji|xuehen|jushou|tannang|fangzhu|shangshi|miji',
            bad_skills: 'benghuai|jlsg_wumou|shiyong|jlsg_shiyong|yaowu|chanyuan|chouhai',
            break_sha: 'jlsg_zhaoxiang|jlsg_yansha',
            maixie_skill: 'guixin|yiji|fankui|jieming|xuehen|neoganglie|ganglie|vsganglie|enyuan|fangzhu|nosenyuan|langgu|quanji|zhiyu|renjie|tanlan|tongxin|huashen|duodao|chengxiang|benyu',
          }
        },
        sort: {
          hp: function (a, b) {
            var c1 = a.hp;
            var c2 = b.hp;
            if (c1 == c2) {
              return jlsg.sort.threat(a, b);
            }
            return c1 > c2;
          },
          handcard: function (a, b) {
            var c1 = a.num('h');
            var c2 = b.num('h');
            if (c1 == c2) {
              return jlsg.sort.defense(a, b);
            }
            return c1 < c2;
          },
          value: function (a, b) {
            return jlsg.getValue(a) < jlsg.getValue(b);
          },
          chaofeng: function (a, b) {
            return jlsg.getDefense(a) > jlsg.getDefense(b);
          },
          defense: function (a, b) {
            return jlsg.getDefenseSha(a) < jlsg.getDefenseSha(b);
          },
          threat: function (a, b) {
            var d1 = a.num('h');
            for (var i = 0; i < game.players.length; i++) {
              if (a.canUse('sha', game.players[i]) && a != game.players[i]) {
                d1 = d1 + 10 / (jlsg.getDefense(game.players[i]))
              }
            }
            var d2 = b.num('h');
            for (var i = 0; i < game.players.length; i++) {
              if (b.canUse('sha', game.players[i]) && b != game.players[i]) {
                d2 = d2 + 10 / (jlsg.getDefense(game.players[i]))
              }
            }
            return d1 > d2;
          }
        },
        isKongcheng: function (player) {
          return player.countCards('h') == 0;
        },
        needKongcheng: function (player, keep) {
          if (keep) {
            return jlsg.isKongcheng(player) && (player.hasSkill('kongcheng') || (player.hasSkill('zhiji') && !player.storage.zhiji));
          }
          if (!jlsg.hasLoseHandcardEffective(player) && !jlsg.isKongcheng(player)) return true;
          if (player.hasSkill('zhiji') && !player.storage.zhiji) return true;
          return player.hasSkills(jlsg.ai.skill.need_kongcheng);
        },
        hasBaguaEffect: function (player) {
          if (player.countCards('e', 'bagua')) return true;
          if (player.hasSkill('bazhen') && !player.get('e', '2')) return true;
          if (player.hasSkill('linglong') && !player.get('e', '2')) return true;
          return false;
        },
        hasBuquEffect: function (player) {
          if (player.hasSkill('buqu')) {
            if (player.storage.buqu == undefined) return true;
            if (player.storage.buqu && player.storage.buqu.length <= 4) return true;
            return false;
          }
          return false;
        },
        hasZhuqueEffect: function (player) {
          var cards = player.get('h');
          for (var i = 0; i < cards.length; i++) {
            if (cards[i].name == 'sha' && cards[i].nature == 'fire') return true;
            if (player.countCards('e', 'zhuque') && cards[i].name == 'sha' && !cards[i].nature) return true;
          }
          return false;
        },
        hasJiuEffect: function (player) {
          if (player.hasSkills('jiu|boss_zuijiu|luoyi2|reluoyi2|jie|nuzhan2|anjian|jlsg_huxiao|jlsg_jiwu_buff1|jlsg_wenjiu3')) return true;
          if (player.hasSkills('jlsg_ganglie_damage|jlsg_fenwei')) return true;
          if (player.hasSkill('jieyuan') && player.countCards('h') >= 2)
            if (player.hasSkill('chouhai') && jlsg.isKongcheng(player)) return true;
          if (player.hasSkill('qingxi')) {
            var num = 1;
            var info = get.info(player.get('e', '1'));
            if (info && info.distance && info.distance.attackFrom) {
              num -= info.distance.attackFrom;
            }
            return num > 1;
          }
          return false;
        },
        hasWushuangEffect: function (player) {
          if (player.hasSkills('wushuang|jlsg_shejing')) return true;
          return false;
        },
        hasZhugeEffect: function (player) {
          if (player.countCards('e', 'zhuge')) return true;
          if (player.hasSkills('paoxiao|tianyi2|zhanlong2|xianzhen2|jlsg_shayi')) return true;
          return false;
        },
        loseCardEffect: function (player) {
          if (jlsg.needKongcheng(player)) return 3;
          if (jlsg.getLeastHandcardNum(player) > 0) return 1;
          return -player.countCards('h');
        },
        gainCardEffect: function (player) {
          if (jlsg.needKongcheng(target, true)) return -1;
          if (jlsg.getOverflow(player)) return 0;
          return 3;
        },
        getLeastHandcardNum: function (player) {
          var least = 0;
          if (player.hasSkills('lianying|relianying') && least < 1) least = 1;
          if (player.hasSkill('jlsg_ruya') && least < player.maxHp) least = player.maxHp;
          if (player.hasSkill('shangshix') && least < 4) least = 4;
          var jwfy = jlsg.findPlayerBySkillName('shoucheng');
          if (least < 1 && jwfy && jlsg.isFriend(player, jwfy)) least = 1;
          if (player.hasSkill('shangshi') && least < Math.min(2, jlsg.getLostHp(player))) least = Math.min(2, jlsg.getLostHp(player));
          return least;
        },
        hasLoseHandcardEffective: function (player) {
          return player.countCards('h') > jlsg.getLeastHandcardNum(player);
        },
        isWeak: function (player) {
          if (jlsg.hasBuquEffect(player)) return false;
          if (player.hasSkill('longhun') && player.countCards('he') > 2) return false;
          if (player.hasSkill('jlsg_longhun') && player.countCards('he') > 2) return false;
          if (player.hasSkill('hunzi') && !player.storage.hunzi && player.hp > 1) return false;
          if ((player.hp <= 2 && player.countCards('h') <= 2) || player.hp <= 1) return true;
          return false;
        },
        getLostHp: function (player) {
          return player.maxHp - player.hp;
        },
        getBestHp: function (player) {
          var arr = {
            ganlu: 1, yinghun: 2, xueji: 1,
            baobian: Math.max(0, player.maxHp - 3),
          };
          if (player.hasSkill('longhun') && player.countCards('he') > 2) return 1;
          if (player.hasSkill('hunzi') && !player.storage.hunzi) return 2;
          for (var i in arr) {
            if (player.hasSkill(i)) {
              return Math.max((player.isZhu && 3 || 2), player.maxHp - arr[i])
            }
          }
          if (player.hasSkill('renjie') && player.hasSkill('sbaiyin')) return player.maxHp - 1;
          if (player.hasSkill('quanji') && player.hasSkill('zili')) return player.maxHp - 1;
          return player.maxHp;
        },
        getValue: function (player) {
          return player.hp * 2 + player.countCards('h');
        },
        isGoodHp: function (player) {
          if (player.hp > 1 || jlsg.getCardsNum('tao', player) >= 1 || jlsg.getCardsNum('jiu', player) >= 1) return true;
          if (jlsg.hasBuquEffect(player)) return true;
          if (player.hasSkill('niepan') && !player.storage.niepan) return true;
          if (player.hasSkill('reniepan') && !player.storage.reniepan) return true;
          if (player.hasSkill('jlsg_zhuizun') && !player.storage.jlsg_zhuizun) return true;
          if (player.hasSkill('fuli') && !player.storage.fuli) return true;
          return false;
        },
        isScure: function (player) {
          if (player.hp > jlsg.getBestHp(player)) return true;
          if (jlsg.countCanShaMe(player) <= 0) return true;
          if (jlsg.isGoodHp(player)) return true;
          return false;
        },
        needBear: function (player) {
          return (player.hasSkill('renjie') && player.hasSkill('sbaiyin') && !player.hasSkill('jilue') && player.storage.renjie < 4) || (player.hasSkill('qinxue') && !player.storage.qinxue);
        },
        cardNeed: function (card, player) {
          if (player == undefined || get.itemtype(player) != 'player') player = get.owner(card);
          var friends = jlsg.getFriends(player).sort(jlsg.sort.hp);
          if (!friends.length) return null;
          if (card.name == 'tao') {
            friends.sort(jlsg.sort.hp);
            if (friends[0].hp < 2) return 10;
            if (player.hp < 3 || (jlsg.getLostHp(player) > 1 && !player.hasSkills('longhun|buqu|jlsg_longhun')) || player.hasSkills('kurou|benghuai')) return 14;
            return jlsg.getUseValue(card, player);
          }
          var wuguotai = jlsg.findPlayerBySkillName('buyi');
          if (wuguotai && jlsg.isFriend(player, wuguotai) && get.type(card) != 'basic') {
            if (player.hp < 3 || (jlsg.getLostHp(player) > 1 && !player.hasSkills('longhun|buqu|jlsg_longhun')) || player.hasSkills('kurou|benghuai')) return 13;
          }
          if (jlsg.isWeak(player) && card.name == 'shan' && jlsg.getCardsNum('shan', player, player) < 1) return 12;
          return 0;
        },
        getOverflow: function (player, getMaxCards) {
          var kingdom_num = 0;
          if (player.hasSkill('yongsi') && _status.currentPhase == player && !(player.hasSkill('keji') && get.cardCount({ name: 'sha' }, player) == 0)) {
            var list = ['wei', 'shu', 'wu'];
            for (var i = 0; i < game.players.length && list.length; i++) {
              if (list.includes(game.players[i].group)) {
                list.remove(game.players[i].group);
                kingdom_num++;
              }
            }
          }
          var MaxCards = 0;
          if (player.hasSkill('qiaobian')) MaxCards = Math.max(player.countCards('h') - 1, player.getHandcardLimit());
          if (player.hasSkill('keji') && get.cardCount({ name: 'sha' }, player) == 0) MaxCards = player.countCards('h');
          if (getMaxCards && MaxCards > 0) return MaxCards;
          MaxCards = player.getHandcardLimit();
          if (kingdom_num > 0) {
            if (player.countCards('he') <= kingdom_num) MaxCards = 0;
            else MaxCards = Math.min(player.getHandcardLimit(), player.countCards('he') - kingdom_num);
            if (getMaxCards) return MaxCards;
          }
          if (getMaxCards) return player.getHandcardLimit();
          return player.countCards('h') - MaxCards;
        },
        willSkipPhaseUse: function (player) {
          var friend_wuxie = 0;
          for (var i = 0; i < game.players.length; i++) {
            if (jlsg.isFriend(player, game.players[i])) friend_wuxie = friend_wuxie + jlsg.getCardsNum('wuxie', game.players[i], player);
            if (jlsg.isEnemy(player, game.players[i])) friend_wuxie = friend_wuxie - jlsg.getCardsNum('wuxie', game.players[i], player);
          }
          if (player.skipList.includes('phaseUse')) return true;
          if (player.hasJudge('lebu') && !player.hasSkill('yanxiao2') && friend_wuxie <= 0) {
            if (!player.hasSkills('zongshi|keji|guanxing|qiaobian') && player.countCards('h') >= player.hp + 1) return true;
            return false;
          }
          return false;
        },
        willSkipPhaseDraw: function (player) {
          var friend_wuxie = 0;
          for (var i = 0; i < game.players.length; i++) {
            if (jlsg.isFriend(player, game.players[i])) friend_wuxie = friend_wuxie + jlsg.getCardsNum('wuxie', game.players[i], player);
            if (jlsg.isEnemy(player, game.players[i])) friend_wuxie = friend_wuxie - jlsg.getCardsNum('wuxie', game.players[i], player);
          }
          if (player.hasJudge('bingliang') && !player.hasSkill('yanxiao2') && friend_wuxie <= 0) {
            if (!player.hasSkills('guanxing|qiaobian') && player.countCards('h') <= player.hp + 2) return true;
            return false;
          }
          if (player.skipList.includes('phaseDraw')) return true;
          return false;
        },
        getViewAsCard: function (card, player) {
          var skills = player.get('s', true).concat(lib.skill.global);
          game.expandSkills(skills);
          var list = [];
          for (var i = 0; i < skills.length; i++) {
            var ifo = get.info(skills[i]);
            if (ifo.viewAs && ifo.viewAs.name && ifo.filterCard) {
              var filtercard = get.filter(ifo.filterCard);
              var pos = jlsg.getCardPlace(card);
              if ((ifo.selectCard == 1 || ifo.selectCard == undefined) && filtercard(card, player) && ((ifo.position && ifo.position.indexOf(pos) == 0) || !ifo.position && pos == 'h')) {
                return game.createCard({ name: ifo.viewAs.name, suit: card.suit, number: card.number });
              }
            }
          }
          return null;
        },
        getSkillViewCard: function (card, name, player, place) {
          var skills = player.get('s', true).concat(lib.skill.global);
          game.expandSkills(skills);
          for (var i = 0; i < skills.length; i++) {
            var ifo = get.info(skills[i]);
            if (ifo.viewAs && ifo.viewAs.name == name) {
              if (ifo.filterCard) {
                var filtercard = get.filter(ifo.filterCard);
                if (filtercard(card, player) && (ifo.selectCard == 1 || ifo.selectCard == undefined)) {
                  if (ifo.position && ifo.position.indexOf(place) == 0) return true;
                  if (!ifo.position) return place == 'h';
                }
              }
            }
          }
          return false;
        },
        getCardPlace: function (card) {
          var owner = get.owner(card);
          if (owner) {
            if (owner.get('h').includes(card)) return 'h';
            if (owner.get('e').includes(card)) return 'e';
            if (owner.get('j').includes(card)) return 'j';
            return 's';
          }
          return 's';
        },
        isCard: function (name, card, player) {
          if (!player || !card) return false;
          if (card.name != name) {
            var owner = get.owner(card);
            var place;
            if (!owner || player != owner) {
              place = 'h';
            }
            else {
              place = jlsg.getCardPlace(card);
            }
            if (jlsg.getSkillViewCard(card, name, player, place)) return true;
            if (player.hasSkill('wushen') && get.suit(card) == 'heart' && card.name != 'sha') return false;
            if (player.hasSkill('jinjiu') && card.name == 'jiu') return true;
          }
          else {
            if (player.hasSkill('wushen') && get.suit(card) == 'heart' && card.name == 'sha') return true;
            if (player.hasSkill('jinjiu') && card.name == 'jiu') return true;
            if (lib.filter.cardUsable(card, player)) return true;
          }
          return false;
        },
        getKnownCard: function (player, from, card_name, viewAs, flags) {
          flags = flags || 'h';
          var forbid = false;
          if (!from && player == _status.event.player) forbid = true;
          from = from || _status.event.player;
          var cards = player.get(flags);
          var know = 0;
          for (var i = 0; i < cards.length; i++) {
            var card = cards[i];
            if ((!forbid && player == from)) {
              if ((viewAs && jlsg.isCard(card_name, card, player)) || card.name == card_name || get.suit(card) == card_name || get.color(card) == card_name) {
                know++;
              }
            }
          }
          return know;
        },
        getDefenseSha: function (player, attacker) {
          if (attacker == undefined || get.itemtype(attacker) != 'player') attacker = _status.event.player;
          var defense = jlsg.getCardsNum('shan', player, attacker);
          var knownShan = jlsg.getKnownCard(player, attacker, 'shan', true);

          defense = defense + knownShan * 1.2;

          if (attacker.hasSkill('liegong')) {
            var length = player.countCards('h');
            if (length >= attacker.hp || length <= get.attackRange(attacker)) return 0;
          }
          if (attacker.hasSkill('reliegong')) {
            var num = 0;
            if (player.countCards('h') >= attacker.num('h')) num++;
            if (player.hp >= attacker.hp) num++;
            if (get.attackRange(player) <= get.attackRange(attacker)) num++;
            if (num > 0) return 0;
          }

          if (jlsg.hasBaguaEffect(player)) {
            defense += 1.3;
            if (player.hasSkill('tiandu')) defense += 0.6;
            if (player.hasSkill('leiji')) defense += 0.4;
            if (player.hasSkill('boss_leiji')) defense += 0.5;
            if (player.hasSkill('releiji')) defense += 0.4;
            if (player.hasSkill('hongyan')) defense += 0.2;
          }

          if (jlsg.getCardsNum('shan', player, _status.event.player) > 1) {
            if (player.hasSkill('mingzhe')) defense += 0.2;
            if (player.hasSkill('tuntian') && player.hasSkill('zaoxian')) defense += 1.5;
          }

          if (player.hasSkill('aocai') && _status.currentPhase !== player) defense += 0.5;
          if (player.hasSkill('jlsg_zhenlie')) defense += 0.5;
          if (player.hasSkill('jlsg_danshou') && !jlsg.isKongcheng(player) && !jlsg.isKongcheng(attacker)) defense += 0.5;

          var jlsgsk_zhuran = jlsg.findPlayerBySkillName('jlsg_yonglie');
          if (jlsgsk_zhuran && jlsg.isGoodHp(jlsgsk_zhuran)) {
            if (player.inRangeOf(jlsgsk_zhuran) && jlsg.isFriend(player, jlsgsk_zhuran)) defense += 0.5;
          }
          var jlsgsr_zhangliao = jlsg.findPlayerBySkillName('jlsg_yansha');
          if (jlsgsr_zhangliao && jlsgsr_zhangliao.storage.jlsg_yansha2 && jlsgsr_zhangliao.storage.jlsg_yansha2.length) {
            if (jlsg.isFriend(player, jlsgsr_zhangliao) && get.attitude(jlsgsr_zhangliao, attacker) < 0 && attacker.num('he')) defense += 0.5;
          }

          if (player.hasZhuSkill('hujia')) {
            var caocao = player;
            var list = game.filterPlayer(function (target) {
              return jlsg.isFriend(target, caocao) && target.group == 'wei' && target != caocao;
            });
            if (list.length > 0) {
              var hujiaShan = 0;
              for (var i = 0; i < list.length; i++) {
                hujiaShan += jlsg.getCardsNum('shan', list[i], _status.event.player);
                if (jlsg.hasBaguaEffect(list[i])) hujiaShan += 0.8;
              }
              defense += hujiaShan;
            }
          }
          defense = defense + Math.min(player.hp * 0.45, 10);
          if (attacker && !attacker.hasSkill('jueqing')) {
            if (player.hasSkillTag('maixie') && jlsg.isGoodHp(player)) defense++;

            if (player.hasSkill('jieming')) defense += 4;
            if (player.hasSkills('yiji|jlsg_yiji')) defense += 4;
            if (player.hasSkill('guixin')) defense += 4;
            if (player.hasSkill('yuce')) defense += 2;
          }

          if (player.hasSkills('rende|rerende') && player.hp > 2) defense++;
          if (player.hasSkill('kuanggu') && player.hp > 1) defense += 0.2;
          if (player.hasSkill('tianming') && player.hp > 1) defense += 0.1;
          if (player.hasSkills('zaiqi|rezaiqi') && player.hp > 1) defense += 0.35;
          if (player.hp > jlsg.getBestHp(player)) defense += 0.8;
          if (player.hp <= 2) defense -= 0.4;
          if (player.hasSkill('tianxiang')) defense += player.countCards('h') * 0.5;

          if (player.countCards('e', 'tengjia') && jlsg.hasZhuqueEffect(attacker) && !attacker.hasSkill('unequip')) defense -= 0.6;
          if (player.isZhu) {
            defense -= 0.4;
            if (jlsg.isZhuInDanger()) defense -= 0.7;
          }
          if (player.isTurnedOver() && !player.hasSkill('jlsg_youxia')) defense -= 0.35;

          if (player.countCards('j', 'lebu') && !player.hasSkill('yanxiao2')) defense -= 0.15;
          if (player.countCards('j', 'bingliang') && !player.hasSkill('yanxiao2')) defense -= 0.15;
          if (player.countCards('j', 'caomu') && !player.hasSkill('yanxiao2')) defense -= 0.15;

          if ((attacker.hasSkill('roulin') && player.sex == 'female') || (attacker.sex == 'female' && player.hasSkill('roulin'))) defense = defense - 2.4;

          if (!jlsg.hasBaguaEffect(player)) {
            if (player.hasSkill('jijiu')) defense -= 3;
            if (player.hasSkill('dimeng')) defense -= 2.5;
            if (player.hasSkill('guzheng') && !jlsg.getCardsNum('shan', player, attacker)) defense -= 2.5;
            if (player.hasSkill('qiaobian')) defense -= 2.4;
            if (player.hasSkill('jieyin')) defense -= 2.3;
            if (player.hasSkills('lijian|jlsg_lijian')) defense -= 2.2;
          }
          return defense;
        },
        getDefense: function (player) {
          if (player == undefined || get.itemtype(player) != 'player') {
            return 0;
          }
          var current_player = _status.event.player;
          if (!current_player) return jlsg.getValue(player);

          var defense = jlsg.getValue(player);

          if (player.get('e', '2')) defense += 2;
          if (player.get('e', '3')) defense++;
          if (player.countCards('e', 'muniu') && player.get('e', '5').cards) defense += player.get('e', '5').cards.length;

          if (jlsg.hasBaguaEffect(player)) {
            if (player.hasSkill('tiandu')) defense++;
            if (player.hasSkill('leiji')) defense += 2;
            if (player.hasSkill('boss_leiji')) defense += 2;
            if (player.hasSkill('releiji')) defense += 2;
            if (player.hasSkill('hongyan')) defense += 2;
          }
          var maixie = jlsg.ai.skill.maixie_skill.split("|");
          for (var i = 0; i < maixie.length; i++) {
            if (player.hasSkill(maixie[i]) && jlsg.isGoodHp(player)) defense++;
          }

          if (player.hasSkill('jieming')) defense += 3;
          if (player.hasSkills('yiji|jlsg_yiji')) defense += 3;
          if (player.hasSkill('guixin')) defense += game.players.length - 1;
          if (player.hasSkill('yuce')) defense += 2;
          if (player.hasSkill('chengxiang')) defense++;

          if (player.hasZhuSkill('shichou')) {
            var current = jlsg.findPlayerBySkillName('shichou_dying');
            if (current) defense += current.hp;
          }

          if (player.hasSkill('rende') && player.countCards('h') > 1 && player.hp > 2) defense++;
          if (player.hasSkill('rerende') && player.countCards('h') > 1 && player.hp > 2) defense++;
          if (player.hasSkill('kuanggu') && player.hp > 1) defense += 0.5;
          if (player.hasSkill('diykuanggu') && player.hp > 1) defense += 0.5;
          if (player.hasSkill('zaiqi') && player.hp > 1) defense = defense + ((player.maxHp - player.hp) * 0.5);
          if (player.hasSkill('tianming')) defense += 0.5;
          if (player.hasSkill('keji')) defense += player.countCards('h') * 0.25;
          if (player.hasSkill('aocai') && _status.currentPhase !== player) defense += 0.5;
          if (player.hasSkill('tianxiang')) defense += player.countCards('h') * 0.5;

          if (player.hp > jlsg.getBestHp(player)) defense += 0.8;
          if (player.hp <= 2) defense = defense - 0.4;
          if (player.hasSkill('benghuai') && player.maxHp <= 5) defense--;
          if (player.hasSkills(jlsg.ai.skill.bad_skills)) defense--;

          if (player.isZhu) {
            defense = defense - 0.4;
            if (jlsg.isZhuInDanger()) defense = defense - 0.7;
          }

          var invaliditySkill = ['yijue', 'boss_hujia', 'retieji', 'pozhou', 'jlsg_zhenhun'];
          for (var i = 0; i < invaliditySkill.length; i++) {
            if (player.disabledSkills[invaliditySkill[i]] && player.disabledSkills[invaliditySkill[i]].length > 0)
              defense -= 5;
          }

          if (player.isTurnedOver()) defense--;

          if (player.countCards('j', 'lebu') && !player.hasSkill('yanxiao2')) defense -= 0.5;
          if (player.countCards('j', 'bingliang') && !player.hasSkill('yanxiao2')) defense -= 0.5;
          if (player.countCards('j', 'caomu') && !player.hasSkill('yanxiao2')) defense -= 0.5;

          if (player.hasSkill('jijiu')) defense += 2;
          if (player.hasSkill('qingnang')) defense += 2;
          if (player.hasSkill('dimeng')) defense += 2.5;
          if (player.hasSkill('guzheng')) defense += 2.5;
          if (player.hasSkill('qiaobian')) defense += 2.4;
          if (player.hasSkill('jieyin')) defense += 2.3;
          if (player.hasSkills('jlsg_lijian|lijian')) defense += 2.1;
          if (player.hasSkill('yishe')) defense += 2;
          if (player.hasSkill('paiyi')) defense += 1.5;
          if (player.hasSkill('yongsi')) defense += 2;

          defense = defense + (game.players.length - (get.distance(player, _status.currentPhase, 'absolute')) % game.players.length) / 4;

          defense = defense + player.get('s').length * 0.25;

          return defense;
        },
        findCardInCardPile: function (name) {
          var card;
          for (var i = 0; i < ui.cardPile.childNodes.length; i++) {
            card = ui.cardPile.childNodes[i];
            if (typeof name == 'string') {
              if (card.name == name) {
                return card;
              }
            }
            else if (typeof name == 'function') {
              if (name(card)) {
                return card;
              }
            }
          }
          return null;
        },
        findCardInDiscardPile: function (name) {
          var cards = [];
          var card = false;
          for (var i = 0; i < ui.discardPile.childNodes.length; i++) {
            card = ui.discardPile.childNodes[i];
            if (typeof name == 'string') {
              if (card.name == name) {
                return card;
              }
            }
            else if (typeof name == 'function') {
              if (name(card)) {
                return card;
              }
            }
            else {
              cards = cards.concat(card);
            }
          }
          if (cards.length) return cards.randomGet();
          return null;
        },
        isZhuHealthy: function () {
          var zhu = get.zhu();
          if (!zhu) return false;
          var zhu_hp;
          if (zhu.hasSkill('benghuai') && zhu.hp > 4) {
            zhu_hp = 4;
          }
          else {
            zhu_hp = zhu.hp;
          }
          return zhu_hp > 3 || (zhu_hp > 2 && jlsg.getDefense(zhu) > 3);
        },
        isZhuInDanger: function () {
          var zhu = get.zhu();
          if (!zhu) return false;
          var zhu_hp;
          if (zhu.hasSkill('benghuai') && zhu.hp > 4) {
            zhu_hp = 4;
          }
          else {
            zhu_hp = zhu.hp;
          }
          return zhu_hp < 3;
        },
        findPlayerBySkillName: function (skills) {
          return game.findPlayer(function (player) {
            return player.hasSkills(skills);
          });
        },
        isFriend: function (other, another) {
          return get.attitude(other, another) > 0;
        },
        isEnemy: function (other, another) {
          return get.attitude(other, another) < 0;
        },
        getFriends: function (player) {
          return game.filterPlayer(function (target) {
            return jlsg.isFriend(player, target);
          });
        },
        getFriendsNoself: function (player) {
          return game.filterPlayer(function (target) {
            return jlsg.isFriend(player, target) && player != target;
          });
        },
        getEnemies: function (player) {
          return game.filterPlayer(function (target) {
            return jlsg.isEnemy(player, target);
          });
        },
        filterFriend: function (player, func) {
          var friends = jlsg.getFriends(player);
          for (var i = 0; i < friends.length; i++) {
            if (func(friends[i])) {
              return game.players[i];
            }
          }
          return null;
        },
        filterFriends: function (player, func) {
          var list = [];
          var friends = jlsg.getFriends(player);
          for (var i = 0; i < friends.length; i++) {
            if (func(friends[i])) {
              list.push(game.players[i]);
            }
          }
          return list;
        },
        filterEnemy: function (player, func) {
          var enemies = jlsg.getEnemies(player);
          for (var i = 0; i < enemies.length; i++) {
            if (func(enemies[i])) {
              return game.players[i];
            }
          }
          return null;
        },
        filterEnemies: function (player, func) {
          var list = [];
          var enemies = jlsg.getEnemies(player);
          for (var i = 0; i < enemies.length; i++) {
            if (func(enemies[i])) {
              list.push(game.players[i]);
            }
          }
          return list;
        },
        countFriends: function (player) {
          return game.countPlayer(function (target) {
            return jlsg.isFriend(player, target) && target != player;
          });
        },
        countEnemies: function (player) {
          return game.countPlayer(function (target) {
            return jlsg.isEnemy(player, target);
          });
        },
        countNextEmenies: function (from, to) {
          var num = 0;
          var current = from.getNext();
          for (var i = 0; i < 10 && current != to; i++) {
            if (jlsg.isEnemy(to, current)) {
              num++;
            }
            current = current.getNext();
          }
          return num;
        },
        getNextEmenies: function (from, to) {
          var list = [];
          var current = from.getNext();
          for (var i = 0; i < 10 && current != to; i++) {
            if (jlsg.isEnemy(to, current)) {
              list.push(current);
            }
            current = current.getNext();
          }
          return list;
        },
        countCanShaMe: function (player) {
          return game.countPlayer(function (target) {
            return jlsg.isEnemy(player, target) && target.canUse('sha', player) && get.effect(target, { name: 'sha' }, player) > 0;
          });
        },
        getCanShaMe: function (player) {
          return game.filterPlayer(function (target) {
            return jlsg.isEnemy(player, target) && target.canUse('sha', player) && get.effect(player, { name: 'sha' }, target) > 0;
          });
        },
        getWillShaTarget: function (player) {
          var target = game.filterPlayer(function (target1) {
            return player.canUse('sha', target1) && get.effect(target1, { name: 'sha' }, player) > 0;
          });
          target.sort(function (a, b) {
            return get.effect(a, { name: 'sha' }, player) < get.effect(a, { name: 'sha' }, player);
          });
          return target[0];
        },
        getCardsNum: function (class_name, player, from) {
          if (player == undefined || get.itemtype(player) != 'player') player = _status.event.player;
          var cards = player.get('h');
          if (player.countCards('e', 'muniu') && player.get('e', '5').cards && player.get('e', '5').cards.length) {
            cards = cards.concat(player.get('e', '5').cards);
          }
          var num = 0, shownum = 0, redtao = 0, redsha = 0, rencard = 0, blackcard = 0, blackwuxie = 0, equipwuxie = 0;
          var equipcard = 0, heartsha = 0, hearttao = 0, spadewuxie = 0, spadejiu = 0, spadecard = 0, diamondcard = 0;
          var clubcard = 0, shashan = 0, jiunum = 0;
          var forbid = false;
          if (!from && _status.event.player != player) forbid = true;
          from = from || _status.event.player;
          for (var i = 0; i < cards.length; i++) {
            var card = cards[i];
            if (!forbid && player == from) {
              shownum++;
              if (card.name == class_name) num++;
              if (card.name == 'jiu') jiunum++;
              if (get.type(card) == 'equip') equipcard++;
              if (card.name == 'sha' || card.name == 'shan') shashan++;
              if (get.color(card) == 'red') {
                rencard++;
                if (card.name != 'sha') redsha++;
                if (card.name != 'tao') redtao++;
              }
              if (get.color(card) == 'black') {
                blackcard++;
                if (card.name != 'wuxie') blackwuxie++;
              }
              if (get.suit(card) == 'heart') {
                if (card.name != 'sha') heartsha++;
                if (card.name != 'tao') redtao++;
              }
              if (get.suit(card) == 'spade') {
                if (card.name != 'wuxie') spadewuxie++;
                if (card.name != 'jiu') spadejiu++;
              }
              if (get.suit(card) == 'diamond' && card.name != 'sha') diamondcard++;
              if (get.suit(card) == 'club') clubcard++;
            }
          }
          var ecards = player.get('e');
          for (var i = 0; i < ecards.length; i++) {
            var card = ecards[i];
            equipcard++;
            if (player.countCards('h') > player.hp) equipwuxie++;
            if (get.color(card) == 'red') {
              redtao++; redsha++;
            }
            if (get.suit(card) == 'heart') hearttao++;
            if (get.suit(card) == 'spade') spadecard++;
            if (get.suit(card) == 'diamond') diamondcard++;
            if (get.suit(card) == 'club') clubcard++;
          }
          if (class_name == 'sha') {
            var shanum;
            if (player.hasSkill('wusheng')) {
              shanum = redsha + num + (player.countCards('h') - shownum) * 0.69;
            }
            if (player.hasSkill('shizhi') && player.hp == 1) {
              shanum = shashan + (player.countCards('h') - shownum) * 0.3;
            }
            else if (player.hasSkill('wushen')) {
              shanum = heartsha + num + (player.countCards('h') - shownum) * 0.5;
            }
            else if (player.hasSkill('jinjiu')) {
              shanum = jiunum + num + (player.countCards('h') - shownum) * 0.5;
            }
            else if (player.hasSkills('longhun|jlsg_longhun')) {
              shanum = diamondcard + num + (player.countCards('h') - shownum) * 0.5;
            }
            else if (player.hasSkill('nos_gongji')) {
              shanum = equipcard + num + (player.countCards('h') - shownum) * 0.5;
            }
            else if (player.hasSkills('chixin')) {
              shanum = shashan + (player.countCards('h') - shownum) * 0.72;
            }
            else if (player.countCards('e', 'zhangba')) {
              shanum = num + (player.countCards('h') - shownum) * 0.2;
            }
            else {
              shanum = num + (player.countCards('h') - shownum) * 0.35;
            }
            return (jlsg.hasWushuangEffect(player) && shanum * 2) || shanum;
          }
          else if (class_name == 'shan') {
            if (player.hasSkill('qingguo')) {
              return blackcard + num + (player.countCards('h') - shownum) * 0.8;
            }
            else if (player.hasSkills('longdan|chixin')) {
              return shashan + (player.countCards('h') - shownum) * 0.72;
            }
            else if (player.hasSkills('longhun|jlsg_longhun')) {
              return clubcard + num + (player.countCards('h') - shownum) * 0.65;
            }
            else if (player.hasSkill('jieyue3')) {
              return rencard + num + (player.countCards('h') - shownum) * 0.5;
            }
            else {
              return num + (player.countCards('h') - shownum) * 0.6;
            }
          }
          else if (class_name == 'tao') {
            if (player.hasSkill('jijiu')) {
              return num + redtao + (player.countCards('h') - shownum) * 0.6;
            }
            else if (player.hasSkills('longhun|jlsg_longhun')) {
              return hearttao + num + (player.countCards('h') - shownum) * 0.5;
            }
            else {
              return num;
            }
          }
          else if (class_name == 'jiu') {
            if (player.hasSkill('jiuchi')) {
              return num + spadejiu + (player.countCards('h') - shownum) * 0.3;
            }
            else if (player.hasSkill('jiushi')) {
              return num + 1;
            }
            else {
              return num;
            }
          }
          else if (class_name == 'wuxie') {
            if (player.hasSkill('kanpo')) {
              return num + blackwuxie + (player.countCards('h') - shownum) * 0.5;
            }
            else if (player.hasSkill('yanzheng')) {
              return num + equipwuxie;
            }
            else if (player.hasSkill('ruzong')) {
              return num * 3;
            }
            else {
              return num;
            }
          }
          else {
            return num;
          }
        },
        getCards: function (name, player) {
          player = player || _status.event.player;
          return player.countCards('he', name);
        },
      };
      if (!lib.config["extension_极略_initEnable"]) {
        game.saveConfig("extension_极略_initEnable", true);
        game.saveConfig('characters', lib.config.characters.concat('jlsg_sk', 'jlsg_skpf', 'jlsg_sr', 'jlsg_soul', 'jlsg_sy'));
        lib.config.characters
      }

      lib.jlsg = jlsg;
      window.jlsg = jlsg;
      console.timeEnd(_status.extension + 'pre');
    },
    config: {
      srlose: {
        name: "srlose",
        intro: "是否要求SR武将弃置技能",
        init: true,
      },
      qsRelic: {
        name: "七杀宝物特殊规则",
        intro: "锁定技，当你同时装备了七杀宝物、进攻马与防御马时，你选择将你装备区中的一张坐骑或是七杀宝物置入弃牌堆。",
        init: false,
      },
      // identityZhuSkill: {
      //   name: "极略主公技",
      //   intro: "移除主公的主公技，改为开局从主公技能池中挑选。",
      //   init: false,
      // },
      jlsg_identity_music_image: {
        name: "身份模式背景＆音乐",
        init: false
      },
      jlsg_boss_music_image: {
        name: "挑战模式背景＆音乐",
        init: false
      },

      oldCharacterReplace: {
        name: '旧版替换',
        intro: '设置是否将本扩展某些武将的技能替换为旧极略三国的武将技能 旧将不进行任何维护',
        init: false,
      },
      debug: {
        name: "<span style='color:#808080'>debug</span>",
        intro: "禁用所有其他武将包 <span style='color:#FF0000'>测试用！</span>",
        init: false,
      }
    },
    help: {
      "极略": `\
本拓展基于民间极略的某魔改版，因为当时那位作者说“修复了所有的bug”<br>
事实证明这种说法比较离谱<br>
本拓展在QQ群中发布更新<br>
无名杀极略拓展交流群 392224094<br>
无名杀官方XVII 621316679<br>
无名杀官方群Ⅱ 348943983<br>
——xiaoas`
    },
    package: {
      character: {
        character: {},
        translate: {},
      },
      card: {
        card: {},
        translate: {},
        list: [],
      },
      skill: {
        skill: {},
        translate: {},
      },
      intro: `<div>\
<img src="${lib.assetURL}extension/极略/logo.webp" alt="极略三国"\
style="width:100%;max-width:492px;display:block;margin:auto;"\
onclick="if (lib.jlsg) lib.jlsg.showRepoElement(this)"></img>
<ul><li>极略全部武将·附带七杀卡包+极略三英武将，不需要请记得关闭。<li>帮助中查看更多内容</ul>
<a onclick="if (jlsg) jlsg.checkUpdate(this)" style="cursor: pointer;text-decoration: underline;font-weight: bold;">
检查更新Beta<br></a>
</div>`,
      author: "可乐，赵云，青冢，萧墨(17岁)<br>维护：xiaoas",
      diskURL: "",
      forumURL: "",
      mirrorURL: "https://github.com/xiaoas/jilue",
      version: "2.7.0317",
      changelog: `
<a onclick="if (jlsg) jlsg.showRepo()" style="cursor: pointer;text-decoration: underline;">
Visit Repository</a><br>
群：702142668<br>
<span onclick="if (jlsg) jlsg.openLink('https://keu1vrp2sz.feishu.cn/docx/CpsrdV4sDoazzUxzChMcqGjIneh')" 
style="color: red; font-size: x-large;cursor: pointer;text-decoration: underline;">
汇报bug点我</span><br>
2025.03.17更新<br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SK神蔡文姬</div><br>
&ensp; 修复若干bug(离魂、逐星、龙魂、罗刹)<br>
&ensp; 优化忧恤写法，优化天工、玲珑ai<br>
<span style="font-size: large;">历史：</span><br>
2025.02.28更新<br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="watermm">SK诸葛诞</div><br>
&ensp; 调整武将<span style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SP神赵云</span>技能为最新版[6.4.3]<br>
&ensp; 修复[天工]托管时的一个bug<br>
2025.02.26更新<br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SK神庞统</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SP神赵云</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SP神孙尚香</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="firemm">SK秦宓</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="firemm">SK吕凯</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="watermm">SK郭淮</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="woodmm">SK周夷</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">SK邢道荣</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">SK黄承彦</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">水墨丹青•貂蝉</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="orangemm">妖媚之殃</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="orangemm">南中魔兽</div><br>
&ensp; 修复若干历史遗留bug<br>
2024.10.03更新<br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="thundermm">SK神曹丕</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="woodmm">SP庞统</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="woodmm">SK吕岱</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">SK万年公主</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">SK王元姬</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="watermm">SK张昌蒲</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="qunmm">杀破万千•吕布</div><br>
&ensp; 接入无名杀姓名API<br>
2024.08.04更新<br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="watermm">SP姜维</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="soilmm">SK黄皓</div><br>
&ensp; 更新武将<div style="display:inline; font-family: xingkai, xinwei;" data-nature="soilmm">SK花鬘</div><br>
`
      ,
    }, files: { "character": [], "card": [], "skill": [] }
  }
})